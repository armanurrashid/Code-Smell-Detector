Code,Smell
"public double calculateTotalBill(double basePrice, double taxRate, double discountPercentage, 
                                      boolean isTaxExempt, boolean isDiscountApplied, boolean isFreeShipping) {
      
        return basePrice * (1 + taxRate / 100) * (1 - discountPercentage / 100);
    }",1
"public void addProduct(String name, String description, double price, int quantity, 
                           String category, boolean isFeatured, boolean isOnSale, boolean isNewArrival) {
        
        System.out.println(""Product added successfully:"");
        System.out.println(""Name: "" + name);
        System.out.println(""Description: "" + description);
        System.out.println(""Price: $"" + price);
        System.out.println(""Quantity: "" + quantity);
        System.out.println(""Category: "" + category);
        System.out.println(""Featured: "" + isFeatured);
        System.out.println(""On Sale: "" + isOnSale);
        System.out.println(""New Arrival: "" + isNewArrival);
    }
    ",1
"public void addSevenNumber(int number1, int number2, int number3, int number4, int number5, int number6, int number7){ 
 return (num1+num2+num3+num4+num5+num6+num7);
}",1
"public void Product(String name, String description, double price, int quantity, 
                   String category, boolean isFeatured, boolean isOnSale, boolean isNewArrival) {
        this.name = name;
        this.description = description;
        this.price = price;
        this.quantity = quantity;
        this.category = category;
        this.isFeatured = isFeatured;
        this.isOnSale = isOnSale;
        this.isNewArrival = isNewArrival;
    }",1
"public void sendEmail(String sender, String recipient, String subject, String body, 
                          boolean isHTML, boolean includeAttachments, boolean isUrgent) {
        
        String emailContent = ""From: "" + sender + ""\n"" +
                              ""To: "" + recipient + ""\n"" +
                              ""Subject: "" + subject + ""\n"" +
                              ""Body: "" + body + ""\n"" +
                              ""HTML: "" + isHTML + ""\n"" +
                              ""Include Attachments: "" + includeAttachments + ""\n"" +
                              ""Urgent: "" + isUrgent;
        emailStorage.put(recipient, emailContent);
        System.out.println(""Email sent successfully to "" + recipient);
    }",1
"public Object[] sort(String[] FILENAME3, String[] FILENAME4, float[] matching_line_number, float[] result, int result_counter) throws IOException {
        for (p = 0; p < result_counter; p++) {
            for (q = p + 1; q < result_counter; q++) {
                if (result[p] < result[q]) {

                    temp = result[q];
                    result[q] = result[p];
                    result[p] = temp;

                    temp = matching_line_number[q];
                    matching_line_number[q] = matching_line_number[p];
                    matching_line_number[p] = temp;

                    string_temp1 = FILENAME3[q];
                    FILENAME3[q] = FILENAME3[p];
                    FILENAME3[p] = string_temp1;

                    string_temp2 = FILENAME4[q];
                    FILENAME4[q] = FILENAME4[p];
                    FILENAME4[p] = string_temp2;
                }
            }
        }
        return new Object[] {FILENAME3,FILENAME4,matching_line_number,result,result_counter};
    }",1
"public void processOrder(String customerName, String customerAddress, String customerEmail, String productName, int quantity, double price, boolean isExpressShipping) {

    double totalPrice = quantity * price;

    System.out.println(""Order processed for "" + customerName + "" at "" + customerAddress + "". Total price: "" + totalPrice);
}
",1
"public void generateReport(String dataSource, String reportType, Date startDate, Date endDate, boolean includeSubtotals, boolean includeDetails, String fileFormat, String outputPath) {
    List<ReportData> reportData = fetchDataFromSource(dataSource);
    ReportContent reportContent = processReportData(reportData, reportType, startDate, endDate, includeSubtotals, includeDetails);
    saveReport(reportContent, fileFormat, outputPath);
}
",1
"public void createUser(String firstName, String lastName, String username, String password, String email, LocalDate dateOfBirth, String address, String city, String state, String country, String postalCode, String phoneNumber) {
    User newUser = new User(firstName, lastName, username, password, email, dateOfBirth, address, city, state, country, postalCode, phoneNumber);
    userService.createUser(newUser);
}
",1
"public static void sortNumbers(int num1, int num2, int num3, int num4, int num5, int num6, int num7) {
        int[] numbers = {num1, num2, num3, num4, num5, num6, num7};
        Arrays.sort(numbers);
        num1 = numbers[0];
        num2 = numbers[1];
        num3 = numbers[2];
        num4 = numbers[3];
        num5 = numbers[4];
        num6 = numbers[5];
        num7 = numbers[6];
    }",1
"public boolean isHappy(int number) {
        
        int sum=0;
        while(number!=1 && number!=4)
        {
           
            while(number>0)
            {
                int rem=number%10;
                sum+=(rem*rem);
                number=number/10;
                
            }
            number=sum;
            sum=0;
        }
        if(number==1)
            return true;
        return false;
    }",0
"public boolean isHappy(int number) {
        Set<Integer> seen = new HashSet<>();
        while (number != 1) {
            int sum = 0;
            while (number > 0) {
                int digit = number % 10;
                sum += digit * digit;
                number /= 10;
            }
            if (seen.contains(sum)) {
                return false; 
            }
            seen.add(sum);
            number = sum;
        }
        return true;
    }",0
"public static void processOrder(int orderAmount, int customerLoyaltyPoints, String customerType, boolean isHolidaySeason, String shippingOption, String paymentMethod, int itemsCount) {
        if (orderAmount <= 0) {
            System.out.println(""Invalid order amount."");
            return;
        } else if (orderAmount > 10000) {
            System.out.println(""Large order detected."");
        }

        if (customerLoyaltyPoints > 1000) {
            System.out.println(""Loyalty discount applied."");
            orderAmount -= 100;
        }

        if (isHolidaySeason) {
            System.out.println(""Holiday season discount applied."");
            orderAmount *= 0.9;
        }

        if (customerType.equals(""VIP"")) {
            System.out.println(""VIP customer. Special discount applied."");
            orderAmount *= 0.85;
            if (shippingOption.equals(""overnight"")) {
                System.out.println(""Free overnight shipping for VIPs."");
            }
        } else if (customerType.equals(""Regular"")) {
            if (shippingOption.equals(""express"")) {
                System.out.println(""Express shipping selected. Additional charge applied."");
                orderAmount += 30;
            } else if (shippingOption.equals(""standard"")) {
                System.out.println(""Standard shipping selected."");
            } else {
                System.out.println(""Invalid shipping option. Defaulting to standard."");
            }
        } else if (customerType.equals(""New"")) {
            System.out.println(""New customer discount applied."");
            orderAmount *= 0.95;
            if (paymentMethod.equals(""credit_card"")) {
                System.out.println(""Credit card payment selected. Extra points awarded."");
            } else if (paymentMethod.equals(""paypal"")) {
                System.out.println(""PayPal payment selected."");
            } else if (paymentMethod.equals(""gift_card"")) {
                System.out.println(""Gift card payment selected. Gift card limit applied."");
                if (orderAmount > 500) {
                    System.out.println(""Gift card limit exceeded. Adjusting order amount."");
                    orderAmount = 500;
                }
            } else {
                System.out.println(""Invalid payment method. Defaulting to credit card."");
            }
        } else {
            System.out.println(""Unrecognized customer type."");
        }

        switch (shippingOption) {
            case ""standard"":
                System.out.println(""Processing with standard shipping."");
                break;
            case ""express"":
                System.out.println(""Processing with express shipping."");
                orderAmount += 20;
                break;
            case ""overnight"":
                System.out.println(""Processing with overnight shipping."");
                orderAmount += 50;
                break;
            default:
                System.out.println(""Invalid shipping option. Using standard shipping."");
                break;
        }

        for (int i = 0; i < itemsCount; i++) {
            if (i % 2 == 0) {
                System.out.println(""Processing even item: "" + (i + 1));
            } else {
                System.out.println(""Processing odd item: "" + (i + 1));
            }

            if (i == itemsCount / 2) {
                System.out.println(""Halfway through processing items."");
            }

            if (i > 0 && i % 10 == 0) {
                System.out.println(""Milestone reached: Processed "" + i + "" items."");
            }
        }

        if (orderAmount > 1000) {
            System.out.println(""High order amount. Final verification required."");
        } else if (orderAmount < 50) {
            System.out.println(""Low order amount. Extra shipping charges apply."");
            orderAmount += 10;
        }

        System.out.println(""Final order amount: $"" + orderAmount);
    }",1
"  public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode reversedHead = reverseList(head.next);
        head.next.next = head;
        head.next = null;
        return reversedHead;
    }",0
"public boolean containsDuplicate(int[] nums) {
        Set<Integer> uniqueElements = new HashSet<>();

        for (int num : nums) {
            if (uniqueElements.contains(num))
                return true; 
            uniqueElements.add(num);
        }
        return false; 
    }",0
"  public boolean empty() {
        return queue1.isEmpty() && queue2.isEmpty();
    }",0
" public int countNodes(TreeNode root) {
        if (root == null) return 0;
        int leftHeight = height(root.left);
        int rightHeight = height(root.right);
        if (leftHeight == rightHeight) {
            return (1 << leftHeight) + countNodes(root.right);
        } else {
            return (1 << rightHeight) + countNodes(root.left);
        }
    }",0
"public static void processCart(int itemCount, double totalPrice, boolean hasDiscount, boolean isMember, String shippingMethod, String paymentMethod) {
        if (itemCount == 0) {
            System.out.println(""Your cart is empty."");
            return;
        } else if (itemCount > 50) {
            System.out.println(""You have reached the maximum item limit."");
        } else {
            if (totalPrice > 1000) {
                System.out.println(""Large order detected. Free shipping applied."");
                totalPrice -= 50;
            }

            if (hasDiscount) {
                System.out.println(""Discount applied."");
                totalPrice *= 0.9;
            }

            if (isMember) {
                System.out.println(""Member discount applied."");
                totalPrice *= 0.95;
            }

            switch (shippingMethod) {
                case ""standard"":
                    System.out.println(""Standard shipping selected."");
                    break;
                case ""express"":
                    System.out.println(""Express shipping selected. Additional charges applied."");
                    totalPrice += 20;
                    break;
                case ""overnight"":
                    System.out.println(""Overnight shipping selected. Additional charges applied."");
                    totalPrice += 50;
                    break;
                default:
                    System.out.println(""No valid shipping method selected. Defaulting to standard."");
                    break;
            }

            switch (paymentMethod) {
                case ""credit_card"":
                    System.out.println(""Paying with credit card."");
                    break;
                case ""paypal"":
                    System.out.println(""Paying with PayPal."");
                    break;
                case ""gift_card"":
                    System.out.println(""Paying with gift card."");
                    if (totalPrice > 500) {
                        System.out.println(""Gift card limit exceeded."");
                        totalPrice = 500;
                    }
                    break;
                default:
                    System.out.println(""No valid payment method selected."");
                    return;
            }

            if (itemCount > 20) {
                System.out.println(""Bulk discount applied."");
                totalPrice *= 0.95;
            }

            for (int i = 1; i <= itemCount; i++) {
                if (i % 5 == 0) {
                    System.out.println(""Processing item "" + i + "" with a special discount."");
                    totalPrice -= 5;
                } else {
                    System.out.println(""Processing item "" + i);
                }

                if (i == itemCount / 2) {
                    System.out.println(""Halfway through processing the cart."");
                }
            }

            if (totalPrice > 500 && !isMember) {
                System.out.println(""Warning: Non-members pay extra for orders over $500."");
                totalPrice += 25;
            }

            System.out.println(""Final price: $"" + totalPrice);
        }
    }",1
"private int height(TreeNode node) {
        int height = 0;
        while (node != null) {
            height++;
            node = node.left;
        }
        return height;
    }",0
"  public boolean containsNearbyDuplicate(int[] nums, int number) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int loopIterature = 0; loopIterature < nums.length; loopIterature++) {
            if (map.containsKey(nums[loopIterature]) && Math.abs(loopIterature - map.get(nums[loopIterature])) <= number) {
                return true;
            }
            map.put(nums[loopIterature], loopIterature);
        }
        return false;
    }",0
" public boolean containsNearbyDuplicate(int[] nums, int number) {
         
        HashMap<Integer,Integer> map = new HashMap<>();
    
        for( int loopIterature = 0; loopIterature < nums.length; loopIterature++){
            if(map.containsKey(nums[loopIterature])){            
                if( loopIterature - map.get(nums[loopIterature]) <= number ){
                    return true;
                }
            } 
            map.put(nums[loopIterature] , loopIterature);
        }
 
        return false;
        
    }",0
"public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for (int num : nums) {
            if (set.contains(num)) {
                return true;
            }
            set.add(num);
        }
        return false;
    }",0
"public void highComplexityMethod(int x, int y, int z, int a, int b, int c, int d, int e, int f) {
        if (x > 0) { // +1
            if (y > 0) { // +1
                if (z > 0) { // +1
                    System.out.println(""x, y, and z are positive"");
                } else { // +1
                    System.out.println(""z is not positive"");
                }
            } else if (z > 0) { // +1
                System.out.println(""x and z are positive"");
            } else { // +1
                System.out.println(""x is positive, y and z are not"");
            }
        } else if (y > 0) { // +1
            if (a > 0) { // +1
                System.out.println(""y and a are positive"");
            } else if (b > 0) { // +1
                System.out.println(""y and b are positive"");
            } else { // +1
                System.out.println(""Only y is positive"");
            }
        } else if (z > 0) { // +1
            if (c > 0) { // +1
                System.out.println(""z and c are positive"");
            } else { // +1
                System.out.println(""Only z is positive"");
            }
        } else { // +1
            for (int i = 0; i < d; i++) { // +1
                if (e > 0) { // +1
                    if (f > 0) { // +1
                        System.out.println(""e and f are positive"");
                    } else { // +1
                        System.out.println(""Only e is positive"");
                    }
                } else { // +1
                    System.out.println(""Neither e nor f are positive"");
                }
            }
        }

        while (a > 0) { // +1
            if (b > 0) { // +1
                System.out.println(""a and b are positive"");
            } else { // +1
                break;
            }
            a--;
        }
    }",1
"public void addNumber(int num1){ 
 return (num1+num1)
;
}",0
"public static void FinalgameDecision(int playerHealth, int enemyHealth, int playerMana, int enemyMana, int environment, int playerLevel, int enemyLevel) {
        if (playerHealth <= 0) {
            System.out.println(""Game Over. Player is dead."");
        } else if (enemyHealth <= 0) {
            System.out.println(""Victory! Enemy is dead."");
        } else {
            if (playerMana > 50) {
                System.out.println(""Player casts a powerful spell!"");
                enemyHealth -= 30;
            } else if (playerMana > 20) {
                System.out.println(""Player casts a moderate spell."");
                enemyHealth -= 15;
            } else {
                System.out.println(""Player attacks with a basic strike."");
                enemyHealth -= 5;
            }

            if (playerLevel > enemyLevel) {
                System.out.println(""Player has a level advantage."");
                enemyHealth -= 10;
            } else if (playerLevel < enemyLevel) {
                System.out.println(""Enemy has a level advantage."");
                playerHealth -= 10;
            } else {
                System.out.println(""Both player and enemy are equally matched."");
            }

            switch (environment) {
                case 1:
                    System.out.println(""The environment is a forest. Players have increased agility."");
                    playerHealth += 5;
                    break;
                case 2:
                    System.out.println(""The environment is a desert. Players have decreased stamina."");
                    playerHealth -= 5;
                    break;
                case 3:
                    System.out.println(""The environment is a swamp. Movement is slow."");
                    break;
                case 4:
                    System.out.println(""The environment is a mountain. Attack damage is increased."");
                    enemyHealth -= 10;
                    break;
                case 5:
                    System.out.println(""The environment is a cave. Defense is increased."");
                    playerHealth += 5;
                    break;
                default:
                    System.out.println(""The environment is neutral."");
                    break;
            }

            while (enemyHealth > 0 && playerHealth > 0) {
                if (enemyMana > 40) {
                    System.out.println(""Enemy casts a devastating spell!"");
                    playerHealth -= 25;
                    enemyMana -= 40;
                } else if (enemyMana > 10) {
                    System.out.println(""Enemy casts a weak spell."");
                    playerHealth -= 10;
                    enemyMana -= 10;
                } else {
                    System.out.println(""Enemy attacks with a basic strike."");
                    playerHealth -= 5;
                }

                if (playerHealth > 50) {
                    System.out.println(""Player uses a health potion."");
                    playerHealth += 20;
                } else if (playerMana > 30) {
                    System.out.println(""Player uses a mana potion."");
                    playerMana += 20;
                }

                if (playerHealth <= 0) {
                    System.out.println(""Player is dead."");
                    break;
                } else if (enemyHealth <= 0) {
                    System.out.println(""Enemy is dead."");
                    break;
                }
            }

            if (playerHealth > 0 && enemyHealth > 0) {
                System.out.println(""The battle continues..."");
            } else if (playerHealth <= 0) {
                System.out.println(""Game Over. The player was defeated."");
            } else {
                System.out.println(""Victory! The player defeated the enemy."");
            }
        }
    }",1
"public void addNumber(int num1, int num2){ 
 return (num1+num2)
;
}",0
"public void addNumber(int num1, int num2, int num3){ 
 return (num1+num2+num3)
;
}",0
"public static void processOrder(int orderAmount, int customerLoyaltyPoints, String customerType, boolean isHolidaySeason, String shippingOption, String paymentMethod, int itemsCount) {
        if (orderAmount <= 0) {
            System.out.println(""Invalid order amount."");
            return;
        } else if (orderAmount > 10000) {
            System.out.println(""Large order detected."");
        }

        if (customerType.equals(""VIP"")) {
            System.out.println(""VIP customer. Special discount applied."");
            orderAmount *= 0.85;
            if (shippingOption.equals(""overnight"")) {
                System.out.println(""Free overnight shipping for VIPs."");
            }
        } else if (customerType.equals(""Regular"")) {
            if (shippingOption.equals(""express"")) {
                System.out.println(""Express shipping selected. Additional charge applied."");
                orderAmount += 30;
            } else if (shippingOption.equals(""standard"")) {
                System.out.println(""Standard shipping selected."");
            } else {
                System.out.println(""Invalid shipping option. Defaulting to standard."");
            }
        } else if (customerType.equals(""New"")) {
            System.out.println(""New customer discount applied."");
            orderAmount *= 0.95;
            if (paymentMethod.equals(""credit_card"")) {
                System.out.println(""Credit card payment selected. Extra points awarded."");
            } else if (paymentMethod.equals(""gift_card"")) {
                System.out.println(""Gift card payment selected. Gift card limit applied."");
                if (orderAmount > 500) {
                    System.out.println(""Gift card limit exceeded. Adjusting order amount."");
                    orderAmount = 500;
                }
            } else {
                System.out.println(""Invalid payment method. Defaulting to credit card."");
            }
        } else {
            System.out.println(""Unrecognized customer type."");
        }

        switch (shippingOption) {
            case ""standard"":
                System.out.println(""Processing with standard shipping."");
                break;
            case ""express"":
                System.out.println(""Processing with express shipping."");
                orderAmount += 20;
                break;
            case ""overnight"":
                System.out.println(""Processing with overnight shipping."");
                orderAmount += 50;
                break;
            default:
                System.out.println(""Invalid shipping option. Using standard shipping."");
                break;
        }

        for (int i = 0; i < itemsCount; i++) {
            if (i % 2 == 0) {
                System.out.println(""Processing even item: "" + (i + 1));
            } else {
                System.out.println(""Processing odd item: "" + (i + 1));
            }

            if (i == itemsCount / 2) {
                System.out.println(""Halfway through processing items."");
            }

            if (i > 0 && i % 10 == 0) {
                System.out.println(""Milestone reached: Processed "" + i + "" items."");
            }
        }

        if (orderAmount > 1000) {
            System.out.println(""High order amount. Final verification required."");
        } else if (orderAmount < 50) {
            System.out.println(""Low order amount. Extra shipping charges apply."");
            orderAmount += 10;
        }

        System.out.println(""Final order amount: $"" + orderAmount);
    }",1
"public void addNumber(int num1, int num2, int num3, int num4){ 
 return (num1+num2+num3+num4)
;
}",1
"public void addNumber(int num1, int num2, int num3, int num4, int num5){ 
 return (num1+num2+num3+num4+num5)
;
}",1
"public void complexMethod(int a, int b, int c, int d) {
        if (a > 0) {                       
            if (b > 0) {                   
                if (c > 0) {               
                    System.out.println(""Case 1"");
                } else {                   
                    System.out.println(""Case 2"");
                }
            } else if (b < 0) {            
                if (c == 0) {              
                    System.out.println(""Case 3"");
                } else {                   
                    System.out.println(""Case 4"");
                }
            } else {                       
                System.out.println(""Case 5"");
            }
        } else if (a < 0) {                
            if (d > 10) {                  
                System.out.println(""Case 6"");
            } else if (d < 5) {            
                System.out.println(""Case 7"");
            } else {                       
                switch (b) {               
                    case 1:                
                        System.out.println(""Case 8"");
                        break;
                    case 2:                
                        System.out.println(""Case 9"");
                        break;
                    case 3:                
                        System.out.println(""Case 10"");
                        break;
                    default:               
                        System.out.println(""Default Case"");
                }
            }
        } else {                           
            for (int i = 0; i < c; i++) {  
                if (i % 2 == 0) {          
                    System.out.println(""Even"");
                } else {                   
                    System.out.println(""Odd"");
                }
            }
        }

        try {                              
            int result = a / b;
            System.out.println(""Result: "" + result);
        } catch (ArithmeticException e) {  
            System.out.println(""Division by zero"");
        }
    }",1
"public void addNumber(int num1, int num2, int num3, int num4, int num5, int num6){ 
 return (num1+num2+num3+num4+num5+num6)
;
}",1
"public void addNumber(int num1, int num2, int num3, int num4, int num5, int num6, int num7, int num8){ 
 return (num1+num2+num3+num4+num5+num6+num7+num8)
;
}",1
"public void addNumber(int num1, int num2, int num3, int num4, int num5, int num6, int num7, int num8, int num9){ 
 return (num1+num2+num3+num4+num5+num6+num7+num8+num9);
}",1
"public void complexMethod(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, int n, int o) {
        if (a > 0) {
            if (b > 0) {
                if (c > 0) {
                    if (d > 0) {
                        System.out.println(""All conditions met"");
                    } else {
                        System.out.println(""Condition d not met"");
                    }
                } else {
                    System.out.println(""Condition c not met"");
                }
            } else {
                System.out.println(""Condition b not met"");
            }
        } else {
            System.out.println(""Condition a not met"");
        }

        switch (e) {
            case 1:
                System.out.println(""e is 1"");
                break;
            case 2:
                System.out.println(""e is 2"");
                break;
            default:
                System.out.println(""e is neither 1 nor 2"");
        }

        for (int i1 = 0; i1 < f; i1++) {
            if (g > 0) {
                if (h > 0) {
                    System.out.println(""g and h are positive"");
                }
            }
        }

        while (i > 0) {
            if (j > 0) {
                if (k > 0) {
                    System.out.println(""j and k are positive"");
                } else {
                    System.out.println(""k is not positive"");
                }
            } else {
                System.out.println(""j is not positive"");
            }
            i--;
        }

        try {
            if (l > 0) {
                throw new Exception(""Exception thrown"");
            }
        } catch (Exception ex) {
            System.out.println(""Exception caught"");
        } finally {
            System.out.println(""Finally block executed"");
        }

        switch (m) {
            case 1:
                System.out.println(""m is 1"");
                break;
            case 2:
                System.out.println(""m is 2"");
                break;
            default:
                System.out.println(""m is neither 1 nor 2"");
        }

        if (n > 0) {
            System.out.println(""n is positive"");
        } else if (o > 0) {
            System.out.println(""o is positive"");
        } else {
            System.out.println(""n and o are non-positive"");
        }
    }",1
"public void complexMethod(int a, int b, int c, int d, int e, int f, int g) {
        if (a > 0) { // +1
            if (b > 0) { // +1
                System.out.println(""Branch 1"");
            } else if (c > 0) { // +1
                System.out.println(""Branch 2"");
            } else { // +1
                System.out.println(""Branch 3"");
            }
        } else if (d > 0) { // +1
            switch (e) {
                case 1: // +1
                    System.out.println(""Case 1"");
                    break;
                case 2: // +1
                    System.out.println(""Case 2"");
                    break;
                case 3: // +1
                    System.out.println(""Case 3"");
                    break;
                default: // +1
                    System.out.println(""Default case"");
                    break;
            }
        } else { // +1
            for (int i = 0; i < f; i++) { // +1
                if (g > 0) { // +1
                    System.out.println(""Loop iteration "" + i);
                } else { // +1
                    System.out.println(""Negative g"");
                }
            }
        }

        while (a > 0) { // +1
            if (b > 0) { // +1
                a--;
            } else { // +1
                break;
            }
        }
        
        do { // +1
            System.out.println(""In do-while loop"");
            a--;
        } while (a > 0 && b > 0); // +1
    }",1
"public static void gameDecision(int playerHealth, int enemyHealth, int playerMana, int enemyMana, int environment) {
        if (playerHealth <= 0) {
            System.out.println(""Game Over. Player is dead."");
        } else if (enemyHealth <= 0) {
            System.out.println(""Victory! Enemy is dead."");
        } else {
            if (playerMana > 50) {
                System.out.println(""Player casts a powerful spell!"");
                enemyHealth -= 30;
            } else if (playerMana > 20) {
                System.out.println(""Player casts a moderate spell."");
                enemyHealth -= 15;
            } else {
                System.out.println(""Player attacks with a basic strike."");
                enemyHealth -= 5;
            }

            switch (environment) {
                case 1:
                    System.out.println(""The environment is a forest. Players have increased agility."");
                    playerHealth += 5;
                    break;
                case 2:
                    System.out.println(""The environment is a desert. Players have decreased stamina."");
                    playerHealth -= 5;
                    break;
                case 3:
                    System.out.println(""The environment is a swamp. Movement is slow."");
                    break;
                case 4:
                    System.out.println(""The environment is a mountain. Attack damage is increased."");
                    enemyHealth -= 10;
                    break;
                default:
                    System.out.println(""The environment is neutral."");
                    break;
            }

            while (enemyHealth > 0 && playerHealth > 0) {
                if (enemyMana > 40) {
                    System.out.println(""Enemy casts a devastating spell!"");
                    playerHealth -= 25;
                    enemyMana -= 40;
                } else if (enemyMana > 10) {
                    System.out.println(""Enemy casts a weak spell."");
                    playerHealth -= 10;
                    enemyMana -= 10;
                } else {
                    System.out.println(""Enemy attacks with a basic strike."");
                    playerHealth -= 5;
                }

                if (playerHealth <= 0) {
                    System.out.println(""Player is dead."");
                    break;
                } else if (enemyHealth <= 0) {
                    System.out.println(""Enemy is dead."");
                    break;
                }
            }

            if (playerHealth > 0 && enemyHealth > 0) {
                System.out.println(""The battle continues..."");
            } else if (playerHealth <= 0) {
                System.out.println(""Game Over. The player was defeated."");
            } else {
                System.out.println(""Victory! The player defeated the enemy."");
            }
        }
    }",1
"public void processTransaction(String transactionId, double amount, String currency, String fromAccount, String toAccount) {
        System.out.println(""Processing transaction ID: "" + transactionId + "" for amount: "" + amount + "" "" + currency);
        System.out.println(""From: "" + fromAccount + "" to "" + toAccount);
    }",1
"public String generateReport(String title, String author, String content, int pageCount, boolean includeSummary) {
        String report = ""Report: "" + title + ""\nAuthor: "" + author + ""\nContent: "" + content + ""\nPages: "" + pageCount;
        if (includeSummary) {
            report += ""\nSummary included."";
        }
        return report;
    }",1
"public void configureServer(String ipAddress, int port, String username, String password, String databaseName) {
        System.out.println(""Configuring server with IP: "" + ipAddress + "", Port: "" + port);
        System.out.println(""Username: "" + username + "", Database: "" + databaseName);
    }",1
"public double calculateInterest(double principal, double rate, int time, int compoundingFrequency) {
        return principal * Math.pow((1 + rate / compoundingFrequency), compoundingFrequency * time);
    }",1
"public void sendEmail(String to, String subject, String body, String cc, String bcc) {
        System.out.println(""Sending email to: "" + to);
        System.out.println(""Subject: "" + subject);
        System.out.println(""Body: "" + body);
        System.out.println(""CC: "" + cc);
        System.out.println(""BCC: "" + bcc);
    }",1
"public boolean authenticateUser(String username, String password, String otp, String deviceToken) {
        // Example authentication logic
        return username.equals(""user"") && password.equals(""pass"") && otp.equals(""123456"") && deviceToken.equals(""abc123"");
    }",1
"public void scheduleMeeting(String date, String time, String location, String agenda) {
        System.out.println(""Meeting scheduled on "" + date + "" at "" + time + "" in "" + location + "". Agenda: "" + agenda);
    }",1
"public String formatFullName(String title, String firstName, String middleName, String lastName) {
        return title + "" "" + firstName + "" "" + middleName + "" "" + lastName;
    }",1
"public int calculateTotalPrice(int itemPrice, int quantity, double taxRate, double discount) {
        double totalPrice = (itemPrice * quantity) * (1 + taxRate) - discount;
        return (int) totalPrice;
    }",1
"public void createUser(String firstName, String lastName, int age, String email) {
        System.out.println(""Creating user: "" + firstName + "" "" + lastName + "", Age: "" + age + "", Email: "" + email);
    }",1
"public void registerStudent(String firstName, String lastName, int age, String email, String studentId) {
        if (age < 18) {
            System.out.println(""Student "" + firstName + "" "" + lastName + "" is a minor."");
        } else {
            System.out.println(""Student "" + firstName + "" "" + lastName + "" is registered."");
        }
        System.out.println(""Email: "" + email + "", Student ID: "" + studentId);
        sendWelcomeEmail(email);
    }",1
"public double calculateEmployeeSalary(double baseSalary, double bonus, double taxRate, int overtimeHours, double overtimeRate) {
        double overtimePay = overtimeHours * overtimeRate;
        double grossSalary = baseSalary + bonus + overtimePay;
        double tax = grossSalary * taxRate;
        double netSalary = grossSalary - tax;
        System.out.println(""Gross Salary: "" + grossSalary + "", Tax: "" + tax + "", Net Salary: "" + netSalary);
        return netSalary;
    }",1
"public String buildURL(String protocol, String domain, String path, String query, String fragment) {
        StringBuilder url = new StringBuilder();
        url.append(protocol).append(""://"").append(domain);
        if (path != null && !path.isEmpty()) {
            url.append(""/"").append(path);
        }
        if (query != null && !query.isEmpty()) {
            url.append(""?"").append(query);
        }
        if (fragment != null && !fragment.isEmpty()) {
            url.append(""#"").append(fragment);
        }
        System.out.println(""Generated URL: "" + url.toString());
        return url.toString();
    }",1
"private void sendWelcomeEmail(String email) {
        System.out.println(""Welcome email sent to "" + email);
    }",0
"public void processOrder(int orderId, String product, int quantity, double pricePerUnit, String deliveryAddress) {
        double totalPrice = quantity * pricePerUnit;
        System.out.println(""Order ID: "" + orderId);
        System.out.println(""Product: "" + product + "", Quantity: "" + quantity);
        System.out.println(""Total Price: $"" + totalPrice);
        System.out.println(""Delivery Address: "" + deliveryAddress);
        confirmOrder(orderId);
    }",1
"private void confirmOrder(int orderId) {
        System.out.println(""Order "" + orderId + "" has been confirmed."");
    }",0
"public void manageProject(String projectName, String[] teamMembers, String deadline, double budget, String clientName) {
        System.out.println(""Managing project: "" + projectName);
        System.out.println(""Team Members: "");
        for (String member : teamMembers) {
            System.out.println(""- "" + member);
        }
        System.out.println(""Deadline: "" + deadline);
        System.out.println(""Budget: $"" + budget);
        System.out.println(""Client: "" + clientName);
        allocateBudget(budget, teamMembers.length);
    }",1
"private void allocateBudget(double budget, int teamSize) {
        double perMemberBudget = budget / teamSize;
        System.out.println(""Allocated $"" + perMemberBudget + "" per team member."");
    }",0
"public boolean validateUserInput(String username, String password, String email, String phoneNumber, String address) {
        boolean isValid = true;
        if (username.isEmpty() || password.isEmpty()) {
            System.out.println(""Username or password cannot be empty."");
            isValid = false;
        }
        if (!email.contains(""@"")) {
            System.out.println(""Invalid email format."");
            isValid = false;
        }
        if (phoneNumber.length() != 10) {
            System.out.println(""Phone number must be 10 digits."");
            isValid = false;
        }
        if (address.isEmpty()) {
            System.out.println(""Address cannot be empty."");
            isValid = false;
        }
        return isValid;
    }",1
"public void organizeEvent(String eventName, String date, String time, String location, String[] participants) {
        System.out.println(""Organizing event: "" + eventName);
        System.out.println(""Date: "" + date + "", Time: "" + time + "", Location: "" + location);
        System.out.println(""Participants:"");
        for (String participant : participants) {
            System.out.println(""- "" + participant);
        }
        sendInvitations(participants);
    }",1
" private void sendInvitations(String[] participants) {
        for (String participant : participants) {
            System.out.println(""Invitation sent to: "" + participant);
        }
    }",0
"public String createRecipe(String dishName, String[] ingredients, int preparationTime, String instructions, String difficultyLevel) {
        StringBuilder recipe = new StringBuilder();
        recipe.append(""Recipe for "").append(dishName).append("":\n"");
        recipe.append(""Ingredients:\n"");
        for (String ingredient : ingredients) {
            recipe.append(""- "").append(ingredient).append(""\n"");
        }
        recipe.append(""Preparation Time: "").append(preparationTime).append("" minutes\n"");
        recipe.append(""Instructions: "").append(instructions).append(""\n"");
        recipe.append(""Difficulty Level: "").append(difficultyLevel).append(""\n"");
        System.out.println(recipe.toString());
        return recipe.toString();
    }",1
"public double calculateLoanRepayment(double principal, double annualInterestRate, int years, int paymentsPerYear, double additionalPayments) {
        double monthlyInterestRate = annualInterestRate / paymentsPerYear;
        int totalPayments = years * paymentsPerYear;
        double payment = (principal * monthlyInterestRate) / (1 - Math.pow(1 + monthlyInterestRate, -totalPayments));
        payment += additionalPayments;
        double totalRepayment = payment * totalPayments;
        System.out.println(""Monthly Payment: $"" + payment);
        System.out.println(""Total Repayment: $"" + totalRepayment);
        return totalRepayment;
    }",1
"public void manageInventory(String itemName, int quantityInStock, int reorderLevel, double pricePerItem, String supplierName) {
        System.out.println(""Managing inventory for item: "" + itemName);
        System.out.println(""Quantity in Stock: "" + quantityInStock);
        if (quantityInStock < reorderLevel) {
            System.out.println(""Quantity is below reorder level. Reordering more from "" + supplierName);
        } else {
            System.out.println(""Sufficient quantity in stock."");
        }
        System.out.println(""Price per Item: $"" + pricePerItem);
    }",1
"public boolean bookFlight(String passengerName, String flightNumber, String departureDate, String departureTime, String seatClass, String destination) {
        System.out.println(""Booking flight for: "" + passengerName);
        System.out.println(""Flight Number: "" + flightNumber);
        System.out.println(""Departure Date: "" + departureDate + "", Time: "" + departureTime);
        System.out.println(""Class: "" + seatClass + "", Destination: "" + destination);
        if (seatClass.equalsIgnoreCase(""First Class"")) {
            System.out.println(""Booking in First Class. Special amenities included."");
        } else {
            System.out.println(""Booking in "" + seatClass + ""."");
        }
        return confirmBooking(flightNumber);
    }",1
"private boolean confirmBooking(String flightNumber) {
        System.out.println(""Booking confirmed for flight number: "" + flightNumber);
        return true;
    }",0
" public int romanToInt(String s, String e, String t) {
        HashMap<Character, Integer> romanValues = new HashMap<>();
        romanValues.put('I', 1);
        romanValues.put('V', 5);
        romanValues.put('X', 10);
        romanValues.put('L', 50);
        romanValues.put('C', 100);
        romanValues.put('D', 500);
        romanValues.put('M', 1000);

        int total = 0;
        int prevValue = 0;
        
        for (int i = s.length() - 1; i >= 0; i--) {
            int currValue = romanValues.get(s.charAt(i));
            
            // If the value of the current character is less than the previous one,
            // we subtract it. Otherwise, we add it to the total.
            if (currValue < prevValue) {
                total -= currValue;
            } else {
                total += currValue;
            }
            
            prevValue = currValue;
        }
        
        return total;
    }",0
"public int add(int a, int b) {
        int sum = a + b;
        System.out.println(""Sum: "" + sum);
        return sum;
    }",0
"public void greetUser(String name) {
        String greeting = ""Hello, "" + name + ""!"";
        System.out.println(greeting);
    }",0
"public double calculateAreaOfCircle(double radius) {
        double area = Math.PI * Math.pow(radius, 2);
        System.out.println(""Area of the circle: "" + area);
        return area;
    }",0
"public boolean isEven(int number) {
        boolean result = (number % 2 == 0);
        if (result) {
            System.out.println(number + "" is even."");
        } else {
            System.out.println(number + "" is odd."");
        }
        return result;
    }",0
"public void printArray(int[] arr) {
        System.out.print(""Array elements: "");
        for (int num : arr) {
            System.out.print(num + "" "");
        }
        System.out.println();
    }",0
"public int max(int a, int b) {
        int maximum = (a > b) ? a : b;
        System.out.println(""Maximum: "" + maximum);
        return maximum;
    }",0
"public String concatenate(String str1, String str2) {
        String result = str1 + str2;
        System.out.println(""Concatenated string: "" + result);
        return result;
    }",0
"public void drawSquare(int sideLength) {
        for (int i = 0; i < sideLength; i++) {
            for (int j = 0; j < sideLength; j++) {
                System.out.print(""* "");
            }
            System.out.println();
        }
    }",0
"public double convertFahrenheitToCelsius(double fahrenheit) {
        double celsius = (fahrenheit - 32) * 5 / 9;
        System.out.println(fahrenheit + ""°F is "" + celsius + ""°C."");
        return celsius;
    }",0
"public void toggleLight(boolean isOn) {
        if (isOn) {
            System.out.println(""The light is now off."");
        } else {
            System.out.println(""The light is now on."");
        }
    }",0
"public int calculateProduct(int a, int b, int c) {
        int product = a * b * c;
        System.out.println(""Product: "" + product);
        return product;
    }",0
"public void displayFullName(String firstName, String middleName, String lastName) {
        String fullName = firstName + "" "" + middleName + "" "" + lastName;
        System.out.println(""Full Name: "" + fullName);
    }",0
"public boolean checkRange(int number, int lowerBound, int upperBound) {
        boolean isInRange = number >= lowerBound && number <= upperBound;
        if (isInRange) {
            System.out.println(number + "" is within the range ["" + lowerBound + "", "" + upperBound + ""]"");
        } else {
            System.out.println(number + "" is outside the range ["" + lowerBound + "", "" + upperBound + ""]"");
        }
        return isInRange;
    }",0
"public double calculateAverage(double num1, double num2, double num3) {
        double average = (num1 + num2 + num3) / 3;
        System.out.println(""Average: "" + average);
        return average;
    }",0
"public void printPersonInfo(String name, int age, String city) {
        System.out.println(""Name: "" + name + "", Age: "" + age + "", City: "" + city);
    }",0
"public String concatenateStrings(String str1, String str2, String str3) {
        String concatenated = str1 + str2 + str3;
        System.out.println(""Concatenated String: "" + concatenated);
        return concatenated;
    }",0
"public int findMax(int a, int b, int c) {
        int max = Math.max(a, Math.max(b, c));
        System.out.println(""Maximum: "" + max);
        return max;
    }",0
"public void drawRectangle(int width, int height, char fillCharacter) {
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                System.out.print(fillCharacter + "" "");
            }
            System.out.println();
        }
    }",0
"public boolean validateCredentials(String username, String password, String securityAnswer) {
        boolean isValid = username.equals(""user123"") && password.equals(""pass123"") && securityAnswer.equals(""petName"");
        if (isValid) {
            System.out.println(""Credentials are valid."");
        } else {
            System.out.println(""Invalid credentials."");
        }
        return isValid;
    }",0
"public int sumArrayElements(int[] arr, int startIndex, int endIndex) {
        int sum = 0;
        for (int i = startIndex; i <= endIndex; i++) {
            sum += arr[i];
        }
        System.out.println(""Sum of elements from index "" + startIndex + "" to "" + endIndex + "": "" + sum);
        return sum;
    }",0
"public int add(int a, int b) {
        int sum = a + b;
        System.out.println(""Sum: "" + sum);
        return sum;
    }",0
"public String greet(String name) {
        String greeting = ""Hello, "" + name + ""!"";
        System.out.println(greeting);
        return greeting;
    }",0
"public double calculateArea(double radius) {
        double area = Math.PI * radius * radius;
        System.out.println(""Area: "" + area);
        return area;
    }",0
"public boolean isPositive(int number) {
        boolean result = number > 0;
        System.out.println(number + "" is positive: "" + result);
        return result;
    }",0
"public int multiply(int x, int y) {
        int product = x * y;
        System.out.println(""Product: "" + product);
        return product;
    }",0
"public String combineNames(String firstName, String lastName) {
        String fullName = firstName + "" "" + lastName;
        System.out.println(""Full Name: "" + fullName);
        return fullName;
    }",0
"public void printArray(int[] array) {
        System.out.print(""Array: "");
        for (int num : array) {
            System.out.print(num + "" "");
        }
        System.out.println();
    }",0
"public void printRectangle(int width, int height) {
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                System.out.print(""# "");
            }
            System.out.println();
        }
    }",0
"public double calculateVolume(double length, double width, double height, double density) {
        double volume = length * width * height;
        double mass = volume * density;
        System.out.println(""Volume: "" + volume + "" cubic units, Mass: "" + mass + "" units"");
        return mass;
    }",1
"public void printStudentDetails(String name, int age, String grade, String school) {
        System.out.println(""Student Details: "");
        System.out.println(""Name: "" + name);
        System.out.println(""Age: "" + age);
        System.out.println(""Grade: "" + grade);
        System.out.println(""School: "" + school);
    }",1
"public boolean validateUser(String username, String password, String email, int age) {
        boolean isValid = username.length() > 3 && password.length() > 5 && email.contains(""@"") && age >= 18;
        System.out.println(""User validation: "" + isValid);
        return isValid;
    }",1
"public double calculateTotalPrice(double price, int quantity, double taxRate, double discountRate) {
        double totalPrice = (price * quantity) * (1 + taxRate / 100) * (1 - discountRate / 100);
        System.out.println(""Total Price: $"" + totalPrice);
        return totalPrice;
    }",1
"public void drawBox(int width, int height, char borderChar, char fillChar) {
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (i == 0 || i == height - 1 || j == 0 || j == width - 1) {
                    System.out.print(borderChar + "" "");
                } else {
                    System.out.print(fillChar + "" "");
                }
            }
            System.out.println();
        }
    }",1
"public int calculateScore(int math, int science, int english, int history, int physicalEd) {
        int totalScore = math + science + english + history + physicalEd;
        System.out.println(""Total Score: "" + totalScore);
        return totalScore;
    }",1
"public void sendEmail(String recipient, String subject, String message, String sender, boolean isHtml) {
        String emailFormat = isHtml ? ""HTML"" : ""Plain Text"";
        System.out.println(""Sending "" + emailFormat + "" email from "" + sender + "" to "" + recipient);
        System.out.println(""Subject: "" + subject);
        System.out.println(""Message: "" + message);
    }",1
"public boolean checkRectangleProperties(double length, double width, double perimeter, double area) {
        boolean isCorrect = (2 * (length + width) == perimeter) && (length * width == area);
        System.out.println(""Rectangle properties are correct: "" + isCorrect);
        return isCorrect;
    }",1
"public int sumFourNumbers(int a, int b, int c, int d) {
    return a + b + c + d;
}",1
"public void printPersonDetails(String firstName, String middleName, String lastName, int age) {
    System.out.println(firstName + "" "" + middleName + "" "" + lastName + "" is "" + age + "" years old."");
}",1
"public double calculateTriangleArea(double base, double height, double sideA, double sideB) {
    return 0.5 * base * height;
}",1
"public String createFullAddress(String street, String city, String state, String zipCode, String country) {
    return street + "", "" + city + "", "" + state + "" "" + zipCode + "", "" + country;
}",1
"public double calculatePrismVolume(double length, double width, double height, double density) {
    return length * width * height * density;
}",1
"public void printProductDetails(String name, double price, String manufacturer, String category, int stock) {
    System.out.println(""Product: "" + name + "", Price: "" + price + "", Manufacturer: "" + manufacturer 
                       + "", Category: "" + category + "", In Stock: "" + stock);
}",1
"public double calculateAverage(int a, int b, int c, int d, int e) {
    return (a + b + c + d + e) / 5.0;
}",1
"public void bookFlight(String firstName, String lastName, String passportNumber, String flightNumber, String seatNumber) {
    System.out.println(""Booking flight "" + flightNumber + "" for "" + firstName + "" "" + lastName + 
                       "" (Passport: "" + passportNumber + ""), Seat: "" + seatNumber);
}",1
"public void createUserProfile(String username, String email, String phoneNumber, String address, String gender) {
    System.out.println(""Username: "" + username + "", Email: "" + email + "", Phone: "" + phoneNumber 
                       + "", Address: "" + address + "", Gender: "" + gender);
}",1
"public double complexCalculation(double a, double b, double c, double d, double e, double f) {
    return (a * b + c - d) / (e + f);
}",1
"public void processOrder(String item, double price, int quantity, String customerName, String address, String paymentMethod) {
    double totalPrice = price * quantity;
    System.out.println(""Processing order for "" + customerName);
    System.out.println(""Item: "" + item);
    System.out.println(""Quantity: "" + quantity);
    System.out.println(""Total Price: $"" + totalPrice);
    if (paymentMethod.equals(""credit"")) {
        System.out.println(""Payment Method: Credit Card"");
    } else if (paymentMethod.equals(""paypal"")) {
        System.out.println(""Payment Method: PayPal"");
    } else {
        System.out.println(""Payment Method: Cash on Delivery"");
    }
    System.out.println(""Shipping to: "" + address);
    System.out.println(""Order processed successfully!"");
}",1
"public void updateUserPermissions(String username, boolean canEdit, boolean canDelete, boolean canView, boolean canShare) {
    System.out.println(""Updating permissions for "" + username);
    if (canEdit) {
        System.out.println(""User can edit content."");
    } else {
        System.out.println(""User cannot edit content."");
    }
    if (canDelete) {
        System.out.println(""User can delete content."");
    } else {
        System.out.println(""User cannot delete content."");
    }
    if (canView) {
        System.out.println(""User can view content."");
    } else {
        System.out.println(""User cannot view content."");
    }
    if (canShare) {
        System.out.println(""User can share content."");
    } else {
        System.out.println(""User cannot share content."");
    }
    System.out.println(""Permissions updated successfully."");
}",1
"public void registerUser(String firstName, String lastName, String email, String password, String securityQuestion, String securityAnswer) {
    System.out.println(""Registering user: "" + firstName + "" "" + lastName);
    if (email.contains(""@"")) {
        System.out.println(""Email is valid."");
    } else {
        System.out.println(""Invalid email address."");
        return;
    }
    if (password.length() >= 8) {
        System.out.println(""Password is strong."");
    } else {
        System.out.println(""Password is too weak."");
        return;
    }
    if (!securityAnswer.isEmpty()) {
        System.out.println(""Security question and answer set."");
    } else {
        System.out.println(""Please provide a security answer."");
        return;
    }
    System.out.println(""User registration successful!"");
}",1
"public void saveProductInfo(String productName, double price, int stock, String category, String manufacturer, String description) {
    if (price <= 0) {
        System.out.println(""Invalid price."");
        return;
    }
    if (stock < 0) {
        System.out.println(""Stock cannot be negative."");
        return;
    }
    if (category.isEmpty() || manufacturer.isEmpty()) {
        System.out.println(""Category or manufacturer cannot be empty."");
        return;
    }
    System.out.println(""Product Name: "" + productName);
    System.out.println(""Price: $"" + price);
    System.out.println(""Stock: "" + stock + "" units"");
    System.out.println(""Category: "" + category);
    System.out.println(""Manufacturer: "" + manufacturer);
    System.out.println(""Description: "" + description);
    System.out.println(""Product saved successfully."");
}",1
"public double calculateFinalGrade(String studentName, int quiz1, int quiz2, int assignment1, int assignment2, int exam) {
    int totalQuiz = quiz1 + quiz2;
    int totalAssignment = assignment1 + assignment2;
    int totalMarks = totalQuiz + totalAssignment + exam;
    double finalGrade = totalMarks / 5.0;
    System.out.println(""Student: "" + studentName);
    System.out.println(""Total Quiz Marks: "" + totalQuiz);
    System.out.println(""Total Assignment Marks: "" + totalAssignment);
    System.out.println(""Exam Marks: "" + exam);
    System.out.println(""Final Grade: "" + finalGrade);
    if (finalGrade >= 90) {
        System.out.println(""Grade: A"");
    } else if (finalGrade >= 80) {
        System.out.println(""Grade: B"");
    } else if (finalGrade >= 70) {
        System.out.println(""Grade: C"");
    } else {
        System.out.println(""Grade: F"");
    }
    return finalGrade;
}",1
"public void logSessionActivity(String username, String loginTime, String logoutTime, String ipAddress, String browser, String os) {
    System.out.println(""Logging session for user: "" + username);
    System.out.println(""Login Time: "" + loginTime);
    System.out.println(""Logout Time: "" + logoutTime);
    System.out.println(""IP Address: "" + ipAddress);
    System.out.println(""Browser: "" + browser);
    System.out.println(""Operating System: "" + os);
    if (browser.contains(""Chrome"")) {
        System.out.println(""User prefers Chrome browser."");
    } else if (browser.contains(""Firefox"")) {
        System.out.println(""User prefers Firefox browser."");
    } else {
        System.out.println(""Unknown browser."");
    }
    System.out.println(""Session logged successfully."");
}",1
"public double computeFinalPayment(double basePrice, double discount1, double discount2, double taxRate, double deliveryFee) {
    double discountedPrice = basePrice - (basePrice * discount1 / 100) - (basePrice * discount2 / 100);
    double tax = discountedPrice * taxRate / 100;
    double finalPrice = discountedPrice + tax + deliveryFee;
    System.out.println(""Base Price: $"" + basePrice);
    System.out.println(""Discount 1: "" + discount1 + ""%"");
    System.out.println(""Discount 2: "" + discount2 + ""%"");
    System.out.println(""Tax: $"" + tax);
    System.out.println(""Delivery Fee: $"" + deliveryFee);
    System.out.println(""Final Price: $"" + finalPrice);
    return finalPrice;
}",1
"public void sendNotification(String recipient, String message, String sender, String date, String platform, boolean isUrgent) {
    System.out.println(""Sending notification to: "" + recipient);
    System.out.println(""Message: "" + message);
    System.out.println(""Sent by: "" + sender);
    System.out.println(""Date: "" + date);
    System.out.println(""Platform: "" + platform);
    if (isUrgent) {
        System.out.println(""This is an urgent message."");
    }
    if (platform.equals(""email"")) {
        System.out.println(""Notification sent via email."");
    } else if (platform.equals(""SMS"")) {
        System.out.println(""Notification sent via SMS."");
    } else {
        System.out.println(""Unknown platform."");
    }
    System.out.println(""Notification sent successfully."");
}",1
"public void manageProjectTasks(String projectName, String task1, String task2, String task3, String task4, String task5, String deadline) {
    System.out.println(""Managing tasks for project: "" + projectName);
    System.out.println(""Task 1: "" + task1);
    System.out.println(""Task 2: "" + task2);
    System.out.println(""Task 3: "" + task3);
    System.out.println(""Task 4: "" + task4);
    System.out.println(""Task 5: "" + task5);
    System.out.println(""Project Deadline: "" + deadline);
    if (deadline.isEmpty()) {
        System.out.println(""No deadline set for this project."");
    } else {
        System.out.println(""Please ensure all tasks are completed before the deadline."");
    }
    System.out.println(""Project task management updated."");
}",1
"public void configureNetworkDevice(String deviceName, String ipAddress, String subnetMask, String gateway, String dns1, String dns2, boolean enableDHCP) {
    System.out.println(""Configuring network device: "" + deviceName);
    System.out.println(""IP Address: "" + ipAddress);
    System.out.println(""Subnet Mask: "" + subnetMask);
    System.out.println(""Gateway: "" + gateway);
    System.out.println(""DNS1: "" + dns1);
    System.out.println(""DNS2: "" + dns2);
    if (enableDHCP) {
        System.out.println(""DHCP is enabled."");
    } else {
        System.out.println(""DHCP is disabled."");
    }
    System.out.println(""Network configuration saved."");
}",1
"public void generateReceipt(String customerName, String item1, double price1, String item2, double price2, String paymentMethod) {
    double total = price1 + price2;
    System.out.println(""Receipt for "" + customerName);
    System.out.println(item1 + "": $"" + price1);
    System.out.println(item2 + "": $"" + price2);
    System.out.println(""Total: $"" + total);
    if (paymentMethod.equals(""credit"")) {
        System.out.println(""Payment method: Credit Card"");
    } else if (paymentMethod.equals(""paypal"")) {
        System.out.println(""Payment method: PayPal"");
    } else {
        System.out.println(""Payment method: Cash"");
    }
    System.out.println(""Thank you for shopping with us!"");
}",1
"public void displayUserProfile(String username, String email, String address, String phoneNumber, String dateOfBirth) {
    System.out.println(""User Profile"");
    System.out.println(""Username: "" + username);
    System.out.println(""Email: "" + email);
    System.out.println(""Address: "" + address);
    System.out.println(""Phone Number: "" + phoneNumber);
    System.out.println(""Date of Birth: "" + dateOfBirth);
    if (email.contains(""@"")) {
        System.out.println(""Valid email address."");
    } else {
        System.out.println(""Invalid email address."");
    }
}",1
"public void checkout(String itemName, double price, int quantity, String customerName, String address, String paymentMethod) {
    double total = price * quantity;
    System.out.println(""Checking out "" + itemName + "" for "" + customerName);
    System.out.println(""Quantity: "" + quantity);
    System.out.println(""Total: $"" + total);
    System.out.println(""Shipping to: "" + address);
    if (paymentMethod.equals(""credit"")) {
        System.out.println(""Payment method: Credit Card"");
    } else if (paymentMethod.equals(""paypal"")) {
        System.out.println(""Payment method: PayPal"");
    } else {
        System.out.println(""Payment method: Cash"");
    }
    System.out.println(""Checkout completed successfully!"");
}",1
"public void displayEventDetails(String eventName, String date, String time, String location, String organizer) {
    System.out.println(""Event Details"");
    System.out.println(""Event: "" + eventName);
    System.out.println(""Date: "" + date);
    System.out.println(""Time: "" + time);
    System.out.println(""Location: "" + location);
    System.out.println(""Organizer: "" + organizer);
    if (date.isEmpty() || time.isEmpty()) {
        System.out.println(""Date or time is missing."");
    }
}",1
"public void calculateBMI(String name, double weight, double height, int age, String gender) {
    double bmi = weight / (height * height);
    System.out.println(""Calculating BMI for "" + name);
    System.out.println(""Weight: "" + weight + "" kg"");
    System.out.println(""Height: "" + height + "" m"");
    System.out.println(""BMI: "" + bmi);
    if (bmi < 18.5) {
        System.out.println(""Underweight - Recommended health plan: Increase calorie intake."");
    } else if (bmi >= 18.5 && bmi <= 24.9) {
        System.out.println(""Normal weight - Maintain current lifestyle."");
    } else {
        System.out.println(""Overweight - Recommended health plan: Start regular exercise."");
    }
}",1
"public void printCarDetails(String make, String model, int year, double price, String color, boolean isAvailable) {
    System.out.println(""Car Details"");
    System.out.println(""Make: "" + make);
    System.out.println(""Model: "" + model);
    System.out.println(""Year: "" + year);
    System.out.println(""Price: $"" + price);
    System.out.println(""Color: "" + color);
    if (isAvailable) {
        System.out.println(""This car is available for purchase."");
    } else {
        System.out.println(""This car is not available."");
    }
}",1
"public void withdrawAmount(String accountNumber, double balance, double amount, String pin, String atmLocation) {
    System.out.println(""ATM Withdrawal for Account: "" + accountNumber);
    if (balance < amount) {
        System.out.println(""Insufficient balance."");
        return;
    }
    balance -= amount;
    System.out.println(""Amount withdrawn: $"" + amount);
    System.out.println(""New Balance: $"" + balance);
    System.out.println(""ATM Location: "" + atmLocation);
    System.out.println(""Withdrawal successful."");
}",1
"public void assignProject(String teamLead, String member1, String member2, String member3, String projectName, String deadline) {
    System.out.println(""Project Assignment"");
    System.out.println(""Team Lead: "" + teamLead);
    System.out.println(""Member 1: "" + member1);
    System.out.println(""Member 2: "" + member2);
    System.out.println(""Member 3: "" + member3);
    System.out.println(""Project: "" + projectName);
    System.out.println(""Deadline: "" + deadline);
    if (deadline.isEmpty()) {
        System.out.println(""Please provide a deadline."");
    } else {
        System.out.println(""Project assigned successfully."");
    }
}",1
"public double calculateMonthlyInstallment(double loanAmount, double interestRate, int months, String borrowerName, String loanType) {
    double monthlyInterest = interestRate / 12 / 100;
    double installment = (loanAmount * monthlyInterest) / (1 - Math.pow(1 + monthlyInterest, -months));
    System.out.println(""Borrower: "" + borrowerName);
    System.out.println(""Loan Type: "" + loanType);
    System.out.println(""Loan Amount: $"" + loanAmount);
    System.out.println(""Monthly Installment: $"" + installment);
    System.out.println(""Loan Term: "" + months + "" months"");
    return installment;
}",1
"public void processReservation(String customerName, String roomType, int nights, double roomRate, String checkInDate, String checkOutDate) {
    double totalCost = roomRate * nights;
    System.out.println(""Processing reservation for "" + customerName);
    System.out.println(""Room Type: "" + roomType);
    System.out.println(""Check-In: "" + checkInDate);
    System.out.println(""Check-Out: "" + checkOutDate);
    System.out.println(""Total Nights: "" + nights);
    System.out.println(""Total Cost: $"" + totalCost);
    System.out.println(""Reservation processed successfully."");
}",1
"public void createCartSummary(String customerName, String item1, double price1, String item2, double price2, String discountCode) {
    double subtotal = price1 + price2;
    double discount = 0;
    if (!discountCode.isEmpty()) {
        discount = 10; // Assume 10% discount
    }
    double total = subtotal - (subtotal * discount / 100);
    System.out.println(""Cart Summary for "" + customerName);
    System.out.println(""Item 1: $"" + price1);
    System.out.println(""Item 2: $"" + price2);
    System.out.println(""Subtotal: $"" + subtotal);
    System.out.println(""Discount: "" + discount + ""%"");
    System.out.println(""Total: $"" + total);
}",1
"public void manageInventory(String productName, int currentStock, int newStock, String supplierName, double pricePerUnit, boolean restockNeeded) {
    System.out.println(""Managing Inventory for Product: "" + productName);
    System.out.println(""Current Stock: "" + currentStock);
    System.out.println(""New Stock: "" + newStock);
    currentStock += newStock;
    System.out.println(""Updated Stock: "" + currentStock);
    if (restockNeeded) {
        System.out.println(""Restocking needed from Supplier: "" + supplierName);
    }
    System.out.println(""Price per Unit: $"" + pricePerUnit);
}",1
"public double calculateTax(String employeeName, double grossSalary, double taxRate, int taxYear, String country) {
    double tax = grossSalary * taxRate / 100;
    double netSalary = grossSalary - tax;
    System.out.println(""Employee: "" + employeeName);
    System.out.println(""Gross Salary: $"" + grossSalary);
    System.out.println(""Tax Year: "" + taxYear);
    System.out.println(""Country: "" + country);
    System.out.println(""Tax Rate: "" + taxRate + ""%"");
    System.out.println(""Tax Amount: $"" + tax);
    System.out.println(""Net Salary: $"" + netSalary);
    return netSalary;
}",1
"public boolean validateProduct(String productName, double price, int stock, String category, String supplierName, boolean isPerishable) {
    if (price <= 0 || stock < 0 || productName.isEmpty() || category.isEmpty()) {
        System.out.println(""Invalid product details."");
        return false;
    }
    if (isPerishable) {
        System.out.println(""Perishable product detected. Handle with care."");
    }
    System.out.println(""Product: "" + productName + "" validated successfully."");
    return true;
}",1
"public double calculateAverageScore(String studentName, double score1, double score2, double score3, double score4, String courseName) {
    double average = (score1 + score2 + score3 + score4) / 4;
    System.out.println(""Calculating average score for "" + studentName + "" in "" + courseName);
    System.out.println(""Average Score: "" + average);
    if (average >= 90) {
        System.out.println(""Excellent performance."");
    } else if (average >= 70) {
        System.out.println(""Good performance."");
    } else {
        System.out.println(""Needs improvement."");
    }
    return average;
}",1
"public void processOrder(String customerName, String productName, int quantity, double unitPrice, String shippingAddress, String paymentMethod) {
    double totalPrice = unitPrice * quantity;
    System.out.println(""Processing order for "" + customerName);
    System.out.println(""Product: "" + productName);
    System.out.println(""Quantity: "" + quantity);
    System.out.println(""Total Price: $"" + totalPrice);
    System.out.println(""Shipping Address: "" + shippingAddress);
    System.out.println(""Payment Method: "" + paymentMethod);
    if (paymentMethod.equals(""credit"")) {
        System.out.println(""Credit Card payment selected."");
    } else {
        System.out.println(""Other payment method selected."");
    }
}",1
"public void borrowBook(String memberId, String bookTitle, String author, String borrowDate, String dueDate, int daysAllowed) {
    System.out.println(""Borrowing book for Member ID: "" + memberId);
    System.out.println(""Book Title: "" + bookTitle);
    System.out.println(""Author: "" + author);
    System.out.println(""Borrow Date: "" + borrowDate);
    System.out.println(""Due Date: "" + dueDate);
    System.out.println(""Borrowing allowed for: "" + daysAllowed + "" days."");
}",1
"public void calculateShippingCost(String destination, double weight, double baseRate, boolean expressShipping, String shippingCompany) {
    double shippingCost = weight * baseRate;
    if (expressShipping) {
        shippingCost += 10; // Additional charge for express
    }
    System.out.println(""Shipping Details"");
    System.out.println(""Destination: "" + destination);
    System.out.println(""Weight: "" + weight + "" kg"");
    System.out.println(""Shipping Company: "" + shippingCompany);
    System.out.println(""Total Shipping Cost: $"" + shippingCost);
}",1
"public void generateConferenceSummary(String conferenceName, String organizer, String location, int totalAttendees, int sessions, String keynoteSpeaker) {
    System.out.println(""Conference Summary"");
    System.out.println(""Conference: "" + conferenceName);
    System.out.println(""Organizer: "" + organizer);
    System.out.println(""Location: "" + location);
    System.out.println(""Total Attendees: "" + totalAttendees);
    System.out.println(""Total Sessions: "" + sessions);
    System.out.println(""Keynote Speaker: "" + keynoteSpeaker);
    if (totalAttendees > 500) {
        System.out.println(""This was a major event."");
    } else {
        System.out.println(""This was a smaller, more intimate event."");
    }
}",1
"public void assignSeats(String theaterName, int row, int seatNumber, String showTime, String movieTitle, boolean isVIP) {
    System.out.println(""Seat Assignment for Movie: "" + movieTitle);
    System.out.println(""Theater: "" + theaterName);
    System.out.println(""Row: "" + row);
    System.out.println(""Seat: "" + seatNumber);
    System.out.println(""Show Time: "" + showTime);
    if (isVIP) {
        System.out.println(""VIP seating assigned."");
    } else {
        System.out.println(""Standard seating assigned."");
    }
}",1
"public void createUserProfile(String username, String email, String password, String fullName, String address, String phoneNumber, String dateOfBirth, boolean isAdmin) {
    System.out.println(""Creating user profile..."");
    System.out.println(""Username: "" + username);
    System.out.println(""Email: "" + email);
    System.out.println(""Full Name: "" + fullName);
    System.out.println(""Address: "" + address);
    System.out.println(""Phone Number: "" + phoneNumber);
    System.out.println(""Date of Birth: "" + dateOfBirth);
    if (isAdmin) {
        System.out.println(""User has admin privileges."");
    } else {
        System.out.println(""User has standard privileges."");
    }
    System.out.println(""Profile created successfully!"");
}",1
"public void processTransaction(String accountNumber, String transactionType, double amount, String description, String date, String time, String userId) {
    System.out.println(""Processing transaction for account: "" + accountNumber);
    System.out.println(""Transaction Type: "" + transactionType);
    System.out.println(""Amount: $"" + amount);
    System.out.println(""Description: "" + description);
    System.out.println(""Date: "" + date);
    System.out.println(""Time: "" + time);
    System.out.println(""User ID: "" + userId);
    
    // Validate transaction type
    if (transactionType.equals(""withdrawal"") && amount > getAccountBalance(accountNumber)) {
        System.out.println(""Insufficient balance for withdrawal."");
    } else {
        System.out.println(""Transaction processed successfully!"");
    }
}",1
"public void bookFlight(String passengerName, String flightNumber, String departureDate, String returnDate, String origin, String destination, int numOfPassengers, String seatClass) {
    System.out.println(""Booking flight for: "" + passengerName);
    System.out.println(""Flight Number: "" + flightNumber);
    System.out.println(""Departure Date: "" + departureDate);
    System.out.println(""Return Date: "" + returnDate);
    System.out.println(""Origin: "" + origin);
    System.out.println(""Destination: "" + destination);
    System.out.println(""Number of Passengers: "" + numOfPassengers);
    System.out.println(""Seat Class: "" + seatClass);
    System.out.println(""Flight booked successfully!"");
}",1
"public void manageOrder(String orderId, String customerName, String orderDate, String shippingAddress, double orderTotal, String[] items, String orderStatus) {
    System.out.println(""Managing order ID: "" + orderId);
    System.out.println(""Customer Name: "" + customerName);
    System.out.println(""Order Date: "" + orderDate);
    System.out.println(""Shipping Address: "" + shippingAddress);
    System.out.println(""Order Total: $"" + orderTotal);
    System.out.println(""Order Status: "" + orderStatus);
    
    System.out.println(""Items in the order:"");
    for (String item : items) {
        System.out.println(""- "" + item);
    }
    System.out.println(""Order management completed."");
}",1
"public void evaluateStudent(String studentName, String subject, double examScore, double assignmentScore, double projectScore, int attendance, String term) {
    System.out.println(""Evaluating performance for: "" + studentName);
    System.out.println(""Subject: "" + subject);
    System.out.println(""Exam Score: "" + examScore);
    System.out.println(""Assignment Score: "" + assignmentScore);
    System.out.println(""Project Score: "" + projectScore);
    System.out.println(""Attendance: "" + attendance + ""%"");
    
    double finalScore = (examScore + assignmentScore + projectScore) / 3;
    System.out.println(""Final Score: "" + finalScore);
    if (finalScore >= 90) {
        System.out.println(""Grade: A"");
    } else if (finalScore >= 80) {
        System.out.println(""Grade: B"");
    } else if (finalScore >= 70) {
        System.out.println(""Grade: C"");
    } else {
        System.out.println(""Grade: D"");
    }
}",1
"public void calculateTotalPrice(String[] itemNames, double[] itemPrices, int[] itemQuantities, String discountCode, String customerName, String paymentMethod) {
    double totalPrice = 0;
    System.out.println(""Calculating total price for: "" + customerName);
    
    for (int i = 0; i < itemNames.length; i++) {
        System.out.println(itemNames[i] + "" - $"" + itemPrices[i] + "" x "" + itemQuantities[i]);
        totalPrice += itemPrices[i] * itemQuantities[i];
    }
    
    if (!discountCode.isEmpty()) {
        totalPrice *= 0.9; // Assume a 10% discount
        System.out.println(""Discount applied. New total: $"" + totalPrice);
    } else {
        System.out.println(""No discount applied."");
    }
    
    System.out.println(""Total Price: $"" + totalPrice);
}",1
"public void sendEmail(String toAddress, String fromAddress, String subject, String body, String[] attachments, String ccAddress, boolean isHighPriority) {
    System.out.println(""Sending email from "" + fromAddress + "" to "" + toAddress);
    System.out.println(""Subject: "" + subject);
    System.out.println(""Body: "" + body);
    if (ccAddress != null && !ccAddress.isEmpty()) {
        System.out.println(""CC: "" + ccAddress);
    }
    if (isHighPriority) {
        System.out.println(""This email is marked as high priority."");
    }
    
    System.out.println(""Attachments:"");
    for (String attachment : attachments) {
        System.out.println(""- "" + attachment);
    }
    
    System.out.println(""Email sent successfully!"");
}",1
"public void planTrip(String destination, String departureDate, String returnDate, String[] activities, int numOfTravelers, String accommodationType, String transportMode) {
    System.out.println(""Planning trip to: "" + destination);
    System.out.println(""Departure Date: "" + departureDate);
    System.out.println(""Return Date: "" + returnDate);
    System.out.println(""Number of Travelers: "" + numOfTravelers);
    System.out.println(""Accommodation Type: "" + accommodationType);
    System.out.println(""Transport Mode: "" + transportMode);
    
    System.out.println(""Planned Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    System.out.println(""Trip planned successfully!"");
}",1
"public void manageProject(String projectName, String projectManager, String startDate, String endDate, double budget, String[] teamMembers, String projectStatus) {
    System.out.println(""Managing project: "" + projectName);
    System.out.println(""Project Manager: "" + projectManager);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Project Status: "" + projectStatus);
    
    System.out.println(""Team Members:"");
    for (String member : teamMembers) {
        System.out.println(""- "" + member);
    }
    System.out.println(""Project managed successfully!"");
}",1
"public void registerForConference(String attendeeName, String email, String registrationDate, String[] sessions, String mealPreference, boolean isStudent) {
    System.out.println(""Registering for conference for: "" + attendeeName);
    System.out.println(""Email: "" + email);
    System.out.println(""Registration Date: "" + registrationDate);
    System.out.println(""Meal Preference: "" + mealPreference);
    if (isStudent) {
        System.out.println(""Registration Type: Student"");
    } else {
        System.out.println(""Registration Type: Professional"");
    }
    
    System.out.println(""Registered for the following sessions:"");
    for (String session : sessions) {
        System.out.println(""- "" + session);
    }
    System.out.println(""Registration completed successfully!"");
}",1
"public void analyzeFeedback(String customerId, String[] feedback, int rating, String productName, String feedbackDate, String resolutionStatus) {
    System.out.println(""Analyzing feedback for customer ID: "" + customerId);
    System.out.println(""Product Name: "" + productName);
    System.out.println(""Feedback Date: "" + feedbackDate);
    System.out.println(""Rating: "" + rating);
    System.out.println(""Resolution Status: "" + resolutionStatus);
    
    System.out.println(""Customer Feedback:"");
    for (String f : feedback) {
        System.out.println(""- "" + f);
    }
    System.out.println(""Feedback analysis completed."");
}",1
"public void createProjectTimeline(String projectName, String[] milestones, String[] deadlines, String[] teamMembers, String projectManager, double budget) {
    System.out.println(""Creating project timeline for: "" + projectName);
    System.out.println(""Project Manager: "" + projectManager);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Milestones and Deadlines:"");
    for (int i = 0; i < milestones.length; i++) {
        System.out.println(milestones[i] + "" - Deadline: "" + deadlines[i]);
    }
    
    System.out.println(""Team Members:"");
    for (String member : teamMembers) {
        System.out.println(""- "" + member);
    }
    System.out.println(""Project timeline created successfully!"");
}",1
"public void generateFinancialReport(String reportName, String[] incomeSources, double[] incomeAmounts, String[] expenseCategories, double[] expenseAmounts, String reportingPeriod, String reportPreparedBy) {
    System.out.println(""Generating financial report: "" + reportName);
    System.out.println(""Reporting Period: "" + reportingPeriod);
    System.out.println(""Prepared By: "" + reportPreparedBy);
    
    double totalIncome = 0;
    System.out.println(""Income Sources:"");
    for (int i = 0; i < incomeSources.length; i++) {
        System.out.println(incomeSources[i] + "" - Amount: $"" + incomeAmounts[i]);
        totalIncome += incomeAmounts[i];
    }
    
    double totalExpenses = 0;
    System.out.println(""Expense Categories:"");
    for (int i = 0; i < expenseCategories.length; i++) {
        System.out.println(expenseCategories[i] + "" - Amount: $"" + expenseAmounts[i]);
        totalExpenses += expenseAmounts[i];
    }
    
    double netIncome = totalIncome - totalExpenses;
    System.out.println(""Net Income: $"" + netIncome);
    System.out.println(""Financial report generated successfully!"");
}",1
"public void handleComplaint(String complaintId, String customerId, String complaintDescription, String dateReceived, String resolutionStatus, String[] resolutionSteps, String assignedTo) {
    System.out.println(""Handling complaint ID: "" + complaintId);
    System.out.println(""Customer ID: "" + customerId);
    System.out.println(""Complaint Description: "" + complaintDescription);
    System.out.println(""Date Received: "" + dateReceived);
    System.out.println(""Resolution Status: "" + resolutionStatus);
    
    System.out.println(""Resolution Steps:"");
    for (String step : resolutionSteps) {
        System.out.println(""- "" + step);
    }
    System.out.println(""Assigned To: "" + assignedTo);
    System.out.println(""Complaint handled successfully!"");
}",1
"public void trackShipment(String shipmentId, String trackingNumber, String origin, String destination, String estimatedDeliveryDate, String currentLocation, String[] statusUpdates) {
    System.out.println(""Tracking shipment ID: "" + shipmentId);
    System.out.println(""Tracking Number: "" + trackingNumber);
    System.out.println(""Origin: "" + origin);
    System.out.println(""Destination: "" + destination);
    System.out.println(""Estimated Delivery Date: "" + estimatedDeliveryDate);
    System.out.println(""Current Location: "" + currentLocation);
    
    System.out.println(""Status Updates:"");
    for (String update : statusUpdates) {
        System.out.println(""- "" + update);
    }
    System.out.println(""Shipment tracking completed."");
}",1
"public void configureServer(String serverName, String ipAddress, int port, String operatingSystem, String[] installedApplications, String adminUser) {
    System.out.println(""Configuring server: "" + serverName);
    System.out.println(""IP Address: "" + ipAddress);
    System.out.println(""Port: "" + port);
    System.out.println(""Operating System: "" + operatingSystem);
    System.out.println(""Admin User: "" + adminUser);
    
    System.out.println(""Installed Applications:"");
    for (String app : installedApplications) {
        System.out.println(""- "" + app);
    }
    System.out.println(""Server configuration completed successfully!"");
}",1
"public void conductSurvey(String surveyTitle, String[] questions, String[] responses, String participantName, String dateConducted, String surveyType) {
    System.out.println(""Conducting survey: "" + surveyTitle);
    System.out.println(""Participant Name: "" + participantName);
    System.out.println(""Date Conducted: "" + dateConducted);
    System.out.println(""Survey Type: "" + surveyType);
    
    System.out.println(""Questions and Responses:"");
    for (int i = 0; i < questions.length; i++) {
        System.out.println(questions[i] + "" - Response: "" + responses[i]);
    }
    System.out.println(""Survey conducted successfully!"");
}",1
"public void createRecipe(String recipeName, String[] ingredients, String[] steps, int preparationTime, int cookingTime, String category) {
    System.out.println(""Creating recipe: "" + recipeName);
    System.out.println(""Category: "" + category);
    System.out.println(""Preparation Time: "" + preparationTime + "" minutes"");
    System.out.println(""Cooking Time: "" + cookingTime + "" minutes"");
    
    System.out.println(""Ingredients:"");
    for (String ingredient : ingredients) {
        System.out.println(""- "" + ingredient);
    }
    
    System.out.println(""Steps:"");
    for (String step : steps) {
        System.out.println(""- "" + step);
    }
    System.out.println(""Recipe created successfully!"");
}",1
"public void developMarketingStrategy(String campaignName, String targetAudience, String[] marketingChannels, String budget, String timeline, String objectives, String[] keyMessages) {
    System.out.println(""Developing marketing strategy for campaign: "" + campaignName);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Budget: "" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Objectives: "" + objectives);
    
    System.out.println(""Marketing Channels:"");
    for (String channel : marketingChannels) {
        System.out.println(""- "" + channel);
    }
    
    System.out.println(""Key Messages:"");
    for (String message : keyMessages) {
        System.out.println(""- "" + message);
    }
    System.out.println(""Marketing strategy developed successfully!"");
}",1
"public void createBusinessPlan(String businessName, String businessModel, String targetMarket, String[] financialProjections, String marketingStrategy, String operationalPlan, String teamMembers) {
    System.out.println(""Creating business plan for: "" + businessName);
    System.out.println(""Business Model: "" + businessModel);
    System.out.println(""Target Market: "" + targetMarket);
    
    System.out.println(""Financial Projections:"");
    for (String projection : financialProjections) {
        System.out.println(""- "" + projection);
    }
    
    System.out.println(""Marketing Strategy: "" + marketingStrategy);
    System.out.println(""Operational Plan: "" + operationalPlan);
    System.out.println(""Team Members: "" + teamMembers);
    System.out.println(""Business plan created successfully!"");
}",1
"public void scheduleMeeting(String meetingTitle, String organizer, String[] participants, String date, String startTime, String endTime, String location, String agenda) {
    System.out.println(""Scheduling meeting: "" + meetingTitle);
    System.out.println(""Organizer: "" + organizer);
    System.out.println(""Date: "" + date);
    System.out.println(""Start Time: "" + startTime);
    System.out.println(""End Time: "" + endTime);
    System.out.println(""Location: "" + location);
    System.out.println(""Agenda: "" + agenda);
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Meeting scheduled successfully!"");
}",1
"public void createEvent(String eventName, String eventDate, String eventTime, String location, String organizer, String[] speakers, String description) {
    System.out.println(""Creating event: "" + eventName);
    System.out.println(""Event Date: "" + eventDate);
    System.out.println(""Event Time: "" + eventTime);
    System.out.println(""Location: "" + location);
    System.out.println(""Organizer: "" + organizer);
    
    System.out.println(""Speakers:"");
    for (String speaker : speakers) {
        System.out.println(""- "" + speaker);
    }
    
    System.out.println(""Description: "" + description);
    System.out.println(""Event created successfully!"");
}",1
"public void handleSupportTicket(String ticketId, String customerName, String issueDescription, String dateOpened, String assignedTo, String status, String[] resolutionSteps) {
    System.out.println(""Handling support ticket ID: "" + ticketId);
    System.out.println(""Customer Name: "" + customerName);
    System.out.println(""Issue Description: "" + issueDescription);
    System.out.println(""Date Opened: "" + dateOpened);
    System.out.println(""Assigned To: "" + assignedTo);
    System.out.println(""Status: "" + status);
    
    System.out.println(""Resolution Steps:"");
    for (String step : resolutionSteps) {
        System.out.println(""- "" + step);
    }
    System.out.println(""Support ticket handled successfully!"");
}",1
"public void submitJobApplication(String applicantName, String email, String phone, String position, String resumePath, String coverLetterPath, String[] references) {
    System.out.println(""Submitting job application for: "" + applicantName);
    System.out.println(""Position: "" + position);
    System.out.println(""Email: "" + email);
    System.out.println(""Phone: "" + phone);
    
    System.out.println(""Resume: "" + resumePath);
    System.out.println(""Cover Letter: "" + coverLetterPath);
    
    System.out.println(""References:"");
    for (String reference : references) {
        System.out.println(""- "" + reference);
    }
    System.out.println(""Job application submitted successfully!"");
}",1
"public void registerWarranty(String productId, String customerName, String purchaseDate, String warrantyPeriod, String[] productDetails, String serialNumber) {
    System.out.println(""Registering warranty for product ID: "" + productId);
    System.out.println(""Customer Name: "" + customerName);
    System.out.println(""Purchase Date: "" + purchaseDate);
    System.out.println(""Warranty Period: "" + warrantyPeriod);
    System.out.println(""Serial Number: "" + serialNumber);
    
    System.out.println(""Product Details:"");
    for (String detail : productDetails) {
        System.out.println(""- "" + detail);
    }
    System.out.println(""Warranty registered successfully!"");
}",1
"public void performWebsiteAudit(String websiteUrl, String[] auditCriteria, String[] recommendations, String auditDate, String auditorName, String reportSummary) {
    System.out.println(""Performing website audit for: "" + websiteUrl);
    System.out.println(""Audit Date: "" + auditDate);
    System.out.println(""Auditor Name: "" + auditorName);
    
    System.out.println(""Audit Criteria:"");
    for (String criterion : auditCriteria) {
        System.out.println(""- "" + criterion);
    }
    
    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }
    
    System.out.println(""Report Summary: "" + reportSummary);
    System.out.println(""Website audit completed successfully!"");
}",1
"public void compileResearchReport(String reportTitle, String authorName, String[] contributors, String[] researchFindings, String conclusion, String[] references, String publicationDate) {
    System.out.println(""Compiling research report: "" + reportTitle);
    System.out.println(""Author: "" + authorName);
    System.out.println(""Publication Date: "" + publicationDate);
    
    System.out.println(""Contributors:"");
    for (String contributor : contributors) {
        System.out.println(""- "" + contributor);
    }
    
    System.out.println(""Research Findings:"");
    for (String finding : researchFindings) {
        System.out.println(""- "" + finding);
    }
    
    System.out.println(""Conclusion: "" + conclusion);
    
    System.out.println(""References:"");
    for (String reference : references) {
        System.out.println(""- "" + reference);
    }
    System.out.println(""Research report compiled successfully!"");
}",1
"public void createTrainingProgram(String programName, String[] modules, String startDate, String endDate, int durationInDays, String trainerName, String location) {
    System.out.println(""Creating training program: "" + programName);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Duration: "" + durationInDays + "" days"");
    System.out.println(""Trainer: "" + trainerName);
    System.out.println(""Location: "" + location);
    
    System.out.println(""Modules:"");
    for (String module : modules) {
        System.out.println(""- "" + module);
    }
    System.out.println(""Training program created successfully!"");
}",1
"public void generateInvoice(String invoiceNumber, String customerName, String[] items, double[] itemPrices, int[] itemQuantities, String invoiceDate, String dueDate) {
    System.out.println(""Generating invoice: "" + invoiceNumber);
    System.out.println(""Customer Name: "" + customerName);
    System.out.println(""Invoice Date: "" + invoiceDate);
    System.out.println(""Due Date: "" + dueDate);
    
    double totalAmount = 0;
    System.out.println(""Invoice Items:"");
    for (int i = 0; i < items.length; i++) {
        double amount = itemPrices[i] * itemQuantities[i];
        totalAmount += amount;
        System.out.println(items[i] + "" - $"" + itemPrices[i] + "" x "" + itemQuantities[i] + "" = $"" + amount);
    }
    
    System.out.println(""Total Amount: $"" + totalAmount);
    System.out.println(""Invoice generated successfully!"");
}",1
"public void setupOnlineCourse(String courseTitle, String instructorName, String startDate, String endDate, String[] syllabus, String platform, int maxParticipants) {
    System.out.println(""Setting up online course: "" + courseTitle);
    System.out.println(""Instructor: "" + instructorName);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Platform: "" + platform);
    System.out.println(""Max Participants: "" + maxParticipants);
    
    System.out.println(""Syllabus:"");
    for (String topic : syllabus) {
        System.out.println(""- "" + topic);
    }
    System.out.println(""Online course set up successfully!"");
}",1
"public void planWedding(String coupleNames, String weddingDate, String venue, String[] guestList, String[] servicesNeeded, String budget, String coordinatorName) {
    System.out.println(""Planning wedding for: "" + coupleNames);
    System.out.println(""Wedding Date: "" + weddingDate);
    System.out.println(""Venue: "" + venue);
    System.out.println(""Budget: "" + budget);
    System.out.println(""Coordinator: "" + coordinatorName);
    
    System.out.println(""Guest List:"");
    for (String guest : guestList) {
        System.out.println(""- "" + guest);
    }
    
    System.out.println(""Services Needed:"");
    for (String service : servicesNeeded) {
        System.out.println(""- "" + service);
    }
    System.out.println(""Wedding planned successfully!"");
}",1
"public void organizeCharityEvent(String eventName, String organizer, String eventDate, String location, String cause, String[] sponsors, String ticketPrice) {
    System.out.println(""Organizing charity event: "" + eventName);
    System.out.println(""Organizer: "" + organizer);
    System.out.println(""Event Date: "" + eventDate);
    System.out.println(""Location: "" + location);
    System.out.println(""Cause: "" + cause);
    System.out.println(""Ticket Price: "" + ticketPrice);
    
    System.out.println(""Sponsors:"");
    for (String sponsor : sponsors) {
        System.out.println(""- "" + sponsor);
    }
    System.out.println(""Charity event organized successfully!"");
}",1
"public void analyzeSalesData(String[] months, double[] salesFigures, String[] regions, int totalSales, double averageSales, String analysisPeriod) {
    System.out.println(""Analyzing sales data for: "" + analysisPeriod);
    
    System.out.println(""Sales Figures:"");
    for (int i = 0; i < months.length; i++) {
        System.out.println(months[i] + "" - $"" + salesFigures[i] + "" in "" + regions[i]);
    }
    
    System.out.println(""Total Sales: "" + totalSales);
    System.out.println(""Average Sales: $"" + averageSales);
    System.out.println(""Sales data analysis completed successfully!"");
}",1
"public void conductPerformanceReview(String employeeName, String reviewPeriod, String reviewerName, String[] strengths, String[] areasForImprovement, String overallRating, String comments) {
    System.out.println(""Conducting performance review for: "" + employeeName);
    System.out.println(""Review Period: "" + reviewPeriod);
    System.out.println(""Reviewer: "" + reviewerName);
    
    System.out.println(""Strengths:"");
    for (String strength : strengths) {
        System.out.println(""- "" + strength);
    }
    
    System.out.println(""Areas for Improvement:"");
    for (String area : areasForImprovement) {
        System.out.println(""- "" + area);
    }
    
    System.out.println(""Overall Rating: "" + overallRating);
    System.out.println(""Comments: "" + comments);
    System.out.println(""Performance review conducted successfully!"");
}",1
"public void createProjectProposal(String projectTitle, String projectDescription, String clientName, String[] projectGoals, String[] deliverables, String budget, String timeline) {
    System.out.println(""Creating project proposal for: "" + projectTitle);
    System.out.println(""Client Name: "" + clientName);
    System.out.println(""Project Description: "" + projectDescription);
    System.out.println(""Budget: "" + budget);
    System.out.println(""Timeline: "" + timeline);
    
    System.out.println(""Project Goals:"");
    for (String goal : projectGoals) {
        System.out.println(""- "" + goal);
    }
    
    System.out.println(""Deliverables:"");
    for (String deliverable : deliverables) {
        System.out.println(""- "" + deliverable);
    }
    System.out.println(""Project proposal created successfully!"");
}",1
"public void runMarketingCampaign(String campaignName, String targetAudience, String[] platforms, String budget, String duration, String[] keyMessages, String[] expectedOutcomes) {
    System.out.println(""Running marketing campaign: "" + campaignName);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Budget: "" + budget);
    System.out.println(""Duration: "" + duration);
    
    System.out.println(""Platforms:"");
    for (String platform : platforms) {
        System.out.println(""- "" + platform);
    }
    
    System.out.println(""Key Messages:"");
    for (String message : keyMessages) {
        System.out.println(""- "" + message);
    }
    
    System.out.println(""Expected Outcomes:"");
    for (String outcome : expectedOutcomes) {
        System.out.println(""- "" + outcome);
    }
    System.out.println(""Marketing campaign run successfully!"");
}",1
"public void performRiskAssessment(String projectName, String[] riskFactors, String[] mitigationStrategies, String assessmentDate, String assessorName, String riskLevel) {
    System.out.println(""Performing risk assessment for: "" + projectName);
    System.out.println(""Assessment Date: "" + assessmentDate);
    System.out.println(""Assessor: "" + assessorName);
    System.out.println(""Risk Level: "" + riskLevel);
    
    System.out.println(""Risk Factors:"");
    for (String factor : riskFactors) {
        System.out.println(""- "" + factor);
    }
    
    System.out.println(""Mitigation Strategies:"");
    for (String strategy : mitigationStrategies) {
        System.out.println(""- "" + strategy);
    }
    System.out.println(""Risk assessment performed successfully!"");
}",1
"public void developSoftwareFeature(String featureName, String[] requirements, String[] stakeholders, String timeline, String resourcesNeeded, String teamMembers, String priority) {
    System.out.println(""Developing software feature: "" + featureName);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Resources Needed: "" + resourcesNeeded);
    System.out.println(""Priority: "" + priority);
    
    System.out.println(""Requirements:"");
    for (String requirement : requirements) {
        System.out.println(""- "" + requirement);
    }
    
    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }
    
    System.out.println(""Team Members:"");
    for (String member : teamMembers) {
        System.out.println(""- "" + member);
    }
    System.out.println(""Software feature developed successfully!"");
}",1
"public void manageInventory(String[] itemNames, int[] itemQuantities, String[] suppliers, String[] locations, String[] reorderLevels, String lastUpdated) {
    System.out.println(""Managing inventory..."");
    System.out.println(""Last Updated: "" + lastUpdated);
    
    System.out.println(""Inventory Items:"");
    for (int i = 0; i < itemNames.length; i++) {
        System.out.println(itemNames[i] + "" - Quantity: "" + itemQuantities[i] + "", Supplier: "" + suppliers[i] + "", Location: "" + locations[i] + "", Reorder Level: "" + reorderLevels[i]);
    }
    System.out.println(""Inventory managed successfully!"");
}",1
"public void createOutreachProgram(String programName, String targetCommunity, String[] activities, String budget, String duration, String[] partners, String programGoals) {
    System.out.println(""Creating outreach program: "" + programName);
    System.out.println(""Target Community: "" + targetCommunity);
    System.out.println(""Budget: "" + budget);
    System.out.println(""Duration: "" + duration);
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Partners:"");
    for (String partner : partners) {
        System.out.println(""- "" + partner);
    }
    
    System.out.println(""Program Goals: "" + programGoals);
    System.out.println(""Outreach program created successfully!"");
}",1
"public void generateDepartmentReport(String departmentName, String startDate, String endDate, String[] metrics, String[] responsiblePersons, String reportFormat, String reportTitle) {
    System.out.println(""Generating report for department: "" + departmentName);
    System.out.println(""Report Title: "" + reportTitle);
    System.out.println(""Period: "" + startDate + "" to "" + endDate);
    System.out.println(""Report Format: "" + reportFormat);
    
    System.out.println(""Metrics:"");
    for (String metric : metrics) {
        System.out.println(""- "" + metric);
    }
    
    System.out.println(""Responsible Persons:"");
    for (String person : responsiblePersons) {
        System.out.println(""- "" + person);
    }
    
    // Simulate report generation
    System.out.println(""Generating report..."");
    System.out.println(""Report generated successfully for "" + departmentName + ""!"");
}",1
"public void configureProduct(String productId, String productName, String[] categories, double price, String description, String[] features, String[] tags) {
    System.out.println(""Configuring product: "" + productName);
    System.out.println(""Product ID: "" + productId);
    System.out.println(""Price: $"" + price);
    System.out.println(""Description: "" + description);
    
    System.out.println(""Categories:"");
    for (String category : categories) {
        System.out.println(""- "" + category);
    }
    
    System.out.println(""Features:"");
    for (String feature : features) {
        System.out.println(""- "" + feature);
    }
    
    System.out.println(""Tags:"");
    for (String tag : tags) {
        System.out.println(""- "" + tag);
    }
    System.out.println(""Product configured successfully!"");
}",1
"public void logWorkHours(String employeeId, String date, String startTime, String endTime, String projectName, String taskDescription, String[] comments) {
    System.out.println(""Logging work hours for Employee ID: "" + employeeId);
    System.out.println(""Date: "" + date);
    System.out.println(""Start Time: "" + startTime);
    System.out.println(""End Time: "" + endTime);
    System.out.println(""Project: "" + projectName);
    System.out.println(""Task Description: "" + taskDescription);
    
    System.out.println(""Comments:"");
    for (String comment : comments) {
        System.out.println(""- "" + comment);
    }
    System.out.println(""Work hours logged successfully!"");
}",1
"public void createTravelItinerary(String travelerName, String destination, String startDate, String endDate, String[] activities, String accommodation, String transportationMode, String[] travelCompanions) {
    System.out.println(""Creating travel itinerary for: "" + travelerName);
    System.out.println(""Destination: "" + destination);
    System.out.println(""Travel Dates: "" + startDate + "" to "" + endDate);
    System.out.println(""Accommodation: "" + accommodation);
    System.out.println(""Transportation Mode: "" + transportationMode);
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Travel Companions:"");
    for (String companion : travelCompanions) {
        System.out.println(""- "" + companion);
    }
    System.out.println(""Travel itinerary created successfully!"");
}",1
"public void analyzeCustomerFeedback(String productId, String[] feedbacks, String[] customerNames, String analysisDate, String[] commonIssues, String[] suggestions, String overallSatisfaction) {
    System.out.println(""Analyzing customer feedback for Product ID: "" + productId);
    System.out.println(""Analysis Date: "" + analysisDate);
    
    System.out.println(""Customer Feedbacks:"");
    for (String feedback : feedbacks) {
        System.out.println(""- "" + feedback);
    }
    
    System.out.println(""Customer Names:"");
    for (String name : customerNames) {
        System.out.println(""- "" + name);
    }
    
    System.out.println(""Common Issues:"");
    for (String issue : commonIssues) {
        System.out.println(""- "" + issue);
    }
    
    System.out.println(""Suggestions:"");
    for (String suggestion : suggestions) {
        System.out.println(""- "" + suggestion);
    }
    
    System.out.println(""Overall Satisfaction: "" + overallSatisfaction);
    System.out.println(""Customer feedback analyzed successfully!"");
}",1
"public void processLoanApplication(String applicantName, String applicationId, double loanAmount, String loanPurpose, String employmentStatus, int creditScore, String[] requiredDocuments, String applicationDate) {
    System.out.println(""Processing loan application for: "" + applicantName);
    System.out.println(""Application ID: "" + applicationId);
    System.out.println(""Loan Amount: $"" + loanAmount);
    System.out.println(""Loan Purpose: "" + loanPurpose);
    System.out.println(""Employment Status: "" + employmentStatus);
    System.out.println(""Credit Score: "" + creditScore);
    System.out.println(""Application Date: "" + applicationDate);
    
    System.out.println(""Required Documents:"");
    for (String document : requiredDocuments) {
        System.out.println(""- "" + document);
    }
    
    // Simulate processing
    System.out.println(""Processing loan application..."");
    System.out.println(""Loan application processed successfully!"");
}",1
"public void evaluateBusinessProposal(String proposalTitle, String companyName, String proposedAmount, String[] keyPoints, String[] benefits, String[] risks, String evaluationDate) {
    System.out.println(""Evaluating business proposal: "" + proposalTitle);
    System.out.println(""Company Name: "" + companyName);
    System.out.println(""Proposed Amount: "" + proposedAmount);
    System.out.println(""Evaluation Date: "" + evaluationDate);
    
    System.out.println(""Key Points:"");
    for (String point : keyPoints) {
        System.out.println(""- "" + point);
    }
    
    System.out.println(""Benefits:"");
    for (String benefit : benefits) {
        System.out.println(""- "" + benefit);
    }
    
    System.out.println(""Risks:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }
    System.out.println(""Business proposal evaluated successfully!"");
}",1
"public void createMarketingStrategy(String businessName, String targetAudience, String[] marketingChannels, String budget, String timeline, String[] keyMetrics, String[] marketingGoals) {
    System.out.println(""Creating marketing strategy for: "" + businessName);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Budget: "" + budget);
    System.out.println(""Timeline: "" + timeline);
    
    System.out.println(""Marketing Channels:"");
    for (String channel : marketingChannels) {
        System.out.println(""- "" + channel);
    }
    
    System.out.println(""Key Metrics:"");
    for (String metric : keyMetrics) {
        System.out.println(""- "" + metric);
    }
    
    System.out.println(""Marketing Goals:"");
    for (String goal : marketingGoals) {
        System.out.println(""- "" + goal);
    }
    System.out.println(""Digital marketing strategy created successfully!"");
}",1
"public void organizeConference(String conferenceName, String date, String location, String[] speakers, String[] topics, String[] attendees, String budget) {
    System.out.println(""Organizing conference: "" + conferenceName);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Budget: "" + budget);
    
    System.out.println(""Speakers:"");
    for (String speaker : speakers) {
        System.out.println(""- "" + speaker);
    }
    
    System.out.println(""Topics:"");
    for (String topic : topics) {
        System.out.println(""- "" + topic);
    }
    
    System.out.println(""Attendees:"");
    for (String attendee : attendees) {
        System.out.println(""- "" + attendee);
    }
    System.out.println(""Conference organized successfully!"");
}",1
"public void registerUser(String username, String email, String password, String phoneNumber, String[] interests, String registrationDate, String referralCode) {
    System.out.println(""Registering user: "" + username);
    System.out.println(""Email: "" + email);
    System.out.println(""Phone Number: "" + phoneNumber);
    System.out.println(""Registration Date: "" + registrationDate);
    
    System.out.println(""Interests:"");
    for (String interest : interests) {
        System.out.println(""- "" + interest);
    }
    
    if (referralCode != null && !referralCode.isEmpty()) {
        System.out.println(""Referral Code: "" + referralCode);
    } else {
        System.out.println(""No referral code provided."");
    }
    
    System.out.println(""User registered successfully!"");
}",1
"public void manageLibrary(String libraryName, String[] bookTitles, String[] authors, String[] genres, int totalBooks, String[] memberNames, String address) {
    System.out.println(""Managing library: "" + libraryName);
    System.out.println(""Total Books: "" + totalBooks);
    System.out.println(""Address: "" + address);
    
    System.out.println(""Books:"");
    for (int i = 0; i < bookTitles.length; i++) {
        System.out.println(bookTitles[i] + "" by "" + authors[i] + "" [Genre: "" + genres[i] + ""]"");
    }
    
    System.out.println(""Members:"");
    for (String member : memberNames) {
        System.out.println(""- "" + member);
    }
    System.out.println(""Library managed successfully!"");
}",1
"public void createFitnessPlan(String userName, String goal, String[] workoutTypes, String[] mealPlans, String startDate, String duration, String[] progressMetrics) {
    System.out.println(""Creating fitness plan for: "" + userName);
    System.out.println(""Goal: "" + goal);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""Duration: "" + duration);
    
    System.out.println(""Workout Types:"");
    for (String workout : workoutTypes) {
        System.out.println(""- "" + workout);
    }
    
    System.out.println(""Meal Plans:"");
    for (String meal : mealPlans) {
        System.out.println(""- "" + meal);
    }
    
    System.out.println(""Progress Metrics:"");
    for (String metric : progressMetrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Fitness plan created successfully!"");
}",1
"public void manageCustomerOrders(String orderId, String customerName, String orderDate, String[] productIds, int[] quantities, String status, String deliveryDate) {
    System.out.println(""Managing customer order: "" + orderId);
    System.out.println(""Customer Name: "" + customerName);
    System.out.println(""Order Date: "" + orderDate);
    System.out.println(""Status: "" + status);
    System.out.println(""Delivery Date: "" + deliveryDate);
    
    System.out.println(""Ordered Products:"");
    for (int i = 0; i < productIds.length; i++) {
        System.out.println(""Product ID: "" + productIds[i] + "", Quantity: "" + quantities[i]);
    }
    System.out.println(""Customer order managed successfully!"");
}",1
"public void conductWorkshop(String workshopTitle, String[] speakers, String date, String location, String[] participants, String workshopGoal, String[] materials) {
    System.out.println(""Conducting workshop: "" + workshopTitle);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Workshop Goal: "" + workshopGoal);
    
    System.out.println(""Speakers:"");
    for (String speaker : speakers) {
        System.out.println(""- "" + speaker);
    }
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Materials:"");
    for (String material : materials) {
        System.out.println(""- "" + material);
    }
    System.out.println(""Workshop conducted successfully!"");
}",1
"public void conductSurvey(String surveyTitle, String[] questions, String[] participants, String surveyDate, String[] responseFormats, String[] feedback) {
    System.out.println(""Conducting survey: "" + surveyTitle);
    System.out.println(""Survey Date: "" + surveyDate);
    
    System.out.println(""Questions:"");
    for (String question : questions) {
        System.out.println(""- "" + question);
    }
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Response Formats:"");
    for (String format : responseFormats) {
        System.out.println(""- "" + format);
    }
    
    System.out.println(""Feedback:"");
    for (String fb : feedback) {
        System.out.println(""- "" + fb);
    }
    System.out.println(""Survey conducted successfully!"");
}",1
"public void conductTrainingSession(String sessionTitle, String[] trainers, String date, String[] participants, String[] topics, String duration, String[] materials) {
    System.out.println(""Conducting training session: "" + sessionTitle);
    System.out.println(""Date: "" + date);
    System.out.println(""Duration: "" + duration);
    
    System.out.println(""Trainers:"");
    for (String trainer : trainers) {
        System.out.println(""- "" + trainer);
    }
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Topics:"");
    for (String topic : topics) {
        System.out.println(""- "" + topic);
    }
    
    System.out.println(""Materials:"");
    for (String material : materials) {
        System.out.println(""- "" + material);
    }
    System.out.println(""Training session conducted successfully!"");
}",1
"public void conductMarketResearch(String researchTitle, String targetMarket, String[] researchMethods, String[] questions, String analysisDate, String[] insights, String[] recommendations) {
    System.out.println(""Conducting market research: "" + researchTitle);
    System.out.println(""Target Market: "" + targetMarket);
    System.out.println(""Analysis Date: "" + analysisDate);
    
    System.out.println(""Research Methods:"");
    for (String method : researchMethods) {
        System.out.println(""- "" + method);
    }
    
    System.out.println(""Questions:"");
    for (String question : questions) {
        System.out.println(""- "" + question);
    }
    
    System.out.println(""Insights:"");
    for (String insight : insights) {
        System.out.println(""- "" + insight);
    }
    
    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }
    System.out.println(""Market research conducted successfully!"");
}",1
"public void setupOnlineCourse(String courseTitle, String instructorName, String[] modules, String startDate, String endDate, String[] prerequisites, String coursePlatform) {
    System.out.println(""Setting up online course: "" + courseTitle);
    System.out.println(""Instructor: "" + instructorName);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Course Platform: "" + coursePlatform);
    
    System.out.println(""Modules:"");
    for (String module : modules) {
        System.out.println(""- "" + module);
    }
    
    System.out.println(""Prerequisites:"");
    for (String prerequisite : prerequisites) {
        System.out.println(""- "" + prerequisite);
    }
    System.out.println(""Online course set up successfully!"");
}",1
"public void manageProject(String projectName, String projectId, String[] teamMembers, String projectManager, String deadline, String[] tasks, String projectStatus) {
    System.out.println(""Managing project: "" + projectName);
    System.out.println(""Project ID: "" + projectId);
    System.out.println(""Project Manager: "" + projectManager);
    System.out.println(""Deadline: "" + deadline);
    System.out.println(""Status: "" + projectStatus);
    
    System.out.println(""Team Members:"");
    for (String member : teamMembers) {
        System.out.println(""- "" + member);
    }
    
    System.out.println(""Tasks:"");
    for (String task : tasks) {
        System.out.println(""- "" + task);
    }
    System.out.println(""Project managed successfully!"");
}",1
"public void organizeCharityEvent(String eventName, String eventDate, String location, String[] sponsors, String[] activities, String targetAmount, String[] volunteers) {
    System.out.println(""Organizing charity event: "" + eventName);
    System.out.println(""Event Date: "" + eventDate);
    System.out.println(""Location: "" + location);
    System.out.println(""Target Amount: "" + targetAmount);
    
    System.out.println(""Sponsors:"");
    for (String sponsor : sponsors) {
        System.out.println(""- "" + sponsor);
    }
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Volunteers:"");
    for (String volunteer : volunteers) {
        System.out.println(""- "" + volunteer);
    }
    System.out.println(""Charity event organized successfully!"");
}",1
"public void registerStudent(String studentId, String name, String email, String phoneNumber, String address, String[] courses) {
    System.out.println(""Registering student: "" + name);
    System.out.println(""Student ID: "" + studentId);
    System.out.println(""Email: "" + email);
    System.out.println(""Phone Number: "" + phoneNumber);
    System.out.println(""Address: "" + address);
    
    System.out.println(""Courses enrolled:"");
    for (String course : courses) {
        System.out.println(""- "" + course);
    }
    System.out.println(""Student registered successfully!"");
}",1
"public void createProductListing(String productId, String productName, String category, double price, String[] tags, String description, int stockQuantity) {
    System.out.println(""Creating product listing: "" + productName);
    System.out.println(""Product ID: "" + productId);
    System.out.println(""Category: "" + category);
    System.out.println(""Price: $"" + price);
    System.out.println(""Stock Quantity: "" + stockQuantity);
    System.out.println(""Description: "" + description);
    
    System.out.println(""Tags:"");
    for (String tag : tags) {
        System.out.println(""- "" + tag);
    }
    System.out.println(""Product listing created successfully!"");
}",1
"public void scheduleMeeting(String meetingId, String agenda, String date, String startTime, String endTime, String location, String[] attendees) {
    System.out.println(""Scheduling meeting: "" + agenda);
    System.out.println(""Meeting ID: "" + meetingId);
    System.out.println(""Date: "" + date);
    System.out.println(""Time: "" + startTime + "" - "" + endTime);
    System.out.println(""Location: "" + location);
    
    System.out.println(""Attendees:"");
    for (String attendee : attendees) {
        System.out.println(""- "" + attendee);
    }
    System.out.println(""Meeting scheduled successfully!"");
}",1
"public void generateReport(String reportId, String title, String[] sections, String author, String dateCreated, String[] metrics, String summary) {
    System.out.println(""Generating report: "" + title);
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Author: "" + author);
    System.out.println(""Date Created: "" + dateCreated);
    System.out.println(""Summary: "" + summary);
    
    System.out.println(""Sections:"");
    for (String section : sections) {
        System.out.println(""- "" + section);
    }
    
    System.out.println(""Metrics:"");
    for (String metric : metrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Report generated successfully!"");
}",1
"public void manageUserAccount(String userId, String username, String email, String phoneNumber, String role, String status, String[] permissions) {
    System.out.println(""Managing user account: "" + username);
    System.out.println(""User ID: "" + userId);
    System.out.println(""Email: "" + email);
    System.out.println(""Phone Number: "" + phoneNumber);
    System.out.println(""Role: "" + role);
    System.out.println(""Status: "" + status);
    
    System.out.println(""Permissions:"");
    for (String permission : permissions) {
        System.out.println(""- "" + permission);
    }
    System.out.println(""User account managed successfully!"");
}",1
"public void analyzeCustomerFeedback(String feedbackId, String customerName, String date, String[] comments, String rating, String[] improvementSuggestions) {
    System.out.println(""Analyzing customer feedback from: "" + customerName);
    System.out.println(""Feedback ID: "" + feedbackId);
    System.out.println(""Date: "" + date);
    System.out.println(""Rating: "" + rating);
    
    System.out.println(""Comments:"");
    for (String comment : comments) {
        System.out.println(""- "" + comment);
    }
    
    System.out.println(""Improvement Suggestions:"");
    for (String suggestion : improvementSuggestions) {
        System.out.println(""- "" + suggestion);
    }
    System.out.println(""Customer feedback analyzed successfully!"");
}",1
"public void processOnlineOrder(String orderId, String customerId, String orderDate, String[] productIds, int[] quantities, String shippingAddress, String paymentMethod, String orderStatus) {
    System.out.println(""Processing order: "" + orderId);
    System.out.println(""Customer ID: "" + customerId);
    System.out.println(""Order Date: "" + orderDate);
    System.out.println(""Shipping Address: "" + shippingAddress);
    System.out.println(""Payment Method: "" + paymentMethod);
    System.out.println(""Order Status: "" + orderStatus);
    
    System.out.println(""Ordered Products:"");
    for (int i = 0; i < productIds.length; i++) {
        System.out.println(""Product ID: "" + productIds[i] + "", Quantity: "" + quantities[i]);
    }
    System.out.println(""Order processed successfully!"");
}",1
"public void conductPerformanceReview(String employeeId, String reviewer, String reviewDate, String[] performanceMetrics, String[] comments, String overallRating, String developmentGoals) {
    System.out.println(""Conducting performance review for Employee ID: "" + employeeId);
    System.out.println(""Reviewer: "" + reviewer);
    System.out.println(""Review Date: "" + reviewDate);
    
    System.out.println(""Performance Metrics:"");
    for (String metric : performanceMetrics) {
        System.out.println(""- "" + metric);
    }
    
    System.out.println(""Comments:"");
    for (String comment : comments) {
        System.out.println(""- "" + comment);
    }
    
    System.out.println(""Overall Rating: "" + overallRating);
    System.out.println(""Development Goals: "" + developmentGoals);
    System.out.println(""Performance review conducted successfully!"");
}",1
"public void createTravelItinerary(String itineraryId, String travelerName, String startDate, String endDate, String[] destinations, String[] activities, String[] accommodations) {
    System.out.println(""Creating travel itinerary for: "" + travelerName);
    System.out.println(""Itinerary ID: "" + itineraryId);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    
    System.out.println(""Destinations:"");
    for (String destination : destinations) {
        System.out.println(""- "" + destination);
    }
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Accommodations:"");
    for (String accommodation : accommodations) {
        System.out.println(""- "" + accommodation);
    }
    System.out.println(""Travel itinerary created successfully!"");
}",1
"public void manageProjectBudget(String projectId, String projectName, double initialBudget, double[] expenseList, String[] expenseDescriptions, String deadline, String budgetStatus) {
    System.out.println(""Managing budget for project: "" + projectName);
    System.out.println(""Project ID: "" + projectId);
    System.out.println(""Initial Budget: $"" + initialBudget);
    System.out.println(""Deadline: "" + deadline);
    System.out.println(""Budget Status: "" + budgetStatus);
    
    double totalExpenses = 0;
    System.out.println(""Expense List:"");
    for (int i = 0; i < expenseList.length; i++) {
        totalExpenses += expenseList[i];
        System.out.println(""Expense: "" + expenseDescriptions[i] + "" - Amount: $"" + expenseList[i]);
    }
    System.out.println(""Total Expenses: $"" + totalExpenses);
    System.out.println(""Remaining Budget: $"" + (initialBudget - totalExpenses));
    System.out.println(""Project budget managed successfully!"");
}",1
"public void organizeSportsEvent(String eventName, String eventDate, String location, String[] participatingTeams, String[] activities, String[] sponsors, String[] volunteers) {
    System.out.println(""Organizing sports event: "" + eventName);
    System.out.println(""Event Date: "" + eventDate);
    System.out.println(""Location: "" + location);
    
    System.out.println(""Participating Teams:"");
    for (String team : participatingTeams) {
        System.out.println(""- "" + team);
    }
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Sponsors:"");
    for (String sponsor : sponsors) {
        System.out.println(""- "" + sponsor);
    }
    
    System.out.println(""Volunteers:"");
    for (String volunteer : volunteers) {
        System.out.println(""- "" + volunteer);
    }
    System.out.println(""Sports event organized successfully!"");
}",1
"public void trackShipment(String trackingNumber, String carrier, String origin, String destination, String[] shipmentUpdates, String estimatedDeliveryDate, String currentStatus) {
    System.out.println(""Tracking shipment: "" + trackingNumber);
    System.out.println(""Carrier: "" + carrier);
    System.out.println(""Origin: "" + origin);
    System.out.println(""Destination: "" + destination);
    System.out.println(""Estimated Delivery Date: "" + estimatedDeliveryDate);
    System.out.println(""Current Status: "" + currentStatus);
    
    System.out.println(""Shipment Updates:"");
    for (String update : shipmentUpdates) {
        System.out.println(""- "" + update);
    }
    System.out.println(""Shipment tracked successfully!"");
}",1
"public void createOnlineCourse(String courseId, String courseName, String instructor, String startDate, String endDate, String[] topics, String[] resources, String[] prerequisites) {
    System.out.println(""Creating online course: "" + courseName);
    System.out.println(""Course ID: "" + courseId);
    System.out.println(""Instructor: "" + instructor);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    
    System.out.println(""Topics:"");
    for (String topic : topics) {
        System.out.println(""- "" + topic);
    }
    
    System.out.println(""Resources:"");
    for (String resource : resources) {
        System.out.println(""- "" + resource);
    }
    
    System.out.println(""Prerequisites:"");
    for (String prerequisite : prerequisites) {
        System.out.println(""- "" + prerequisite);
    }
    System.out.println(""Online course created successfully!"");
}",1
"public void sendNewsletter(String newsletterId, String subject, String[] recipientEmails, String content, String[] attachments, String sendDate) {
    System.out.println(""Sending newsletter: "" + subject);
    System.out.println(""Newsletter ID: "" + newsletterId);
    System.out.println(""Send Date: "" + sendDate);
    
    System.out.println(""Content:"");
    System.out.println(content);
    
    System.out.println(""Recipients:"");
    for (String email : recipientEmails) {
        System.out.println(""- "" + email);
    }
    
    System.out.println(""Attachments:"");
    for (String attachment : attachments) {
        System.out.println(""- "" + attachment);
    }
    System.out.println(""Newsletter sent successfully!"");
}",1
"public void bookHotelRoom(String bookingId, String hotelName, String guestName, String checkInDate, String checkOutDate, String roomType, String paymentMethod, String specialRequests) {
    System.out.println(""Booking hotel room at: "" + hotelName);
    System.out.println(""Booking ID: "" + bookingId);
    System.out.println(""Guest Name: "" + guestName);
    System.out.println(""Check-In Date: "" + checkInDate);
    System.out.println(""Check-Out Date: "" + checkOutDate);
    System.out.println(""Room Type: "" + roomType);
    System.out.println(""Payment Method: "" + paymentMethod);
    System.out.println(""Special Requests: "" + specialRequests);
    System.out.println(""Hotel room booked successfully!"");
}",1
"public void evaluateSoftwareApplication(String appId, String appName, String version, String[] evaluationCriteria, String[] feedback, String overallRating, String recommendations) {
    System.out.println(""Evaluating software application: "" + appName);
    System.out.println(""Application ID: "" + appId);
    System.out.println(""Version: "" + version);
    
    System.out.println(""Evaluation Criteria:"");
    for (String criteria : evaluationCriteria) {
        System.out.println(""- "" + criteria);
    }
    
    System.out.println(""Feedback:"");
    for (String comment : feedback) {
        System.out.println(""- "" + comment);
    }
    
    System.out.println(""Overall Rating: "" + overallRating);
    System.out.println(""Recommendations: "" + recommendations);
    System.out.println(""Software application evaluated successfully!"");
}",1
"public void handleCustomerSupportRequest(String requestId, String customerName, String issueDescription, String[] relatedOrders, String supportAgent, String priorityLevel, String resolutionStatus) {
    System.out.println(""Handling customer support request from: "" + customerName);
    System.out.println(""Request ID: "" + requestId);
    System.out.println(""Issue Description: "" + issueDescription);
    System.out.println(""Priority Level: "" + priorityLevel);
    System.out.println(""Resolution Status: "" + resolutionStatus);
    
    System.out.println(""Related Orders:"");
    for (String order : relatedOrders) {
        System.out.println(""- "" + order);
    }
    
    System.out.println(""Support Agent: "" + supportAgent);
    System.out.println(""Customer support request handled successfully!"");
}",1
"public void createBlogPost(String postId, String title, String author, String content, String[] tags, String publishDate, String status) {
    System.out.println(""Creating blog post: "" + title);
    System.out.println(""Post ID: "" + postId);
    System.out.println(""Author: "" + author);
    System.out.println(""Publish Date: "" + publishDate);
    System.out.println(""Status: "" + status);
    
    System.out.println(""Content:"");
    System.out.println(content);
    
    System.out.println(""Tags:"");
    for (String tag : tags) {
        System.out.println(""- "" + tag);
    }
    System.out.println(""Blog post created successfully!"");
}",1
"public void configureNetworkDevice(String deviceId, String deviceType, String ipAddress, String subnetMask, String gateway, String[] dnsServers, String[] accessControlList) {
    System.out.println(""Configuring network device: "" + deviceType);
    System.out.println(""Device ID: "" + deviceId);
    System.out.println(""IP Address: "" + ipAddress);
    System.out.println(""Subnet Mask: "" + subnetMask);
    System.out.println(""Gateway: "" + gateway);
    
    System.out.println(""DNS Servers:"");
    for (String dns : dnsServers) {
        System.out.println(""- "" + dns);
    }
    
    System.out.println(""Access Control List:"");
    for (String acl : accessControlList) {
        System.out.println(""- "" + acl);
    }
    System.out.println(""Network device configured successfully!"");
}",1
"public void analyzeSalesData(String analysisId, String timePeriod, String[] salesRegions, double[] salesFigures, String[] products, String analysisType, String reportSummary) {
    System.out.println(""Analyzing sales data for time period: "" + timePeriod);
    System.out.println(""Analysis ID: "" + analysisId);
    
    System.out.println(""Sales Regions:"");
    for (String region : salesRegions) {
        System.out.println(""- "" + region);
    }
    
    System.out.println(""Sales Figures:"");
    for (double figure : salesFigures) {
        System.out.println(""- $"" + figure);
    }
    
    System.out.println(""Products:"");
    for (String product : products) {
        System.out.println(""- "" + product);
    }
    
    System.out.println(""Analysis Type: "" + analysisType);
    System.out.println(""Report Summary: "" + reportSummary);
    System.out.println(""Sales data analyzed successfully!"");
}",1
"public void conductMarketSurvey(String surveyId, String targetAudience, String[] questions, String[] responses, String surveyDate, String summary) {
    System.out.println(""Conducting market survey targeting: "" + targetAudience);
    System.out.println(""Survey ID: "" + surveyId);
    System.out.println(""Survey Date: "" + surveyDate);
    
    System.out.println(""Questions:"");
    for (String question : questions) {
        System.out.println(""- "" + question);
    }
    
    System.out.println(""Responses:"");
    for (String response : responses) {
        System.out.println(""- "" + response);
    }
    System.out.println(""Survey summary: "" + summary);
    System.out.println(""Market survey conducted successfully!"");
}",1
"public void scheduleConference(String conferenceId, String title, String date, String location, String[] speakers, String[] attendees, String agenda) {
    System.out.println(""Scheduling conference: "" + title);
    System.out.println(""Conference ID: "" + conferenceId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    
    System.out.println(""Speakers:"");
    for (String speaker : speakers) {
        System.out.println(""- "" + speaker);
    }
    
    System.out.println(""Attendees:"");
    for (String attendee : attendees) {
        System.out.println(""- "" + attendee);
    }
    
    System.out.println(""Agenda: "" + agenda);
    System.out.println(""Conference scheduled successfully!"");
}",1
"public void registerVehicle(String vehicleId, String ownerName, String vehicleType, String model, String year, String color, String registrationNumber) {
    System.out.println(""Registering vehicle: "" + model);
    System.out.println(""Vehicle ID: "" + vehicleId);
    System.out.println(""Owner Name: "" + ownerName);
    System.out.println(""Vehicle Type: "" + vehicleType);
    System.out.println(""Model: "" + model);
    System.out.println(""Year: "" + year);
    System.out.println(""Color: "" + color);
    System.out.println(""Registration Number: "" + registrationNumber);
    System.out.println(""Vehicle registered successfully!"");
}",1
"public void planWedding(String weddingId, String coupleNames, String weddingDate, String venue, String[] guests, String[] vendors, String theme) {
    System.out.println(""Planning wedding for: "" + coupleNames);
    System.out.println(""Wedding ID: "" + weddingId);
    System.out.println(""Wedding Date: "" + weddingDate);
    System.out.println(""Venue: "" + venue);
    
    System.out.println(""Guests:"");
    for (String guest : guests) {
        System.out.println(""- "" + guest);
    }
    
    System.out.println(""Vendors:"");
    for (String vendor : vendors) {
        System.out.println(""- "" + vendor);
    }
    
    System.out.println(""Theme: "" + theme);
    System.out.println(""Wedding planned successfully!"");
}",1
"public void createFitnessProgram(String programId, String programName, String trainerName, String[] exercises, String duration, String[] mealPlans, String goals) {
    System.out.println(""Creating fitness program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Trainer Name: "" + trainerName);
    System.out.println(""Duration: "" + duration);
    
    System.out.println(""Exercises:"");
    for (String exercise : exercises) {
        System.out.println(""- "" + exercise);
    }
    
    System.out.println(""Meal Plans:"");
    for (String meal : mealPlans) {
        System.out.println(""- "" + meal);
    }
    
    System.out.println(""Goals: "" + goals);
    System.out.println(""Fitness program created successfully!"");
}",1
"public void evaluateEmployeePerformance(String employeeId, String employeeName, String reviewPeriod, String[] performanceCriteria, String overallRating, String feedback) {
    System.out.println(""Evaluating performance for: "" + employeeName);
    System.out.println(""Employee ID: "" + employeeId);
    System.out.println(""Review Period: "" + reviewPeriod);
    
    System.out.println(""Performance Criteria:"");
    for (String criteria : performanceCriteria) {
        System.out.println(""- "" + criteria);
    }
    
    System.out.println(""Overall Rating: "" + overallRating);
    System.out.println(""Feedback: "" + feedback);
    System.out.println(""Employee performance evaluated successfully!"");
}",1
"public void designMarketingCampaign(String campaignId, String campaignName, String targetAudience, String[] marketingChannels, String budget, String timeline, String objectives) {
    System.out.println(""Designing marketing campaign: "" + campaignName);
    System.out.println(""Campaign ID: "" + campaignId);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Budget: "" + budget);
    System.out.println(""Timeline: "" + timeline);
    
    System.out.println(""Marketing Channels:"");
    for (String channel : marketingChannels) {
        System.out.println(""- "" + channel);
    }
    
    System.out.println(""Objectives: "" + objectives);
    System.out.println(""Marketing campaign designed successfully!"");
}",1
"public void hostCharityEvent(String eventId, String eventName, String date, String location, String[] sponsors, String[] beneficiaries, String agenda) {
    System.out.println(""Hosting charity event: "" + eventName);
    System.out.println(""Event ID: "" + eventId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    
    System.out.println(""Sponsors:"");
    for (String sponsor : sponsors) {
        System.out.println(""- "" + sponsor);
    }
    
    System.out.println(""Beneficiaries:"");
    for (String beneficiary : beneficiaries) {
        System.out.println(""- "" + beneficiary);
    }
    
    System.out.println(""Agenda: "" + agenda);
    System.out.println(""Charity event hosted successfully!"");
}",1
"public void organizeConcert(String concertId, String title, String date, String location, String[] performers, String[] ticketTypes, String ticketSalesStart) {
    System.out.println(""Organizing concert: "" + title);
    System.out.println(""Concert ID: "" + concertId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    
    System.out.println(""Performers:"");
    for (String performer : performers) {
        System.out.println(""- "" + performer);
    }
    
    System.out.println(""Ticket Types:"");
    for (String ticket : ticketTypes) {
        System.out.println(""- "" + ticket);
    }
    
    System.out.println(""Ticket Sales Start: "" + ticketSalesStart);
    System.out.println(""Concert organized successfully!"");
}",1
"public void implementLoyaltyProgram(String programId, String programName, String description, String[] rewards, String eligibilityCriteria, String startDate, String endDate) {
    System.out.println(""Implementing loyalty program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Description: "" + description);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    
    System.out.println(""Rewards:"");
    for (String reward : rewards) {
        System.out.println(""- "" + reward);
    }
    
    System.out.println(""Eligibility Criteria: "" + eligibilityCriteria);
    System.out.println(""Loyalty program implemented successfully!"");
}",1
"public void manageLibraryBook(String bookId, String title, String author, String genre, String publicationDate, String ISBN, String[] keywords) {
    System.out.println(""Managing library book: "" + title);
    System.out.println(""Book ID: "" + bookId);
    System.out.println(""Author: "" + author);
    System.out.println(""Genre: "" + genre);
    System.out.println(""Publication Date: "" + publicationDate);
    System.out.println(""ISBN: "" + ISBN);

    System.out.println(""Keywords:"");
    for (String keyword : keywords) {
        System.out.println(""- "" + keyword);
    }
    
    System.out.println(""Library book managed successfully!"");
}",1
"public void processLoanApplication(String applicationId, String applicantName, double loanAmount, int loanTerm, String loanType, String employmentStatus, String[] documents) {
    System.out.println(""Processing loan application for: "" + applicantName);
    System.out.println(""Application ID: "" + applicationId);
    System.out.println(""Loan Amount: $"" + loanAmount);
    System.out.println(""Loan Term: "" + loanTerm + "" months"");
    System.out.println(""Loan Type: "" + loanType);
    System.out.println(""Employment Status: "" + employmentStatus);

    System.out.println(""Documents submitted:"");
    for (String document : documents) {
        System.out.println(""- "" + document);
    }
    
    System.out.println(""Loan application processed successfully!"");
}",1
"public void createEventRegistration(String registrationId, String eventName, String participantName, String email, String contactNumber, String[] dietaryRestrictions, String paymentMethod) {
    System.out.println(""Creating event registration for: "" + participantName);
    System.out.println(""Registration ID: "" + registrationId);
    System.out.println(""Event Name: "" + eventName);
    System.out.println(""Email: "" + email);
    System.out.println(""Contact Number: "" + contactNumber);
    System.out.println(""Payment Method: "" + paymentMethod);

    System.out.println(""Dietary Restrictions:"");
    for (String restriction : dietaryRestrictions) {
        System.out.println(""- "" + restriction);
    }
    
    System.out.println(""Event registration created successfully!"");
}",1
"public void generateSalesReport(String reportId, String startDate, String endDate, String[] products, double[] salesFigures, String[] regions, String reportSummary) {
    System.out.println(""Generating sales report from "" + startDate + "" to "" + endDate);
    System.out.println(""Report ID: "" + reportId);
    
    System.out.println(""Products:"");
    for (String product : products) {
        System.out.println(""- "" + product);
    }
    
    System.out.println(""Sales Figures:"");
    for (double figure : salesFigures) {
        System.out.println(""- $"" + figure);
    }
    
    System.out.println(""Regions:"");
    for (String region : regions) {
        System.out.println(""- "" + region);
    }
    
    System.out.println(""Report Summary: "" + reportSummary);
    System.out.println(""Sales report generated successfully!"");
}",1
"public void conductTrainingSession(String sessionId, String trainerName, String topic, String date, String location, String[] participants, String materials) {
    System.out.println(""Conducting training session on: "" + topic);
    System.out.println(""Session ID: "" + sessionId);
    System.out.println(""Trainer Name: "" + trainerName);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Materials: "" + materials);
    System.out.println(""Training session conducted successfully!"");
}",1
"public void createProductListing(String productId, String productName, String category, double price, String description, String[] tags, String[] images) {
    System.out.println(""Creating product listing for: "" + productName);
    System.out.println(""Product ID: "" + productId);
    System.out.println(""Category: "" + category);
    System.out.println(""Price: $"" + price);
    System.out.println(""Description: "" + description);

    System.out.println(""Tags:"");
    for (String tag : tags) {
        System.out.println(""- "" + tag);
    }
    
    System.out.println(""Images:"");
    for (String image : images) {
        System.out.println(""- "" + image);
    }
    
    System.out.println(""Product listing created successfully!"");
}",1
"public void compileResearchPaper(String paperId, String title, String author, String[] coAuthors, String journalName, String submissionDate, String[] keywords) {
    System.out.println(""Compiling research paper: "" + title);
    System.out.println(""Paper ID: "" + paperId);
    System.out.println(""Author: "" + author);
    System.out.println(""Journal Name: "" + journalName);
    System.out.println(""Submission Date: "" + submissionDate);
    
    System.out.println(""Co-Authors:"");
    for (String coAuthor : coAuthors) {
        System.out.println(""- "" + coAuthor);
    }
    
    System.out.println(""Keywords:"");
    for (String keyword : keywords) {
        System.out.println(""- "" + keyword);
    }
    
    System.out.println(""Research paper compiled successfully!"");
}",1
"public void scheduleDoctorAppointment(String appointmentId, String patientName, String doctorName, String date, String time, String reason, String[] medications) {
    System.out.println(""Scheduling appointment for: "" + patientName);
    System.out.println(""Appointment ID: "" + appointmentId);
    System.out.println(""Doctor Name: "" + doctorName);
    System.out.println(""Date: "" + date);
    System.out.println(""Time: "" + time);
    System.out.println(""Reason: "" + reason);
    
    System.out.println(""Medications:"");
    for (String medication : medications) {
        System.out.println(""- "" + medication);
    }
    
    System.out.println(""Doctor's appointment scheduled successfully!"");
}",1
"public void organizeTeamBuildingEvent(String eventId, String teamName, String[] activities, String date, String location, String budget, String goals) {
    System.out.println(""Organizing team-building event for: "" + teamName);
    System.out.println(""Event ID: "" + eventId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Goals: "" + goals);

    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Team-building event organized successfully!"");
}",1
"public void prepareMealPlan(String planId, String planName, String[] meals, String[] snacks, String[] beverages, String[] dietaryRestrictions, String duration) {
    System.out.println(""Preparing meal plan: "" + planName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Duration: "" + duration);

    System.out.println(""Meals:"");
    for (String meal : meals) {
        System.out.println(""- "" + meal);
    }
    
    System.out.println(""Snacks:"");
    for (String snack : snacks) {
        System.out.println(""- "" + snack);
    }
    
    System.out.println(""Beverages:"");
    for (String beverage : beverages) {
        System.out.println(""- "" + beverage);
    }

    System.out.println(""Dietary Restrictions:"");
    for (String restriction : dietaryRestrictions) {
        System.out.println(""- "" + restriction);
    }
    
    System.out.println(""Meal plan prepared successfully!"");
}",1
"public void conductOnlineSurvey(String surveyId, String title, String[] questions, String[] responses, String startDate, String endDate, String[] targetAudience) {
    System.out.println(""Conducting online survey: "" + title);
    System.out.println(""Survey ID: "" + surveyId);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    
    System.out.println(""Questions:"");
    for (String question : questions) {
        System.out.println(""- "" + question);
    }
    
    System.out.println(""Responses:"");
    for (String response : responses) {
        System.out.println(""- "" + response);
    }
    
    System.out.println(""Target Audience:"");
    for (String audience : targetAudience) {
        System.out.println(""- "" + audience);
    }
    
    System.out.println(""Online survey conducted successfully!"");
}",1
"public void manageProject(String projectId, String projectName, String projectManager, String startDate, String endDate, String[] teamMembers, String[] milestones) {
    System.out.println(""Managing project: "" + projectName);
    System.out.println(""Project ID: "" + projectId);
    System.out.println(""Project Manager: "" + projectManager);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    
    System.out.println(""Team Members:"");
    for (String member : teamMembers) {
        System.out.println(""- "" + member);
    }
    
    System.out.println(""Milestones:"");
    for (String milestone : milestones) {
        System.out.println(""- "" + milestone);
    }
    
    System.out.println(""Project managed successfully!"");
}",1
"public void createCustomSoftwareSolution(String solutionId, String clientName, String projectScope, String[] features, String[] technologies, String timeline, String budget) {
    System.out.println(""Creating custom software solution for: "" + clientName);
    System.out.println(""Solution ID: "" + solutionId);
    System.out.println(""Project Scope: "" + projectScope);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Features:"");
    for (String feature : features) {
        System.out.println(""- "" + feature);
    }
    
    System.out.println(""Technologies:"");
    for (String technology : technologies) {
        System.out.println(""- "" + technology);
    }
    
    System.out.println(""Custom software solution created successfully!"");
}",1
"public void managePersonalBudget(String budgetId, String month, double totalIncome, double totalExpenses, String[] expenseCategories, String notes) {
    System.out.println(""Managing personal budget for: "" + month);
    System.out.println(""Budget ID: "" + budgetId);
    System.out.println(""Total Income: $"" + totalIncome);
    System.out.println(""Total Expenses: $"" + totalExpenses);

    System.out.println(""Expense Categories:"");
    for (String category : expenseCategories) {
        System.out.println(""- "" + category);
    }

    System.out.println(""Notes: "" + notes);
    System.out.println(""Personal budget managed successfully!"");
}",1
"public void scheduleWorkshop(String workshopId, String title, String date, String time, String[] participants, String[] materials, String location) {
    System.out.println(""Scheduling workshop: "" + title);
    System.out.println(""Workshop ID: "" + workshopId);
    System.out.println(""Date: "" + date);
    System.out.println(""Time: "" + time);
    System.out.println(""Location: "" + location);
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Materials:"");
    for (String material : materials) {
        System.out.println(""- "" + material);
    }
    
    System.out.println(""Workshop scheduled successfully!"");
}",1
"public void createOnlineCourse(String courseId, String courseName, String instructor, String[] topics, String[] materials, String duration, String[] prerequisites) {
    System.out.println(""Creating online course: "" + courseName);
    System.out.println(""Course ID: "" + courseId);
    System.out.println(""Instructor: "" + instructor);
    System.out.println(""Duration: "" + duration);
    
    System.out.println(""Topics:"");
    for (String topic : topics) {
        System.out.println(""- "" + topic);
    }
    
    System.out.println(""Materials:"");
    for (String material : materials) {
        System.out.println(""- "" + material);
    }
    
    System.out.println(""Prerequisites:"");
    for (String prerequisite : prerequisites) {
        System.out.println(""- "" + prerequisite);
    }
    
    System.out.println(""Online course created successfully!"");
}",1
"public void implementDigitalMarketingStrategy(String strategyId, String targetAudience, String[] channels, String budget, String duration, String[] contentTypes, String goals) {
    System.out.println(""Implementing digital marketing strategy for: "" + targetAudience);
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Duration: "" + duration);
    
    System.out.println(""Channels:"");
    for (String channel : channels) {
        System.out.println(""- "" + channel);
    }
    
    System.out.println(""Content Types:"");
    for (String contentType : contentTypes) {
        System.out.println(""- "" + contentType);
    }
    
    System.out.println(""Goals: "" + goals);
    System.out.println(""Digital marketing strategy implemented successfully!"");
}",1
"public void createPersonalizedGift(String giftId, String recipientName, String occasion, String[] items, String message, String wrappingStyle) {
    System.out.println(""Creating personalized gift for: "" + recipientName);
    System.out.println(""Gift ID: "" + giftId);
    System.out.println(""Occasion: "" + occasion);
    System.out.println(""Wrapping Style: "" + wrappingStyle);
    
    System.out.println(""Items:"");
    for (String item : items) {
        System.out.println(""- "" + item);
    }
    
    System.out.println(""Message: "" + message);
    System.out.println(""Personalized gift created successfully!"");
}",1
"public void conductFocusGroupDiscussion(String discussionId, String topic, String[] participants, String date, String location, String goals, String[] feedbackQuestions) {
    System.out.println(""Conducting focus group discussion on: "" + topic);
    System.out.println(""Discussion ID: "" + discussionId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Goals: "" + goals);
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Feedback Questions:"");
    for (String question : feedbackQuestions) {
        System.out.println(""- "" + question);
    }
    
    System.out.println(""Focus group discussion conducted successfully!"");
}",1
"public void planVacation(String vacationId, String destination, String[] activities, String travelDates, String accommodation, String budget, String[] travelCompanions) {
    System.out.println(""Planning vacation to: "" + destination);
    System.out.println(""Vacation ID: "" + vacationId);
    System.out.println(""Travel Dates: "" + travelDates);
    System.out.println(""Accommodation: "" + accommodation);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Travel Companions:"");
    for (String companion : travelCompanions) {
        System.out.println(""- "" + companion);
    }
    
    System.out.println(""Vacation planned successfully!"");
}",1
"public void evaluateMarketingCampaign(String campaignId, String campaignName, String startDate, String endDate, double budget, String[] metrics, String feedback) {
    System.out.println(""Evaluating marketing campaign: "" + campaignName);
    System.out.println(""Campaign ID: "" + campaignId);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Metrics:"");
    for (String metric : metrics) {
        System.out.println(""- "" + metric);
    }
    
    System.out.println(""Feedback: "" + feedback);
    System.out.println(""Marketing campaign evaluated successfully!"");
}",1
"public void createHealthWellnessProgram(String programId, String programName, String[] activities, String duration, String[] dietaryGuidelines, String budget, String objectives) {
    System.out.println(""Creating health and wellness program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Duration: "" + duration);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Dietary Guidelines:"");
    for (String guideline : dietaryGuidelines) {
        System.out.println(""- "" + guideline);
    }
    
    System.out.println(""Objectives: "" + objectives);
    System.out.println(""Health and wellness program created successfully!"");
}",1
"public void setupCommunityOutreachProgram(String programId, String programName, String targetCommunity, String[] activities, String budget, String duration, String objectives) {
    System.out.println(""Setting up community outreach program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Target Community: "" + targetCommunity);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Duration: "" + duration);
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Objectives: "" + objectives);
    System.out.println(""Community outreach program set up successfully!"");
}",1
"public void manageFoodDrive(String driveId, String driveName, String location, String startDate, String endDate, String[] sponsors, String[] foodItems, String goals) {
    System.out.println(""Managing food drive: "" + driveName);
    System.out.println(""Drive ID: "" + driveId);
    System.out.println(""Location: "" + location);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    
    System.out.println(""Sponsors:"");
    for (String sponsor : sponsors) {
        System.out.println(""- "" + sponsor);
    }
    
    System.out.println(""Food Items:"");
    for (String foodItem : foodItems) {
        System.out.println(""- "" + foodItem);
    }
    
    System.out.println(""Goals: "" + goals);
    System.out.println(""Food drive managed successfully!"");
}",1
"public void createFundraisingEvent(String eventId, String eventName, String date, String location, String budget, String[] sponsors, String goals) {
    System.out.println(""Creating fundraising event: "" + eventName);
    System.out.println(""Event ID: "" + eventId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Sponsors:"");
    for (String sponsor : sponsors) {
        System.out.println(""- "" + sponsor);
    }
    
    System.out.println(""Goals: "" + goals);
    System.out.println(""Fundraising event created successfully!"");
}",1
"public void processOrder(String orderId, String customerId, String[] itemIds, int[] quantities, double[] prices, String orderDate, String deliveryAddress, String[] paymentMethods, String[] giftMessages) {
    double totalAmount = 0;
    
    System.out.println(""Processing order: "" + orderId);
    System.out.println(""Customer ID: "" + customerId);
    System.out.println(""Order Date: "" + orderDate);
    System.out.println(""Delivery Address: "" + deliveryAddress);
    
    System.out.println(""Items Ordered:"");
    for (int i = 0; i < itemIds.length; i++) {
        double itemTotal = quantities[i] * prices[i];
        totalAmount += itemTotal;
        System.out.println(""Item ID: "" + itemIds[i] + "", Quantity: "" + quantities[i] + "", Price: $"" + prices[i] + "", Total: $"" + itemTotal);
    }
    
    System.out.println(""Total Amount: $"" + totalAmount);
    
    System.out.println(""Payment Methods:"");
    for (String method : paymentMethods) {
        System.out.println(""- "" + method);
    }
    
    System.out.println(""Gift Messages:"");
    for (String message : giftMessages) {
        System.out.println(""- "" + message);
    }
    
    System.out.println(""Order processed successfully!"");
}",1
"public void createReport(String reportId, String reportTitle, String[] dataSources, String[] analysisMethods, String[] conclusions, String[] recommendations, String author, String dateCreated) {
    System.out.println(""Creating report: "" + reportTitle);
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Date Created: "" + dateCreated);
    System.out.println(""Author: "" + author);
    
    System.out.println(""Data Sources:"");
    for (String source : dataSources) {
        System.out.println(""- "" + source);
    }
    
    System.out.println(""Analysis Methods:"");
    for (String method : analysisMethods) {
        System.out.println(""- "" + method);
    }
    
    System.out.println(""Conclusions:"");
    for (String conclusion : conclusions) {
        System.out.println(""- "" + conclusion);
    }
    
    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }
    
    System.out.println(""Report created successfully!"");
}",1
"public void sendBulkEmail(String[] recipientEmails, String subject, String message, String sender, String[] attachments, String priority, String scheduledDate) {
    System.out.println(""Sending bulk email..."");
    System.out.println(""Sender: "" + sender);
    System.out.println(""Subject: "" + subject);
    System.out.println(""Scheduled Date: "" + scheduledDate);
    System.out.println(""Priority: "" + priority);
    
    for (String recipient : recipientEmails) {
        System.out.println(""Sending to: "" + recipient);
    }
    
    System.out.println(""Message:"");
    System.out.println(message);
    
    System.out.println(""Attachments:"");
    for (String attachment : attachments) {
        System.out.println(""- "" + attachment);
    }
    
    System.out.println(""Bulk email sent successfully!"");
}",1
"public void conductSurvey(String surveyId, String surveyTitle, String[] questions, String[] participants, String surveyDate, String[] demographics, String[] results) {
    System.out.println(""Conducting survey: "" + surveyTitle);
    System.out.println(""Survey ID: "" + surveyId);
    System.out.println(""Survey Date: "" + surveyDate);
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Demographics:"");
    for (String demographic : demographics) {
        System.out.println(""- "" + demographic);
    }
    
    System.out.println(""Questions:"");
    for (String question : questions) {
        System.out.println(""- "" + question);
    }
    
    System.out.println(""Results:"");
    for (String result : results) {
        System.out.println(""- "" + result);
    }
    
    System.out.println(""Survey conducted successfully!"");
}",1
"public void configureServer(String serverId, String serverType, String operatingSystem, String[] applications, String ipAddress, String[] securityProtocols, String[] storageOptions, String networkConfiguration) {
    System.out.println(""Configuring server: "" + serverId);
    System.out.println(""Server Type: "" + serverType);
    System.out.println(""Operating System: "" + operatingSystem);
    System.out.println(""IP Address: "" + ipAddress);
    System.out.println(""Network Configuration: "" + networkConfiguration);
    
    System.out.println(""Installed Applications:"");
    for (String app : applications) {
        System.out.println(""- "" + app);
    }
    
    System.out.println(""Security Protocols:"");
    for (String protocol : securityProtocols) {
        System.out.println(""- "" + protocol);
    }
    
    System.out.println(""Storage Options:"");
    for (String option : storageOptions) {
        System.out.println(""- "" + option);
    }
    
    System.out.println(""Server configured successfully!"");
}",1
"public void createBusinessPlan(String planId, String businessName, String[] marketAnalysis, String[] targetAudience, String[] financialProjections, String[] marketingStrategies, String fundingRequirements, String timeline) {
    System.out.println(""Creating business plan for: "" + businessName);
    System.out.println(""Plan ID: "" + planId);
    
    System.out.println(""Market Analysis:"");
    for (String analysis : marketAnalysis) {
        System.out.println(""- "" + analysis);
    }
    
    System.out.println(""Target Audience:"");
    for (String audience : targetAudience) {
        System.out.println(""- "" + audience);
    }
    
    System.out.println(""Financial Projections:"");
    for (String projection : financialProjections) {
        System.out.println(""- "" + projection);
    }
    
    System.out.println(""Marketing Strategies:"");
    for (String strategy : marketingStrategies) {
        System.out.println(""- "" + strategy);
    }
    
    System.out.println(""Funding Requirements: "" + fundingRequirements);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Business plan created successfully!"");
}",1
"public void hostConference(String conferenceId, String title, String[] speakers, String date, String location, String[] topics, String[] participants, String budget) {
    System.out.println(""Hosting conference: "" + title);
    System.out.println(""Conference ID: "" + conferenceId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Speakers:"");
    for (String speaker : speakers) {
        System.out.println(""- "" + speaker);
    }
    
    System.out.println(""Topics:"");
    for (String topic : topics) {
        System.out.println(""- "" + topic);
    }
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Conference hosted successfully!"");
}",1
"public void developMobileApp(String appId, String appName, String[] features, String[] platforms, String budget, String timeline, String[] targetUsers, String[] marketingStrategies) {
    System.out.println(""Developing mobile application: "" + appName);
    System.out.println(""App ID: "" + appId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    
    System.out.println(""Features:"");
    for (String feature : features) {
        System.out.println(""- "" + feature);
    }
    
    System.out.println(""Platforms:"");
    for (String platform : platforms) {
        System.out.println(""- "" + platform);
    }
    
    System.out.println(""Target Users:"");
    for (String user : targetUsers) {
        System.out.println(""- "" + user);
    }
    
    System.out.println(""Marketing Strategies:"");
    for (String strategy : marketingStrategies) {
        System.out.println(""- "" + strategy);
    }
    
    System.out.println(""Mobile application developed successfully!"");
}",1
"public void planCommunityEvent(String eventId, String eventName, String date, String location, String[] participants, String[] activities, String budget, String goals) {
    System.out.println(""Planning community event: "" + eventName);
    System.out.println(""Event ID: "" + eventId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Goals: "" + goals);
    System.out.println(""Community event planned successfully!"");
}",1
"public void analyzeBusinessMetrics(String analysisId, String period, String[] metrics, String[] dataSources, String[] findings, String[] recommendations, String analyst) {
    System.out.println(""Analyzing business metrics for period: "" + period);
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Analyst: "" + analyst);
    
    System.out.println(""Metrics Analyzed:"");
    for (String metric : metrics) {
        System.out.println(""- "" + metric);
    }
    
    System.out.println(""Data Sources:"");
    for (String source : dataSources) {
        System.out.println(""- "" + source);
    }
    
    System.out.println(""Findings:"");
    for (String finding : findings) {
        System.out.println(""- "" + finding);
    }
    
    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }
    
    System.out.println(""Business metrics analyzed successfully!"");
}",1
"public void createProjectPlan(String projectId, String projectName, String[] tasks, String[] resources, String timeline, String budget, String[] stakeholders, String[] deliverables) {
    System.out.println(""Creating project plan for: "" + projectName);
    System.out.println(""Project ID: "" + projectId);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Tasks:"");
    for (String task : tasks) {
        System.out.println(""- "" + task);
    }
    
    System.out.println(""Resources:"");
    for (String resource : resources) {
        System.out.println(""- "" + resource);
    }
    
    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }
    
    System.out.println(""Deliverables:"");
    for (String deliverable : deliverables) {
        System.out.println(""- "" + deliverable);
    }
    
    System.out.println(""Project plan created successfully!"");
}",1
"public void conductPerformanceReview(String employeeId, String employeeName, String[] reviewCriteria, String[] performanceMetrics, String[] feedback, String reviewer, String reviewDate, String nextSteps) {
    System.out.println(""Conducting performance review for: "" + employeeName);
    System.out.println(""Employee ID: "" + employeeId);
    System.out.println(""Review Date: "" + reviewDate);
    System.out.println(""Reviewer: "" + reviewer);
    
    System.out.println(""Review Criteria:"");
    for (String criterion : reviewCriteria) {
        System.out.println(""- "" + criterion);
    }
    
    System.out.println(""Performance Metrics:"");
    for (String metric : performanceMetrics) {
        System.out.println(""- "" + metric);
    }
    
    System.out.println(""Feedback:"");
    for (String feedbackItem : feedback) {
        System.out.println(""- "" + feedbackItem);
    }
    
    System.out.println(""Next Steps: "" + nextSteps);
    System.out.println(""Performance review conducted successfully!"");
}",1
"public void scheduleTrainingSession(String sessionId, String sessionTitle, String date, String time, String duration, String[] participants, String trainer, String[] materials) {
    System.out.println(""Scheduling training session: "" + sessionTitle);
    System.out.println(""Session ID: "" + sessionId);
    System.out.println(""Date: "" + date);
    System.out.println(""Time: "" + time);
    System.out.println(""Duration: "" + duration);
    System.out.println(""Trainer: "" + trainer);
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Training Materials:"");
    for (String material : materials) {
        System.out.println(""- "" + material);
    }
    
    System.out.println(""Training session scheduled successfully!"");
}",1
"public void analyzeCustomerFeedback(String feedbackId, String[] feedbackItems, String[] categories, String[] ratings, String analysisDate, String[] suggestions, String analyst) {
    System.out.println(""Analyzing customer feedback..."");
    System.out.println(""Feedback ID: "" + feedbackId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);
    
    System.out.println(""Feedback Items:"");
    for (String item : feedbackItems) {
        System.out.println(""- "" + item);
    }
    
    System.out.println(""Categories:"");
    for (String category : categories) {
        System.out.println(""- "" + category);
    }
    
    System.out.println(""Ratings:"");
    for (String rating : ratings) {
        System.out.println(""- "" + rating);
    }
    
    System.out.println(""Suggestions:"");
    for (String suggestion : suggestions) {
        System.out.println(""- "" + suggestion);
    }
    
    System.out.println(""Customer feedback analyzed successfully!"");
}",1
"public void manageProductLaunch(String launchId, String productName, String launchDate, String[] targetMarkets, String[] marketingChannels, String budget, String[] promotionalActivities, String teamLead) {
    System.out.println(""Managing product launch for: "" + productName);
    System.out.println(""Launch ID: "" + launchId);
    System.out.println(""Launch Date: "" + launchDate);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Target Markets:"");
    for (String market : targetMarkets) {
        System.out.println(""- "" + market);
    }
    
    System.out.println(""Marketing Channels:"");
    for (String channel : marketingChannels) {
        System.out.println(""- "" + channel);
    }
    
    System.out.println(""Promotional Activities:"");
    for (String activity : promotionalActivities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Team Lead: "" + teamLead);
    System.out.println(""Product launch managed successfully!"");
}",1
"public void createUserProfile(String userId, String userName, String email, String phone, String[] interests, String[] skills, String location, String biography) {
    System.out.println(""Creating user profile for: "" + userName);
    System.out.println(""User ID: "" + userId);
    System.out.println(""Email: "" + email);
    System.out.println(""Phone: "" + phone);
    System.out.println(""Location: "" + location);
    System.out.println(""Biography: "" + biography);
    
    System.out.println(""Interests:"");
    for (String interest : interests) {
        System.out.println(""- "" + interest);
    }
    
    System.out.println(""Skills:"");
    for (String skill : skills) {
        System.out.println(""- "" + skill);
    }
    
    System.out.println(""User profile created successfully!"");
}",1
"public void conductMarketResearch(String studyId, String studyTitle, String[] targetDemographics, String[] researchMethods, String[] findings, String[] conclusions, String researcher) {
    System.out.println(""Conducting market research study: "" + studyTitle);
    System.out.println(""Study ID: "" + studyId);
    System.out.println(""Researcher: "" + researcher);
    
    System.out.println(""Target Demographics:"");
    for (String demographic : targetDemographics) {
        System.out.println(""- "" + demographic);
    }
    
    System.out.println(""Research Methods:"");
    for (String method : researchMethods) {
        System.out.println(""- "" + method);
    }
    
    System.out.println(""Findings:"");
    for (String finding : findings) {
        System.out.println(""- "" + finding);
    }
    
    System.out.println(""Conclusions:"");
    for (String conclusion : conclusions) {
        System.out.println(""- "" + conclusion);
    }
    
    System.out.println(""Market research study conducted successfully!"");
}",1
"public void compileQuarterlyReport(String reportId, String quarter, String year, String[] incomeSources, double[] incomeAmounts, String[] expenseCategories, double[] expenseAmounts, String notes) {
    System.out.println(""Compiling quarterly financial report for Q"" + quarter + "" "" + year);
    System.out.println(""Report ID: "" + reportId);
    
    System.out.println(""Income Sources:"");
    for (int i = 0; i < incomeSources.length; i++) {
        System.out.println(""- "" + incomeSources[i] + "": $"" + incomeAmounts[i]);
    }
    
    System.out.println(""Expense Categories:"");
    for (int i = 0; i < expenseCategories.length; i++) {
        System.out.println(""- "" + expenseCategories[i] + "": $"" + expenseAmounts[i]);
    }
    
    double totalIncome = 0;
    for (double amount : incomeAmounts) {
        totalIncome += amount;
    }
    
    double totalExpenses = 0;
    for (double amount : expenseAmounts) {
        totalExpenses += amount;
    }
    
    double netProfit = totalIncome - totalExpenses;
    System.out.println(""Total Income: $"" + totalIncome);
    System.out.println(""Total Expenses: $"" + totalExpenses);
    System.out.println(""Net Profit: $"" + netProfit);
    
    System.out.println(""Notes: "" + notes);
    System.out.println(""Quarterly financial report compiled successfully!"");
}",1
"public void executeMilestone(String milestoneId, String milestoneName, String[] tasks, String deadline, String[] stakeholders, String budget, String resourcesNeeded) {
    System.out.println(""Executing milestone: "" + milestoneName);
    System.out.println(""Milestone ID: "" + milestoneId);
    System.out.println(""Deadline: "" + deadline);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Tasks:"");
    for (String task : tasks) {
        System.out.println(""- "" + task);
    }
    
    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }
    
    System.out.println(""Resources Needed: "" + resourcesNeeded);
    System.out.println(""Milestone executed successfully!"");
}",1
"public void updateBusinessStrategy(String strategyId, String strategyName, String[] objectives, String[] actionItems, String[] successMetrics, String[] challenges, String owner) {
    System.out.println(""Updating business strategy: "" + strategyName);
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Owner: "" + owner);
    
    System.out.println(""Objectives:"");
    for (String objective : objectives) {
        System.out.println(""- "" + objective);
    }
    
    System.out.println(""Action Items:"");
    for (String actionItem : actionItems) {
        System.out.println(""- "" + actionItem);
    }
    
    System.out.println(""Success Metrics:"");
    for (String metric : successMetrics) {
        System.out.println(""- "" + metric);
    }
    
    System.out.println(""Challenges:"");
    for (String challenge : challenges) {
        System.out.println(""- "" + challenge);
    }
    
    System.out.println(""Business strategy updated successfully!"");
}",1
"public void organizeCompanyEvent(String eventId, String eventName, String date, String location, String[] participants, String budget, String[] activities, String organizer) {
    System.out.println(""Organizing company event: "" + eventName);
    System.out.println(""Event ID: "" + eventId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Organizer: "" + organizer);
    System.out.println(""Company event organized successfully!"");
}",1
"public void performRiskAssessment(String assessmentId, String projectName, String[] risks, String[] impactLevels, String[] mitigationStrategies, String[] responsibleParties, String assessmentDate, String reviewer) {
    System.out.println(""Performing risk assessment for: "" + projectName);
    System.out.println(""Assessment ID: "" + assessmentId);
    System.out.println(""Assessment Date: "" + assessmentDate);
    System.out.println(""Reviewer: "" + reviewer);
    
    System.out.println(""Risks:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }
    
    System.out.println(""Impact Levels:"");
    for (String level : impactLevels) {
        System.out.println(""- "" + level);
    }
    
    System.out.println(""Mitigation Strategies:"");
    for (String strategy : mitigationStrategies) {
        System.out.println(""- "" + strategy);
    }
    
    System.out.println(""Responsible Parties:"");
    for (String party : responsibleParties) {
        System.out.println(""- "" + party);
    }
    
    System.out.println(""Risk assessment performed successfully!"");
}",1
"public void createMarketingCampaign(String campaignId, String campaignName, String[] targetAudiences, String[] marketingChannels, String budget, String startDate, String endDate, String[] keyMessages) {
    System.out.println(""Creating marketing campaign: "" + campaignName);
    System.out.println(""Campaign ID: "" + campaignId);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Target Audiences:"");
    for (String audience : targetAudiences) {
        System.out.println(""- "" + audience);
    }
    
    System.out.println(""Marketing Channels:"");
    for (String channel : marketingChannels) {
        System.out.println(""- "" + channel);
    }
    
    System.out.println(""Key Messages:"");
    for (String message : keyMessages) {
        System.out.println(""- "" + message);
    }
    
    System.out.println(""Marketing campaign created successfully!"");
}",1
"public void analyzeSalesData(String analysisId, String[] salesRecords, String[] productCategories, String[] regions, String analysisDate, String[] insights, String analyst) {
    System.out.println(""Analyzing sales data..."");
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);
    
    System.out.println(""Sales Records:"");
    for (String record : salesRecords) {
        System.out.println(""- "" + record);
    }
    
    System.out.println(""Product Categories:"");
    for (String category : productCategories) {
        System.out.println(""- "" + category);
    }
    
    System.out.println(""Regions:"");
    for (String region : regions) {
        System.out.println(""- "" + region);
    }
    
    System.out.println(""Insights:"");
    for (String insight : insights) {
        System.out.println(""- "" + insight);
    }
    
    System.out.println(""Sales data analyzed successfully!"");
}",1
"public void prepareDisasterRecoveryPlan(String planId, String organizationName, String[] criticalSystems, String[] recoveryStrategies, String[] responsibleTeams, String planDate, String reviewer) {
    System.out.println(""Preparing disaster recovery plan for: "" + organizationName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Plan Date: "" + planDate);
    System.out.println(""Reviewer: "" + reviewer);
    
    System.out.println(""Critical Systems:"");
    for (String system : criticalSystems) {
        System.out.println(""- "" + system);
    }
    
    System.out.println(""Recovery Strategies:"");
    for (String strategy : recoveryStrategies) {
        System.out.println(""- "" + strategy);
    }
    
    System.out.println(""Responsible Teams:"");
    for (String team : responsibleTeams) {
        System.out.println(""- "" + team);
    }
    
    System.out.println(""Disaster recovery plan prepared successfully!"");
}",1
"public void conductITAudit(String auditId, String organizationName, String[] auditCriteria, String[] findings, String[] recommendations, String auditDate, String auditor) {
    System.out.println(""Conducting IT audit for: "" + organizationName);
    System.out.println(""Audit ID: "" + auditId);
    System.out.println(""Audit Date: "" + auditDate);
    System.out.println(""Auditor: "" + auditor);
    
    System.out.println(""Audit Criteria:"");
    for (String criterion : auditCriteria) {
        System.out.println(""- "" + criterion);
    }
    
    System.out.println(""Findings:"");
    for (String finding : findings) {
        System.out.println(""- "" + finding);
    }
    
    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }
    
    System.out.println(""IT audit conducted successfully!"");
}",1
"public void evaluateEmployeeSatisfaction(String evaluationId, String[] surveyResponses, String[] departments, String evaluationDate, String[] insights, String evaluator) {
    System.out.println(""Evaluating employee satisfaction..."");
    System.out.println(""Evaluation ID: "" + evaluationId);
    System.out.println(""Evaluation Date: "" + evaluationDate);
    System.out.println(""Evaluator: "" + evaluator);
    
    System.out.println(""Survey Responses:"");
    for (String response : surveyResponses) {
        System.out.println(""- "" + response);
    }
    
    System.out.println(""Departments:"");
    for (String department : departments) {
        System.out.println(""- "" + department);
    }
    
    System.out.println(""Insights:"");
    for (String insight : insights) {
        System.out.println(""- "" + insight);
    }
    
    System.out.println(""Employee satisfaction evaluated successfully!"");
}",1
"public void facilitateTeamBuildingActivity(String activityId, String activityName, String[] participants, String date, String location, String duration, String[] objectives, String facilitator) {
    System.out.println(""Facilitating team-building activity: "" + activityName);
    System.out.println(""Activity ID: "" + activityId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Duration: "" + duration);
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Objectives:"");
    for (String objective : objectives) {
        System.out.println(""- "" + objective);
    }
    
    System.out.println(""Facilitator: "" + facilitator);
    System.out.println(""Team-building activity facilitated successfully!"");
}",1
"public void createStakeholderEngagementPlan(String planId, String projectName, String[] stakeholders, String[] engagementStrategies, String planDate, String projectManager, String budget) {
    System.out.println(""Creating stakeholder engagement plan for: "" + projectName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Plan Date: "" + planDate);
    System.out.println(""Project Manager: "" + projectManager);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }
    
    System.out.println(""Engagement Strategies:"");
    for (String strategy : engagementStrategies) {
        System.out.println(""- "" + strategy);
    }
    
    System.out.println(""Stakeholder engagement plan created successfully!"");
}",1
"public void reviewProjectDeliverables(String reviewId, String projectName, String[] deliverables, String reviewer, String reviewDate, String[] feedback) {
    System.out.println(""Reviewing project deliverables for: "" + projectName);
    System.out.println(""Review ID: "" + reviewId);
    System.out.println(""Review Date: "" + reviewDate);
    System.out.println(""Reviewer: "" + reviewer);
    
    System.out.println(""Deliverables:"");
    for (String deliverable : deliverables) {
        System.out.println(""- "" + deliverable);
    }
    
    System.out.println(""Feedback:"");
    for (String fb : feedback) {
        System.out.println(""- "" + fb);
    }
    
    System.out.println(""Project deliverables reviewed successfully!"");
}",1
" public int add(int a, int b) {
        return a + b;
    }",0
"public int subtract(int a, int b) {
        return a - b;
    }",0
"public int multiply(int a, int b) {
        return a * b;
    }",0
"public double divide(int a, int b) {
        return (double) a / b;
    }",0
"public int max(int a, int b) {
        return Math.max(a, b);
    }",0
"public boolean isEven(int number) {
        return number % 2 == 0;
    }",0
"public int square(int number) {
        return number * number;
    }",0
"public int cube(int number) {
        return number * number * number;
    }",0
"public String concatenate(String str1, String str2) {
        return str1 + str2;
    }",0
"public String toUpperCase(String str) {
        return str.toUpperCase();
    }",0
"public boolean contains(String str, String substr) {
        return str.contains(substr);
    }",0
"public int getStringLength(String str) {
        return str.length();
    }",0
"public int factorial(int number) {
        if (number == 0) return 1;
        int result = 1;
        for (int i = 1; i <= number; i++) {
            result *= i;
        }
        return result;
    }",0
" public int findMin(int[] numbers) {
        int min = numbers[0];
        for (int number : numbers) {
            if (number < min) min = number;
        }
        return min;
    }",0
"public int findMax(int[] numbers) {
        int max = numbers[0];
        for (int number : numbers) {
            if (number > max) max = number;
        }
        return max;
    }",0
"public double average(int[] numbers) {
        int sum = 0;
        for (int number : numbers) {
            sum += number;
        }
        return (double) sum / numbers.length;
    }",0
"public boolean isPrime(int number) {
        if (number <= 1) return false;
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) return false;
        }
        return true;
    }",0
"public String reverseString(String str) {
        return new StringBuilder(str).reverse().toString();
    }",0
"public double power(double base, int exponent) {
        return Math.pow(base, exponent);
    }",0
"public int[] mergeArrays(int[] arr1, int[] arr2) {
        int[] merged = new int[arr1.length + arr2.length];
        System.arraycopy(arr1, 0, merged, 0, arr1.length);
        System.arraycopy(arr2, 0, merged, arr1.length, arr2.length);
        return merged;
    }
",0
"public void swap(int[] numbers) {
        if (numbers.length == 2) {
            int temp = numbers[0];
            numbers[0] = numbers[1];
            numbers[1] = temp;
        }
    }",0
"public boolean isPerfectSquare(int number) {
        int sqrt = (int) Math.sqrt(number);
        return (sqrt * sqrt) == number;
    }",0
"public char firstCharacter(String str) {
        return str.charAt(0);
    }
",0
"public char lastCharacter(String str) {
        return str.charAt(str.length() - 1);
    }
",0
"public boolean areStringsEqual(String str1, String str2) {
        return str1.equals(str2);
    }
",0
"public int countOccurrences(String str, char character) {
        int count = 0;
        for (char c : str.toCharArray()) {
            if (c == character) count++;
        }
        return count;
    }",0
"public int sumOfDigits(int number) {
        int sum = 0;
        while (number > 0) {
            sum += number % 10;
            number /= 10;
        }
        return sum;
    }",0
"public boolean isPalindrome(String str) {
        String reversed = reverseString(str);
        return str.equals(reversed);
    }",0
"public int getAsciiValue(char character) {
        return (int) character;
    }",0
" public String substring(String str, int start, int length) {
        return str.substring(start, start + length);
    }",0
"public int[] fibonacci(int n) {
        if (n <= 0) return new int[0];
        int[] series = new int[n];
        series[0] = 0;
        if (n > 1) series[1] = 1;
        for (int i = 2; i < n; i++) {
            series[i] = series[i - 1] + series[i - 2];
        }
        return series;
    }",0
"public int[] reverseArray(int[] arr) {
        int n = arr.length;
        int[] reversed = new int[n];
        for (int i = 0; i < n; i++) {
            reversed[i] = arr[n - 1 - i];
        }
        return reversed;
    }",0
"public Map<Character, Integer> characterFrequency(String str) {
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : str.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }
        return frequencyMap;
    }",0
"public String generatePassword(int length) {
        String chars = ""ABCDEFG"";
        StringBuilder password = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < length; i++) {
            int index = random.nextInt(chars.length());
            password.append(chars.charAt(index));
        }
        return password.toString();
    }
",0
"public void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Swap arr[j] and arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }",0
"public double power(double base, int exponent) {
        if (exponent == 0) return 1;
        if (exponent < 0) return 1 / power(base, -exponent);
        return base * power(base, exponent - 1);
    }",0
"public int[] mergeSortedArrays(int[] arr1, int[] arr2) {
        int[] merged = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] < arr2[j]) {
                merged[k++] = arr1[i++];
            } else {
                merged[k++] = arr2[j++];
            }
        }
        while (i < arr1.length) {
            merged[k++] = arr1[i++];
        }
        while (j < arr2.length) {
            merged[k++] = arr2[j++];
        }
        return merged;
    }
",0
"public int findSecondLargest(int[] arr) {
        if (arr.length < 2) throw new IllegalArgumentException(""Array must contain at least two elements."");

        int first = Integer.MIN_VALUE;
        int second = Integer.MIN_VALUE;

        for (int number : arr) {
            if (number > first) {
                second = first;
                first = number;
            } else if (number > second && number < first) {
                second = number;
            }
        }
        return second;
    }",0
"public int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }",0
"public boolean isValidEmail(String email) {
        String emailRegex = ""^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$"";
        return email.matches(emailRegex);
    }",0
"public int[] intersectArrays(int[] arr1, int[] arr2) {
        Set<Integer> set1 = new HashSet<>();
        for (int num : arr1) {
            set1.add(num);
        }

        List<Integer> intersection = new ArrayList<>();
        for (int num : arr2) {
            if (set1.contains(num)) {
                intersection.add(num);
                set1.remove(num); // Avoid duplicates in intersection
            }
        }
        return intersection.stream().mapToInt(i -> i).toArray();
    }",0
"public int sumArray(int[] arr) {
        int sum = 0;
        for (int number : arr) {
            sum += number;
        }
        return sum;
    }",0
"public int countVowels(String str) {
        int count = 0;
        for (char c : str.toLowerCase().toCharArray()) {
            if (""aeiou"".indexOf(c) != -1) {
                count++;
            }
        }
        return count;
    }",0
"public boolean isPerfectNumber(int number) {
        if (number <= 1) return false;
        int sum = 0;
        for (int i = 1; i < number; i++) {
            if (number % i == 0) {
                sum += i;
            }
        }
        return sum == number;
    }",0
"public String findLongestWord(String sentence) {
        String[] words = sentence.split("" "");
        String longestWord = """";
        for (String word : words) {
            if (word.length() > longestWord.length()) {
                longestWord = word;
            }
        }
        return longestWord;
    }",0
"public boolean areAnagrams(String str1, String str2) {
        char[] arr1 = str1.replaceAll(""\\s+"", """").toLowerCase().toCharArray();
        char[] arr2 = str2.replaceAll(""\\s+"", """").toLowerCase().toCharArray();
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        return Arrays.equals(arr1, arr2);
    }",0
"public double areaOfTriangle(double a, double b, double c) {
        double s = (a + b + c) / 2;
        return Math.sqrt(s * (s - a) * (s - b) * (s - c));
    }",0
"public Set<String> generatePermutations(String str) {
        Set<String> result = new HashSet<>();
        permute(str, """", result);
        return result;
    }",0
"private void permute(String str, String prefix, Set<String> result) {
        int n = str.length();
        if (n == 0) {
            result.add(prefix);
        } else {
            for (int i = 0; i < n; i++) {
                permute(str.substring(0, i) + str.substring(i + 1, n), prefix + str.charAt(i), result);
            }
        }
    }",0
"public Set<Integer> commonElements(Set<Integer> set1, Set<Integer> set2) {
        Set<Integer> common = new HashSet<>(set1);
        common.retainAll(set2);
        return common;
    }",0
"public String decimalToBinary(int number) {
        StringBuilder binary = new StringBuilder();
        while (number > 0) {
            binary.insert(0, number % 2);
            number /= 2;
        }
        return binary.toString();
    }",0
"public Character firstNonRepeatingCharacter(String str) {
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : str.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }
        for (char c : str.toCharArray()) {
            if (frequencyMap.get(c) == 1) {
                return c;
            }
        }
        return null;
    }",0
"public int[] longestIncreasingSubsequence(int[] arr) {
        if (arr.length == 0) return new int[0];

        int[] dp = new int[arr.length];
        int[] prevIndex = new int[arr.length];
        Arrays.fill(dp, 1);
        Arrays.fill(prevIndex, -1);

        int maxLength = 1;
        int endIndex = 0;

        for (int i = 1; i < arr.length; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[i] > arr[j] && dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                    prevIndex[i] = j;
                    if (maxLength < dp[i]) {
                        maxLength = dp[i];
                        endIndex = i;
                    }
                }
            }
        }

        int[] lis = new int[maxLength];
        for (int i = maxLength - 1; i >= 0; i--) {
            lis[i] = arr[endIndex];
            endIndex = prevIndex[endIndex];
        }
        return lis;
    }",0
"public boolean isBalanced(String str) {
        Stack<Character> stack = new Stack<>();
        for (char c : str.toCharArray()) {
            if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                if (stack.isEmpty()) return false;
                stack.pop();
            }
        }
        return stack.isEmpty();
    }",0
"public int[] removeDuplicates(int[] arr) {
        Set<Integer> set = new HashSet<>();
        for (int num : arr) {
            set.add(num);
        }
        return set.stream().mapToInt(i -> i).toArray();
    }",0
"public int countWords(String str) {
        String[] words = str.trim().split(""\\s+"");
        return words.length;
    }
",0
"public boolean isStrongNumber(int number) {
        int sum = 0;
        int temp = number;
        while (temp > 0) {
            int digit = temp % 10;
            sum += factorial(digit);
            temp /= 10;
        }
        return sum == number;
    }",0
"private int factorial(int num) {
        if (num == 0) return 1;
        return num * factorial(num - 1);
    }",0
"public void shuffleArray(int[] arr) {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1);
            // Swap arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
",0
"public int binaryToDecimal(String binary) {
        int decimal = 0;
        int base = 1;
        int length = binary.length();
        for (int i = length - 1; i >= 0; i--) {
            if (binary.charAt(i) == '1') {
                decimal += base;
            }
            base *= 2;
        }
        return decimal;
    }",0
" public List<Integer> flatten(List<List<Integer>> nestedList) {
        List<Integer> flatList = new ArrayList<>();
        for (List<Integer> innerList : nestedList) {
            flatList.addAll(innerList);
        }
        return flatList;
    }",0
"public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) return """";
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return """";
            }
        }
        return prefix;
    }",0
" public double calculateTotalCost(List<Double> prices, List<Integer> quantities, double discountPercentage, double taxPercentage) {
        if (prices.size() != quantities.size()) {
            throw new IllegalArgumentException(""Prices and quantities must have the same length."");
        }
        
        double totalCost = 0.0;

        // Calculate the subtotal
        for (int i = 0; i < prices.size(); i++) {
            totalCost += prices.get(i) * quantities.get(i);
        }

        // Apply discount
        double discountAmount = totalCost * (discountPercentage / 100);
        totalCost -= discountAmount;

        // Apply tax
        double taxAmount = totalCost * (taxPercentage / 100);
        totalCost += taxAmount;

        return totalCost;
    }",1
"public Map<String, Double> dijkstra(Map<String, Map<String, Double>> graph, String start) {
        Map<String, Double> distances = new HashMap<>();
        PriorityQueue<Node> minHeap = new PriorityQueue<>(Comparator.comparingDouble(node -> node.distance));
        Set<String> visited = new HashSet<>();

        for (String vertex : graph.keySet()) {
            distances.put(vertex, Double.MAX_VALUE);
        }
        distances.put(start, 0.0);
        minHeap.add(new Node(start, 0.0));

        while (!minHeap.isEmpty()) {
            Node currentNode = minHeap.poll();
            if (visited.contains(currentNode.vertex)) continue;

            visited.add(currentNode.vertex);

            for (Map.Entry<String, Double> entry : graph.get(currentNode.vertex).entrySet()) {
                String neighbor = entry.getKey();
                double weight = entry.getValue();
                double newDistance = distances.get(currentNode.vertex) + weight;

                if (newDistance < distances.get(neighbor)) {
                    distances.put(neighbor, newDistance);
                    minHeap.add(new Node(neighbor, newDistance));
                }
            }
        }
        return distances;
    }",1
"public List<Employee> sortEmployees(List<Employee> employees, boolean byName, boolean bySalary, boolean ascending) {
        Comparator<Employee> comparator = Comparator.comparing(Employee::getName);
        
        if (bySalary) {
            comparator = comparator.thenComparing(Employee::getSalary);
        }

        if (!ascending) {
            comparator = comparator.reversed();
        }

        employees.sort(comparator);
        return employees;
    }",1
"public Map<Integer, List<String>> groupWordsByLength(List<String> words, boolean ignoreShorterThan) {
        Map<Integer, List<String>> groupedWords = new HashMap<>();
        for (String word : words) {
            int length = word.length();
            if (ignoreShorterThan && length < 3) continue;
            groupedWords.putIfAbsent(length, new ArrayList<>());
            groupedWords.get(length).add(word);
        }
        return groupedWords;
    }",0
" public List<List<Integer>> generateMultiplicationTable(int start, int end, int increment) {
        List<List<Integer>> table = new ArrayList<>();
        for (int i = start; i <= end; i += increment) {
            List<Integer> row = new ArrayList<>();
            for (int j = start; j <= end; j += increment) {
                row.add(i * j);
            }
            table.add(row);
        }
        return table;
    }",0
"public Map<String, Double> calculateAverageScores(Map<String, List<Double>> studentScores) {
        Map<String, Double> averageScores = new HashMap<>();
        for (Map.Entry<String, List<Double>> entry : studentScores.entrySet()) {
            List<Double> scores = entry.getValue();
            double total = 0.0;
            for (double score : scores) {
                total += score;
            }
            averageScores.put(entry.getKey(), total / scores.size());
        }
        return averageScores;
    }",0
"public List<String> generateQuiz(List<String> questions, int numberOfQuestions, boolean randomize) {
        List<String> quiz = new ArrayList<>();
        Set<Integer> selectedIndexes = new HashSet<>();

        Random rand = new Random();
        while (quiz.size() < numberOfQuestions && selectedIndexes.size() < questions.size()) {
            int index = rand.nextInt(questions.size());
            if (!selectedIndexes.contains(index)) {
                selectedIndexes.add(index);
                quiz.add(questions.get(index));
            }
        }
        return quiz;
    }",0
"public List<List<Integer>> findCombinations(int[] numbers, int target) {
        List<List<Integer>> results = new ArrayList<>();
        findCombinationsHelper(numbers, target, 0, new ArrayList<>(), results);
        return results;
    }",0
"private void findCombinationsHelper(int[] numbers, int target, int start, List<Integer> combination, List<List<Integer>> results) {
        if (target == 0) {
            results.add(new ArrayList<>(combination));
            return;
        }

        for (int i = start; i < numbers.length; i++) {
            if (numbers[i] <= target) {
                combination.add(numbers[i]);
                findCombinationsHelper(numbers, target - numbers[i], i, combination, results);
                combination.remove(combination.size() - 1);
            }
        }
    }",1
"public List<List<String>> cartesianProduct(List<List<String>> lists) {
        List<List<String>> result = new ArrayList<>();
        cartesianProductHelper(lists, 0, new ArrayList<>(), result);
        return result;
    }",0
"private void cartesianProductHelper(List<List<String>> lists, int index, List<String> current, List<List<String>> result) {
        if (index == lists.size()) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (String element : lists.get(index)) {
            current.add(element);
            cartesianProductHelper(lists, index + 1, current, result);
            current.remove(current.size() - 1);
        }
    }",1
"public boolean validateCreditCard(String cardNumber, boolean allowSpaces) {
        if (allowSpaces) {
            cardNumber = cardNumber.replaceAll(""\\s+"", """");
        }
        if (!cardNumber.matches(""\\d+"")) {
            throw new IllegalArgumentException(""Card number must contain only digits."");
        }

        int sum = 0;
        boolean alternate = false;

        for (int i = cardNumber.length() - 1; i >= 0; i--) {
            int n = Character.getNumericValue(cardNumber.charAt(i));
            if (alternate) {
                n *= 2;
                if (n > 9) {
                    n -= 9;
                }
            }
            sum += n;
            alternate = !alternate;
        }
        return sum % 10 == 0;
    }",0
"public String generateUniqueId(String prefix, int length, boolean includeTimestamp) {
        StringBuilder uniqueId = new StringBuilder(prefix);
        Random rand = new Random();

        while (uniqueId.length() < length) {
            uniqueId.append(rand.nextInt(10)); // Add random digits
        }

        if (includeTimestamp) {
            uniqueId.append(System.currentTimeMillis());
        }
        return uniqueId.toString();
    }",0
"public String transferFunds(String fromAccount, String toAccount, double amount, double balance) {
        if (amount <= 0) {
            return ""Transfer amount must be positive."";
        }
        if (balance < amount) {
            return ""Insufficient funds."";
        }
        balance -= amount;
        return ""Transferred "" + amount + "" from "" + fromAccount + "" to "" + toAccount + "". New balance: "" + balance;
    }",1
"public boolean isPalindrome(String str, boolean ignoreSpaces, boolean ignoreCase) {
        StringBuilder cleanedStr = new StringBuilder();

        for (char c : str.toCharArray()) {
            if (!ignoreSpaces || c != ' ') {
                cleanedStr.append(c);
            }
        }

        String processedStr = ignoreCase ? cleanedStr.toString().toLowerCase() : cleanedStr.toString();
        String reversedStr = cleanedStr.reverse().toString();
        return processedStr.equals(reversedStr);
    }",0
"public List<String> combineLists(List<List<String>> lists, boolean preserveOrder) {
        Set<String> set = new LinkedHashSet<>(); // Maintain insertion order
        for (List<String> list : lists) {
            set.addAll(list);
        }
        return new ArrayList<>(set);
    }",0
"public Map<Integer, Integer> createHistogram(List<Integer> data, int binSize, int minValue, int maxValue) {
        Map<Integer, Integer> histogram = new HashMap<>();
        for (int i = minValue; i <= maxValue; i += binSize) {
            histogram.put(i, 0); // Initialize bins
        }

        for (int value : data) {
            for (int key : histogram.keySet()) {
                if (value >= key && value < key + binSize) {
                    histogram.put(key, histogram.get(key) + 1);
                    break;
                }
            }
        }
        return histogram;
    }",1
"public Set<Integer> findIntersection(List<Set<Integer>> sets) {
        if (sets.isEmpty()) return Collections.emptySet();

        Set<Integer> intersection = new HashSet<>(sets.get(0));
        for (int i = 1; i < sets.size(); i++) {
            intersection.retainAll(sets.get(i));
        }
        return intersection;
    }",0
" public Map<Character, Integer> analyzeCharacterFrequency(String input, boolean caseSensitive, boolean ignoreSpaces) {
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : input.toCharArray()) {
            if (ignoreSpaces && c == ' ') continue;
            char key = caseSensitive ? c : Character.toLowerCase(c);
            frequencyMap.put(key, frequencyMap.getOrDefault(key, 0) + 1);
        }
        return frequencyMap;
    }",0
"public boolean isValidEmail(String email, boolean checkDomain) {
        String emailRegex = ""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"";
        if (!email.matches(emailRegex)) return false;

        if (checkDomain) {
            String domain = email.substring(email.indexOf('@') + 1);
            return !domain.isEmpty(); // More complex checks can be implemented here
        }
        return true;
    }",0
"public Map<String, String> generateUserCredentials(String baseUsername, int number, boolean includeSpecialChars) {
        Map<String, String> credentials = new HashMap<>();
        Random rand = new Random();

        for (int i = 1; i <= number; i++) {
            String username = baseUsername + i;
            String password = generateRandomPassword(includeSpecialChars);
            credentials.put(username, password);
        }
        return credentials;
    }",0
"private String generateRandomPassword(boolean includeSpecialChars) {
        StringBuilder password = new StringBuilder();
        String characters = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"";
        String specialChars = ""!@#$%^&*()"";

        Random rand = new Random();
        int length = 8 + rand.nextInt(4); // Length between 8 and 12

        for (int i = 0; i < length; i++) {
            if (includeSpecialChars && rand.nextBoolean()) {
                password.append(specialChars.charAt(rand.nextInt(specialChars.length())));
            } else {
                password.append(characters.charAt(rand.nextInt(characters.length())));
            }
        }
        return password.toString();
    }",0
"public String createGreeting(String firstName, String lastName, int age, String occupation, boolean formal) {
        String greeting = formal ? ""Dear "" + firstName + "" "" + lastName + "","" : ""Hello "" + firstName + ""!"";

        if (age > 0) {
            greeting += "" You are "" + age + "" years old."";
        }
        if (occupation != null && !occupation.isEmpty()) {
            greeting += "" You work as a "" + occupation + ""."";
        }
        return greeting;
    }",1
"public Map<String, List<String>> compareLists(List<String> list1, List<String> list2) {
        List<String> inList1NotList2 = new ArrayList<>(list1);
        inList1NotList2.removeAll(list2);

        List<String> inList2NotList1 = new ArrayList<>(list2);
        inList2NotList1.removeAll(list1);

        Map<String, List<String>> differences = new HashMap<>();
        differences.put(""In List1 but not List2"", inList1NotList2);
        differences.put(""In List2 but not List1"", inList2NotList1);
        return differences;
    }",0
"public String retrieveUserDetails(int userId, String userType, String format, boolean includeSensitiveInfo) {
        // Mock database retrieval
        String userDetails = ""User ID: "" + userId + "", Type: "" + userType;

        if (includeSensitiveInfo) {
            userDetails += "", Sensitive Info: [Redacted]"";
        }
        return format.equalsIgnoreCase(""json"") ? ""{ \""details\"": \"""" + userDetails + ""\"" }"" : userDetails;
    }",1
"public String formatDate(String date, String inputPattern, String outputPattern, boolean useLocale) {
        // Mock implementation
        // Actual implementation would use SimpleDateFormat or DateTimeFormatter
        return ""Formatted Date: "" + date + "" from "" + inputPattern + "" to "" + outputPattern;
    }",1
"public String getCurrentWeather(String location, String units, boolean includeForecast, String apiKey) {
        // Mock weather retrieval
        return ""Current weather in "" + location + "" is 25°C with clear skies."";
    }",1
"public String trackMovement(List<Double> xCoordinates, List<Double> yCoordinates, String objectName, double timeInterval) {
        StringBuilder movement = new StringBuilder(""Tracking "" + objectName + "": "");

        for (int i = 0; i < xCoordinates.size(); i++) {
            movement.append(""Position at "").append(i * timeInterval).append(""s: ("")
                    .append(xCoordinates.get(i)).append("", "").append(yCoordinates.get(i)).append("") "");
        }
        return movement.toString();
    }",1
"public boolean isValidPassword(String password, boolean requireUppercase, boolean requireDigit, boolean requireSpecialChar) {
        if (requireUppercase && !password.matches("".*[A-Z].*"")) return false;
        if (requireDigit && !password.matches("".*\\d.*"")) return false;
        if (requireSpecialChar && !password.matches("".*[!@#$%^&*()].*"")) return false;
        return password.length() >= 8;
    }",1
"public String playRockPaperScissors(String playerChoice, String computerChoice, int rounds) {
        int playerScore = 0;
        int computerScore = 0;

        for (int i = 0; i < rounds; i++) {
            if (playerChoice.equals(computerChoice)) {
                continue; // Tie
            }
            if ((playerChoice.equals(""Rock"") && computerChoice.equals(""Scissors"")) ||
                (playerChoice.equals(""Scissors"") && computerChoice.equals(""Paper"")) ||
                (playerChoice.equals(""Paper"") && computerChoice.equals(""Rock""))) {
                playerScore++;
            } else {
                computerScore++;
            }
        }

        return ""Final Score - Player: "" + playerScore + "", Computer: "" + computerScore;
    }",0
"public void logUserActivity(String username, String activity, long timestamp, String logLevel, String format) {
        String formattedTimestamp = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"").format(new Date(timestamp));
        String logEntry = formattedTimestamp + "" ["" + logLevel + ""] "" + username + "": "" + activity;
        // Mock logging to console
        System.out.println(logEntry);
    }",1
"public String generateSalesReport(String storeName, String dateRange, List<String> items, List<Double> prices, int totalSales) {
        StringBuilder report = new StringBuilder(""Sales Report for "" + storeName + "" from "" + dateRange + "":\n"");
        report.append(""Total Sales: "").append(totalSales).append(""\n"");
        report.append(""Items Sold:\n"");

        for (int i = 0; i < items.size(); i++) {
            report.append(items.get(i)).append("": $"").append(prices.get(i)).append(""\n"");
        }
        return report.toString();
    }",1
" public long factorial(int number) {
        if (number < 0) {
            throw new IllegalArgumentException(""Number must be non-negative."");
        }
        long result = 1;
        for (int i = 1; i <= number; i++) {
            result *= i;
        }
        return result;
    }",0
"public String listToString(List<Integer> numbers) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < numbers.size(); i++) {
            sb.append(numbers.get(i));
            if (i < numbers.size() - 1) {
                sb.append("", "");
            }
        }
        return sb.toString();
    }",0
"public String reverseString(String input) {
        StringBuilder reversed = new StringBuilder(input.length());
        for (int i = input.length() - 1; i >= 0; i--) {
            reversed.append(input.charAt(i));
        }
        return reversed.toString();
    }",0
"public List<String> sortStrings(List<String> strings) {
        List<String> sortedList = new ArrayList<>(strings);
        Collections.sort(sortedList);
        return sortedList;
    }",0
"public int countCharacterOccurrences(String input, char character) {
        int count = 0;
        for (char c : input.toCharArray()) {
            if (c == character) {
                count++;
            }
        }
        return count;
    }",0
"public Map<String, String> mergeMaps(Map<String, String> map1, Map<String, String> map2) {
        Map<String, String> mergedMap = new HashMap<>(map1);
        for (Map.Entry<String, String> entry : map2.entrySet()) {
            mergedMap.put(entry.getKey(), entry.getValue());
        }
        return mergedMap;
    }",1
"public String findLongestWord(List<String> words) {
        String longestWord = """";
        for (String word : words) {
            if (word.length() > longestWord.length()) {
                longestWord = word;
            }
        }
        return longestWord;
    }",0
"public double computeAverage(List<Integer> numbers) {
        if (numbers.isEmpty()) {
            throw new IllegalArgumentException(""List must not be empty."");
        }
        double sum = 0;
        for (int number : numbers) {
            sum += number;
        }
        return sum / numbers.size();
    }",0
"public String generateRandomString(int length) {
        String characters = ""ABCD"";
        StringBuilder result = new StringBuilder(length);
        Random rand = new Random();
        for (int i = 0; i < length; i++) {
            result.append(characters.charAt(rand.nextInt(characters.length())));
        }
        return result.toString();
    }",0
"public boolean areAnagrams(String str1, String str2) {
        char[] charArray1 = str1.toLowerCase().toCharArray();
        char[] charArray2 = str2.toLowerCase().toCharArray();
        Arrays.sort(charArray1);
        Arrays.sort(charArray2);
        return Arrays.equals(charArray1, charArray2);
    }",0
"public List<Integer> getArrayIntersection(int[] array1, int[] array2) {
        Set<Integer> set1 = new HashSet<>();
        for (int num : array1) {
            set1.add(num);
        }
        List<Integer> intersection = new ArrayList<>();
        for (int num : array2) {
            if (set1.contains(num)) {
                intersection.add(num);
            }
        }
        return intersection;
    }",0
"public double findMedian(List<Double> numbers) {
        Collections.sort(numbers);
        int size = numbers.size();
        if (size % 2 == 0) {
            return (numbers.get(size / 2 - 1) + numbers.get(size / 2)) / 2.0;
        } else {
            return numbers.get(size / 2);
        }
    }",0
"public List<Integer> generateFibonacci(int max) {
        List<Integer> fib = new ArrayList<>();
        int a = 0, b = 1;
        while (a <= max) {
            fib.add(a);
            int next = a + b;
            a = b;
            b = next;
        }
        return fib;
    }",0
"public String replaceSubstring(String original, String toReplace, String replacement) {
        StringBuilder result = new StringBuilder();
        int index = 0;
        while (index < original.length()) {
            int nextIndex = original.indexOf(toReplace, index);
            if (nextIndex == -1) {
                result.append(original.substring(index));
                break;
            }
            result.append(original.substring(index, nextIndex)).append(replacement);
            index = nextIndex + toReplace.length();
        }
        return result.toString();
    }",0
"public double power(double base, int exponent) {
        double result = 1.0;
        for (int i = 0; i < Math.abs(exponent); i++) {
            result *= base;
        }
        return exponent < 0 ? 1 / result : result;
    }",0
"public String generateRandomPassword(int length) {
        String upper = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
        String lower = ""abcdefghijklmnopqrstuvwxyz"";
        String digits = ""0123456789"";
        String special = ""!@#$%^&*()-_+=<>?"";
        String allCharacters = upper + lower + digits + special;
        StringBuilder password = new StringBuilder(length);
        Random rand = new Random();

        password.append(upper.charAt(rand.nextInt(upper.length())));
        password.append(lower.charAt(rand.nextInt(lower.length())));
        password.append(digits.charAt(rand.nextInt(digits.length())));
        password.append(special.charAt(rand.nextInt(special.length())));

        for (int i = 4; i < length; i++) {
            password.append(allCharacters.charAt(rand.nextInt(allCharacters.length())));
        }
        return password.toString();
    }",0
"public boolean isPrime(int number) {
        if (number <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }",0
"public int countVowels(String input) {
        int count = 0;
        for (char c : input.toCharArray()) {
            if (""AEIOUaeiou"".indexOf(c) != -1) {
                count++;
            }
        }
        return count;
    }",0
"public int findGCD(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }",0
"public String convertToBinary(int number) {
        StringBuilder binary = new StringBuilder();
        if (number == 0) {
            return ""0"";
        }
        while (number > 0) {
            binary.insert(0, number % 2);
            number /= 2;
        }
        return binary.toString();
    }",0
"public boolean isValidPhoneNumber(String phoneNumber) {
        String regex = ""^\\(\\d{3}\\) \\d{3}-\\d{4}$""; // Format: (123) 456-7890
        return phoneNumber.matches(regex);
    }",0
"public int add(int a, int b) {
        return a + b;
    }",0
"public String concatenate(String str1, String str2) {
        return str1 + str2;
    }",0
"public boolean isEven(int number) {
        return number % 2 == 0;
    }",0
"public double max(double a, double b) {
        return (a > b) ? a : b;
    }",0
"public double rectangleArea(double length, double width) {
        return length * width;
    }",0
"public int getStringLength(String str) {
        return str.length();
    }
",0
"public double celsiusToFahrenheit(double celsius) {
        return (celsius * 9/5) + 32;
    }",0
"public boolean isEmpty(String str) {
        return str == null || str.isEmpty();
    }",0
"public int countCharOccurrences(String str, char ch) {
        int count = 0;
        for (char c : str.toCharArray()) {
            if (c == ch) {
                count++;
            }
        }
        return count;
    }",0
"public long factorial(int number) {
        long result = 1;
        for (int i = 1; i <= number; i++) {
            result *= i;
        }
        return result;
    }",0
"public int longestWordLength(String sentence) {
        String[] words = sentence.split("" "");
        int maxLength = 0;
        for (String word : words) {
            if (word.length() > maxLength) {
                maxLength = word.length();
            }
        }
        return maxLength;
    }",0
"public char getFirstChar(String str) {
        if (str != null && !str.isEmpty()) {
            return str.charAt(0);
        }
        throw new IllegalArgumentException(""String is empty or null"");
    }",0
"public boolean isPrime(int number) {
        if (number <= 1) return false;
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) return false;
        }
        return true;
    }",0
"public String toUpperCase(String str) {
        return str.toUpperCase();
    }",0
"public int sumArray(int[] numbers) {
        int sum = 0;
        for (int number : numbers) {
            sum += number;
        }
        return sum;
    }",0
"public int minOfThree(int a, int b, int c) {
        return Math.min(a, Math.min(b, c));
    }",0
"public String reverseString(String str) {
        return new StringBuilder(str).reverse().toString();
    }",0
"public boolean areStringsEqual(String str1, String str2) {
        return str1.equals(str2);
    }",0
"public char getLastChar(String str) {
        if (str != null && !str.isEmpty()) {
            return str.charAt(str.length() - 1);
        }
        throw new IllegalArgumentException(""String is empty or null"");
    }",0
"public double average(double a, double b, double c) {
        return (a + b + c) / 3;
    }",0
"public boolean isPalindrome(String str) {
        if (str == null || str.isEmpty()) return false;
        int left = 0;
        int right = str.length() - 1;
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) return false;
            left++;
            right--;
        }
        return true;
    }",0
"public int[] mergeSortedArrays(int[] arr1, int[] arr2) {
        int[] merged = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] < arr2[j]) {
                merged[k++] = arr1[i++];
            } else {
                merged[k++] = arr2[j++];
            }
        }
        while (i < arr1.length) {
            merged[k++] = arr1[i++];
        }
        while (j < arr2.length) {
            merged[k++] = arr2[j++];
        }
        return merged;
    }
",0
"public int countVowels(String str) {
        if (str == null || str.isEmpty()) return 0;
        int count = 0;
        for (char c : str.toLowerCase().toCharArray()) {
            if (""aeiou"".indexOf(c) != -1) {
                count++;
            }
        }
        return count;
    }",0
"public int[] fibonacci(int n) {
        if (n <= 0) return new int[0];
        int[] fib = new int[n];
        fib[0] = 0;
        if (n > 1) fib[1] = 1;
        for (int i = 2; i < n; i++) {
            fib[i] = fib[i - 1] + fib[i - 2];
        }
        return fib;
    }
",0
"public int secondLargest(int[] arr) {
        if (arr.length < 2) throw new IllegalArgumentException(""Array must contain at least two elements."");
        int first = Integer.MIN_VALUE;
        int second = Integer.MIN_VALUE;
        for (int num : arr) {
            if (num > first) {
                second = first;
                first = num;
            } else if (num > second && num < first) {
                second = num;
            }
        }
        return second;
    }",0
"public int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }",0
"public int stringToInt(String str) {
        if (str == null || str.isEmpty()) throw new IllegalArgumentException(""String is empty or null."");
        int result = 0;
        boolean isNegative = false;
        int start = 0;
        if (str.charAt(0) == '-') {
            isNegative = true;
            start++;
        }
        for (int i = start; i < str.length(); i++) {
            result = result * 10 + (str.charAt(i) - '0');
        }
        return isNegative ? -result : result;
    }
",0
"public int countWords(String sentence) {
        if (sentence == null || sentence.isEmpty()) return 0;
        String[] words = sentence.trim().split(""\\s+"");
        return words.length;
    }
",0
"public int maxInArray(int[] arr) {
        if (arr.length == 0) throw new IllegalArgumentException(""Array is empty."");
        int max = arr[0];
        for (int num : arr) {
            if (num > max) max = num;
        }
        return max;
    }",0
"public int[] reverseArray(int[] arr) {
        int[] reversed = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            reversed[i] = arr[arr.length - 1 - i];
        }
        return reversed;
    }",0
"public int[] removeDuplicates(int[] arr) {
        Set<Integer> unique = new HashSet<>();
        for (int num : arr) {
            unique.add(num);
        }
        return unique.stream().mapToInt(i -> i).toArray();
    }",0
"public double power(double base, int exponent) {
        double result = 1.0;
        for (int i = 0; i < Math.abs(exponent); i++) {
            result *= base;
        }
        return exponent < 0 ? 1.0 / result : result;
    }",0
"public int[] findCommonElements(int[] arr1, int[] arr2) {
        Set<Integer> set = new HashSet<>();
        for (int num : arr1) {
            set.add(num);
        }
        List<Integer> common = new ArrayList<>();
        for (int num : arr2) {
            if (set.contains(num)) {
                common.add(num);
            }
        }
        return common.stream().mapToInt(i -> i).toArray();
    }",0
"public void printMultiplicationTable(int number, int limit) {
        for (int i = 1; i <= limit; i++) {
            System.out.println(number + "" x "" + i + "" = "" + (number * i));
        }
    }",0
"public boolean isPerfectSquare(int number) {
        if (number < 0) return false;
        int sqrt = (int) Math.sqrt(number);
        return (sqrt * sqrt) == number;
    }
",0
"public String getUniqueCharacters(String str) {
        StringBuilder uniqueChars = new StringBuilder();
        Set<Character> charSet = new HashSet<>();
        for (char c : str.toCharArray()) {
            if (charSet.add(c)) {
                uniqueChars.append(c);
            }
        }
        return uniqueChars.toString();
    }",0
"public int[] rotateArray(int[] arr, int n) {
        n = n % arr.length; // Handle rotations greater than array length
        int[] rotated = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            rotated[(i + n) % arr.length] = arr[i];
        }
        return rotated;
    }",0
"public int[] firstNPrimes(int n) {
        int[] primes = new int[n];
        int count = 0;
        int num = 2; // Starting from the first prime
        while (count < n) {
            if (isPrime(num)) {
                primes[count++] = num;
            }
            num++;
        }
        return primes;
    }",0
" public boolean areAnagrams(String str1, String str2) {
        if (str1.length() != str2.length()) return false;
        int[] charCount = new int[26];
        for (char c : str1.toCharArray()) {
            charCount[c - 'a']++;
        }
        for (char c : str2.toCharArray()) {
            charCount[c - 'a']--;
        }
        for (int count : charCount) {
            if (count != 0) return false;
        }
        return true;
    }",0
"public int sumOfDigits(int number) {
        int sum = 0;
        while (number > 0) {
            sum += number % 10;
            number /= 10;
        }
        return sum;
    }",0
"public int countConsonants(String str) {
        if (str == null || str.isEmpty()) return 0;
        int count = 0;
        for (char c : str.toLowerCase().toCharArray()) {
            if (Character.isLetter(c) && ""aeiou"".indexOf(c) == -1) {
                count++;
            }
        }
        return count;
    }",0
"public String getMiddleCharacter(String str) {
        if (str == null || str.isEmpty()) throw new IllegalArgumentException(""String is empty or null."");
        int mid = str.length() / 2;
        if (str.length() % 2 == 0) {
            return str.substring(mid - 1, mid + 1);
        } else {
            return Character.toString(str.charAt(mid));
        }
    }",0
"public boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }",0
"public int sumOfSquares(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            sum += num * num;
        }
        return sum;
    }",0
"public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return """";
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return """";
            }
        }
        return prefix;
    }",0
"public long factorialRec(int n) {
        if (n < 0) throw new IllegalArgumentException(""Negative numbers are not allowed."");
        if (n == 0 || n == 1) return 1;
        return n * factorialRec(n - 1);
    }",0
"public String removeWhitespace(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        return str.replaceAll(""\\s+"", """");
    }",0
"public Map<Character, Integer> charFrequency(String str) {
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : str.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }
        return frequencyMap;
    }",0
"public boolean hasAllUniqueCharacters(String str) {
        Set<Character> charSet = new HashSet<>();
        for (char c : str.toCharArray()) {
            if (!charSet.add(c)) return false;
        }
        return true;
    }",0
"public int countUppercase(String str) {
        if (str == null || str.isEmpty()) return 0;
        int count = 0;
        for (char c : str.toCharArray()) {
            if (Character.isUpperCase(c)) count++;
        }
        return count;
    }",0
"public String generateRandomString(int length) {
        String chars = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"";
        StringBuilder sb = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < length; i++) {
            int index = random.nextInt(chars.length());
            sb.append(chars.charAt(index));
        }
        return sb.toString();
    }",0
"public boolean isPowerOfTwo(int number) {
        if (number <= 0) return false;
        return (number & (number - 1)) == 0;
    }",0
"public String decimalToBinary(int num) {
        if (num < 0) throw new IllegalArgumentException(""Negative numbers are not allowed."");
        StringBuilder binary = new StringBuilder();
        do {
            binary.insert(0, num % 2);
            num /= 2;
        } while (num > 0);
        return binary.toString();
    }",0
"public int countDigits(int number) {
        if (number == 0) return 1;
        int count = 0;
        while (number != 0) {
            number /= 10;
            count++;
        }
        return count;
    }
",0
"public int sumOfEvenNumbers(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            if (num % 2 == 0) sum += num;
        }
        return sum;
    }",0
"public double harmonicMean(double[] arr) {
        if (arr.length == 0) throw new IllegalArgumentException(""Array cannot be empty."");
        double sum = 0;
        for (double num : arr) {
            if (num == 0) throw new IllegalArgumentException(""Array cannot contain zero."");
            sum += 1.0 / num;
        }
        return arr.length / sum;
    }
",0
"public boolean startsWith(String str, String prefix) {
        if (str == null || prefix == null) throw new IllegalArgumentException(""Strings cannot be null."");
        return str.startsWith(prefix);
    }",0
"public String capitalizeFirstLetter(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        String[] words = str.split(""\\s+"");
        StringBuilder capitalized = new StringBuilder();
        for (String word : words) {
            if (word.length() > 0) {
                capitalized.append(Character.toUpperCase(word.charAt(0)))
                           .append(word.substring(1))
                           .append("" "");
            }
        }
        return capitalized.toString().trim();
    }",0
"public int[] arrayIntersection(int[] arr1, int[] arr2) {
        Set<Integer> set1 = new HashSet<>();
        for (int num : arr1) {
            set1.add(num);
        }
        List<Integer> intersection = new ArrayList<>();
        for (int num : arr2) {
            if (set1.contains(num)) {
                intersection.add(num);
                set1.remove(num); // To avoid duplicates
            }
        }
        return intersection.stream().mapToInt(i -> i).toArray();
    }
",0
"public String removeCharacter(String str, char ch) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        StringBuilder result = new StringBuilder();
        for (char c : str.toCharArray()) {
            if (c != ch) result.append(c);
        }
        return result.toString();
    }",0
"public boolean isPrime(int num) {
        if (num <= 1) return false;
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) return false;
        }
        return true;
    }",0
"public String reverseString(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        StringBuilder reversed = new StringBuilder(str);
        return reversed.reverse().toString();
    }
",0
"public int getMax(int[] arr) {
        if (arr == null || arr.length == 0) throw new IllegalArgumentException(""Array cannot be empty."");
        int max = arr[0];
        for (int num : arr) {
            if (num > max) max = num;
        }
        return max;
    }",0
"public int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }",0
"public int[] mergeArrays(int[] arr1, int[] arr2) {
        int[] merged = new int[arr1.length + arr2.length];
        System.arraycopy(arr1, 0, merged, 0, arr1.length);
        System.arraycopy(arr2, 0, merged, arr1.length, arr2.length);
        return merged;
    }",0
"public int getMin(int[] arr) {
        if (arr == null || arr.length == 0) throw new IllegalArgumentException(""Array cannot be empty."");
        int min = arr[0];
        for (int num : arr) {
            if (num < min) min = num;
        }
        return min;
    }",0
"public int longestWordLength(String sentence) {
        if (sentence == null || sentence.isEmpty()) return 0;
        String[] words = sentence.split(""\\s+"");
        int maxLength = 0;
        for (String word : words) {
            if (word.length() > maxLength) maxLength = word.length();
        }
        return maxLength;
    }",0
"public String replaceChar(String str, char oldChar, char newChar) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        return str.replace(oldChar, newChar);
    }",0
"public boolean isPalindrome(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        String reversed = new StringBuilder(str).reverse().toString();
        return str.equals(reversed);
    }
",0
"public double calculateAverage(int[] arr) {
        if (arr == null || arr.length == 0) throw new IllegalArgumentException(""Array cannot be empty."");
        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        return (double) sum / arr.length;
    }",0
"public int countVowels(String str) {
        if (str == null || str.isEmpty()) return 0;
        int count = 0;
        for (char c : str.toLowerCase().toCharArray()) {
            if (""aeiou"".indexOf(c) != -1) count++;
        }
        return count;
    }",0
"public int generateRandomInRange(int min, int max) {
        if (min >= max) throw new IllegalArgumentException(""Min must be less than Max."");
        Random random = new Random();
        return random.nextInt((max - min)) + min;
    }",0
"public String toLowerCase(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        return str.toLowerCase();
    }",0
"public boolean areAnagrams(String str1, String str2) {
        if (str1 == null || str2 == null) throw new IllegalArgumentException(""Strings cannot be null."");
        char[] arr1 = str1.toCharArray();
        char[] arr2 = str2.toCharArray();
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        return Arrays.equals(arr1, arr2);
    }",0
"public char getLastCharacter(String str) {
        if (str == null || str.isEmpty()) throw new IllegalArgumentException(""String cannot be empty."");
        return str.charAt(str.length() - 1);
    }",0
"public int countCharacterOccurrences(String str, char ch) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        int count = 0;
        for (char c : str.toCharArray()) {
            if (c == ch) count++;
        }
        return count;
    }",0
"public int stringToInt(String str) {
        if (str == null || str.isEmpty()) throw new IllegalArgumentException(""String cannot be empty."");
        return Integer.parseInt(str);
    }",0
"public int getSecondLargest(int[] arr) {
        if (arr == null || arr.length < 2) throw new IllegalArgumentException(""Array must contain at least two elements."");
        int first = Integer.MIN_VALUE;
        int second = Integer.MIN_VALUE;
        for (int num : arr) {
            if (num > first) {
                second = first;
                first = num;
            } else if (num > second && num != first) {
                second = num;
            }
        }
        return second;
    }",0
"public boolean isNumeric(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        return str.matches(""\\d+"");
    }",0
"public int differenceBetweenMaxMin(int[] arr) {
        if (arr == null || arr.length == 0) throw new IllegalArgumentException(""Array cannot be empty."");
        int max = getMax(arr);
        int min = getMin(arr);
        return max - min;
    }",0
"public int[] findCommonElements(int[] arr1, int[] arr2) {
        Set<Integer> set = new HashSet<>();
        for (int num : arr1) {
            set.add(num);
        }
        List<Integer> commonElements = new ArrayList<>();
        for (int num : arr2) {
            if (set.contains(num)) {
                commonElements.add(num);
            }
        }
        return commonElements.stream().mapToInt(i -> i).toArray();
    }",0
"public double calculateRectanglePerimeter(double length, double width) {
        if (length < 0 || width < 0) throw new IllegalArgumentException(""Length and width must be non-negative."");
        return 2 * (length + width);
    }",0
"public double celsiusToFahrenheit(double celsius) {
        return (celsius * 9/5) + 32;
    }",0
"public boolean endsWith(String str, String suffix) {
        if (str == null || suffix == null) throw new IllegalArgumentException(""Strings cannot be null."");
        return str.endsWith(suffix);
    }",0
"public int[] removeDuplicates(int[] arr) {
        Set<Integer> set = new HashSet<>();
        for (int num : arr) {
            set.add(num);
        }
        return set.stream().mapToInt(i -> i).toArray();
    }",0
"public int[] getFibonacciNumbers(int n) {
        if (n <= 0) throw new IllegalArgumentException(""Number of terms must be positive."");
        int[] fibonacci = new int[n];
        fibonacci[0] = 0;
        if (n > 1) fibonacci[1] = 1;
        for (int i = 2; i < n; i++) {
            fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];
        }
        return fibonacci;
    }",0
"public boolean isAlphabetic(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        return str.chars().allMatch(Character::isLetter);
    }
",0
"public double kilometersToMiles(double kilometers) {
        if (kilometers < 0) throw new IllegalArgumentException(""Distance cannot be negative."");
        return kilometers * 0.621371;
    }",0
"public double calculateTriangleArea(double base, double height) {
        if (base < 0 || height < 0) throw new IllegalArgumentException(""Base and height must be non-negative."");
        return 0.5 * base * height;
    }",0
"public int indexOfCharacter(String str, char ch) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        return str.indexOf(ch);
    }",0
"public int countWords(String str) {
        if (str == null || str.isEmpty()) return 0;
        String[] words = str.trim().split(""\\s+"");
        return words.length;
    }",0
"public String toUpperCase(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        return str.toUpperCase();
    }",0
"public int getSecondSmallest(int[] arr) {
        if (arr == null || arr.length < 2) throw new IllegalArgumentException(""Array must contain at least two elements."");
        int first = Integer.MAX_VALUE;
        int second = Integer.MAX_VALUE;
        for (int num : arr) {
            if (num < first) {
                second = first;
                first = num;
            } else if (num < second && num != first) {
                second = num;
            }
        }
        return second;
    }",0
"public boolean containsSubstring(String str, String substring) {
        if (str == null || substring == null) throw new IllegalArgumentException(""Strings cannot be null."");
        return str.contains(substring);
    }
",0
"public double generateRandomDouble(double min, double max) {
        if (min >= max) throw new IllegalArgumentException(""Min must be less than Max."");
        Random random = new Random();
        return min + (max - min) * random.nextDouble();
    }",0
"public int square(int num) {
        return num * num;
    }",0
"public String intToBinaryString(int num) {
        return Integer.toBinaryString(num);
    }
",0
"public String longestUniqueSubstring(String str) {
        if (str == null || str.isEmpty()) return """";
        Set<Character> charSet = new HashSet<>();
        String longest = """";
        StringBuilder current = new StringBuilder();
        for (char c : str.toCharArray()) {
            while (charSet.contains(c)) {
                charSet.remove(current.charAt(0));
                current.deleteCharAt(0);
            }
            charSet.add(c);
            current.append(c);
            if (current.length() > longest.length()) {
                longest = current.toString();
            }
        }
        return longest;
    }",0
"public int sumOfOddNumbers(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            if (num % 2 != 0) sum += num;
        }
        return sum;
    }",0
"public char[] stringToCharArray(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        return str.toCharArray();
    }",0
"public void generateProjectReport(String projectId, String projectName, String[] teamMembers, String[] milestones, String startDate, String endDate, String[] issues, String projectManager, String budget) {
    System.out.println(""Generating report for project: "" + projectName);
    System.out.println(""Project ID: "" + projectId);
    System.out.println(""Project Manager: "" + projectManager);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    
    System.out.println(""Team Members:"");
    for (String member : teamMembers) {
        System.out.println(""- "" + member);
    }
    
    System.out.println(""Milestones:"");
    for (String milestone : milestones) {
        System.out.println(""- "" + milestone);
    }
    
    System.out.println(""Issues:"");
    for (String issue : issues) {
        System.out.println(""- "" + issue);
    }
    
    System.out.println(""Project report generated successfully!"");
}",1
"public void conductFeasibilityStudy(String studyId, String projectName, String[] stakeholders, String[] requirements, String[] risks, String analysisDate, String[] recommendations, String analyst) {
    System.out.println(""Conducting feasibility study for: "" + projectName);
    System.out.println(""Study ID: "" + studyId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);
    
    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }
    
    System.out.println(""Requirements:"");
    for (String requirement : requirements) {
        System.out.println(""- "" + requirement);
    }
    
    System.out.println(""Risks:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }
    
    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }
    
    System.out.println(""Feasibility study conducted successfully!"");
}",1
"public void planProductLaunch(String launchId, String productName, String launchDate, String[] marketingChannels, String[] targetMarkets, String budget, String[] promotionalActivities, String projectManager) {
    System.out.println(""Planning launch for product: "" + productName);
    System.out.println(""Launch ID: "" + launchId);
    System.out.println(""Launch Date: "" + launchDate);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Marketing Channels:"");
    for (String channel : marketingChannels) {
        System.out.println(""- "" + channel);
    }
    
    System.out.println(""Target Markets:"");
    for (String market : targetMarkets) {
        System.out.println(""- "" + market);
    }
    
    System.out.println(""Promotional Activities:"");
    for (String activity : promotionalActivities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Product launch planned successfully!"");
}",1
"public void evaluateTrainingProgram(String evaluationId, String programName, String[] participantFeedback, String[] trainingMaterials, String evaluationDate, String evaluator, String[] suggestions, String budget) {
    System.out.println(""Evaluating training program: "" + programName);
    System.out.println(""Evaluation ID: "" + evaluationId);
    System.out.println(""Evaluation Date: "" + evaluationDate);
    System.out.println(""Evaluator: "" + evaluator);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Participant Feedback:"");
    for (String feedback : participantFeedback) {
        System.out.println(""- "" + feedback);
    }
    
    System.out.println(""Training Materials:"");
    for (String material : trainingMaterials) {
        System.out.println(""- "" + material);
    }
    
    System.out.println(""Suggestions:"");
    for (String suggestion : suggestions) {
        System.out.println(""- "" + suggestion);
    }
    
    System.out.println(""Training program evaluated successfully!"");
}",1
"public void draftContract(String contractId, String clientName, String[] services, String contractDate, String expirationDate, String[] terms, String[] deliverables, String contractManager) {
    System.out.println(""Drafting contract for client: "" + clientName);
    System.out.println(""Contract ID: "" + contractId);
    System.out.println(""Contract Date: "" + contractDate);
    System.out.println(""Expiration Date: "" + expirationDate);
    
    System.out.println(""Services Provided:"");
    for (String service : services) {
        System.out.println(""- "" + service);
    }
    
    System.out.println(""Terms:"");
    for (String term : terms) {
        System.out.println(""- "" + term);
    }
    
    System.out.println(""Deliverables:"");
    for (String deliverable : deliverables) {
        System.out.println(""- "" + deliverable);
    }
    
    System.out.println(""Contract drafted successfully!"");
}",1
"public void conductMarketResearch(String researchId, String productName, String[] targetDemographics, String[] competitors, String[] researchMethods, String analysisDate, String[] findings, String researcher) {
    System.out.println(""Conducting market research for product: "" + productName);
    System.out.println(""Research ID: "" + researchId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Researcher: "" + researcher);
    
    System.out.println(""Target Demographics:"");
    for (String demographic : targetDemographics) {
        System.out.println(""- "" + demographic);
    }
    
    System.out.println(""Competitors:"");
    for (String competitor : competitors) {
        System.out.println(""- "" + competitor);
    }
    
    System.out.println(""Research Methods:"");
    for (String method : researchMethods) {
        System.out.println(""- "" + method);
    }
    
    System.out.println(""Findings:"");
    for (String finding : findings) {
        System.out.println(""- "" + finding);
    }
    
    System.out.println(""Market research conducted successfully!"");
}
",1
"public void createPerformanceEvaluation(String evaluationId, String employeeName, String[] evaluationCriteria, String[] feedback, String evaluationDate, String evaluator, String strengths, String areasForImprovement) {
    System.out.println(""Creating performance evaluation for: "" + employeeName);
    System.out.println(""Evaluation ID: "" + evaluationId);
    System.out.println(""Evaluation Date: "" + evaluationDate);
    System.out.println(""Evaluator: "" + evaluator);
    
    System.out.println(""Evaluation Criteria:"");
    for (String criterion : evaluationCriteria) {
        System.out.println(""- "" + criterion);
    }
    
    System.out.println(""Feedback:"");
    for (String fb : feedback) {
        System.out.println(""- "" + fb);
    }
    
    System.out.println(""Strengths: "" + strengths);
    System.out.println(""Areas for Improvement: "" + areasForImprovement);
    
    System.out.println(""Performance evaluation created successfully!"");
}",1
"public void planCommunityOutreachProgram(String programId, String programName, String[] targetCommunities, String budget, String[] activities, String programDate, String[] sponsors, String coordinator) {
    System.out.println(""Planning community outreach program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Program Date: "" + programDate);
    
    System.out.println(""Target Communities:"");
    for (String community : targetCommunities) {
        System.out.println(""- "" + community);
    }
    
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Sponsors:"");
    for (String sponsor : sponsors) {
        System.out.println(""- "" + sponsor);
    }
    
    System.out.println(""Community outreach program planned successfully!"");
}",1
"public void assessEnvironmentalImpact(String assessmentId, String projectName, String[] environmentalFactors, String[] impactMetrics, String assessmentDate, String reviewer, String[] recommendations) {
    System.out.println(""Assessing environmental impact for: "" + projectName);
    System.out.println(""Assessment ID: "" + assessmentId);
    System.out.println(""Assessment Date: "" + assessmentDate);
    System.out.println(""Reviewer: "" + reviewer);
    
    System.out.println(""Environmental Factors:"");
    for (String factor : environmentalFactors) {
        System.out.println(""- "" + factor);
    }
    
    System.out.println(""Impact Metrics:"");
    for (String metric : impactMetrics) {
        System.out.println(""- "" + metric);
    }
    
    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }
    
    System.out.println(""Environmental impact assessed successfully!"");
}
",1
"public void createBusinessContinuityPlan(String planId, String organizationName, String[] criticalFunctions, String[] recoveryStrategies, String planDate, String[] responsibleTeams, String[] trainingNeeds, String reviewer) {
    System.out.println(""Creating business continuity plan for: "" + organizationName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Plan Date: "" + planDate);
    
    System.out.println(""Critical Functions:"");
    for (String function : criticalFunctions) {
        System.out.println(""- "" + function);
    }
    
    System.out.println(""Recovery Strategies:"");
    for (String strategy : recoveryStrategies) {
        System.out.println(""- "" + strategy);
    }
    
    System.out.println(""Responsible Teams:"");
    for (String team : responsibleTeams) {
        System.out.println(""- "" + team);
    }
    
    System.out.println(""Training Needs:"");
    for (String need : trainingNeeds) {
        System.out.println(""- "" + need);
    }
    
    System.out.println(""Business continuity plan created successfully!"");
}",1
"public void analyzeCustomerSatisfaction(String analysisId, String productName, String[] customerFeedback, String analysisDate, String analyst, String[] improvementAreas, String[] commendations) {
    System.out.println(""Analyzing customer satisfaction for product: "" + productName);
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);
    
    System.out.println(""Customer Feedback:"");
    for (String feedback : customerFeedback) {
        System.out.println(""- "" + feedback);
    }
    
    System.out.println(""Improvement Areas:"");
    for (String area : improvementAreas) {
        System.out.println(""- "" + area);
    }
    
    System.out.println(""Commendations:"");
    for (String commendation : commendations) {
        System.out.println(""- "" + commendation);
    }
    
    System.out.println(""Customer satisfaction analyzed successfully!"");
}",1
"public void implementChangeRequest(String requestId, String projectName, String[] requestedChanges, String[] impactAnalysis, String changeDate, String requester, String[] approvalStatus, String[] assignedResources) {
    System.out.println(""Implementing change request for project: "" + projectName);
    System.out.println(""Request ID: "" + requestId);
    System.out.println(""Change Date: "" + changeDate);
    System.out.println(""Requester: "" + requester);
    
    System.out.println(""Requested Changes:"");
    for (String change : requestedChanges) {
        System.out.println(""- "" + change);
    }
    
    System.out.println(""Impact Analysis:"");
    for (String analysis : impactAnalysis) {
        System.out.println(""- "" + analysis);
    }
    
    System.out.println(""Approval Status:"");
    for (String status : approvalStatus) {
        System.out.println(""- "" + status);
    }
    
    System.out.println(""Assigned Resources:"");
    for (String resource : assignedResources) {
        System.out.println(""- "" + resource);
    }
    
    System.out.println(""Change request implemented successfully!"");
}",1
"public void conductEmployeeEngagementSurvey(String surveyId, String organizationName, String[] surveyQuestions, String[] participantNames, String surveyDate, String[] results, String surveyManager) {
    System.out.println(""Conducting employee engagement survey for: "" + organizationName);
    System.out.println(""Survey ID: "" + surveyId);
    System.out.println(""Survey Date: "" + surveyDate);
    System.out.println(""Survey Manager: "" + surveyManager);
    
    System.out.println(""Survey Questions:"");
    for (String question : surveyQuestions) {
        System.out.println(""- "" + question);
    }
    
    System.out.println(""Participant Names:"");
    for (String name : participantNames) {
        System.out.println(""- "" + name);
    }
    
    System.out.println(""Results:"");
    for (String result : results) {
        System.out.println(""- "" + result);
    }
    
    System.out.println(""Employee engagement survey conducted successfully!"");
}",1
"public void createVendorManagementPlan(String planId, String organizationName, String[] vendors, String planDate, String[] evaluationCriteria, String[] riskMitigationStrategies, String planManager, String budget) {
    System.out.println(""Creating vendor management plan for: "" + organizationName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Plan Date: "" + planDate);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Vendors:"");
    for (String vendor : vendors) {
        System.out.println(""- "" + vendor);
    }
    
    System.out.println(""Evaluation Criteria:"");
    for (String criterion : evaluationCriteria) {
        System.out.println(""- "" + criterion);
    }
    
    System.out.println(""Risk Mitigation Strategies:"");
    for (String strategy : riskMitigationStrategies) {
        System.out.println(""- "" + strategy);
    }
    
    System.out.println(""Vendor management plan created successfully!"");
}
",1
"public void facilitateTeamBuildingActivity(String activityId, String teamName, String[] participants, String activityDate, String location, String[] plannedActivities, String facilitator, String budget) {
    System.out.println(""Facilitating team-building activity for: "" + teamName);
    System.out.println(""Activity ID: "" + activityId);
    System.out.println(""Activity Date: "" + activityDate);
    System.out.println(""Location: "" + location);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Planned Activities:"");
    for (String activity : plannedActivities) {
        System.out.println(""- "" + activity);
    }
    
    System.out.println(""Team-building activity facilitated successfully!"");
}
",1
"public void conductSafetyAudit(String auditId, String organizationName, String[] auditAreas, String auditDate, String auditor, String[] findings, String[] recommendations, String budget) {
    System.out.println(""Conducting safety audit for: "" + organizationName);
    System.out.println(""Audit ID: "" + auditId);
    System.out.println(""Audit Date: "" + auditDate);
    System.out.println(""Auditor: "" + auditor);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Audit Areas:"");
    for (String area : auditAreas) {
        System.out.println(""- "" + area);
    }
    
    System.out.println(""Findings:"");
    for (String finding : findings) {
        System.out.println(""- "" + finding);
    }
    
    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }
    
    System.out.println(""Safety audit conducted successfully!"");
}",1
"public void developCustomerLoyaltyProgram(String programId, String organizationName, String[] rewardOptions, String[] engagementStrategies, String startDate, String endDate, String budget, String programManager) {
    System.out.println(""Developing customer loyalty program for: "" + organizationName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Reward Options:"");
    for (String reward : rewardOptions) {
        System.out.println(""- "" + reward);
    }
    
    System.out.println(""Engagement Strategies:"");
    for (String strategy : engagementStrategies) {
        System.out.println(""- "" + strategy);
    }
    
    System.out.println(""Customer loyalty program developed successfully!"");
}
",1
"public void analyzeBusinessPerformance(String analysisId, String organizationName, String[] performanceMetrics, String analysisDate, String analyst, String[] conclusions, String[] recommendations) {
    System.out.println(""Analyzing business performance for: "" + organizationName);
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);
    
    System.out.println(""Performance Metrics:"");
    for (String metric : performanceMetrics) {
        System.out.println(""- "" + metric);
    }
    
    System.out.println(""Conclusions:"");
    for (String conclusion : conclusions) {
        System.out.println(""- "" + conclusion);
    }
    
    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }
    
    System.out.println(""Business performance analyzed successfully!"");
}",1
"public void createDisasterRecoveryPlan(String planId, String organizationName, String[] criticalSystems, String planDate, String[] recoveryStrategies, String[] contactList, String planManager, String budget) {
    System.out.println(""Creating disaster recovery plan for: "" + organizationName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Plan Date: "" + planDate);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Critical Systems:"");
    for (String system : criticalSystems) {
        System.out.println(""- "" + system);
    }
    
    System.out.println(""Recovery Strategies:"");
    for (String strategy : recoveryStrategies) {
        System.out.println(""- "" + strategy);
    }
    
    System.out.println(""Contact List:"");
    for (String contact : contactList) {
        System.out.println(""- "" + contact);
    }
    
    System.out.println(""Disaster recovery plan created successfully!"");
}",1
"public void organizeConference(String conferenceId, String conferenceName, String[] speakers, String[] participants, String startDate, String endDate, String location, String budget) {
    System.out.println(""Organizing conference: "" + conferenceName);
    System.out.println(""Conference ID: "" + conferenceId);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Location: "" + location);
    System.out.println(""Budget: $"" + budget);
    
    System.out.println(""Speakers:"");
    for (String speaker : speakers) {
        System.out.println(""- "" + speaker);
    }
    
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    
    System.out.println(""Conference organized successfully!"");
}",1
"public void manageEvent(String eventId, String eventName, String eventDate, String location, String organizer, String[] participants, String[] sponsors, String budget, String[] resources, String[] schedule) {
    System.out.println(""Managing event: "" + eventName);
    System.out.println(""Event ID: "" + eventId);
    System.out.println(""Event Date: "" + eventDate);
    System.out.println(""Location: "" + location);
    System.out.println(""Organizer: "" + organizer);
    System.out.println(""Budget: $"" + budget);

    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }

    System.out.println(""Sponsors:"");
    for (String sponsor : sponsors) {
        System.out.println(""- "" + sponsor);
    }

    System.out.println(""Resources:"");
    for (String resource : resources) {
        System.out.println(""- "" + resource);
    }

    System.out.println(""Schedule:"");
    for (String item : schedule) {
        System.out.println(""- "" + item);
    }

    System.out.println(""Event managed successfully!"");
}",1
"public void conductMarketResearch(String researchId, String targetMarket, String[] researchMethods, String[] competitors, String[] dataSources, String researchDate, String researcher, String[] findings, String[] recommendations) {
    System.out.println(""Conducting market research for: "" + targetMarket);
    System.out.println(""Research ID: "" + researchId);
    System.out.println(""Research Date: "" + researchDate);
    System.out.println(""Researcher: "" + researcher);

    System.out.println(""Research Methods:"");
    for (String method : researchMethods) {
        System.out.println(""- "" + method);
    }

    System.out.println(""Competitors:"");
    for (String competitor : competitors) {
        System.out.println(""- "" + competitor);
    }

    System.out.println(""Data Sources:"");
    for (String source : dataSources) {
        System.out.println(""- "" + source);
    }

    System.out.println(""Findings:"");
    for (String finding : findings) {
        System.out.println(""- "" + finding);
    }

    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }

    System.out.println(""Market research conducted successfully!"");
}",1
"public void developMarketingStrategy(String strategyId, String product, String[] targetSegments, String[] marketingChannels, String[] budgetAllocations, String[] keyMessages, String startDate, String endDate) {
    System.out.println(""Developing marketing strategy for: "" + product);
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);

    System.out.println(""Target Segments:"");
    for (String segment : targetSegments) {
        System.out.println(""- "" + segment);
    }

    System.out.println(""Marketing Channels:"");
    for (String channel : marketingChannels) {
        System.out.println(""- "" + channel);
    }

    System.out.println(""Budget Allocations:"");
    for (String allocation : budgetAllocations) {
        System.out.println(""- "" + allocation);
    }

    System.out.println(""Key Messages:"");
    for (String message : keyMessages) {
        System.out.println(""- "" + message);
    }

    System.out.println(""Marketing strategy developed successfully!"");
}
",1
"public void createEmployeeTrainingProgram(String programId, String programName, String[] participants, String[] trainingTopics, String programStartDate, String programEndDate, String trainer, String budget) {
    System.out.println(""Creating employee training program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Program Start Date: "" + programStartDate);
    System.out.println(""Program End Date: "" + programEndDate);
    System.out.println(""Trainer: "" + trainer);
    System.out.println(""Budget: $"" + budget);

    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }

    System.out.println(""Training Topics:"");
    for (String topic : trainingTopics) {
        System.out.println(""- "" + topic);
    }

    System.out.println(""Employee training program created successfully!"");
}",1
"public void handleProductLaunch(String launchId, String productName, String launchDate, String[] targetMarkets, String[] promotionalActivities, String budget, String projectManager, String[] teamMembers, String[] stakeholders) {
    System.out.println(""Handling product launch for: "" + productName);
    System.out.println(""Launch ID: "" + launchId);
    System.out.println(""Launch Date: "" + launchDate);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Project Manager: "" + projectManager);

    System.out.println(""Target Markets:"");
    for (String market : targetMarkets) {
        System.out.println(""- "" + market);
    }

    System.out.println(""Promotional Activities:"");
    for (String activity : promotionalActivities) {
        System.out.println(""- "" + activity);
    }

    System.out.println(""Team Members:"");
    for (String member : teamMembers) {
        System.out.println(""- "" + member);
    }

    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }

    System.out.println(""Product launch handled successfully!"");
}",1
"public void evaluateEmployeePerformance(String evaluationId, String employeeName, String[] performanceMetrics, String evaluationDate, String evaluator, String[] feedback, String[] goals, String improvementPlan) {
    System.out.println(""Evaluating performance for: "" + employeeName);
    System.out.println(""Evaluation ID: "" + evaluationId);
    System.out.println(""Evaluation Date: "" + evaluationDate);
    System.out.println(""Evaluator: "" + evaluator);

    System.out.println(""Performance Metrics:"");
    for (String metric : performanceMetrics) {
        System.out.println(""- "" + metric);
    }

    System.out.println(""Feedback:"");
    for (String item : feedback) {
        System.out.println(""- "" + item);
    }

    System.out.println(""Goals:"");
    for (String goal : goals) {
        System.out.println(""- "" + goal);
    }

    System.out.println(""Improvement Plan: "" + improvementPlan);
    System.out.println(""Employee performance evaluated successfully!"");
}",1
"public void createCompanyWideInitiative(String initiativeId, String initiativeName, String[] departmentsInvolved, String[] goals, String startDate, String endDate, String budget, String[] keyPerformanceIndicators, String projectLeader) {
    System.out.println(""Creating company-wide initiative: "" + initiativeName);
    System.out.println(""Initiative ID: "" + initiativeId);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Project Leader: "" + projectLeader);

    System.out.println(""Departments Involved:"");
    for (String department : departmentsInvolved) {
        System.out.println(""- "" + department);
    }

    System.out.println(""Goals:"");
    for (String goal : goals) {
        System.out.println(""- "" + goal);
    }

    System.out.println(""Key Performance Indicators:"");
    for (String kpi : keyPerformanceIndicators) {
        System.out.println(""- "" + kpi);
    }

    System.out.println(""Company-wide initiative created successfully!"");
}",1
"public void performSWOTAnalysis(String analysisId, String organizationName, String[] strengths, String[] weaknesses, String[] opportunities, String[] threats, String analysisDate, String analyst) {
    System.out.println(""Performing SWOT analysis for: "" + organizationName);
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);

    System.out.println(""Strengths:"");
    for (String strength : strengths) {
        System.out.println(""- "" + strength);
    }

    System.out.println(""Weaknesses:"");
    for (String weakness : weaknesses) {
        System.out.println(""- "" + weakness);
    }

    System.out.println(""Opportunities:"");
    for (String opportunity : opportunities) {
        System.out.println(""- "" + opportunity);
    }

    System.out.println(""Threats:"");
    for (String threat : threats) {
        System.out.println(""- "" + threat);
    }

    System.out.println(""SWOT analysis performed successfully!"");
}",1
"public void createCSRProgram(String programId, String programName, String[] objectives, String[] activities, String startDate, String endDate, String budget, String[] partners) {
    System.out.println(""Creating CSR program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Budget: $"" + budget);

    System.out.println(""Objectives:"");
    for (String objective : objectives) {
        System.out.println(""- "" + objective);
    }

    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }

    System.out.println(""Partners:"");
    for (String partner : partners) {
        System.out.println(""- "" + partner);
    }

    System.out.println(""CSR program created successfully!"");
}",1
"public void executeProjectPlan(String projectId, String projectName, String[] teamMembers, String startDate, String endDate, String budget, String[] deliverables, String[] risks, String projectManager) {
    System.out.println(""Executing project plan for: "" + projectName);
    System.out.println(""Project ID: "" + projectId);
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""End Date: "" + endDate);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Project Manager: "" + projectManager);

    System.out.println(""Team Members:"");
    for (String member : teamMembers) {
        System.out.println(""- "" + member);
    }

    System.out.println(""Deliverables:"");
    for (String deliverable : deliverables) {
        System.out.println(""- "" + deliverable);
    }

    System.out.println(""Risks:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }

    System.out.println(""Project plan executed successfully!"");
}",1
"public void conductFeasibilityStudy(String studyId, String projectName, String[] feasibilityCriteria, String[] analysisMethods, String[] risks, String studyDate, String[] recommendations, String studyLead) {
    System.out.println(""Conducting feasibility study for: "" + projectName);
    System.out.println(""Study ID: "" + studyId);
    System.out.println(""Study Date: "" + studyDate);
    System.out.println(""Study Lead: "" + studyLead);

    System.out.println(""Feasibility Criteria:"");
    for (String criterion : feasibilityCriteria) {
        System.out.println(""- "" + criterion);
    }

    System.out.println(""Analysis Methods:"");
    for (String method : analysisMethods) {
        System.out.println(""- "" + method);
    }

    System.out.println(""Risks:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }

    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }

    System.out.println(""Feasibility study conducted successfully!"");
}",1
"public void analyzeCustomerFeedback(String feedbackId, String product, String[] feedbackComments, String[] ratings, String analysisDate, String[] improvementSuggestions, String analyst) {
    System.out.println(""Analyzing customer feedback for: "" + product);
    System.out.println(""Feedback ID: "" + feedbackId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);

    System.out.println(""Feedback Comments:"");
    for (String comment : feedbackComments) {
        System.out.println(""- "" + comment);
    }

    System.out.println(""Ratings:"");
    for (String rating : ratings) {
        System.out.println(""- "" + rating);
    }

    System.out.println(""Improvement Suggestions:"");
    for (String suggestion : improvementSuggestions) {
        System.out.println(""- "" + suggestion);
    }

    System.out.println(""Customer feedback analyzed successfully!"");
}",1
"public void implementChangeRequest(String requestId, String projectName, String[] changeDetails, String requestDate, String implementer, String[] stakeholders, String expectedOutcome, String[] risks) {
    System.out.println(""Implementing change request for: "" + projectName);
    System.out.println(""Request ID: "" + requestId);
    System.out.println(""Request Date: "" + requestDate);
    System.out.println(""Implementer: "" + implementer);
    System.out.println(""Expected Outcome: "" + expectedOutcome);

    System.out.println(""Change Details:"");
    for (String detail : changeDetails) {
        System.out.println(""- "" + detail);
    }

    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }

    System.out.println(""Risks:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }

    System.out.println(""Change request implemented successfully!"");
}",1
"public void createNewProductLine(String productLineId, String productLineName, String[] products, String targetMarket, String budget, String launchDate, String[] marketingStrategies, String[] partners) {
    System.out.println(""Creating new product line: "" + productLineName);
    System.out.println(""Product Line ID: "" + productLineId);
    System.out.println(""Target Market: "" + targetMarket);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Launch Date: "" + launchDate);

    System.out.println(""Products:"");
    for (String product : products) {
        System.out.println(""- "" + product);
    }

    System.out.println(""Marketing Strategies:"");
    for (String strategy : marketingStrategies) {
        System.out.println(""- "" + strategy);
    }

    System.out.println(""Partners:"");
    for (String partner : partners) {
        System.out.println(""- "" + partner);
    }

    System.out.println(""New product line created successfully!"");
}",1
"public void conductEmployeeSatisfactionSurvey(String surveyId, String[] questions, String[] respondents, String surveyDate, String[] results, String surveyLeader, String[] recommendations) {
    System.out.println(""Conducting employee satisfaction survey:"");
    System.out.println(""Survey ID: "" + surveyId);
    System.out.println(""Survey Date: "" + surveyDate);
    System.out.println(""Survey Leader: "" + surveyLeader);

    System.out.println(""Questions:"");
    for (String question : questions) {
        System.out.println(""- "" + question);
    }

    System.out.println(""Respondents:"");
    for (String respondent : respondents) {
        System.out.println(""- "" + respondent);
    }

    System.out.println(""Results:"");
    for (String result : results) {
        System.out.println(""- "" + result);
    }

    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }

    System.out.println(""Employee satisfaction survey conducted successfully!"");
}
",1
"public void createRiskManagementPlan(String planId, String projectName, String[] risks, String[] mitigationStrategies, String budget, String responsiblePerson, String reviewDate, String[] stakeholders) {
    System.out.println(""Creating risk management plan for: "" + projectName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Responsible Person: "" + responsiblePerson);
    System.out.println(""Review Date: "" + reviewDate);

    System.out.println(""Risks:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }

    System.out.println(""Mitigation Strategies:"");
    for (String strategy : mitigationStrategies) {
        System.out.println(""- "" + strategy);
    }

    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }

    System.out.println(""Risk management plan created successfully!"");
}",1
"public void conductTechnologyAssessment(String assessmentId, String technologyName, String[] evaluationCriteria, String assessmentDate, String evaluator, String[] findings, String[] recommendations) {
    System.out.println(""Conducting technology assessment for: "" + technologyName);
    System.out.println(""Assessment ID: "" + assessmentId);
    System.out.println(""Assessment Date: "" + assessmentDate);
    System.out.println(""Evaluator: "" + evaluator);

    System.out.println(""Evaluation Criteria:"");
    for (String criterion : evaluationCriteria) {
        System.out.println(""- "" + criterion);
    }

    System.out.println(""Findings:"");
    for (String finding : findings) {
        System.out.println(""- "" + finding);
    }

    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }

    System.out.println(""Technology assessment conducted successfully!"");
}
",1
"public void organizeCommunityOutreachProgram(String programId, String programName, String[] targetGroups, String[] activities, String budget, String[] partners, String programDate, String coordinator) {
    System.out.println(""Organizing community outreach program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Program Date: "" + programDate);
    System.out.println(""Coordinator: "" + coordinator);
    System.out.println(""Budget: $"" + budget);

    System.out.println(""Target Groups:"");
    for (String group : targetGroups) {
        System.out.println(""- "" + group);
    }

    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }

    System.out.println(""Partners:"");
    for (String partner : partners) {
        System.out.println(""- "" + partner);
    }

    System.out.println(""Community outreach program organized successfully!"");
}",1
"public void createInternalAuditReport(String reportId, String auditName, String[] findings, String auditDate, String auditor, String[] recommendations, String[] responsibleDepartments) {
    System.out.println(""Creating internal audit report for: "" + auditName);
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Audit Date: "" + auditDate);
    System.out.println(""Auditor: "" + auditor);

    System.out.println(""Findings:"");
    for (String finding : findings) {
        System.out.println(""- "" + finding);
    }

    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }

    System.out.println(""Responsible Departments:"");
    for (String department : responsibleDepartments) {
        System.out.println(""- "" + department);
    }

    System.out.println(""Internal audit report created successfully!"");
}
",1
"public void createTrainingProgram(String programId, String programName, String[] topics, String duration, String targetAudience, String budget, String programDate, String trainer) {
    System.out.println(""Creating training program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Duration: "" + duration);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Program Date: "" + programDate);
    System.out.println(""Trainer: "" + trainer);

    System.out.println(""Topics:"");
    for (String topic : topics) {
        System.out.println(""- "" + topic);
    }

    System.out.println(""Training program created successfully!"");
}",1
"public void developMarketingPlan(String planId, String productName, String[] targetMarkets, String budget, String[] strategies, String launchDate, String[] channels, String marketingManager) {
    System.out.println(""Developing marketing plan for: "" + productName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Launch Date: "" + launchDate);
    System.out.println(""Marketing Manager: "" + marketingManager);

    System.out.println(""Target Markets:"");
    for (String market : targetMarkets) {
        System.out.println(""- "" + market);
    }

    System.out.println(""Strategies:"");
    for (String strategy : strategies) {
        System.out.println(""- "" + strategy);
    }

    System.out.println(""Channels:"");
    for (String channel : channels) {
        System.out.println(""- "" + channel);
    }

    System.out.println(""Marketing plan developed successfully!"");
}",1
"public void analyzeCompetitorLandscape(String analysisId, String productName, String[] competitors, String[] strengths, String[] weaknesses, String[] opportunities, String[] threats, String analysisDate) {
    System.out.println(""Analyzing competitor landscape for: "" + productName);
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Analysis Date: "" + analysisDate);

    System.out.println(""Competitors:"");
    for (String competitor : competitors) {
        System.out.println(""- "" + competitor);
    }

    System.out.println(""Strengths:"");
    for (String strength : strengths) {
        System.out.println(""- "" + strength);
    }

    System.out.println(""Weaknesses:"");
    for (String weakness : weaknesses) {
        System.out.println(""- "" + weakness);
    }

    System.out.println(""Opportunities:"");
    for (String opportunity : opportunities) {
        System.out.println(""- "" + opportunity);
    }

    System.out.println(""Threats:"");
    for (String threat : threats) {
        System.out.println(""- "" + threat);
    }

    System.out.println(""Competitor landscape analyzed successfully!"");
}",1
"public void createProductLaunchEvent(String eventId, String productName, String launchDate, String venue, String budget, String[] activities, String[] partners, String coordinator) {
    System.out.println(""Creating product launch event for: "" + productName);
    System.out.println(""Event ID: "" + eventId);
    System.out.println(""Launch Date: "" + launchDate);
    System.out.println(""Venue: "" + venue);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Coordinator: "" + coordinator);

    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }

    System.out.println(""Partners:"");
    for (String partner : partners) {
        System.out.println(""- "" + partner);
    }

    System.out.println(""Product launch event created successfully!"");
}
",1
"public void assessTrainingNeeds(String assessmentId, String department, String[] roles, String[] trainingTopics, String assessmentDate, String assessor, String[] findings, String[] recommendations) {
    System.out.println(""Assessing training needs for department: "" + department);
    System.out.println(""Assessment ID: "" + assessmentId);
    System.out.println(""Assessment Date: "" + assessmentDate);
    System.out.println(""Assessor: "" + assessor);

    System.out.println(""Roles:"");
    for (String role : roles) {
        System.out.println(""- "" + role);
    }

    System.out.println(""Training Topics:"");
    for (String topic : trainingTopics) {
        System.out.println(""- "" + topic);
    }

    System.out.println(""Findings:"");
    for (String finding : findings) {
        System.out.println(""- "" + finding);
    }

    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }

    System.out.println(""Training needs assessment completed successfully!"");
}
",1
"public void createCustomerLoyaltyProgram(String programId, String programName, String[] benefits, String budget, String[] partners, String launchDate, String programManager) {
    System.out.println(""Creating customer loyalty program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Launch Date: "" + launchDate);
    System.out.println(""Program Manager: "" + programManager);

    System.out.println(""Benefits:"");
    for (String benefit : benefits) {
        System.out.println(""- "" + benefit);
    }

    System.out.println(""Partners:"");
    for (String partner : partners) {
        System.out.println(""- "" + partner);
    }

    System.out.println(""Customer loyalty program created successfully!"");
}",1
"public void createBusinessContinuityPlan(String planId, String businessName, String[] criticalFunctions, String[] recoveryStrategies, String budget, String reviewDate, String responsiblePerson) {
    System.out.println(""Creating business continuity plan for: "" + businessName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Review Date: "" + reviewDate);
    System.out.println(""Responsible Person: "" + responsiblePerson);

    System.out.println(""Critical Functions:"");
    for (String function : criticalFunctions) {
        System.out.println(""- "" + function);
    }

    System.out.println(""Recovery Strategies:"");
    for (String strategy : recoveryStrategies) {
        System.out.println(""- "" + strategy);
    }

    System.out.println(""Business continuity plan created successfully!"");
}
",1
"public void developProductRoadmap(String roadmapId, String productName, String[] milestones, String[] objectives, String[] timelines, String productManager) {
    System.out.println(""Developing product roadmap for: "" + productName);
    System.out.println(""Roadmap ID: "" + roadmapId);
    System.out.println(""Product Manager: "" + productManager);

    System.out.println(""Milestones:"");
    for (String milestone : milestones) {
        System.out.println(""- "" + milestone);
    }

    System.out.println(""Objectives:"");
    for (String objective : objectives) {
        System.out.println(""- "" + objective);
    }

    System.out.println(""Timelines:"");
    for (String timeline : timelines) {
        System.out.println(""- "" + timeline);
    }

    System.out.println(""Product roadmap developed successfully!"");
}",1
"public void conductMarketAnalysis(String analysisId, String marketName, String[] trends, String[] targetCustomers, String[] competitors, String analysisDate, String analyst, String[] recommendations) {
    System.out.println(""Conducting market analysis for: "" + marketName);
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);

    System.out.println(""Trends:"");
    for (String trend : trends) {
        System.out.println(""- "" + trend);
    }

    System.out.println(""Target Customers:"");
    for (String customer : targetCustomers) {
        System.out.println(""- "" + customer);
    }

    System.out.println(""Competitors:"");
    for (String competitor : competitors) {
        System.out.println(""- "" + competitor);
    }

    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }

    System.out.println(""Market analysis conducted successfully!"");
}
",1
"public void createSalesStrategy(String strategyId, String productName, String[] targetMarkets, String budget, String[] tactics, String[] channels, String salesManager) {
    System.out.println(""Creating sales strategy for: "" + productName);
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Sales Manager: "" + salesManager);

    System.out.println(""Target Markets:"");
    for (String market : targetMarkets) {
        System.out.println(""- "" + market);
    }

    System.out.println(""Tactics:"");
    for (String tactic : tactics) {
        System.out.println(""- "" + tactic);
    }

    System.out.println(""Channels:"");
    for (String channel : channels) {
        System.out.println(""- "" + channel);
    }

    System.out.println(""Sales strategy created successfully!"");
}",1
"public void evaluateMarketingPerformance(String evaluationId, String campaignName, String[] metrics, String[] results, String analysisDate, String analyst) {
    System.out.println(""Evaluating marketing performance for: "" + campaignName);
    System.out.println(""Evaluation ID: "" + evaluationId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);

    System.out.println(""Metrics:"");
    for (String metric : metrics) {
        System.out.println(""- "" + metric);
    }

    System.out.println(""Results:"");
    for (String result : results) {
        System.out.println(""- "" + result);
    }

    System.out.println(""Marketing performance evaluated successfully!"");
}",1
"public void conductCustomerSatisfactionSurvey(String surveyId, String[] questions, String[] responses, String surveyDate, String conductedBy) {
    System.out.println(""Conducting customer satisfaction survey"");
    System.out.println(""Survey ID: "" + surveyId);
    System.out.println(""Survey Date: "" + surveyDate);
    System.out.println(""Conducted By: "" + conductedBy);

    System.out.println(""Questions:"");
    for (String question : questions) {
        System.out.println(""- "" + question);
    }

    System.out.println(""Responses:"");
    for (String response : responses) {
        System.out.println(""- "" + response);
    }

    System.out.println(""Customer satisfaction survey conducted successfully!"");
}",1
"public void createCustomerFeedbackReport(String reportId, String productName, String[] feedbacks, String analysisDate, String analyst, String[] recommendations) {
    System.out.println(""Creating customer feedback report for: "" + productName);
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);

    System.out.println(""Feedbacks:"");
    for (String feedback : feedbacks) {
        System.out.println(""- "" + feedback);
    }

    System.out.println(""Recommendations:"");
    for (String recommendation : recommendations) {
        System.out.println(""- "" + recommendation);
    }

    System.out.println(""Customer feedback report created successfully!"");
}",1
"public void developCommunicationPlan(String planId, String purpose, String[] stakeholders, String[] messages, String[] channels, String planDate, String responsiblePerson) {
    System.out.println(""Developing communication plan"");
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Purpose: "" + purpose);
    System.out.println(""Plan Date: "" + planDate);
    System.out.println(""Responsible Person: "" + responsiblePerson);

    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }

    System.out.println(""Messages:"");
    for (String message : messages) {
        System.out.println(""- "" + message);
    }

    System.out.println(""Channels:"");
    for (String channel : channels) {
        System.out.println(""- "" + channel);
    }

    System.out.println(""Communication plan developed successfully!"");
}",1
"public void createProjectClosureReport(String reportId, String projectName, String[] outcomes, String[] lessonsLearned, String closureDate, String projectManager) {
    System.out.println(""Creating project closure report for: "" + projectName);
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Closure Date: "" + closureDate);
    System.out.println(""Project Manager: "" + projectManager);

    System.out.println(""Outcomes:"");
    for (String outcome : outcomes) {
        System.out.println(""- "" + outcome);
    }

    System.out.println(""Lessons Learned:"");
    for (String lesson : lessonsLearned) {
        System.out.println(""- "" + lesson);
    }

    System.out.println(""Project closure report created successfully!"");
}",1
"public void conductStakeholderAnalysis(String analysisId, String projectName, String[] stakeholders, String[] interests, String analysisDate, String analyst) {
    System.out.println(""Conducting stakeholder analysis for: "" + projectName);
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);

    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }

    System.out.println(""Interests:"");
    for (String interest : interests) {
        System.out.println(""- "" + interest);
    }

    System.out.println(""Stakeholder analysis conducted successfully!"");
}
",1
"public void createOrganizationalStructure(String structureId, String organizationName, String[] departments, String[] roles) {
    System.out.println(""Creating organizational structure for: "" + organizationName);
    System.out.println(""Structure ID: "" + structureId);

    System.out.println(""Departments:"");
    for (String department : departments) {
        System.out.println(""- "" + department);
    }

    System.out.println(""Roles:"");
    for (String role : roles) {
        System.out.println(""- "" + role);
    }

    System.out.println(""Organizational structure created successfully!"");
}",1
"public void createPartnershipProposal(String proposalId, String organizationName, String[] goals, String[] benefits, String proposalDate, String responsiblePerson) {
    System.out.println(""Creating partnership proposal for: "" + organizationName);
    System.out.println(""Proposal ID: "" + proposalId);
    System.out.println(""Proposal Date: "" + proposalDate);
    System.out.println(""Responsible Person: "" + responsiblePerson);

    System.out.println(""Goals:"");
    for (String goal : goals) {
        System.out.println(""- "" + goal);
    }

    System.out.println(""Benefits:"");
    for (String benefit : benefits) {
        System.out.println(""- "" + benefit);
    }

    System.out.println(""Partnership proposal created successfully!"");
}",1
"public void conductRiskAssessment(String assessmentId, String projectName, String[] risks, String[] mitigationStrategies, String assessmentDate, String assessor) {
    System.out.println(""Conducting risk assessment for: "" + projectName);
    System.out.println(""Assessment ID: "" + assessmentId);
    System.out.println(""Assessment Date: "" + assessmentDate);
    System.out.println(""Assessor: "" + assessor);

    System.out.println(""Risks:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }

    System.out.println(""Mitigation Strategies:"");
    for (String strategy : mitigationStrategies) {
        System.out.println(""- "" + strategy);
    }

    System.out.println(""Risk assessment conducted successfully!"");
}",1
"public void createProjectBudget(String budgetId, String projectName, String budgetAmount, String[] expenseCategories, String[] responsibleDepartments) {
    System.out.println(""Creating project budget for: "" + projectName);
    System.out.println(""Budget ID: "" + budgetId);
    System.out.println(""Budget Amount: $"" + budgetAmount);

    System.out.println(""Expense Categories:"");
    for (String category : expenseCategories) {
        System.out.println(""- "" + category);
    }

    System.out.println(""Responsible Departments:"");
    for (String department : responsibleDepartments) {
        System.out.println(""- "" + department);
    }

    System.out.println(""Project budget created successfully!"");
}
",1
"public void createBusinessPlan(String planId, String businessName, String[] objectives, String[] strategies, String budget, String timeline, String responsiblePerson) {
    System.out.println(""Creating business plan for: "" + businessName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Responsible Person: "" + responsiblePerson);

    System.out.println(""Objectives:"");
    for (String objective : objectives) {
        System.out.println(""- "" + objective);
    }

    System.out.println(""Strategies:"");
    for (String strategy : strategies) {
        System.out.println(""- "" + strategy);
    }

    System.out.println(""Business plan created successfully!"");
}",1
"public void developSustainabilityStrategy(String strategyId, String businessName, String[] goals, String budget, String timeline, String responsiblePerson) {
    System.out.println(""Developing sustainability strategy for: "" + businessName);
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Responsible Person: "" + responsiblePerson);

    System.out.println(""Goals:"");
    for (String goal : goals) {
        System.out.println(""- "" + goal);
    }

    System.out.println(""Sustainability strategy developed successfully!"");
}",1
"public void createEmployeeEngagementPlan(String planId, String[] activities, String budget, String timeline, String responsiblePerson) {
    System.out.println(""Creating employee engagement plan"");
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Responsible Person: "" + responsiblePerson);

    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }

    System.out.println(""Employee engagement plan created successfully!"");
}",1
"public void createTrainingProgram(String programId, String[] topics, String duration, String budget, String responsiblePerson) {
    System.out.println(""Creating training program"");
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Duration: "" + duration);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Responsible Person: "" + responsiblePerson);

    System.out.println(""Topics:"");
    for (String topic : topics) {
        System.out.println(""- "" + topic);
    }

    System.out.println(""Training program created successfully!"");
}",1
"public void conductPerformanceAppraisal(String appraisalId, String employeeName, String[] criteria, String[] ratings, String appraisalDate, String appraiser) {
    System.out.println(""Conducting performance appraisal for: "" + employeeName);
    System.out.println(""Appraisal ID: "" + appraisalId);
    System.out.println(""Appraisal Date: "" + appraisalDate);
    System.out.println(""Appraiser: "" + appraiser);

    System.out.println(""Criteria:"");
    for (String criterion : criteria) {
        System.out.println(""- "" + criterion);
    }

    System.out.println(""Ratings:"");
    for (String rating : ratings) {
        System.out.println(""- "" + rating);
    }

    System.out.println(""Performance appraisal conducted successfully!"");
}",1
"public void createCrisisManagementPlan(String planId, String incidentType, String[] responseStrategies, String communicationPlan, String responsiblePerson) {
    System.out.println(""Creating crisis management plan for: "" + incidentType);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Communication Plan: "" + communicationPlan);
    System.out.println(""Responsible Person: "" + responsiblePerson);

    System.out.println(""Response Strategies:"");
    for (String strategy : responseStrategies) {
        System.out.println(""- "" + strategy);
    }

    System.out.println(""Crisis management plan created successfully!"");
}
}",1
"public void generateSalesReport(String reportId, String startDate, String endDate, String[] regions, String[] products, double[] salesFigures) {
    System.out.println(""Generating sales report..."");
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Date Range: "" + startDate + "" to "" + endDate);
    System.out.println(""Regions:"");
    for (String region : regions) {
        System.out.println(""- "" + region);
    }
    System.out.println(""Products:"");
    for (String product : products) {
        System.out.println(""- "" + product);
    }
    System.out.println(""Sales Figures:"");
    for (double sales : salesFigures) {
        System.out.println(""- "" + sales);
    }
    System.out.println(""Sales report generated successfully!"");
}",1
"public void createMarketingCampaign(String campaignId, String campaignName, String startDate, String endDate, String targetAudience, String[] channels) {
    System.out.println(""Creating marketing campaign..."");
    System.out.println(""Campaign ID: "" + campaignId);
    System.out.println(""Campaign Name: "" + campaignName);
    System.out.println(""Duration: "" + startDate + "" to "" + endDate);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Channels:"");
    for (String channel : channels) {
        System.out.println(""- "" + channel);
    }
    System.out.println(""Marketing campaign created successfully!"");
}",1
"public void conductTrainingSession(String sessionId, String topic, String trainer, String[] participants, String startDate, String duration) {
    System.out.println(""Conducting training session..."");
    System.out.println(""Session ID: "" + sessionId);
    System.out.println(""Topic: "" + topic);
    System.out.println(""Trainer: "" + trainer);
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    System.out.println(""Start Date: "" + startDate);
    System.out.println(""Duration: "" + duration);
    System.out.println(""Training session conducted successfully!"");
}",1
"public void analyzeCustomerFeedback(String feedbackId, String[] feedbackCategories, String[] feedbackResponses, String analysisDate, String analyst, String summary) {
    System.out.println(""Analyzing customer feedback..."");
    System.out.println(""Feedback ID: "" + feedbackId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);
    System.out.println(""Categories:"");
    for (String category : feedbackCategories) {
        System.out.println(""- "" + category);
    }
    System.out.println(""Responses:"");
    for (String response : feedbackResponses) {
        System.out.println(""- "" + response);
    }
    System.out.println(""Summary: "" + summary);
    System.out.println(""Customer feedback analysis completed successfully!"");
}",1
"public void prepareFinancialReport(String reportId, String[] expenseCategories, double[] expenseAmounts, double totalIncome, double totalExpenses, String reportDate) {
    System.out.println(""Preparing financial report..."");
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Report Date: "" + reportDate);
    System.out.println(""Expense Categories:"");
    for (String category : expenseCategories) {
        System.out.println(""- "" + category);
    }
    System.out.println(""Expense Amounts:"");
    for (double amount : expenseAmounts) {
        System.out.println(""- "" + amount);
    }
    System.out.println(""Total Income: $"" + totalIncome);
    System.out.println(""Total Expenses: $"" + totalExpenses);
    System.out.println(""Financial report prepared successfully!"");
}",1
"public void conductMarketResearchSurvey(String surveyId, String[] questions, String[] responses, String analysisDate, String analyst, String reportSummary) {
    System.out.println(""Conducting market research survey..."");
    System.out.println(""Survey ID: "" + surveyId);
    System.out.println(""Analysis Date: "" + analysisDate);
    System.out.println(""Analyst: "" + analyst);
    System.out.println(""Questions:"");
    for (String question : questions) {
        System.out.println(""- "" + question);
    }
    System.out.println(""Responses:"");
    for (String response : responses) {
        System.out.println(""- "" + response);
    }
    System.out.println(""Report Summary: "" + reportSummary);
    System.out.println(""Market research survey conducted successfully!"");
}",1
"public void createProjectPlan(String projectId, String projectName, String startDate, String endDate, String[] milestones, String responsiblePerson) {
    System.out.println(""Creating project plan..."");
    System.out.println(""Project ID: "" + projectId);
    System.out.println(""Project Name: "" + projectName);
    System.out.println(""Duration: "" + startDate + "" to "" + endDate);
    System.out.println(""Milestones:"");
    for (String milestone : milestones) {
        System.out.println(""- "" + milestone);
    }
    System.out.println(""Responsible Person: "" + responsiblePerson);
    System.out.println(""Project plan created successfully!"");
}",1
"public void developMarketingStrategy(String strategyId, String productName, String targetMarket, String[] marketingTactics, String budget, String timeline) {
    System.out.println(""Developing marketing strategy..."");
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Product Name: "" + productName);
    System.out.println(""Target Market: "" + targetMarket);
    System.out.println(""Marketing Tactics:"");
    for (String tactic : marketingTactics) {
        System.out.println(""- "" + tactic);
    }
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Marketing strategy developed successfully!"");
}",1
"public void evaluateEmployeePerformance(String evaluationId, String employeeName, String[] performanceCriteria, String[] ratings, String evaluationDate, String evaluator) {
    System.out.println(""Evaluating employee performance..."");
    System.out.println(""Evaluation ID: "" + evaluationId);
    System.out.println(""Employee Name: "" + employeeName);
    System.out.println(""Evaluation Date: "" + evaluationDate);
    System.out.println(""Evaluator: "" + evaluator);
    System.out.println(""Performance Criteria:"");
    for (String criterion : performanceCriteria) {
        System.out.println(""- "" + criterion);
    }
    System.out.println(""Ratings:"");
    for (String rating : ratings) {
        System.out.println(""- "" + rating);
    }
    System.out.println(""Employee performance evaluated successfully!"");
}",1
"public void prepareBusinessStrategyReport(String reportId, String businessName, String[] strategies, String[] implementationSteps, String reportDate, String author) {
    System.out.println(""Preparing business strategy report..."");
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Business Name: "" + businessName);
    System.out.println(""Report Date: "" + reportDate);
    System.out.println(""Author: "" + author);
    System.out.println(""Strategies:"");
    for (String strategy : strategies) {
        System.out.println(""- "" + strategy);
    }
    System.out.println(""Implementation Steps:"");
    for (String step : implementationSteps) {
        System.out.println(""- "" + step);
    }
    System.out.println(""Business strategy report prepared successfully!"");
}",1
"public void designMarketingFunnel(String funnelId, String funnelName, String[] stages, String[] goals, String[] metrics, String targetAudience) {
    System.out.println(""Designing marketing funnel..."");
    System.out.println(""Funnel ID: "" + funnelId);
    System.out.println(""Funnel Name: "" + funnelName);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Stages:"");
    for (String stage : stages) {
        System.out.println(""- "" + stage);
    }
    System.out.println(""Goals:"");
    for (String goal : goals) {
        System.out.println(""- "" + goal);
    }
    System.out.println(""Metrics:"");
    for (String metric : metrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Marketing funnel designed successfully!"");
}",1
"public void conductSWOTAnalysis(String analysisId, String businessName, String[] strengths, String[] weaknesses, String[] opportunities, String[] threats) {
    System.out.println(""Conducting SWOT analysis for: "" + businessName);
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Strengths:"");
    for (String strength : strengths) {
        System.out.println(""- "" + strength);
    }
    System.out.println(""Weaknesses:"");
    for (String weakness : weaknesses) {
        System.out.println(""- "" + weakness);
    }
    System.out.println(""Opportunities:"");
    for (String opportunity : opportunities) {
        System.out.println(""- "" + opportunity);
    }
    System.out.println(""Threats:"");
    for (String threat : threats) {
        System.out.println(""- "" + threat);
    }
    System.out.println(""SWOT analysis conducted successfully!"");
}",1
"public void organizeConference(String conferenceId, String conferenceName, String[] speakers, String location, String date, String agenda) {
    System.out.println(""Organizing conference: "" + conferenceName);
    System.out.println(""Conference ID: "" + conferenceId);
    System.out.println(""Location: "" + location);
    System.out.println(""Date: "" + date);
    System.out.println(""Speakers:"");
    for (String speaker : speakers) {
        System.out.println(""- "" + speaker);
    }
    System.out.println(""Agenda: "" + agenda);
    System.out.println(""Conference organized successfully!"");
}
",1
"public void manageInventory(String inventoryId, String[] items, int[] quantities, double[] prices, String location, String responsiblePerson) {
    System.out.println(""Managing inventory..."");
    System.out.println(""Inventory ID: "" + inventoryId);
    System.out.println(""Location: "" + location);
    System.out.println(""Responsible Person: "" + responsiblePerson);
    System.out.println(""Items and Quantities:"");
    for (int i = 0; i < items.length; i++) {
        System.out.println(""- "" + items[i] + "": "" + quantities[i] + "" (Price: $"" + prices[i] + "")"");
    }
    System.out.println(""Inventory managed successfully!"");
}",1
"public void createLoyaltyProgram(String programId, String programName, String[] rewards, String[] eligibilityCriteria, String programDuration, String targetAudience) {
    System.out.println(""Creating customer loyalty program..."");
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Program Name: "" + programName);
    System.out.println(""Duration: "" + programDuration);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Rewards:"");
    for (String reward : rewards) {
        System.out.println(""- "" + reward);
    }
    System.out.println(""Eligibility Criteria:"");
    for (String criteria : eligibilityCriteria) {
        System.out.println(""- "" + criteria);
    }
    System.out.println(""Loyalty program created successfully!"");
}",1
"public void developCrisisManagementPlan(String planId, String incidentType, String[] responseStrategies, String communicationPlan, String responsiblePerson, String trainingRequired) {
    System.out.println(""Developing crisis management plan for: "" + incidentType);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Communication Plan: "" + communicationPlan);
    System.out.println(""Responsible Person: "" + responsiblePerson);
    System.out.println(""Training Required: "" + trainingRequired);
    System.out.println(""Response Strategies:"");
    for (String strategy : responseStrategies) {
        System.out.println(""- "" + strategy);
    }
    System.out.println(""Crisis management plan developed successfully!"");
}",1
"public void conductProductLaunch(String launchId, String productName, String launchDate, String[] marketingChannels, String[] keySpeakers, String[] targetMarkets) {
    System.out.println(""Conducting product launch for: "" + productName);
    System.out.println(""Launch ID: "" + launchId);
    System.out.println(""Launch Date: "" + launchDate);
    System.out.println(""Marketing Channels:"");
    for (String channel : marketingChannels) {
        System.out.println(""- "" + channel);
    }
    System.out.println(""Key Speakers:"");
    for (String speaker : keySpeakers) {
        System.out.println(""- "" + speaker);
    }
    System.out.println(""Target Markets:"");
    for (String market : targetMarkets) {
        System.out.println(""- "" + market);
    }
    System.out.println(""Product launch conducted successfully!"");
}",1
"public void evaluateBusinessProposal(String proposalId, String businessName, String[] evaluationCriteria, String[] scores, String evaluationDate, String evaluator) {
    System.out.println(""Evaluating business proposal for: "" + businessName);
    System.out.println(""Proposal ID: "" + proposalId);
    System.out.println(""Evaluation Date: "" + evaluationDate);
    System.out.println(""Evaluator: "" + evaluator);
    System.out.println(""Evaluation Criteria:"");
    for (String criterion : evaluationCriteria) {
        System.out.println(""- "" + criterion);
    }
    System.out.println(""Scores:"");
    for (String score : scores) {
        System.out.println(""- "" + score);
    }
    System.out.println(""Business proposal evaluated successfully!"");
}",1
"public void designMarketingWebsite(String websiteId, String websiteName, String[] features, String targetAudience, String budget, String launchDate) {
    System.out.println(""Designing marketing website: "" + websiteName);
    System.out.println(""Website ID: "" + websiteId);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Launch Date: "" + launchDate);
    System.out.println(""Features:"");
    for (String feature : features) {
        System.out.println(""- "" + feature);
    }
    System.out.println(""Marketing website designed successfully!"");
}",1
"public void createProjectTimeline(String timelineId, String projectName, String[] phases, String[] responsiblePersons, String[] deadlines, String overallDeadline) {
    System.out.println(""Creating project timeline for: "" + projectName);
    System.out.println(""Timeline ID: "" + timelineId);
    System.out.println(""Overall Deadline: "" + overallDeadline);
    System.out.println(""Phases:"");
    for (int i = 0; i < phases.length; i++) {
        System.out.println(""- "" + phases[i] + "" (Responsible Person: "" + responsiblePersons[i] + "", Deadline: "" + deadlines[i] + "")"");
    }
    System.out.println(""Project timeline created successfully!"");
}",1
"public void createProductMarketingStrategy(String strategyId, String productName, String[] marketingChannels, String targetMarket, String budget, String[] performanceMetrics) {
    System.out.println(""Creating product marketing strategy for: "" + productName);
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Target Market: "" + targetMarket);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Marketing Channels:"");
    for (String channel : marketingChannels) {
        System.out.println(""- "" + channel);
    }
    System.out.println(""Performance Metrics:"");
    for (String metric : performanceMetrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Product marketing strategy created successfully!"");
}",1
"public void conductCompetitorAnalysis(String analysisId, String[] competitors, String[] strengths, String[] weaknesses, String[] opportunities, String[] threats) {
    System.out.println(""Conducting competitor analysis..."");
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Competitors:"");
    for (String competitor : competitors) {
        System.out.println(""- "" + competitor);
    }
    System.out.println(""Strengths:"");
    for (String strength : strengths) {
        System.out.println(""- "" + strength);
    }
    System.out.println(""Weaknesses:"");
    for (String weakness : weaknesses) {
        System.out.println(""- "" + weakness);
    }
    System.out.println(""Opportunities:"");
    for (String opportunity : opportunities) {
        System.out.println(""- "" + opportunity);
    }
    System.out.println(""Threats:"");
    for (String threat : threats) {
        System.out.println(""- "" + threat);
    }
    System.out.println(""Competitor analysis conducted successfully!"");
}",1
"public void createAdvertisingCampaign(String campaignId, String campaignName, String targetAudience, String[] adFormats, String budget, String[] channels) {
    System.out.println(""Creating advertising campaign..."");
    System.out.println(""Campaign ID: "" + campaignId);
    System.out.println(""Campaign Name: "" + campaignName);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Ad Formats:"");
    for (String format : adFormats) {
        System.out.println(""- "" + format);
    }
    System.out.println(""Channels:"");
    for (String channel : channels) {
        System.out.println(""- "" + channel);
    }
    System.out.println(""Advertising campaign created successfully!"");
}
",1
"public void conductBrandAudit(String auditId, String brandName, String[] strengths, String[] weaknesses, String[] opportunities, String[] threats) {
    System.out.println(""Conducting brand audit for: "" + brandName);
    System.out.println(""Audit ID: "" + auditId);
    System.out.println(""Strengths:"");
    for (String strength : strengths) {
        System.out.println(""- "" + strength);
    }
    System.out.println(""Weaknesses:"");
    for (String weakness : weaknesses) {
        System.out.println(""- "" + weakness);
    }
    System.out.println(""Opportunities:"");
    for (String opportunity : opportunities) {
        System.out.println(""- "" + opportunity);
    }
    System.out.println(""Threats:"");
    for (String threat : threats) {
        System.out.println(""- "" + threat);
    }
    System.out.println(""Brand audit conducted successfully!"");
}",1
"public void manageEventLogistics(String eventId, String eventName, String location, String date, String[] vendors, String[] attendees) {
    System.out.println(""Managing logistics for event: "" + eventName);
    System.out.println(""Event ID: "" + eventId);
    System.out.println(""Location: "" + location);
    System.out.println(""Date: "" + date);
    System.out.println(""Vendors:"");
    for (String vendor : vendors) {
        System.out.println(""- "" + vendor);
    }
    System.out.println(""Attendees:"");
    for (String attendee : attendees) {
        System.out.println(""- "" + attendee);
    }
    System.out.println(""Event logistics managed successfully!"");
}",1
"public void createWebsiteRedesignProposal(String proposalId, String websiteName, String[] redesignGoals, String budget, String timeline, String[] stakeholders) {
    System.out.println(""Creating website redesign proposal for: "" + websiteName);
    System.out.println(""Proposal ID: "" + proposalId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }
    System.out.println(""Redesign Goals:"");
    for (String goal : redesignGoals) {
        System.out.println(""- "" + goal);
    }
    System.out.println(""Website redesign proposal created successfully!"");
}",1
"public void conductUserFeedbackSurvey(String surveyId, String[] questions, String[] participants, String surveyDate, String feedbackMethod) {
    System.out.println(""Conducting user feedback survey..."");
    System.out.println(""Survey ID: "" + surveyId);
    System.out.println(""Survey Date: "" + surveyDate);
    System.out.println(""Feedback Method: "" + feedbackMethod);
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    System.out.println(""Questions:"");
    for (String question : questions) {
        System.out.println(""- "" + question);
    }
    System.out.println(""User feedback survey conducted successfully!"");
}",1
"public void implementContentMarketingStrategy(String strategyId, String[] contentTypes, String targetAudience, String budget, String[] performanceMetrics, String campaignDuration) {
    System.out.println(""Implementing content marketing strategy..."");
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Campaign Duration: "" + campaignDuration);
    System.out.println(""Content Types:"");
    for (String contentType : contentTypes) {
        System.out.println(""- "" + contentType);
    }
    System.out.println(""Performance Metrics:"");
    for (String metric : performanceMetrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Content marketing strategy implemented successfully!"");
}",1
"public void createPartnershipProposal(String proposalId, String partnerName, String[] benefits, String[] responsibilities, String[] contactPersons, String proposalDeadline) {
    System.out.println(""Creating partnership proposal for: "" + partnerName);
    System.out.println(""Proposal ID: "" + proposalId);
    System.out.println(""Proposal Deadline: "" + proposalDeadline);
    System.out.println(""Benefits:"");
    for (String benefit : benefits) {
        System.out.println(""- "" + benefit);
    }
    System.out.println(""Responsibilities:"");
    for (String responsibility : responsibilities) {
        System.out.println(""- "" + responsibility);
    }
    System.out.println(""Contact Persons:"");
    for (String contactPerson : contactPersons) {
        System.out.println(""- "" + contactPerson);
    }
    System.out.println(""Partnership proposal created successfully!"");
}",1
"public void createCustomerFeedbackReport(String reportId, String productName, String[] feedback, String reportDate, String[] actionItems) {
    System.out.println(""Creating customer feedback report for: "" + productName);
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Report Date: "" + reportDate);
    System.out.println(""Feedback:"");
    for (String item : feedback) {
        System.out.println(""- "" + item);
    }
    System.out.println(""Action Items:"");
    for (String actionItem : actionItems) {
        System.out.println(""- "" + actionItem);
    }
    System.out.println(""Customer feedback report created successfully!"");
}",1
"public void createSalesForecastReport(String reportId, String productName, int[] salesData, String forecastPeriod, String[] assumptions) {
    System.out.println(""Creating sales forecast report for: "" + productName);
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Forecast Period: "" + forecastPeriod);
    System.out.println(""Sales Data:"");
    for (int data : salesData) {
        System.out.println(""- "" + data);
    }
    System.out.println(""Assumptions:"");
    for (String assumption : assumptions) {
        System.out.println(""- "" + assumption);
    }
    System.out.println(""Sales forecast report created successfully!"");
}",1
"public void conductMarketResearchStudy(String studyId, String targetMarket, String[] researchMethods, String studyDuration, String reportDeadline) {
    System.out.println(""Conducting market research study for: "" + targetMarket);
    System.out.println(""Study ID: "" + studyId);
    System.out.println(""Study Duration: "" + studyDuration);
    System.out.println(""Report Deadline: "" + reportDeadline);
    System.out.println(""Research Methods:"");
    for (String method : researchMethods) {
        System.out.println(""- "" + method);
    }
    System.out.println(""Market research study conducted successfully!"");
}",1
"public void createSocialMediaMarketingPlan(String planId, String targetAudience, String[] platforms, String budget, String campaignDuration, String[] performanceMetrics) {
    System.out.println(""Creating social media marketing plan..."");
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Campaign Duration: "" + campaignDuration);
    System.out.println(""Platforms:"");
    for (String platform : platforms) {
        System.out.println(""- "" + platform);
    }
    System.out.println(""Performance Metrics:"");
    for (String metric : performanceMetrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Social media marketing plan created successfully!"");
}",1
"public void developPublicRelationsStrategy(String strategyId, String[] targetAudiences, String budget, String[] keyMessages, String campaignDuration) {
    System.out.println(""Developing public relations strategy..."");
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Campaign Duration: "" + campaignDuration);
    System.out.println(""Key Messages:"");
    for (String message : keyMessages) {
        System.out.println(""- "" + message);
    }
    System.out.println(""Target Audiences:"");
    for (String audience : targetAudiences) {
        System.out.println(""- "" + audience);
    }
    System.out.println(""Public relations strategy developed successfully!"");
}",1
"public void conductStakeholderAnalysis(String analysisId, String[] stakeholders, String[] interests, String[] influenceLevels, String reportDate) {
    System.out.println(""Conducting stakeholder analysis..."");
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Report Date: "" + reportDate);
    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }
    System.out.println(""Interests:"");
    for (String interest : interests) {
        System.out.println(""- "" + interest);
    }
    System.out.println(""Influence Levels:"");
    for (String level : influenceLevels) {
        System.out.println(""- "" + level);
    }
    System.out.println(""Stakeholder analysis conducted successfully!"");
}",1
"public void createCrisisCommunicationPlan(String planId, String incidentType, String[] communicationChannels, String responsiblePerson, String planDuration) {
    System.out.println(""Creating crisis communication plan for: "" + incidentType);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Responsible Person: "" + responsiblePerson);
    System.out.println(""Plan Duration: "" + planDuration);
    System.out.println(""Communication Channels:"");
    for (String channel : communicationChannels) {
        System.out.println(""- "" + channel);
    }
    System.out.println(""Crisis communication plan created successfully!"");
}",1
"public void createDiversityAndInclusionInitiative(String initiativeId, String[] goals, String budget, String[] participants, String timeline) {
    System.out.println(""Creating diversity and inclusion initiative..."");
    System.out.println(""Initiative ID: "" + initiativeId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Goals:"");
    for (String goal : goals) {
        System.out.println(""- "" + goal);
    }
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    System.out.println(""Diversity and inclusion initiative created successfully!"");
}",1
"public void createBusinessContinuityPlan(String planId, String[] risks, String[] responseStrategies, String responsiblePerson, String reviewFrequency) {
    System.out.println(""Creating business continuity plan..."");
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Responsible Person: "" + responsiblePerson);
    System.out.println(""Review Frequency: "" + reviewFrequency);
    System.out.println(""Risks:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }
    System.out.println(""Response Strategies:"");
    for (String strategy : responseStrategies) {
        System.out.println(""- "" + strategy);
    }
    System.out.println(""Business continuity plan created successfully!"");
}",1
"public void createProductLaunchPlan(String planId, String productName, String launchDate, String[] marketingStrategies, String budget) {
    System.out.println(""Creating product launch plan for: "" + productName);
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Launch Date: "" + launchDate);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Marketing Strategies:"");
    for (String strategy : marketingStrategies) {
        System.out.println(""- "" + strategy);
    }
    System.out.println(""Product launch plan created successfully!"");
}",1
"public void conductCompetitiveAnalysis(String analysisId, String[] competitors, String[] strengths, String[] weaknesses, String reportDate) {
    System.out.println(""Conducting competitive analysis..."");
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Report Date: "" + reportDate);
    System.out.println(""Competitors:"");
    for (String competitor : competitors) {
        System.out.println(""- "" + competitor);
    }
    System.out.println(""Strengths:"");
    for (String strength : strengths) {
        System.out.println(""- "" + strength);
    }
    System.out.println(""Weaknesses:"");
    for (String weakness : weaknesses) {
        System.out.println(""- "" + weakness);
    }
    System.out.println(""Competitive analysis conducted successfully!"");
}",1
"public void createCustomerJourneyMap(String mapId, String customerName, String[] stages, String[] touchpoints, String[] painPoints) {
    System.out.println(""Creating customer journey map for: "" + customerName);
    System.out.println(""Map ID: "" + mapId);
    System.out.println(""Stages:"");
    for (String stage : stages) {
        System.out.println(""- "" + stage);
    }
    System.out.println(""Touchpoints:"");
    for (String touchpoint : touchpoints) {
        System.out.println(""- "" + touchpoint);
    }
    System.out.println(""Pain Points:"");
    for (String painPoint : painPoints) {
        System.out.println(""- "" + painPoint);
    }
    System.out.println(""Customer journey map created successfully!"");
}",1
"public void developPricingStrategy(String strategyId, String productName, String[] pricingModels, String targetMarket, String budget) {
    System.out.println(""Developing pricing strategy for: "" + productName);
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Target Market: "" + targetMarket);
    System.out.println(""Pricing Models:"");
    for (String model : pricingModels) {
        System.out.println(""- "" + model);
    }
    System.out.println(""Pricing strategy developed successfully!"");
}",1
"public void createEmployeeEngagementPlan(String planId, String[] engagementActivities, String budget, String targetAudience, String timeline) {
    System.out.println(""Creating employee engagement plan..."");
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Engagement Activities:"");
    for (String activity : engagementActivities) {
        System.out.println(""- "" + activity);
    }
    System.out.println(""Employee engagement plan created successfully!"");
}",1
"public void conductTrainingNeedsAssessment(String assessmentId, String[] skillsRequired, String[] participants, String assessmentDate) {
    System.out.println(""Conducting training needs assessment..."");
    System.out.println(""Assessment ID: "" + assessmentId);
    System.out.println(""Assessment Date: "" + assessmentDate);
    System.out.println(""Participants:"");
    for (String participant : participants) {
        System.out.println(""- "" + participant);
    }
    System.out.println(""Skills Required:"");
    for (String skill : skillsRequired) {
        System.out.println(""- "" + skill);
    }
    System.out.println(""Training needs assessment conducted successfully!"");
}",1
"public void createJobDescription(String jobId, String jobTitle, String[] responsibilities, String[] qualifications, String salaryRange) {
    System.out.println(""Creating job description for: "" + jobTitle);
    System.out.println(""Job ID: "" + jobId);
    System.out.println(""Salary Range: "" + salaryRange);
    System.out.println(""Responsibilities:"");
    for (String responsibility : responsibilities) {
        System.out.println(""- "" + responsibility);
    }
    System.out.println(""Qualifications:"");
    for (String qualification : qualifications) {
        System.out.println(""- "" + qualification);
    }
    System.out.println(""Job description created successfully!"");
}",1
"public void createTalentAcquisitionStrategy(String strategyId, String[] sourcingChannels, String budget, String timeline) {
    System.out.println(""Creating talent acquisition strategy..."");
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Sourcing Channels:"");
    for (String channel : sourcingChannels) {
        System.out.println(""- "" + channel);
    }
    System.out.println(""Talent acquisition strategy created successfully!"");
}",1
"public void createEmployeeOnboardingPlan(String planId, String[] onboardingActivities, String timeline, String[] stakeholders) {
    System.out.println(""Creating employee onboarding plan..."");
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Stakeholders:"");
    for (String stakeholder : stakeholders) {
        System.out.println(""- "" + stakeholder);
    }
    System.out.println(""Onboarding Activities:"");
    for (String activity : onboardingActivities) {
        System.out.println(""- "" + activity);
    }
    System.out.println(""Employee onboarding plan created successfully!"");
}",1
"public void createPerformanceAppraisalSystem(String systemId, String[] criteria, String[] evaluationMethods, String timeline) {
    System.out.println(""Creating performance appraisal system..."");
    System.out.println(""System ID: "" + systemId);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Criteria:"");
    for (String criterion : criteria) {
        System.out.println(""- "" + criterion);
    }
    System.out.println(""Evaluation Methods:"");
    for (String method : evaluationMethods) {
        System.out.println(""- "" + method);
    }
    System.out.println(""Performance appraisal system created successfully!"");
}",1
"public void createEmployeeRetentionStrategy(String strategyId, String[] retentionStrategies, String budget, String targetAudience) {
    System.out.println(""Creating employee retention strategy..."");
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Retention Strategies:"");
    for (String strategy : retentionStrategies) {
        System.out.println(""- "" + strategy);
    }
    System.out.println(""Employee retention strategy created successfully!"");
}",1
"public void createOrganizationalCultureAssessment(String assessmentId, String[] dimensions, String[] evaluationCriteria, String reportDate) {
    System.out.println(""Creating organizational culture assessment..."");
    System.out.println(""Assessment ID: "" + assessmentId);
    System.out.println(""Report Date: "" + reportDate);
    System.out.println(""Dimensions:"");
    for (String dimension : dimensions) {
        System.out.println(""- "" + dimension);
    }
    System.out.println(""Evaluation Criteria:"");
    for (String criterion : evaluationCriteria) {
        System.out.println(""- "" + criterion);
    }
    System.out.println(""Organizational culture assessment created successfully!"");
}",1
"public void createTrainingProgram(String programId, String programName, String[] topics, String timeline, String budget) {
    System.out.println(""Creating training program: "" + programName);
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Topics:"");
    for (String topic : topics) {
        System.out.println(""- "" + topic);
    }
    System.out.println(""Training program created successfully!"");
}",1
"public void createMentorshipProgram(String programId, String[] mentees, String[] mentors, String budget, String timeline) {
    System.out.println(""Creating mentorship program..."");
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Mentees:"");
    for (String mentee : mentees) {
        System.out.println(""- "" + mentee);
    }
    System.out.println(""Mentors:"");
    for (String mentor : mentors) {
        System.out.println(""- "" + mentor);
    }
    System.out.println(""Mentorship program created successfully!"");
}",1
"public void conductEmployeeSatisfactionSurvey(String surveyId, String[] questions, String surveyDate) {
    System.out.println(""Conducting employee satisfaction survey..."");
    System.out.println(""Survey ID: "" + surveyId);
    System.out.println(""Survey Date: "" + surveyDate);
    System.out.println(""Questions:"");
    for (String question : questions) {
        System.out.println(""- "" + question);
    }
    System.out.println(""Employee satisfaction survey conducted successfully!"");
}",1
"public void createConflictResolutionPolicy(String policyId, String[] steps, String targetAudience) {
    System.out.println(""Creating conflict resolution policy..."");
    System.out.println(""Policy ID: "" + policyId);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Steps:"");
    for (String step : steps) {
        System.out.println(""- "" + step);
    }
    System.out.println(""Conflict resolution policy created successfully!"");
}",1
"public void createTeamBuildingEvent(String eventId, String eventName, String date, String location, String[] activities) {
    System.out.println(""Creating team-building event: "" + eventName);
    System.out.println(""Event ID: "" + eventId);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    System.out.println(""Team-building event created successfully!"");
}
",1
"public void createKnowledgeSharingSession(String sessionId, String topic, String presenter, String date, String time) {
    System.out.println(""Creating knowledge sharing session on: "" + topic);
    System.out.println(""Session ID: "" + sessionId);
    System.out.println(""Presenter: "" + presenter);
    System.out.println(""Date: "" + date);
    System.out.println(""Time: "" + time);
    System.out.println(""Knowledge sharing session created successfully!"");
}",1
"public void createFeedbackMechanism(String mechanismId, String[] feedbackChannels, String targetAudience) {
    System.out.println(""Creating feedback mechanism..."");
    System.out.println(""Mechanism ID: "" + mechanismId);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Feedback Channels:"");
    for (String channel : feedbackChannels) {
        System.out.println(""- "" + channel);
    }
    System.out.println(""Feedback mechanism created successfully!"");
}",1
"public void createRecognitionProgram(String programId, String[] recognitionCriteria, String budget, String timeline) {
    System.out.println(""Creating recognition program..."");
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Recognition Criteria:"");
    for (String criterion : recognitionCriteria) {
        System.out.println(""- "" + criterion);
    }
    System.out.println(""Recognition program created successfully!"");
}",1
"public void createSuccessionPlanningStrategy(String strategyId, String[] keyPositions, String[] successors, String timeline) {
    System.out.println(""Creating succession planning strategy..."");
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Key Positions:"");
    for (String position : keyPositions) {
        System.out.println(""- "" + position);
    }
    System.out.println(""Successors:"");
    for (String successor : successors) {
        System.out.println(""- "" + successor);
    }
    System.out.println(""Succession planning strategy created successfully!"");
}",1
"public void createEmployeeWellnessProgram(String programId, String[] activities, String budget, String timeline) {
    System.out.println(""Creating employee wellness program..."");
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
    System.out.println(""Employee wellness program created successfully!"");
}",1
"public void createTeamPerformanceMetricsReport(String reportId, String[] metrics, String timeline, String teamName) {
    System.out.println(""Creating team performance metrics report for: "" + teamName);
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Metrics:"");
    for (String metric : metrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Team performance metrics report created successfully!"");
}",1
"public void createCorporateSocialResponsibilityStrategy(String strategyId, String[] initiatives, String budget, String timeline) {
    System.out.println(""Creating corporate social responsibility strategy..."");
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Initiatives:"");
    for (String initiative : initiatives) {
        System.out.println(""- "" + initiative);
    }
    System.out.println(""Corporate social responsibility strategy created successfully!"");
}",1
"public void createBrandAwarenessCampaign(String campaignId, String[] platforms, String budget, String timeline) {
    System.out.println(""Creating brand awareness campaign..."");
    System.out.println(""Campaign ID: "" + campaignId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Platforms:"");
    for (String platform : platforms) {
        System.out.println(""- "" + platform);
    }
    System.out.println(""Brand awareness campaign created successfully!"");
}",1
"public void createMarketResearchReport(String reportId, String[] findings, String methodology, String reportDate) {
    System.out.println(""Creating market research report..."");
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Report Date: "" + reportDate);
    System.out.println(""Methodology: "" + methodology);
    System.out.println(""Findings:"");
    for (String finding : findings) {
        System.out.println(""- "" + finding);
    }
    System.out.println(""Market research report created successfully!"");
}",1
"public void createBusinessCase(String caseId, String objective, String[] alternatives, String budget, String timeline) {
    System.out.println(""Creating business case..."");
    System.out.println(""Case ID: "" + caseId);
    System.out.println(""Objective: "" + objective);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Alternatives:"");
    for (String alternative : alternatives) {
        System.out.println(""- "" + alternative);
    }
    System.out.println(""Business case created successfully!"");
}",1
"public void createStrategicPartnershipProposal(String proposalId, String partnerName, String[] benefits, String timeline) {
    System.out.println(""Creating strategic partnership proposal for: "" + partnerName);
    System.out.println(""Proposal ID: "" + proposalId);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Benefits:"");
    for (String benefit : benefits) {
        System.out.println(""- "" + benefit);
    }
    System.out.println(""Strategic partnership proposal created successfully!"");
}",1
"public void createRiskManagementFramework(String frameworkId, String[] riskCategories, String[] mitigationStrategies, String reviewFrequency) {
    System.out.println(""Creating risk management framework..."");
    System.out.println(""Framework ID: "" + frameworkId);
    System.out.println(""Review Frequency: "" + reviewFrequency);
    System.out.println(""Risk Categories:"");
    for (String category : riskCategories) {
        System.out.println(""- "" + category);
    }
    System.out.println(""Mitigation Strategies:"");
    for (String strategy : mitigationStrategies) {
        System.out.println(""- "" + strategy);
    }
    System.out.println(""Risk management framework created successfully!"");
}",1
"public void createSalesStrategy(String strategyId, String[] tactics, String budget, String timeline) {
    System.out.println(""Creating sales strategy..."");
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Tactics:"");
    for (String tactic : tactics) {
        System.out.println(""- "" + tactic);
    }
    System.out.println(""Sales strategy created successfully!"");
}",1
"public void createFinancialForecast(String forecastId, String[] revenueStreams, String budget, String timeline) {
    System.out.println(""Creating financial forecast..."");
    System.out.println(""Forecast ID: "" + forecastId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Revenue Streams:"");
    for (String stream : revenueStreams) {
        System.out.println(""- "" + stream);
    }
    System.out.println(""Financial forecast created successfully!"");
}",1
"public void generateQuarterlyFinancialReport(String reportId, String[] months, double totalRevenue, double totalExpenses, double netProfit) {
    System.out.println(""Generating quarterly financial report..."");
    System.out.println(""Report ID: "" + reportId);
    System.out.println(""Total Revenue: $"" + totalRevenue);
    System.out.println(""Total Expenses: $"" + totalExpenses);
    System.out.println(""Net Profit: $"" + netProfit);
    System.out.println(""Months covered:"");
    for (String month : months) {
        System.out.println(""- "" + month);
    }
    System.out.println(""Quarterly financial report generated successfully!"");
}",1
"public void organizeEmployeeTrainingProgram(String programId, String trainer, String[] topics, String date, String location) {
    System.out.println(""Organizing employee training program..."");
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Trainer: "" + trainer);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Topics covered:"");
    for (String topic : topics) {
        System.out.println(""- "" + topic);
    }
    System.out.println(""Employee training program organized successfully!"");
}",1
"public void createBusinessContinuityPlan(String planId, String[] risks, String[] mitigationStrategies, String timeline, String responsibleTeam) {
    System.out.println(""Creating business continuity plan..."");
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Responsible Team: "" + responsibleTeam);
    System.out.println(""Risks:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }
    System.out.println(""Mitigation Strategies:"");
    for (String strategy : mitigationStrategies) {
        System.out.println(""- "" + strategy);
    }
    System.out.println(""Business continuity plan created successfully!"");
}",1
"public void performNetworkSecurityAudit(String auditId, String[] vulnerabilities, String auditor, String date, String department) {
    System.out.println(""Performing network security audit..."");
    System.out.println(""Audit ID: "" + auditId);
    System.out.println(""Auditor: "" + auditor);
    System.out.println(""Date: "" + date);
    System.out.println(""Department: "" + department);
    System.out.println(""Vulnerabilities found:"");
    for (String vulnerability : vulnerabilities) {
        System.out.println(""- "" + vulnerability);
    }
    System.out.println(""Network security audit completed successfully!"");
}",1
"public void planMarketingCampaign(String campaignId, String targetAudience, String[] channels, String budget, String timeline) {
    System.out.println(""Planning marketing campaign..."");
    System.out.println(""Campaign ID: "" + campaignId);
    System.out.println(""Target Audience: "" + targetAudience);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Marketing Channels:"");
    for (String channel : channels) {
        System.out.println(""- "" + channel);
    }
    System.out.println(""Marketing campaign planned successfully!"");
}",1
"public void assessEmployeePerformance(String employeeId, String[] performanceMetrics, double rating, String feedback, String assessmentPeriod) {
    System.out.println(""Assessing employee performance..."");
    System.out.println(""Employee ID: "" + employeeId);
    System.out.println(""Rating: "" + rating);
    System.out.println(""Assessment Period: "" + assessmentPeriod);
    System.out.println(""Performance Metrics:"");
    for (String metric : performanceMetrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Feedback: "" + feedback);
    System.out.println(""Employee performance assessment completed successfully!"");
}",1
"public void createCustomerLoyaltyProgram(String programId, String[] rewardTiers, String budget, String validityPeriod, String[] benefits) {
    System.out.println(""Creating customer loyalty program..."");
    System.out.println(""Program ID: "" + programId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Validity Period: "" + validityPeriod);
    System.out.println(""Reward Tiers:"");
    for (String tier : rewardTiers) {
        System.out.println(""- "" + tier);
    }
    System.out.println(""Benefits:"");
    for (String benefit : benefits) {
        System.out.println(""- "" + benefit);
    }
    System.out.println(""Customer loyalty program created successfully!"");
}
",1
"public void developDisasterRecoveryStrategy(String strategyId, String[] criticalSystems, String[] recoveryProcedures, String timeline, String responsibleTeam) {
    System.out.println(""Developing disaster recovery strategy..."");
    System.out.println(""Strategy ID: "" + strategyId);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Responsible Team: "" + responsibleTeam);
    System.out.println(""Critical Systems:"");
    for (String system : criticalSystems) {
        System.out.println(""- "" + system);
    }
    System.out.println(""Recovery Procedures:"");
    for (String procedure : recoveryProcedures) {
        System.out.println(""- "" + procedure);
    }
    System.out.println(""Disaster recovery strategy developed successfully!"");
}",1
"public void implementQualityControlProcess(String processId, String[] qualityMetrics, String[] controlMeasures, String responsibleDepartment, String timeline) {
    System.out.println(""Implementing quality control process..."");
    System.out.println(""Process ID: "" + processId);
    System.out.println(""Responsible Department: "" + responsibleDepartment);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Quality Metrics:"");
    for (String metric : qualityMetrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Control Measures:"");
    for (String measure : controlMeasures) {
        System.out.println(""- "" + measure);
    }
    System.out.println(""Quality control process implemented successfully!"");
}",1
"public void conductMarketTrendAnalysis(String analysisId, String[] trends, String industry, String timePeriod, String responsibleTeam) {
    System.out.println(""Conducting market trend analysis..."");
    System.out.println(""Analysis ID: "" + analysisId);
    System.out.println(""Industry: "" + industry);
    System.out.println(""Time Period: "" + timePeriod);
    System.out.println(""Responsible Team: "" + responsibleTeam);
    System.out.println(""Trends Analyzed:"");
    for (String trend : trends) {
        System.out.println(""- "" + trend);
    }
    System.out.println(""Market trend analysis conducted successfully!"");
}",1
"public void deploySoftwareSystem(String systemId, String[] environments, String deploymentDate, String responsibleTeam, String version) {
    System.out.println(""Deploying new software system..."");
    System.out.println(""System ID: "" + systemId);
    System.out.println(""Deployment Date: "" + deploymentDate);
    System.out.println(""Version: "" + version);
    System.out.println(""Responsible Team: "" + responsibleTeam);
    System.out.println(""Environments:"");
    for (String environment : environments) {
        System.out.println(""- "" + environment);
    }
    System.out.println(""Software system deployed successfully!"");
}",1
"public void createSalesIncentivePlan(String planId, String[] incentiveTiers, String budget, String validityPeriod, String responsibleTeam) {
    System.out.println(""Creating sales incentive plan..."");
    System.out.println(""Plan ID: "" + planId);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Validity Period: "" + validityPeriod);
    System.out.println(""Responsible Team: "" + responsibleTeam);
    System.out.println(""Incentive Tiers:"");
    for (String tier : incentiveTiers) {
        System.out.println(""- "" + tier);
    }
    System.out.println(""Sales incentive plan created successfully!"");
}
",1
"public void auditSupplyChainProcesses(String auditId, String[] processes, String auditor, String timeline, String responsibleDepartment) {
    System.out.println(""Auditing supply chain processes..."");
    System.out.println(""Audit ID: "" + auditId);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Auditor: "" + auditor);
    System.out.println(""Responsible Department: "" + responsibleDepartment);
    System.out.println(""Processes Audited:"");
    for (String process : processes) {
        System.out.println(""- "" + process);
    }
    System.out.println(""Supply chain audit completed successfully!"");
}",1
"public void conductSustainabilityAssessment(String assessmentId, String[] sustainabilityMetrics, String industry, String responsibleTeam, String timePeriod) {
    System.out.println(""Conducting sustainability assessment..."");
    System.out.println(""Assessment ID: "" + assessmentId);
    System.out.println(""Industry: "" + industry);
    System.out.println(""Responsible Team: "" + responsibleTeam);
    System.out.println(""Time Period: "" + timePeriod);
    System.out.println(""Sustainability Metrics:"");
    for (String metric : sustainabilityMetrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Sustainability assessment completed successfully!"");
}",1
"public void developProductLaunchStrategy(String productId, String[] marketingChannels, String launchDate, String budget, String responsibleTeam) {
    System.out.println(""Developing product launch strategy..."");
    System.out.println(""Product ID: "" + productId);
    System.out.println(""Launch Date: "" + launchDate);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Responsible Team: "" + responsibleTeam);
    System.out.println(""Marketing Channels:"");
    for (String channel : marketingChannels) {
        System.out.println(""- "" + channel);
    }
    System.out.println(""Product launch strategy developed successfully!"");
}",1
"public void performProjectRiskAnalysis(String projectId, String[] risks, String riskLevel, String responsibleTeam, String timeline) {
    System.out.println(""Performing project risk analysis..."");
    System.out.println(""Project ID: "" + projectId);
    System.out.println(""Risk Level: "" + riskLevel);
    System.out.println(""Responsible Team: "" + responsibleTeam);
    System.out.println(""Timeline: "" + timeline);
    System.out.println(""Risks Identified:"");
    for (String risk : risks) {
        System.out.println(""- "" + risk);
    }
    System.out.println(""Project risk analysis completed successfully!"");
}",1
"public void manageRemoteWorkingPolicy(String policyId, String[] guidelines, String responsibleDepartment, String validityPeriod, String[] toolsRequired) {
    System.out.println(""Managing remote working policy..."");
    System.out.println(""Policy ID: "" + policyId);
    System.out.println(""Responsible Department: "" + responsibleDepartment);
    System.out.println(""Validity Period: "" + validityPeriod);
    System.out.println(""Tools Required:"");
    for (String tool : toolsRequired) {
        System.out.println(""- "" + tool);
    }
    System.out.println(""Guidelines:"");
    for (String guideline : guidelines) {
        System.out.println(""- "" + guideline);
    }
    System.out.println(""Remote working policy managed successfully!"");
}",1
"public void planCorporateEvent(String eventId, String eventName, String date, String location, String budget, String responsibleTeam) {
    System.out.println(""Planning corporate event..."");
    System.out.println(""Event ID: "" + eventId);
    System.out.println(""Event Name: "" + eventName);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Budget: $"" + budget);
    System.out.println(""Responsible Team: "" + responsibleTeam);
    System.out.println(""Corporate event planned successfully!"");
}",1
"public void assessVendorPerformance(String vendorId, String[] performanceMetrics, double rating, String feedback, String assessmentPeriod) {
    System.out.println(""Assessing vendor performance..."");
    System.out.println(""Vendor ID: "" + vendorId);
    System.out.println(""Rating: "" + rating);
    System.out.println(""Assessment Period: "" + assessmentPeriod);
    System.out.println(""Performance Metrics:"");
    for (String metric : performanceMetrics) {
        System.out.println(""- "" + metric);
    }
    System.out.println(""Feedback: "" + feedback);
    System.out.println(""Vendor performance assessment completed successfully!"");
}",1
"public void organizeCharityFundraiser(String fundraiserId, String[] sponsors, String targetAmount, String date, String location) {
    System.out.println(""Organizing charity fundraiser..."");
    System.out.println(""Fundraiser ID: "" + fundraiserId);
    System.out.println(""Target Amount: $"" + targetAmount);
    System.out.println(""Date: "" + date);
    System.out.println(""Location: "" + location);
    System.out.println(""Sponsors:"");
    for (String sponsor : sponsors) {
        System.out.println(""- "" + sponsor);
    }
    System.out.println(""Charity fundraiser organized successfully!"");
}",1
" public int findSecondLargest(int[] arr) {
        if (arr.length < 2) {
            throw new IllegalArgumentException(""Array must have at least two elements."");
        }
        int largest = Integer.MIN_VALUE;
        int secondLargest = Integer.MIN_VALUE;

        for (int num : arr) {
            if (num > largest) {
                secondLargest = largest;
                largest = num;
            } else if (num > secondLargest && num != largest) {
                secondLargest = num;
            }
        }
        return secondLargest;
    }",0
"public int[] reverseArray(int[] arr) {
        int[] reversed = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            reversed[i] = arr[arr.length - 1 - i];
        }
        return reversed;
    }",0
"public boolean areRotations(String str1, String str2) {
        if (str1.length() != str2.length()) {
            return false;
        }
        return (str1 + str1).contains(str2);
    }",0
"public int sumOfDigits(int number) {
        int sum = 0;
        while (number != 0) {
            sum += number % 10;
            number /= 10;
        }
        return sum;
    }",0
"public List<Integer> removeDuplicates(List<Integer> numbers) {
        Set<Integer> uniqueNumbers = new HashSet<>(numbers);
        return new ArrayList<>(uniqueNumbers);
    }",0
"public char firstNonRepeatingChar(String str) {
        Map<Character, Integer> charCountMap = new LinkedHashMap<>();
        for (char c : str.toCharArray()) {
            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);
        }
        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {
            if (entry.getValue() == 1) {
                return entry.getKey();
            }
        }
        throw new RuntimeException(""No non-repeating character found."");
    }",0
"public int sumOfEvens(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            if (num % 2 == 0) {
                sum += num;
            }
        }
        return sum;
    }",0
"public Map<String, Integer> countWordFrequency(String sentence) {
        Map<String, Integer> wordCount = new HashMap<>();
        String[] words = sentence.split(""\\s+"");
        for (String word : words) {
            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
        }
        return wordCount;
    }",0
"public int[][] rotateMatrix(int[][] matrix) {
        int N = matrix.length;
        int[][] rotated = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                rotated[j][N - 1 - i] = matrix[i][j];
            }
        }
        return rotated;
    }",0
"public int countPrimes(int[] arr) {
        int primeCount = 0;
        for (int num : arr) {
            if (isPrime(num)) {
                primeCount++;
            }
        }
        return primeCount;
    }",0
"public List<String> sortByLength(List<String> strings) {
        strings.sort(Comparator.comparingInt(String::length));
        return strings;
    }",0
"public boolean isSorted(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] < arr[i - 1]) {
                return false;
            }
        }
        return true;
    }",0
"public Map<String, Integer> countVowelsAndConsonants(String str) {
        int vowels = 0;
        int consonants = 0;
        for (char c : str.toCharArray()) {
            if (""AEIOUaeiou"".indexOf(c) != -1) {
                vowels++;
            } else if (Character.isLetter(c)) {
                consonants++;
            }
        }
        Map<String, Integer> result = new HashMap<>();
        result.put(""Vowels"", vowels);
        result.put(""Consonants"", consonants);
        return result;
    }",0
"public String largestPalindrome(String str) {
        String largestPalindrome = """";
        for (int i = 0; i < str.length(); i++) {
            for (int j = i + 1; j <= str.length(); j++) {
                String substring = str.substring(i, j);
                if (isPalindrome(substring) && substring.length() > largestPalindrome.length()) {
                    largestPalindrome = substring;
                }
            }
        }
        return largestPalindrome;
    }",0
"public int[] mergeSortedArrays(int[] arr1, int[] arr2) {
        int[] merged = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] <= arr2[j]) {
                merged[k++] = arr1[i++];
            } else {
                merged[k++] = arr2[j++];
            }
        }

        while (i < arr1.length) {
            merged[k++] = arr1[i++];
        }

        while (j < arr2.length) {
            merged[k++] = arr2[j++];
        }

        return merged;
    }",0
"public int longestIncreasingSubsequence(int[] arr) {
        if (arr.length == 0) {
            return 0;
        }
        int[] lis = new int[arr.length];
        Arrays.fill(lis, 1);

        for (int i = 1; i < arr.length; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {
                    lis[i] = lis[j] + 1;
                }
            }
        }
        return Arrays.stream(lis).max().orElse(1);
    }
",0
"public void shuffleArray(int[] arr) {
        Random random = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }",0
"public char firstRepeatingChar(String str) {
        Set<Character> seen = new HashSet<>();
        for (char c : str.toCharArray()) {
            if (seen.contains(c)) {
                return c;
            }
            seen.add(c);
        }
        throw new RuntimeException(""No repeating character found."");
    }
",0
"public String removeVowels(String str) {
        return str.replaceAll(""[AEIOUaeiou]"", """");
    }
",0
"public boolean isNumeric(String str) {
        for (char c : str.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }",0
"public void bubbleSort(int[] arr) {
        boolean swapped;
        for (int i = 0; i < arr.length - 1; i++) {
            swapped = false;
            for (int j = 0; j < arr.length - 1 - i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }
            if (!swapped) {
                break;
            }
        }
    }",0
"public int maxDifference(int[] arr) {
        int maxDiff = 0;
        int minElement = arr[0];

        for (int i = 1; i < arr.length; i++) {
            if (arr[i] - minElement > maxDiff) {
                maxDiff = arr[i] - minElement;
            }
            if (arr[i] < minElement) {
                minElement = arr[i];
            }
        }
        return maxDiff;
    }",0
" public String reverseString(String str) {
        StringBuilder reversed = new StringBuilder(str);
        return reversed.reverse().toString();
    }
",0
"public boolean isPowerOfTwo(int number) {
        return (number > 0) && (number & (number - 1)) == 0;
    }",0
"public int countSetBits(int number) {
        int count = 0;
        while (number != 0) {
            count += number & 1;
            number >>= 1;
        }
        return count;
    }",0
"public boolean areAnagrams(String str1, String str2) {
        if (str1.length() != str2.length()) {
            return false;
        }
        char[] charArray1 = str1.toCharArray();
        char[] charArray2 = str2.toCharArray();
        Arrays.sort(charArray1);
        Arrays.sort(charArray2);
        return Arrays.equals(charArray1, charArray2);
    }",0
"public int findLargest(int[] arr) {
        int largest = arr[0];
        for (int num : arr) {
            if (num > largest) {
                largest = num;
            }
        }
        return largest;
    }",0
"public List<Integer> generateFibonacci(int n) {
        List<Integer> fibonacci = new ArrayList<>();
        if (n >= 1) {
            fibonacci.add(0);
        }
        if (n >= 2) {
            fibonacci.add(1);
        }
        for (int i = 2; i < n; i++) {
            fibonacci.add(fibonacci.get(i - 1) + fibonacci.get(i - 2));
        }
        return fibonacci;
    }",0
"public void rotateArray(int[] arr, int k) {
        k = k % arr.length;
        reverse(arr, 0, arr.length - 1);
        reverse(arr, 0, k - 1);
        reverse(arr, k, arr.length - 1);
    }
",0
"private void reverse(int[] arr, int start, int end) {
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }",0
"public int countSubstringOccurrences(String str, String substring) {
        int count = 0;
        int index = 0;
        while ((index = str.indexOf(substring, index)) != -1) {
            count++;
            index += substring.length();
        }
        return count;
    }
",0
"public boolean containsDuplicates(int[] arr) {
        Set<Integer> uniqueElements = new HashSet<>();
        for (int num : arr) {
            if (!uniqueElements.add(num)) {
                return true;
            }
        }
        return false;
    }",0
"public int sumOfSquares(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            sum += num * num;
        }
        return sum;
    }",0
"public ListNode mergeSortedLinkedLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }
        if (l1 != null) {
            current.next = l1;
        } else {
            current.next = l2;
        }
        return dummy.next;
    }",0
"public String replaceSpaces(String str, char replacement) {
        return str.replace(' ', replacement);
    }",0
"public int factorial(int n) {
        if (n == 0 || n == 1) {
            return 1;
        }
        return n * factorial(n - 1);
    }",0
"public List<Integer> findPalindromicNumbers(int start, int end) {
        List<Integer> palindromes = new ArrayList<>();
        for (int i = start; i <= end; i++) {
            if (isPalindrome(i)) {
                palindromes.add(i);
            }
        }
        return palindromes;
    }",0
"private boolean isPalindrome(int number) {
        int reversed = 0, original = number;
        while (number != 0) {
            reversed = reversed * 10 + number % 10;
            number /= 10;
        }
        return original == reversed;
    }",0
"public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return """";
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return """";
            }
        }
        return prefix;
    }",0
"public boolean isPerfectNumber(int num) {
        int sum = 1;
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                sum += i + num / i;
            }
        }
        return sum == num && num != 1;
    }",0
"public String intToRoman(int num) {
        String[] thousands = {"""", ""M"", ""MM"", ""MMM""};
        String[] hundreds = {"""", ""C"", ""CC"", ""CCC"", ""CD"", ""D"", ""DC"", ""DCC"", ""DCCC"", ""CM""};
        String[] tens = {"""", ""X"", ""XX"", ""XXX"", ""XL"", ""L"", ""LX"", ""LXX"", ""LXXX"", ""XC""};
        String[] ones = {"""", ""I"", ""II"", ""III"", ""IV"", ""V"", ""VI"", ""VII"", ""VIII"", ""IX""};
        
        return thousands[num / 1000] +
               hundreds[(num % 1000) / 100] +
               tens[(num % 100) / 10] +
               ones[num % 10];
    }",0
"public int firstRepeatingElement(int[] arr) {
        Set<Integer> seen = new HashSet<>();
        for (int num : arr) {
            if (seen.contains(num)) {
                return num;
            }
            seen.add(num);
        }
        return -1;  // No repeating element
    }",0
"public int firstNonRepeatingElement(int[] arr) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : arr) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        for (int num : arr) {
            if (frequencyMap.get(num) == 1) {
                return num;
            }
        }
        return -1;  // No non-repeating element
    }",0
"public void bubbleSort(int[] arr) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < arr.length - 1; i++) {
                if (arr[i] > arr[i + 1]) {
                    int temp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }",0
"public int findLargestNumber(int[] arr) {
        int largest = Integer.MIN_VALUE;
        for (int num : arr) {
            if (num > largest) {
                largest = num;
            }
        }
        return largest;
    }",0
"public boolean areAnagrams(String str1, String str2) {
        if (str1.length() != str2.length()) {
            return false;
        }
        char[] arr1 = str1.toCharArray();
        char[] arr2 = str2.toCharArray();
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        return Arrays.equals(arr1, arr2);
    }",0
"public void rotateArray(int[] arr, int k) {
        k %= arr.length;
        reverse(arr, 0, arr.length - 1);
        reverse(arr, 0, k - 1);
        reverse(arr, k, arr.length - 1);
    }",0
"private void reverse(int[] arr, int start, int end) {
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }",0
"public ListNode reverseLinkedList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        while (current != null) {
            ListNode next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }",0
"public int findMissingNumber(int[] arr) {
        int n = arr.length + 1;
        int sumOfN = n * (n + 1) / 2;
        int sumOfArr = 0;
        for (int num : arr) {
            sumOfArr += num;
        }
        return sumOfN - sumOfArr;
    }",0
"public int[] mergeSortedArrays(int[] arr1, int[] arr2) {
        int[] merged = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] < arr2[j]) {
                merged[k++] = arr1[i++];
            } else {
                merged[k++] = arr2[j++];
            }
        }
        while (i < arr1.length) {
            merged[k++] = arr1[i++];
        }
        while (j < arr2.length) {
            merged[k++] = arr2[j++];
        }
        return merged;
    }",0
"public boolean isIdentityMatrix(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if ((i == j && matrix[i][j] != 1) || (i != j && matrix[i][j] != 0)) {
                    return false;
                }
            }
        }
        return true;
    }",0
"public int factorial(int n) {
        if (n == 0 || n == 1) {
            return 1;
        }
        return n * factorial(n - 1);
    }",0
"public int maxProduct(int[] arr) {
        int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE;
        for (int num : arr) {
            if (num > max1) {
                max2 = max1;
                max1 = num;
            } else if (num > max2) {
                max2 = num;
            }
        }
        return max1 * max2;
    }",0
"public List<Integer> findArmstrongNumbers(int start, int end) {
        List<Integer> armstrongNumbers = new ArrayList<>();
        for (int i = start; i <= end; i++) {
            if (isArmstrong(i)) {
                armstrongNumbers.add(i);
            }
        }
        return armstrongNumbers;
    }",0
"private boolean isArmstrong(int num) {
        int original = num, sum = 0, digits = String.valueOf(num).length();
        while (num != 0) {
            sum += Math.pow(num % 10, digits);
            num /= 10;
        }
        return original == sum;
    }",0
"public String removeVowels(String str) {
        return str.replaceAll(""[AEIOUaeiou]"", """");
    }",0
"public int findSecondLargest(int[] arr) {
        int largest = Integer.MIN_VALUE, secondLargest = Integer.MIN_VALUE;
        for (int num : arr) {
            if (num > largest) {
                secondLargest = largest;
                largest = num;
            } else if (num > secondLargest && num != largest) {
                secondLargest = num;
            }
        }
        return secondLargest;
    }",0
"public int longestPalindromeSubstring(String s) {
        if (s == null || s.length() == 0) return 0;
        int maxLength = 1;
        for (int i = 0; i < s.length(); i++) {
            for (int j = i; j < s.length(); j++) {
                if (isPalindrome(s, i, j) && j - i + 1 > maxLength) {
                    maxLength = j - i + 1;
                }
            }
        }
        return maxLength;
    }",0
"private boolean isPalindrome(String s, int left, int right) {
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) return false;
            left++;
            right--;
        }
        return true;
    }",0
"public int fibonacci(int n) {
        if (n <= 1) return n;
        int[] fib = new int[n + 1];
        fib[0] = 0;
        fib[1] = 1;
        for (int i = 2; i <= n; i++) {
            fib[i] = fib[i - 1] + fib[i - 2];
        }
        return fib[n];
    }",0
"public int sumOfFirstNNumbers(int n) {
        return n * (n + 1) / 2;
    }",0
"public String reverseWords(String str) {
        String[] words = str.split("" "");
        StringBuilder reversed = new StringBuilder();
        for (int i = words.length - 1; i >= 0; i--) {
            reversed.append(words[i]);
            if (i != 0) reversed.append("" "");
        }
        return reversed.toString();
    }",0
"public int[] removeDuplicates(int[] arr) {
        Set<Integer> unique = new LinkedHashSet<>();
        for (int num : arr) {
            unique.add(num);
        }
        return unique.stream().mapToInt(i -> i).toArray();
    }",0
"public int nthPrime(int n) {
        int count = 0, num = 1;
        while (count < n) {
            num++;
            if (isPrime(num)) {
                count++;
            }
        }
        return num;
    }",0
"private boolean isPrime(int num) {
        if (num <= 1) return false;
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) return false;
        }
        return true;
    }",0
"public int countVowels(String str) {
        int count = 0;
        for (char c : str.toCharArray()) {
            if (""AEIOUaeiou"".indexOf(c) != -1) {
                count++;
            }
        }
        return count;
    }",0
"public boolean isSorted(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return false;
            }
        }
        return true;
    }",0
"public ListNode findMiddleElement(ListNode head) {
        if (head == null) return null;
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }",0
"public boolean isValidPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        while (left < right) {
            while (left < right && !Character.isLetterOrDigit(str.charAt(left))) {
                left++;
            }
            while (left < right && !Character.isLetterOrDigit(str.charAt(right))) {
                right--;
            }
            if (Character.toLowerCase(str.charAt(left)) != Character.toLowerCase(str.charAt(right))) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
",0
"public String findLongestWord(String str) {
        String[] words = str.split(""\\s+"");
        String longest = """";
        for (String word : words) {
            if (word.length() > longest.length()) {
                longest = word;
            }
        }
        return longest;
    }",0
"public int sumOfEvenNumbers(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            if (num % 2 == 0) {
                sum += num;
            }
        }
        return sum;
    }",0
"public String findLongestEvenWord(String str) {
        String[] words = str.split(""\\s+"");
        String longest = """";
        for (String word : words) {
            if (word.length() % 2 == 0 && word.length() > longest.length()) {
                longest = word;
            }
        }
        return longest;
    }",0
"public void sortStringsAlphabetically(String[] arr) {
        Arrays.sort(arr);
    }",0
"public int squareRoot(int num) {
        if (num < 2) return num;
        int left = 1, right = num / 2, ans = 0;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (mid == num / mid) return mid;
            if (mid < num / mid) {
                left = mid + 1;
                ans = mid;
            } else {
                right = mid - 1;
            }
        }
        return ans;
    }",0
" public int sumOfSquares(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            sum += num * num;
        }
        return sum;
    }",0
"public int longestIncreasingSubsequence(int[] arr) {
        if (arr.length == 0) return 0;
        int[] lis = new int[arr.length];
        Arrays.fill(lis, 1);

        for (int i = 1; i < arr.length; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[i] > arr[j]) {
                    lis[i] = Math.max(lis[i], lis[j] + 1);
                }
            }
        }

        int maxLength = 1;
        for (int len : lis) {
            maxLength = Math.max(maxLength, len);
        }
        return maxLength;
    }",0
"public ListNode reverseLinkedList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;

        while (current != null) {
            ListNode next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
",0
"public int[] mergeSortedArrays(int[] arr1, int[] arr2) {
        int[] merged = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] < arr2[j]) {
                merged[k++] = arr1[i++];
            } else {
                merged[k++] = arr2[j++];
            }
        }

        while (i < arr1.length) {
            merged[k++] = arr1[i++];
        }

        while (j < arr2.length) {
            merged[k++] = arr2[j++];
        }

        return merged;
    }",0
" public void rotateMatrix90Degrees(int[][] matrix) {
        int n = matrix.length;

        // Transpose the matrix
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }

        // Reverse each row
        for (int i = 0; i < n; i++) {
            int left = 0, right = n - 1;
            while (left < right) {
                int temp = matrix[i][left];
                matrix[i][left] = matrix[i][right];
                matrix[i][right] = temp;
                left++;
                right--;
            }
        }
    }",0
"public String removeVowels(String str) {
        StringBuilder result = new StringBuilder();
        for (char c : str.toCharArray()) {
            if (""AEIOUaeiou"".indexOf(c) == -1) {
                result.append(c);
            }
        }
        return result.toString();
    }",0
"public int countSubstringOccurrences(String str, String sub) {
        int count = 0;
        int index = 0;
        while ((index = str.indexOf(sub, index)) != -1) {
            count++;
            index += sub.length();
        }
        return count;
    }",0
"public String intToBinary(int num) {
        if (num == 0) return ""0"";
        StringBuilder binary = new StringBuilder();
        while (num > 0) {
            binary.append(num % 2);
            num /= 2;
        }
        return binary.reverse().toString();
    }",0
"public int maxProduct(int[] arr) {
        int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE;
        for (int num : arr) {
            if (num > max1) {
                max2 = max1;
                max1 = num;
            } else if (num > max2) {
                max2 = num;
            }
        }
        return max1 * max2;
    }",0
"public int sumOfDigits(int num) {
        int sum = 0;
        while (num != 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }",0
"public int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }",0
"public int lcm(int a, int b) {
        return a * (b / gcd(a, b));
    }",0
"public String decimalToHexadecimal(int num) {
        if (num == 0) return ""0"";
        StringBuilder hex = new StringBuilder();
        char[] hexChars = ""0123456789ABCDEF"".toCharArray();
        while (num > 0) {
            hex.append(hexChars[num % 16]);
            num /= 16;
        }
        return hex.reverse().toString();
    }",0
"public String removeNonAlphabetic(String str) {
        StringBuilder result = new StringBuilder();
        for (char c : str.toCharArray()) {
            if (Character.isLetter(c)) {
                result.append(c);
            }
        }
        return result.toString();
    }",0
"public boolean isNumeric(String str) {
        for (char c : str.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }",0
"public int findMissingNumber(int[] arr) {
        int n = arr.length + 1;
        int totalSum = n * (n + 1) / 2;
        int arraySum = 0;
        for (int num : arr) {
            arraySum += num;
        }
        return totalSum - arraySum;
    }",0
"public char firstRepeatedCharacter(String str) {
        Set<Character> seen = new HashSet<>();
        for (char c : str.toCharArray()) {
            if (seen.contains(c)) {
                return c;
            }
            seen.add(c);
        }
        return '\0';
    }",0
"public char firstNonRepeatedCharacter(String str) {
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : str.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }
        for (char c : str.toCharArray()) {
            if (frequencyMap.get(c) == 1) {
                return c;
            }
        }
        return '\0';
    }",0
"public List<List<Integer>> generateSubsets(int[] nums) {
        List<List<Integer>> subsets = new ArrayList<>();
        subsets.add(new ArrayList<>());

        for (int num : nums) {
            int size = subsets.size();
            for (int i = 0; i < size; i++) {
                List<Integer> subset = new ArrayList<>(subsets.get(i));
                subset.add(num);
                subsets.add(subset);
            }
        }

        return subsets;
    }",0
"public int[] arrayIntersection(int[] arr1, int[] arr2) {
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        for (int num : arr1) {
            set1.add(num);
        }
        for (int num : arr2) {
            if (set1.contains(num)) {
                set2.add(num);
            }
        }
        int[] result = new int[set2.size()];
        int index = 0;
        for (int num : set2) {
            result[index++] = num;
        }
        return result;
    }",0
" public String toTitleCase(String str) {
        String[] words = str.split(""\\s+"");
        StringBuilder titleCase = new StringBuilder();
        for (String word : words) {
            if (word.length() > 0) {
                titleCase.append(Character.toUpperCase(word.charAt(0)))
                         .append(word.substring(1).toLowerCase());
                titleCase.append("" "");
            }
        }
        return titleCase.toString().trim();
    }",0
" public List<Integer> findUniqueElements(int[] arr) {
        Set<Integer> uniqueElements = new HashSet<>();
        Set<Integer> duplicates = new HashSet<>();
        
        for (int num : arr) {
            if (!uniqueElements.add(num)) {
                duplicates.add(num);
            }
        }
        
        uniqueElements.removeAll(duplicates);
        return new ArrayList<>(uniqueElements);
    }",0
" public List<Integer> fibonacciSequence(int n) {
        List<Integer> fibonacci = new ArrayList<>();
        if (n <= 0) return fibonacci;
        
        fibonacci.add(0);
        if (n == 1) return fibonacci;
        
        fibonacci.add(1);
        for (int i = 2; i < n; i++) {
            fibonacci.add(fibonacci.get(i - 1) + fibonacci.get(i - 2));
        }
        return fibonacci;
    }",0
" public boolean isPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }",0
"public int largestPrimeFactor(int num) {
        int largest = -1;
        
        while (num % 2 == 0) {
            largest = 2;
            num /= 2;
        }
        
        for (int i = 3; i <= Math.sqrt(num); i += 2) {
            while (num % i == 0) {
                largest = i;
                num /= i;
            }
        }
        
        if (num > 2) {
            largest = num;
        }
        return largest;
    }",0
" public List<String> generatePermutations(String str) {
        List<String> permutations = new ArrayList<>();
        generatePermutationsHelper("""", str, permutations);
        return permutations;
    }",0
" private void generatePermutationsHelper(String prefix, String str, List<String> permutations) {
        int n = str.length();
        if (n == 0) {
            permutations.add(prefix);
        } else {
            for (int i = 0; i < n; i++) {
                generatePermutationsHelper(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1, n), permutations);
            }
        }
    }",0
"public double squareRoot(double number) {
        if (number < 0) throw new IllegalArgumentException(""Negative input"");
        double guess = number / 2.0;
        double epsilon = 0.0001;

        while (Math.abs(guess * guess - number) >= epsilon) {
            guess = (guess + number / guess) / 2.0;
        }
        return guess;
    }",0
" public ListNode mergeTwoSortedLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }

        current.next = (l1 == null) ? l2 : l1;
        return dummy.next;
    }",0
"public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) return """";
        String prefix = strs[0];

        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return """";
            }
        }
        return prefix;
    }",0
"public int factorial(int n) {
        if (n < 0) throw new IllegalArgumentException(""Negative input"");
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }",0
"public boolean isValidNumber(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
",0
"public List<Integer> findMode(int[] nums) {
        Map<Integer, Integer> countMap = new HashMap<>();
        int maxCount = 0;
        for (int num : nums) {
            int count = countMap.getOrDefault(num, 0) + 1;
            countMap.put(num, count);
            maxCount = Math.max(maxCount, count);
        }
        
        List<Integer> modes = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {
            if (entry.getValue() == maxCount) {
                modes.add(entry.getKey());
            }
        }
        return modes;
    }",0
"public List<Integer> flattenNestedList(List<List<Integer>> nestedList) {
        List<Integer> flatList = new ArrayList<>();
        for (List<Integer> innerList : nestedList) {
            flatList.addAll(innerList);
        }
        return flatList;
    }",0
"public Node copyRandomList(Node head) {
        if (head == null) return null;

        Map<Node, Node> map = new HashMap<>();
        Node current = head;

        while (current != null) {
            map.put(current, new Node(current.val));
            current = current.next;
        }

        current = head;
        while (current != null) {
            Node copiedNode = map.get(current);
            copiedNode.next = map.get(current.next);
            copiedNode.random = map.get(current.random);
            current = current.next;
        }

        return map.get(head);
    }",0
"public List<List<Integer>> findPairsWithSum(int[] arr, int target) {
        List<List<Integer>> pairs = new ArrayList<>();
        Set<Integer> seen = new HashSet<>();

        for (int num : arr) {
            int complement = target - num;
            if (seen.contains(complement)) {
                pairs.add(Arrays.asList(complement, num));
            }
            seen.add(num);
        }
        return pairs;
    }",0
" public double power(double base, int exponent) {
        if (exponent == 0) return 1;
        if (exponent < 0) return 1 / power(base, -exponent);
        return base * power(base, exponent - 1);
    }",0
"public int firstMissingPositive(int[] nums) {
        Set<Integer> numSet = new HashSet<>();
        for (int num : nums) {
            if (num > 0) numSet.add(num);
        }

        for (int i = 1; i <= nums.length + 1; i++) {
            if (!numSet.contains(i)) {
                return i;
            }
        }
        return -1;
    }",0
"public int sumOfSquaresOfDigits(int num) {
        int sum = 0;
        while (num > 0) {
            int digit = num % 10;
            sum += digit * digit;
            num /= 10;
        }
        return sum;
    }",0
" public String reverseWords(String sentence) {
        String[] words = sentence.split("" "");
        StringBuilder reversed = new StringBuilder();
        
        for (int i = words.length - 1; i >= 0; i--) {
            reversed.append(words[i]).append("" "");
        }
        
        return reversed.toString().trim();
    }",0
"public int productOfArray(int[] arr) {
        int product = 1;
        for (int num : arr) {
            product *= num;
        }
        return product;
    }",0
"public int[] cumulativeSum(int[] arr) {
        int[] cumulative = new int[arr.length];
        cumulative[0] = arr[0];

        for (int i = 1; i < arr.length; i++) {
            cumulative[i] = cumulative[i - 1] + arr[i];
        }
        return cumulative;
    }",0
"public int largestElement(int[] arr) {
        int max = arr[0];
        for (int num : arr) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }",0
" public int[] intersection(int[] arr1, int[] arr2) {
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        for (int num : arr1) {
            set1.add(num);
        }
        for (int num : arr2) {
            if (set1.contains(num)) {
                set2.add(num);
            }
        }
        return set2.stream().mapToInt(i -> i).toArray();
    }",0
"public double average(int[] arr) {
        if (arr.length == 0) return 0;
        double sum = 0;
        for (int num : arr) {
            sum += num;
        }
        return sum / arr.length;
    }",0
"public boolean isPowerOfTwo(int n) {
        return (n > 0) && (n & (n - 1)) == 0;
    }",0
"public int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }",0
"public boolean hasUniqueCharacters(String str) {
        boolean[] charSet = new boolean[256];
        for (char c : str.toCharArray()) {
            if (charSet[c]) {
                return false; // Character already found
            }
            charSet[c] = true;
        }
        return true;
    }",0
"public int sumOfDigits(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }",0
"public String longestSubstringWithoutRepeating(String s) {
        Map<Character, Integer> charIndexMap = new HashMap<>();
        String longest = """";
        int start = 0;

        for (int i = 0; i < s.length(); i++) {
            if (charIndexMap.containsKey(s.charAt(i))) {
                start = Math.max(charIndexMap.get(s.charAt(i)) + 1, start);
            }
            charIndexMap.put(s.charAt(i), i);
            if (i - start + 1 > longest.length()) {
                longest = s.substring(start, i + 1);
            }
        }
        return longest;
    }",0
"public int romanToInt(String s) {
        Map<Character, Integer> romanValues = new HashMap<>();
        romanValues.put('I', 1);
        romanValues.put('V', 5);
        romanValues.put('X', 10);
        romanValues.put('L', 50);
        romanValues.put('C', 100);
        romanValues.put('D', 500);
        romanValues.put('M', 1000);
        
        int total = 0;
        int prevValue = 0;
        
        for (char c : s.toCharArray()) {
            int currentValue = romanValues.get(c);
            total += currentValue;
            if (prevValue < currentValue) {
                total -= 2 * prevValue; // Adjust for previous subtraction
            }
            prevValue = currentValue;
        }
        return total;
    }",0
" public boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }",0
"public int countVowels(String str) {
        int count = 0;
        for (char c : str.toLowerCase().toCharArray()) {
            if (""aeiou"".indexOf(c) != -1) {
                count++;
            }
        }
        return count;
    }",0
" public int maxSubArraySum(int[] nums) {
        int maxSum = nums[0], currentSum = nums[0];
        
        for (int i = 1; i < nums.length; i++) {
            currentSum = Math.max(nums[i], currentSum + nums[i]);
            maxSum = Math.max(maxSum, currentSum);
        }
        return maxSum;
    }",0
"public int[] mergeSortedArrays(int[] arr1, int[] arr2) {
        int[] merged = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;
        
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] < arr2[j]) {
                merged[k++] = arr1[i++];
            } else {
                merged[k++] = arr2[j++];
            }
        }
        
        while (i < arr1.length) {
            merged[k++] = arr1[i++];
        }
        
        while (j < arr2.length) {
            merged[k++] = arr2[j++];
        }
        
        return merged;
    }",0
"public String intersectStrings(String str1, String str2) {
        StringBuilder result = new StringBuilder();
        for (char c : str1.toCharArray()) {
            if (str2.indexOf(c) != -1 && result.indexOf(String.valueOf(c)) == -1) {
                result.append(c);
            }
        }
        return result.toString();
    }",0
"public boolean isPerfectSquare(int num) {
        if (num < 0) return false;
        int left = 0, right = num;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int square = mid * mid;
            if (square == num) return true;
            if (square < num) left = mid + 1;
            else right = mid - 1;
        }
        return false;
    }",0
"public int reverseInteger(int num) {
        int reversed = 0;
        while (num != 0) {
            int digit = num % 10;
            reversed = reversed * 10 + digit;
            num /= 10;
        }
        return reversed;
    }",0
" public List<Integer> findPrimes(int limit) {
        List<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= limit; i++) {
            boolean isPrime = true;
            for (int j = 2; j * j <= i; j++) {
                if (i % j == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) primes.add(i);
        }
        return primes;
    }
",0
" public int countCharacterOccurrences(String str, char ch) {
        int count = 0;
        for (char c : str.toCharArray()) {
            if (c == ch) count++;
        }
        return count;
    }",0
" public List<String> generateCombinations(String str) {
        List<String> combinations = new ArrayList<>();
        generateCombinationsHelper("""", str, combinations);
        return combinations;
    }",0
"private void generateCombinationsHelper(String prefix, String str, List<String> combinations) {
        for (int i = 0; i < str.length(); i++) {
            combinations.add(prefix + str.charAt(i));
            generateCombinationsHelper(prefix + str.charAt(i), str.substring(i + 1), combinations);
        }
    }",0
" public boolean isBalanced(String str) {
        Stack<Character> stack = new Stack<>();
        for (char c : str.toCharArray()) {
            if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                if (stack.isEmpty()) return false;
                stack.pop();
            }
        }
        return stack.isEmpty();
    }
",0
"public int[] removeDuplicates(int[] arr) {
        Set<Integer> uniqueSet = new LinkedHashSet<>();
        for (int num : arr) {
            uniqueSet.add(num);
        }
        return uniqueSet.stream().mapToInt(i -> i).toArray();
    }",0
" public int secondLargest(int[] arr) {
        int largest = Integer.MIN_VALUE, secondLargest = Integer.MIN_VALUE;

        for (int num : arr) {
            if (num > largest) {
                secondLargest = largest;
                largest = num;
            } else if (num > secondLargest && num < largest) {
                secondLargest = num;
            }
        }
        return secondLargest;
    }",0
" public int[] sumOfArrays(int[] arr1, int[] arr2) {
        int length = Math.max(arr1.length, arr2.length);
        int[] sumArray = new int[length];

        for (int i = 0; i < length; i++) {
            int num1 = (i < arr1.length) ? arr1[i] : 0;
            int num2 = (i < arr2.length) ? arr2[i] : 0;
            sumArray[i] = num1 + num2;
        }
        return sumArray;
    }",0
" public List<Integer> commonElements(int[] arr1, int[] arr2) {
        Set<Integer> set1 = new HashSet<>();
        List<Integer> commonList = new ArrayList<>();

        for (int num : arr1) {
            set1.add(num);
        }
        
        for (int num : arr2) {
            if (set1.contains(num)) {
                commonList.add(num);
            }
        }
        return commonList;
    }",0
"public List<Integer> flattenList(List<List<Integer>> nestedList) {
        List<Integer> flatList = new ArrayList<>();
        for (List<Integer> list : nestedList) {
            flatList.addAll(list);
        }
        return flatList;
    }",0
"public boolean isPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }",0
"public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) return """";
        String prefix = strs[0];

        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return """";
            }
        }
        return prefix;
    }",0
"public long factorial(int n) {
        if (n < 0) throw new IllegalArgumentException(""Negative numbers are not allowed."");
        long result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }",0
"public int countWords(String str) {
        if (str == null || str.isEmpty()) return 0;
        String[] words = str.trim().split(""\\s+"");
        return words.length;
    }",0
"public Character firstNonRepeatingCharacter(String str) {
        Map<Character, Integer> charCount = new LinkedHashMap<>();
        for (char c : str.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }
        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
            if (entry.getValue() == 1) {
                return entry.getKey();
            }
        }
        return null;
    }",0
"public int majorityElement(int[] nums) {
        int count = 0, candidate = 0;
        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            count += (num == candidate) ? 1 : -1;
        }
        return candidate;
    }",0
"public double power(double base, int exponent) {
        double result = 1;
        boolean isNegativeExponent = exponent < 0;
        if (isNegativeExponent) exponent = -exponent;

        for (int i = 0; i < exponent; i++) {
            result *= base;
        }
        return isNegativeExponent ? 1 / result : result;
    }",0
"public boolean areAnagrams(String str1, String str2) {
        if (str1.length() != str2.length()) return false;
        int[] charCount = new int[26];
        for (char c : str1.toCharArray()) {
            charCount[c - 'a']++;
        }
        for (char c : str2.toCharArray()) {
            charCount[c - 'a']--;
            if (charCount[c - 'a'] < 0) {
                return false;
            }
        }
        return true;
    }",0
"public int longestIncreasingSubsequence(int[] nums) {
        if (nums.length == 0) return 0;
        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);

        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        return Arrays.stream(dp).max().orElse(0);
    }",0
"public void rotateArray(int[] nums, int k) {
        k = k % nums.length; // Handle cases where k is greater than the array length
        reverse(nums, 0, nums.length - 1);
        reverse(nums, 0, k - 1);
        reverse(nums, k, nums.length - 1);
    }",0
"private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }",0
"public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return nums[nums.length - k];
    }",0
"public int[] uniqueElements(int[] arr1, int[] arr2) {
        Set<Integer> uniqueSet = new HashSet<>();
        for (int num : arr1) uniqueSet.add(num);
        for (int num : arr2) uniqueSet.add(num);
        return uniqueSet.stream().mapToInt(i -> i).toArray();
    }",0
"public int countUppercase(String str) {
        int count = 0;
        for (char c : str.toCharArray()) {
            if (Character.isUpperCase(c)) {
                count++;
            }
        }
        return count;
    }",0
"public List<Character> commonCharacters(String str1, String str2) {
        Set<Character> commonSet = new HashSet<>();
        for (char c : str1.toCharArray()) {
            if (str2.indexOf(c) != -1) {
                commonSet.add(c);
            }
        }
        return new ArrayList<>(commonSet);
    }",0
"public int longestConsecutive(int[] nums) {
        Set<Integer> numSet = new HashSet<>();
        for (int num : nums) {
            numSet.add(num);
        }

        int longestStreak = 0;

        for (int num : nums) {
            if (!numSet.contains(num)) continue;
            numSet.remove(num);

            int currentNum = num;
            int currentStreak = 1;

            while (numSet.contains(currentNum + 1)) {
                currentNum++;
                numSet.remove(currentNum);
                currentStreak++;
            }

            longestStreak = Math.max(longestStreak, currentStreak);
        }
        return longestStreak;
    }
",0
"public Set<Integer> intersectionOfSets(Set<Integer> set1, Set<Integer> set2) {
        Set<Integer> intersection = new HashSet<>(set1);
        intersection.retainAll(set2);
        return intersection;
    }",0
"public List<Integer> generateFibonacci(int n) {
        List<Integer> fibonacciList = new ArrayList<>();
        int a = 0, b = 1;
        while (a <= n) {
            fibonacciList.add(a);
            int temp = a;
            a = b;
            b = temp + b;
        }
        return fibonacciList;
    }",0
"public boolean isValidNumber(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
",0
"public String replaceSpaces(String str, char replacement) {
        return str.replace(' ', replacement);
    }",0
" public String substringBetween(String str, int start, int end) {
        if (start < 0 || end > str.length() || start >= end) {
            throw new IllegalArgumentException(""Invalid start or end index."");
        }
        return str.substring(start, end);
    }",0
" public boolean containsOnlyDigits(String str) {
        for (char c : str.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }",0
"public Map<Character, Integer> countCharacterOccurrences(String str) {
        Map<Character, Integer> charCount = new HashMap<>();
        for (char c : str.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }
        return charCount;
    }",0
" public String lastNCharacters(String str, int n) {
        if (n > str.length()) n = str.length();
        return str.substring(str.length() - n);
    }",0
" public Map<Integer, Integer> createHistogram(int[] nums) {
        Map<Integer, Integer> histogram = new HashMap<>();
        for (int num : nums) {
            histogram.put(num, histogram.getOrDefault(num, 0) + 1);
        }
        return histogram;
    }",0
"public long largestPrimeFactor(long n) {
        long largestFactor = -1;
        for (long i = 2; i <= Math.sqrt(n); i++) {
            while (n % i == 0) {
                largestFactor = i;
                n /= i;
            }
        }
        if (n > 1) {
            largestFactor = n;
        }
        return largestFactor;
    }
",0
" public boolean areArraysEqual(int[] arr1, int[] arr2) {
        if (arr1.length != arr2.length) return false;
        for (int i = 0; i < arr1.length; i++) {
            if (arr1[i] != arr2[i]) return false;
        }
        return true;
    }",0
"public int countVowels(String str) {
        int count = 0;
        for (char c : str.toCharArray()) {
            if (""aeiouAEIOU"".indexOf(c) != -1) {
                count++;
            }
        }
        return count;
    }",0
"public int maxSubArraySum(int[] nums) {
        int maxSum = nums[0];
        int currentSum = nums[0];

        for (int i = 1; i < nums.length; i++) {
            currentSum = Math.max(nums[i], currentSum + nums[i]);
            maxSum = Math.max(maxSum, currentSum);
        }
        return maxSum;
    }",0
"public int[] arrayIntersection(int[] arr1, int[] arr2) {
        Set<Integer> set1 = new HashSet<>();
        for (int num : arr1) {
            set1.add(num);
        }
        Set<Integer> intersection = new HashSet<>();
        for (int num : arr2) {
            if (set1.contains(num)) {
                intersection.add(num);
            }
        }
        return intersection.stream().mapToInt(i -> i).toArray();
    }",0
" public int sumOfDigits(int n) {
        int sum = 0;
        while (n != 0) {
            sum += n % 10;
            n /= 10;
        }
        return sum;
    }",0
"public String toTitleCase(String str) {
        StringBuilder titleCase = new StringBuilder();
        for (String word : str.split("" "")) {
            if (word.length() > 0) {
                titleCase.append(Character.toUpperCase(word.charAt(0)))
                         .append(word.substring(1).toLowerCase())
                         .append("" "");
            }
        }
        return titleCase.toString().trim();
    }",0
"public boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }",0
"public String generateRandomPassword(int length) {
        String chars = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()"";
        StringBuilder password = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            int index = (int) (Math.random() * chars.length());
            password.append(chars.charAt(index));
        }
        return password.toString();
    }",0
"public String reverseWordsInSentence(String sentence) {
        String[] words = sentence.split("" "");
        StringBuilder reversed = new StringBuilder();
        for (int i = words.length - 1; i >= 0; i--) {
            reversed.append(words[i]).append("" "");
        }
        return reversed.toString().trim();
    }",0
"public int calculateGCD(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }",0
"public String decimalToBinary(int decimal) {
        StringBuilder binary = new StringBuilder();
        while (decimal > 0) {
            binary.insert(0, decimal % 2);
            decimal /= 2;
        }
        return binary.toString();
    }",0
"public int countCharacterOccurrences(String str, char character) {
        int count = 0;
        for (char c : str.toCharArray()) {
            if (c == character) {
                count++;
            }
        }
        return count;
    }",0
"public int findMissingNumber(int[] nums) {
        int n = nums.length + 1;
        int expectedSum = n * (n + 1) / 2;
        int actualSum = 0;
        for (int num : nums) {
            actualSum += num;
        }
        return expectedSum - actualSum;
    }",0
"public void bubbleSort(int[] nums) {
        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (nums[j] > nums[j + 1]) {
                    // swap nums[j] and nums[j+1]
                    int temp = nums[j];
                    nums[j] = nums[j + 1];
                    nums[j + 1] = temp;
                }
            }
        }
    }",0
"public boolean isPrime(int n) {
        if (n <= 1) return false;
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) return false;
        }
        return true;
    }
",0
" public int[] mergeSortedArrays(int[] arr1, int[] arr2) {
        int[] merged = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] < arr2[j]) {
                merged[k++] = arr1[i++];
            } else {
                merged[k++] = arr2[j++];
            }
        }
        while (i < arr1.length) merged[k++] = arr1[i++];
        while (j < arr2.length) merged[k++] = arr2[j++];
        return merged;
    }
",0
" public int longestUniqueSubstring(String str) {
        int maxLength = 0;
        Map<Character, Integer> charIndexMap = new HashMap<>();
        int start = 0;

        for (int i = 0; i < str.length(); i++) {
            if (charIndexMap.containsKey(str.charAt(i))) {
                start = Math.max(charIndexMap.get(str.charAt(i)) + 1, start);
            }
            charIndexMap.put(str.charAt(i), i);
            maxLength = Math.max(maxLength, i - start + 1);
        }
        return maxLength;
    }",0
"public String[] splitString(String str, String delimiter) {
        return str.split(delimiter);
    }",0
"public List<Integer> intersectLists(List<Integer> list1, List<Integer> list2) {
        List<Integer> intersection = new ArrayList<>();
        for (Integer num : list1) {
            if (list2.contains(num) && !intersection.contains(num)) {
                intersection.add(num);
            }
        }
        return intersection;
    }",0
"public List<Integer> uniqueElementsFromList(List<Integer> list) {
        Set<Integer> uniqueSet = new HashSet<>(list);
        return new ArrayList<>(uniqueSet);
    }",0
" public String formatDate(LocalDate date) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""dd-MM-yyyy"");
        return date.format(formatter);
    }",0
"public int square(int n) {
        return n * n;
    }",0
" public boolean startsWithPrefix(String str, String prefix) {
        return str.startsWith(prefix);
    }",0
"public boolean endsWithSuffix(String str, String suffix) {
        return str.endsWith(suffix);
    }",0
"public void shuffleArray(int[] array) {
        Random rand = new Random();
        for (int i = array.length - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1);
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    }",0
"public List<Integer> firstNPrimes(int n) {
        List<Integer> primes = new ArrayList<>();
        int num = 2; // Start checking for primes from 2
        while (primes.size() < n) {
            if (isPrime(num)) {
                primes.add(num);
            }
            num++;
        }
        return primes;
    }",0
" public String toUpperCase(String str) {
        return str.toUpperCase();
    }",0
"public String toLowerCase(String str) {
        return str.toLowerCase();
    }",0
" public boolean isValidEmail(String email) {
        String emailRegex = ""^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$"";
        return email.matches(emailRegex);
    }",0
" public int findSmallestNumber(int[] nums) {
        if (nums.length == 0) throw new IllegalArgumentException(""Array cannot be empty."");
        int smallest = nums[0];
        for (int num : nums) {
            if (num < smallest) {
                smallest = num;
            }
        }
        return smallest;
    }",0
"public boolean equalsIgnoreCase(String str1, String str2) {
        return str1.equalsIgnoreCase(str2);
    }",0
"public String concatenateWithSpace(String str1, String str2) {
        return str1 + "" "" + str2;
    }",0
"public String replaceCharacter(String str, char oldChar, char newChar) {
        return str.replace(oldChar, newChar);
    }",0
" public int countLines(String text) {
        String[] lines = text.split(""\n"");
        return lines.length;
    }",0
" public String removeDuplicateCharacters(String str) {
        StringBuilder result = new StringBuilder();
        Set<Character> charSet = new HashSet<>();
        for (char c : str.toCharArray()) {
            if (!charSet.contains(c)) {
                charSet.add(c);
                result.append(c);
            }
        }
        return result.toString();
    }",0
"public int indexOfCharacter(String str, char character) {
        return str.indexOf(character);
    }",0
"public char[] stringToCharArray(String str) {
        return str.toCharArray();
    }",0
"public boolean containsSubstring(String str, String substring) {
        return str.contains(substring);
    }",0
" public String getSubstring(String str, int start, int end) {
        if (start < 0 || end > str.length() || start > end) {
            throw new IllegalArgumentException(""Invalid start or end index."");
        }
        return str.substring(start, end);
    }",0
"public int countWords(String str) {
        String[] words = str.trim().split(""\\s+"");
        return words.length;
    }",0
"public int fibonacci(int n) {
        if (n < 0) throw new IllegalArgumentException(""n must be non-negative."");
        if (n == 0) return 0;
        if (n == 1) return 1;
        
        int a = 0, b = 1, fib = 0;
        for (int i = 2; i <= n; i++) {
            fib = a + b;
            a = b;
            b = fib;
        }
        return fib;
    }",0
"public long factorial(int n) {
        if (n < 0) throw new IllegalArgumentException(""n must be non-negative."");
        long result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }",0
"public boolean isPalindrome(String str) {
        String cleanedStr = str.replaceAll(""[^a-zA-Z0-9]"", """").toLowerCase();
        int left = 0;
        int right = cleanedStr.length() - 1;
        
        while (left < right) {
            if (cleanedStr.charAt(left) != cleanedStr.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }",0
" public String arrayToString(int[] arr) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < arr.length; i++) {
            result.append(arr[i]);
            if (i < arr.length - 1) {
                result.append("", "");
            }
        }
        return result.toString();
    }",0
"public String findLongestWord(String str) {
        String[] words = str.split(""\\s+"");
        String longestWord = """";
        
        for (String word : words) {
            if (word.length() > longestWord.length()) {
                longestWord = word;
            }
        }
        return longestWord;
    }",0
"public double average(double[] nums) {
        if (nums.length == 0) throw new IllegalArgumentException(""Array cannot be empty."");
        double sum = 0;
        
        for (double num : nums) {
            sum += num;
        }
        return sum / nums.length;
    }",0
"public boolean areAnagrams(String str1, String str2) {
        char[] arr1 = str1.toLowerCase().toCharArray();
        char[] arr2 = str2.toLowerCase().toCharArray();
        
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        return Arrays.equals(arr1, arr2);
    }",0
"public Set<Integer> intersectSets(Set<Integer> set1, Set<Integer> set2) {
        Set<Integer> intersection = new HashSet<>(set1);
        intersection.retainAll(set2);
        return intersection;
    }",0
"public int[] flatten2DArray(int[][] array) {
        int totalLength = Arrays.stream(array).mapToInt(arr -> arr.length).sum();
        int[] flatArray = new int[totalLength];
        int index = 0;

        for (int[] arr : array) {
            for (int num : arr) {
                flatArray[index++] = num;
            }
        }
        return flatArray;
    }",0
" public int[] uniqueElementsFromArrays(int[] arr1, int[] arr2) {
        Set<Integer> uniqueElements = new HashSet<>();
        
        for (int num : arr1) {
            uniqueElements.add(num);
        }
        for (int num : arr2) {
            uniqueElements.add(num);
        }
        
        return uniqueElements.stream().mapToInt(i -> i).toArray();
    }",0
" public int[] minMax(int[] nums) {
        if (nums.length == 0) throw new IllegalArgumentException(""Array cannot be empty."");
        int min = nums[0];
        int max = nums[0];
        
        for (int num : nums) {
            if (num < min) {
                min = num;
            }
            if (num > max) {
                max = num;
            }
        }
        return new int[]{min, max};
    }",0
"public void reverseArray(int[] array) {
        int left = 0;
        int right = array.length - 1;

        while (left < right) {
            int temp = array[left];
            array[left] = array[right];
            array[right] = temp;
            left++;
            right--;
        }
    }",0
"public boolean isNumeric(String str) {
        return str != null && str.matches(""\\d+"");
    }",0
"public List<String> splitIntoLines(String str, int maxLength) {
        List<String> lines = new ArrayList<>();
        String[] words = str.split("" "");
        StringBuilder currentLine = new StringBuilder();

        for (String word : words) {
            if (currentLine.length() + word.length() + 1 > maxLength) {
                lines.add(currentLine.toString().trim());
                currentLine.setLength(0); // Clear current line
            }
            currentLine.append(word).append("" "");
        }
        if (currentLine.length() > 0) {
            lines.add(currentLine.toString().trim());
        }
        return lines;
    }",0
" public Character firstNonRepeatingCharacter(String str) {
        Map<Character, Integer> charCount = new LinkedHashMap<>();
        
        for (char c : str.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }
        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
            if (entry.getValue() == 1) {
                return entry.getKey();
            }
        }
        return null;
    }",0
"public boolean isPerfectSquare(int num) {
        if (num < 0) return false;
        int sqrt = (int) Math.sqrt(num);
        return (sqrt * sqrt) == num;
    }",0
"public int[] countEvenOdd(int[] nums) {
        int evenCount = 0;
        int oddCount = 0;

        for (int num : nums) {
            if (num % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
        return new int[]{evenCount, oddCount};
    }",0
"public int sumOfSquares(int[] nums) {
        int sum = 0;
        for (int num : nums) {
            sum += num * num;
        }
        return sum;
    }",0
" public String removeWhitespace(String str) {
        return str.replaceAll(""\\s+"", """");
    }",0
"public Map<Character, Integer> characterFrequency(String str) {
        Map<Character, Integer> frequencyMap = new HashMap<>();
        
        for (char c : str.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }
        return frequencyMap;
    }",0
"public Integer secondLargest(int[] nums) {
        if (nums.length < 2) return null;
        Integer first = null, second = null;

        for (int num : nums) {
            if (first == null || num > first) {
                second = first;
                first = num;
            } else if ((second == null || num > second) && num != first) {
                second = num;
            }
        }
        return second;
    }",0
" public double power(double base, int exponent) {
        double result = 1;
        for (int i = 0; i < Math.abs(exponent); i++) {
            result *= base;
        }
        return exponent < 0 ? 1 / result : result;
    }",0
"public List<Integer> primesUpTo(int limit) {
        List<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= limit; i++) {
            if (isPrime(i)) {
                primes.add(i);
            }
        }
        return primes;
    }",0
"private boolean isPrime(int num) {
        if (num < 2) return false;
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) return false;
        }
        return true;
    }",0
"public List<Integer> flattenNestedList(List<List<Integer>> nestedList) {
        List<Integer> flatList = new ArrayList<>();
        for (List<Integer> innerList : nestedList) {
            flatList.addAll(innerList);
        }
        return flatList;
    }",0
"public void shuffleList(List<Integer> list) {
        Random rand = new Random();
        for (int i = list.size() - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1);
            Collections.swap(list, i, j);
        }
    }",0
"public int countVowels(String str) {
        int count = 0;
        for (char c : str.toLowerCase().toCharArray()) {
            if (""aeiou"".indexOf(c) != -1) {
                count++;
            }
        }
        return count;
    }",0
"public int[] mergeSortedArrays(int[] arr1, int[] arr2) {
        int[] mergedArray = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] <= arr2[j]) {
                mergedArray[k++] = arr1[i++];
            } else {
                mergedArray[k++] = arr2[j++];
            }
        }
        while (i < arr1.length) {
            mergedArray[k++] = arr1[i++];
        }
        while (j < arr2.length) {
            mergedArray[k++] = arr2[j++];
        }
        return mergedArray;
    }",0
" public String replaceSubstring(String str, String target, String replacement) {
        return str.replace(target, replacement);
    }",0
"public boolean isValidEmail(String email) {
        String emailRegex = ""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"";
        return email.matches(emailRegex);
    }",0
"public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) return """";
        String prefix = strs[0];

        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return """";
            }
        }
        return prefix;
    }",0
"public int gcd(int a, int b) {
        if (b == 0) return a;
        return gcd(b, a % b;
    }",0
"public double celsiusToFahrenheit(double celsius) {
        return (celsius * 9 / 5) + 32;
    }",0
"public double fahrenheitToCelsius(double fahrenheit) {
        return (fahrenheit - 32) * 5 / 9;
    }",0
"public String repeatString(String str, int times) {
        StringBuilder repeated = new StringBuilder();
        for (int i = 0; i < times; i++) {
            repeated.append(str);
        }
        return repeated.toString();
    }",0
"public List<Integer> findPrimesInRange(int start, int end) {
        List<Integer> primes = new ArrayList<>();
        for (int i = start; i <= end; i++) {
            if (isPrime(i)) {
                primes.add(i);
            }
        }
        return primes;
    }",0
" public int sumOfDigits(int num) {
        int sum = 0;
        while (num != 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }",0
"public boolean isArmstrong(int num) {
        int original = num;
        int sum = 0;
        int digits = String.valueOf(num).length();

        while (num != 0) {
            int digit = num % 10;
            sum += Math.pow(digit, digits);
            num /= 10;
        }
        return sum == original;
    }",0
" public ListNode mergeTwoSortedLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }
        current.next = (l1 != null) ? l1 : l2;
        return dummy.next;
    }",0
"public int maxProduct(int[] nums) {
        if (nums.length < 2) throw new IllegalArgumentException(""Array must contain at least two elements."");
        int max1 = Integer.MIN_VALUE;
        int max2 = Integer.MIN_VALUE;

        for (int num : nums) {
            if (num > max1) {
                max2 = max1;
                max1 = num;
            } else if (num > max2) {
                max2 = num;
            }
        }
        return max1 * max2;
    }
",0
"public double triangleArea(double a, double b, double c) {
        if (a + b <= c || a + c <= b || b + c <= a) {
            throw new IllegalArgumentException(""Invalid triangle sides."");
        }
        double s = (a + b + c) / 2;
        return Math.sqrt(s * (s - a) * (s - b) * (s - c));
    }",0
"public boolean containsDigits(String str) {
        for (char c : str.toCharArray()) {
            if (Character.isDigit(c)) {
                return true;
            }
        }
        return false;
    }",0
"public int countCharacterOccurrences(String str, char character) {
        int count = 0;
        for (char c : str.toCharArray()) {
            if (c == character) {
                count++;
            }
        }
        return count;
    }",0
"public int findMissingNumber(int[] nums, int n) {
        int totalSum = n * (n + 1) / 2;
        int arraySum = 0;
        for (int num : nums) {
            arraySum += num;
        }
        return totalSum - arraySum;
    }",0
"public int binaryToDecimal(String binary) {
        int decimal = 0;
        int base = 1; // 2^0

        for (int i = binary.length() - 1; i >= 0; i--) {
            if (binary.charAt(i) == '1') {
                decimal += base;
            }
            base *= 2;
        }
        return decimal;
    }",0
"public void bubbleSort(int[] arr) {
        int n = arr.length;
        boolean swapped;
        do {
            swapped = false;
            for (int i = 1; i < n; i++) {
                if (arr[i - 1] > arr[i]) {
                    int temp = arr[i - 1];
                    arr[i - 1] = arr[i];
                    arr[i] = temp;
                    swapped = true;
                }
            }
            n--; // Reduce the range of the next iteration
        } while (swapped);
    }",0
" public Integer findMode(int[] nums) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        int mode = nums[0];
        int maxCount = 0;

        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
            if (frequencyMap.get(num) > maxCount) {
                maxCount = frequencyMap.get(num);
                mode = num;
            }
        }
        return mode;
    }",0
"public int sumOfArray(int[] nums) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        return sum;
    }",0
"public boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }",0
"public long iterativeFactorial(int n) {
        if (n < 0) throw new IllegalArgumentException(""n must be non-negative."");
        long result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }",0
"public boolean isAnagram(String str1, String str2) {
        char[] arr1 = str1.replaceAll(""[\\s]"", """").toCharArray();
        char[] arr2 = str2.replaceAll(""[\\s]"", """").toCharArray();
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        return Arrays.equals(arr1, arr2);
    }",0
"public int nthPrime(int n) {
        if (n < 1) throw new IllegalArgumentException(""n must be a positive integer."");
        int count = 0, num = 1;

        while (count < n) {
            num++;
            if (isPrime(num)) {
                count++;
            }
        }
        return num;
    }",0
"public String reverseString(String str) {
        StringBuilder reversed = new StringBuilder(str);
        return reversed.reverse().toString();
    }",0
"public double averageOfArray(int[] nums) {
        if (nums.length == 0) throw new IllegalArgumentException(""Array cannot be empty."");
        return (double) sumOfArray(nums) / nums.length;
    }",0
"public String[] toUpperCaseArray(String[] arr) {
        for (int i = 0; i < arr.length; i++) {
            arr[i] = arr[i].toUpperCase();
        }
        return arr;
    }",0
"public Map<String, Integer> mergeMaps(Map<String, Integer> map1, Map<String, Integer> map2) {
        Map<String, Integer> mergedMap = new HashMap<>(map1);
        for (Map.Entry<String, Integer> entry : map2.entrySet()) {
            mergedMap.merge(entry.getKey(), entry.getValue(), Integer::sum);
        }
        return mergedMap;
    }",0
"public int countWords(String str) {
        String[] words = str.trim().split(""\\s+"");
        return words.length == 1 && words[0].isEmpty() ? 0 : words.length;
    }",0
"public String findLongestWord(String str) {
        String[] words = str.split(""\\s+"");
        String longest = """";
        for (String word : words) {
            if (word.length() > longest.length()) {
                longest = word;
            }
        }
        return longest;
    }",0
"public String replaceWhitespaceWithUnderscores(String str) {
        return str.replaceAll(""\\s+"", ""_"");
    }",0
"public Character firstNonRepeatedCharacter(String str) {
        Map<Character, Integer> charCount = new LinkedHashMap<>();
        for (char c : str.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }
        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
            if (entry.getValue() == 1) {
                return entry.getKey();
            }
        }
        return null;
    }",0
"public boolean arePalindromic(String str1, String str2) {
        return new StringBuilder(str1).reverse().toString().equals(str2);
    }",0
"public long factorial(int num) {
        if (num < 0) throw new IllegalArgumentException(""Number must be non-negative."");
        long result = 1;
        for (int i = 2; i <= num; i++) {
            result *= i;
        }
        return result;
    }",0
"public boolean isPerfectSquare(int num) {
        if (num < 0) return false;
        int sqrt = (int) Math.sqrt(num);
        return (sqrt * sqrt == num);
    }",0
"public List<Integer> fibonacciSequence(int limit) {
        List<Integer> sequence = new ArrayList<>();
        if (limit < 1) return sequence; // return empty if limit is less than 1
        sequence.add(0);
        if (limit == 1) return sequence; // return only the first element
        sequence.add(1);
        while (true) {
            int next = sequence.get(sequence.size() - 1) + sequence.get(sequence.size() - 2);
            if (next > limit) break;
            sequence.add(next);
        }
        return sequence;
    }",0
"public double findMedian(int[] arr) {
        if (arr == null || arr.length == 0) throw new IllegalArgumentException(""Array cannot be empty."");
        Arrays.sort(arr);
        int middle = arr.length / 2;
        if (arr.length % 2 == 0) {
            return (arr[middle - 1] + arr[middle]) / 2.0;
        } else {
            return arr[middle];
        }
    }",0
"public Map<Character, Integer> characterFrequency(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : str.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }
        return frequencyMap;
    }",0
"public boolean areRotations(String str1, String str2) {
        if (str1 == null || str2 == null) throw new IllegalArgumentException(""Strings cannot be null."");
        if (str1.length() != str2.length()) return false;
        String concatenated = str1 + str1;
        return concatenated.contains(str2);
    }",0
" public int[] bubbleSort(int[] arr) {
        if (arr == null) throw new IllegalArgumentException(""Array cannot be null."");
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // swap arr[j] and arr[j + 1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }",0
" public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return """";
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return """";
            }
        }
        return prefix;
    }
",0
" public List<Integer> findUniqueElements(int[] arr) {
        Set<Integer> uniqueSet = new HashSet<>();
        Set<Integer> duplicates = new HashSet<>();
        for (int num : arr) {
            if (!uniqueSet.add(num)) {
                duplicates.add(num);
            }
        }
        uniqueSet.removeAll(duplicates);
        return new ArrayList<>(uniqueSet);
    }",0
"public boolean isValidPalindrome(String str) {
        if (str == null) throw new IllegalArgumentException(""String cannot be null."");
        String sanitized = str.replaceAll(""[^a-zA-Z0-9]"", """").toLowerCase();
        int left = 0, right = sanitized.length() - 1;
        while (left < right) {
            if (sanitized.charAt(left) != sanitized.charAt(right)) return false;
            left++;
            right--;
        }
        return true;
    }
",0
"public double power(double base, int exponent) {
        double result = 1;
        boolean isNegative = exponent < 0;
        if (isNegative) exponent = -exponent;
        for (int i = 0; i < exponent; i++) {
            result *= base;
        }
        return isNegative ? 1 / result : result;
    }",0
" public String longestSubstringWithoutRepeating(String str) {
        if (str == null || str.isEmpty()) return """";
        Map<Character, Integer> charIndexMap = new HashMap<>();
        int start = 0, maxLength = 0, maxStart = 0;
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (charIndexMap.containsKey(c)) {
                start = Math.max(start, charIndexMap.get(c) + 1);
            }
            charIndexMap.put(c, i);
            if (i - start + 1 > maxLength) {
                maxLength = i - start + 1;
                maxStart = start;
            }
        }
        return str.substring(maxStart, maxStart + maxLength);
    }",0
"public int[] intersection(int[] arr1, int[] arr2) {
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> resultSet = new HashSet<>();
        for (int num : arr1) set1.add(num);
        for (int num : arr2) {
            if (set1.contains(num)) resultSet.add(num);
        }
        return resultSet.stream().mapToInt(i -> i).toArray();
    }",0
"public double circleArea(double radius) {
        if (radius < 0) throw new IllegalArgumentException(""Radius cannot be negative."");
        return Math.PI * radius * radius;
    }",0
"public List<String> convertToUpperCase(List<String> strings) {
        if (strings == null) throw new IllegalArgumentException(""List cannot be null."");
        List<String> upperCaseList = new ArrayList<>();
        for (String str : strings) {
            upperCaseList.add(str.toUpperCase());
        }
        return upperCaseList;
    }",0
"public double trapezoidArea(double base1, double base2, double height, double scale) {
    if (scale <= 0) throw new IllegalArgumentException(""Scale must be positive."");
    double area = ((base1 + base2) / 2) * height;
    return area * scale;
}",1
"public String createGreeting(String firstName, String lastName, String title, int age) {
    if (firstName == null || lastName == null || title == null) {
        throw new IllegalArgumentException(""Name fields cannot be null."");
    }
    String ageStatement = age > 0 ? "", age "" + age : """";
    return String.format(""Hello, %s %s! Welcome to our platform%s."", title, firstName + "" "" + lastName, ageStatement);
}",1
"public double calculateTotalCost(double price, int quantity, double taxRate, double discountRate) {
    if (quantity < 0 || taxRate < 0 || discountRate < 0) {
        throw new IllegalArgumentException(""Quantity and rates must be non-negative."");
    }
    double subtotal = price * quantity;
    double tax = subtotal * taxRate;
    double discount = subtotal * discountRate;
    return subtotal + tax - discount;
}",1
"public void logUserActivity(String username, String activity, String details, long timestamp) {
    if (username == null || activity == null || details == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    String logEntry = String.format(""User: %s | Activity: %s | Details: %s | Timestamp: %d"", username, activity, details, timestamp);
    System.out.println(logEntry);
}",1
"public int findMax(int a, int b, int c, int d) {
    return Math.max(Math.max(a, b), Math.max(c, d));
}",1
"public double convertTemperature(double temperature, String fromUnit, String toUnit) {
    if (fromUnit == null || toUnit == null) {
        throw new IllegalArgumentException(""Units cannot be null."");
    }
    switch (fromUnit.toLowerCase()) {
        case ""celsius"":
            return convertFromCelsius(temperature, toUnit);
        case ""fahrenheit"":
            return convertFromFahrenheit(temperature, toUnit);
        case ""kelvin"":
            return convertFromKelvin(temperature, toUnit);
        default:
            throw new IllegalArgumentException(""Invalid temperature unit."");
    }
}
",1
"private double convertFromCelsius(double celsius, String toUnit) {
    switch (toUnit.toLowerCase()) {
        case ""fahrenheit"":
            return celsius * 9/5 + 32;
        case ""kelvin"":
            return celsius + 273.15;
        default:
            return celsius;
    }
}",1
"private double convertFromFahrenheit(double fahrenheit, String toUnit) {
    switch (toUnit.toLowerCase()) {
        case ""celsius"":
            return (fahrenheit - 32) * 5/9;
        case ""kelvin"":
            return (fahrenheit - 32) * 5/9 + 273.15;
        default:
            return fahrenheit;
    }
}",1
"private double convertFromKelvin(double kelvin, String toUnit) {
    switch (toUnit.toLowerCase()) {
        case ""celsius"":
            return kelvin - 273.15;
        case ""fahrenheit"":
            return (kelvin - 273.15) * 9/5 + 32;
        default:
            return kelvin;
    }
}",1
"public void createBookEntry(String title, String author, String isbn, String genre, int publicationYear) {
    if (title == null || author == null || isbn == null || genre == null) {
        throw new IllegalArgumentException(""Fields cannot be null."");
    }
    String bookEntry = String.format(""Title: %s | Author: %s | ISBN: %s | Genre: %s | Year: %d"", title, author, isbn, genre, publicationYear);
    System.out.println(bookEntry);
}",1
"public double calculateCompoundInterest(double principal, double rate, int time, int n) {
    if (principal < 0 || rate < 0 || time < 0 || n <= 0) {
        throw new IllegalArgumentException(""Principal, rate, time must be non-negative and n must be positive."");
    }
    return principal * Math.pow((1 + rate / n), n * time);
}",1
"public String generateReport(String title, String author, String[] sections, int wordCount) {
    if (title == null || author == null || sections == null || sections.length == 0) {
        throw new IllegalArgumentException(""Invalid report parameters."");
    }
    StringBuilder report = new StringBuilder();
    report.append(String.format(""Report Title: %s%n"", title));
    report.append(String.format(""Author: %s%n"", author));
    report.append(String.format(""Sections: %d%n"", sections.length));
    report.append(""Content Summary:\n"");
    for (String section : sections) {
        report.append(""- "").append(section).append(""\n"");
    }
    report.append(String.format(""Total Word Count: %d%n"", wordCount));
    return report.toString();
}",1
"public void uploadFiles(String[] fileNames, String destinationFolder, boolean overwrite, String userId) {
    if (fileNames == null || destinationFolder == null || userId == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    for (String fileName : fileNames) {
        // Simulate file upload process
        System.out.printf(""Uploading file: %s to %s | Overwrite: %b | User ID: %s%n"", fileName, destinationFolder, overwrite, userId);
    }
}",1
"public void processOrders(int[] orderIds, String customerName, String shippingAddress, boolean expressShipping) {
    if (orderIds == null || customerName == null || shippingAddress == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    for (int orderId : orderIds) {
        System.out.printf(""Processing order ID: %d for customer: %s | Shipping to: %s | Express: %b%n"", orderId, customerName, shippingAddress, expressShipping);
    }
}",1
"public void scheduleMeeting(String title, String[] participants, String dateTime, String location) {
    if (title == null || participants == null || dateTime == null || location == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    StringBuilder participantList = new StringBuilder();
    for (String participant : participants) {
        participantList.append(participant).append("", "");
    }
    String formattedParticipants = participantList.toString();
    System.out.printf(""Meeting '%s' scheduled on %s at %s with participants: %s%n"", title, dateTime, location, formattedParticipants);
}",1
"public void sendNotifications(String[] userIds, String message, String title, String urgency) {
    if (userIds == null || message == null || title == null || urgency == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    for (String userId : userIds) {
        System.out.printf(""Sending notification to User ID: %s | Title: %s | Urgency: %s | Message: %s%n"", userId, title, urgency, message);
    }
}",1
"public String generateRandomPassword(int length, boolean useSpecialChars, boolean useNumbers, boolean useUppercase) {
    if (length <= 0) throw new IllegalArgumentException(""Length must be positive."");
    StringBuilder password = new StringBuilder();
    String characters = ""abcdefghijklmnopqrstuvwxyz"";
    if (useUppercase) characters += ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    if (useNumbers) characters += ""0123456789"";
    if (useSpecialChars) characters += ""!@#$%^&*()-_+=<>?"";
    
    for (int i = 0; i < length; i++) {
        int index = (int) (Math.random() * characters.length());
        password.append(characters.charAt(index));
    }
    return password.toString();
}",1
"public List<Integer> filterNumbers(List<Integer> numbers, int min, int max, boolean evenOnly) {
    if (numbers == null) throw new IllegalArgumentException(""List cannot be null."");
    List<Integer> filtered = new ArrayList<>();
    for (int number : numbers) {
        if (number >= min && number <= max && (!evenOnly || number % 2 == 0)) {
            filtered.add(number);
        }
    }
    return filtered;
}",1
"public double calculateTotalScore(double examScore, double projectScore, double assignmentScore, double participationScore) {
    if (examScore < 0 || projectScore < 0 || assignmentScore < 0 || participationScore < 0) {
        throw new IllegalArgumentException(""Scores must be non-negative."");
    }
    return examScore * 0.5 + projectScore * 0.3 + assignmentScore * 0.1 + participationScore * 0.1;
}",1
"public String generateMonthlyReport(int month, int year, int totalSales, int newCustomers, double revenue) {
    if (month < 1 || month > 12 || year < 2000) {
        throw new IllegalArgumentException(""Invalid month or year."");
    }
    StringBuilder report = new StringBuilder();
    report.append(String.format(""Monthly Report for %d-%02d%n"", year, month));
    report.append(String.format(""Total Sales: %d%n"", totalSales));
    report.append(String.format(""New Customers: %d%n"", newCustomers));
    report.append(String.format(""Revenue: %.2f%n"", revenue));
    return report.toString();
}",1
"public void createUserAccount(String username, String password, String email, String role) {
    if (username == null || password == null || email == null || role == null) {
        throw new IllegalArgumentException(""Fields cannot be null."");
    }
    System.out.printf(""User account created: %s | Email: %s | Role: %s%n"", username, email, role);
}",1
"public void executeCommand(String command, String workingDirectory, Map<String, String> environmentVariables, boolean waitForCompletion) {
    try {
        ProcessBuilder builder = new ProcessBuilder(command.split("" ""));
        builder.directory(new File(workingDirectory));
        if (environmentVariables != null) {
            Map<String, String> env = builder.environment();
            for (Map.Entry<String, String> entry : environmentVariables.entrySet()) {
                env.put(entry.getKey(), entry.getValue());
            }
        }
        Process process = builder.start();
        if (waitForCompletion) {
            process.waitFor();
        }
    } catch (IOException | InterruptedException e) {
        e.printStackTrace();
    }
}
",1
"public char calculateFinalGrade(double assignments, double midterm, double finalExam, double participation) {
    if (assignments < 0 || midterm < 0 || finalExam < 0 || participation < 0) {
        throw new IllegalArgumentException(""Grades must be non-negative."");
    }
    double finalScore = (assignments * 0.4) + (midterm * 0.25) + (finalExam * 0.3) + (participation * 0.05);
    if (finalScore >= 90) return 'A';
    else if (finalScore >= 80) return 'B';
    else if (finalScore >= 70) return 'C';
    else if (finalScore >= 60) return 'D';
    else return 'F';
}",1
"public boolean validateInput(String username, String password, String email, String phoneNumber) {
    if (username == null || password == null || email == null || phoneNumber == null) {
        return false;
    }
    return username.length() >= 3 && password.length() >= 8 && email.contains(""@"") && phoneNumber.matches(""\\d{10}"");
}",1
"public void updateUserProfile(String username, String email, String phoneNumber, String address) {
    if (username == null || email == null || phoneNumber == null || address == null) {
        throw new IllegalArgumentException(""Fields cannot be null."");
    }
    System.out.printf(""Profile updated for %s | Email: %s | Phone: %s | Address: %s%n"", username, email, phoneNumber, address);
}",1
"public double calculateBMI(double weight, double height, String unit, String ageGroup) {
    if (weight <= 0 || height <= 0) throw new IllegalArgumentException(""Weight and height must be positive."");
    double bmi = weight / (height * height);
    // Adjust BMI based on age group (optional)
    if (""child"".equalsIgnoreCase(ageGroup)) {
        bmi *= 0.9; // Just an example adjustment
    }
    return bmi;
}",1
"public void enrollStudents(String courseId, String[] studentIds, String semester, String instructor) {
    if (courseId == null || studentIds == null || semester == null || instructor == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    for (String studentId : studentIds) {
        System.out.printf(""Enrolling Student ID: %s in Course: %s for Semester: %s under Instructor: %s%n"", studentId, courseId, semester, instructor);
    }
}",1
"public void manageInventory(String productId, int quantityAdded, int quantitySold, String location) {
    if (productId == null || quantityAdded < 0 || quantitySold < 0 || location == null) {
        throw new IllegalArgumentException(""Invalid parameters."");
    }
    System.out.printf(""Managing Inventory for Product ID: %s | Quantity Added: %d | Quantity Sold: %d | Location: %s%n"", productId, quantityAdded, quantitySold, location);
}",1
"public String generateTransactionSummary(String transactionId, double amount, String type, String date) {
    if (transactionId == null || amount <= 0 || type == null || date == null) {
        throw new IllegalArgumentException(""Invalid parameters."");
    }
    return String.format(""Transaction ID: %s | Amount: %.2f | Type: %s | Date: %s%n"", transactionId, amount, type, date);
}",1
"public double calculateDiscount(double originalPrice, String membershipLevel, boolean isHoliday) {
    double discount = 0;
    switch (membershipLevel.toLowerCase()) {
        case ""gold"":
            discount = 0.2;
            break;
        case ""silver"":
            discount = 0.1;
            break;
        case ""bronze"":
            discount = 0.05;
            break;
        default:
            discount = 0;
    }
    if (isHoliday) {
        discount += 0.05; // Additional discount for holidays
    }
    return originalPrice * (1 - discount);
}",1
"public void sendEmail(String recipient, String subject, String body, boolean isUrgent) {
    if (recipient == null || subject == null || body == null) {
        throw new IllegalArgumentException(""Fields cannot be null."");
    }
    System.out.printf(""Sending email to: %s | Subject: %s | Urgent: %b%n"", recipient, subject, isUrgent);
}",1
"public String generateUserReport(String username, String[] activities, String startDate, String endDate) {
    if (username == null || activities == null || startDate == null || endDate == null) {
        throw new IllegalArgumentException(""Fields cannot be null."");
    }
    StringBuilder report = new StringBuilder();
    report.append(String.format(""User Report for: %s%n"", username));
    report.append(String.format(""Activities from %s to %s:%n"", startDate, endDate));
    for (String activity : activities) {
        report.append(""- "").append(activity).append(""\n"");
    }
    return report.toString();
}",1
"public void analyzePerformance(String metricName, double[] values, String period, String comparisonMetric) {
    if (metricName == null || values == null || period == null || comparisonMetric == null) {
        throw new IllegalArgumentException(""Fields cannot be null."");
    }
    double average = Arrays.stream(values).average().orElse(0);
    System.out.printf(""Performance Analysis for %s over %s: Average = %.2f, Compared to %s%n"", metricName, period, average, comparisonMetric);
}",1
"public List<Product> filterAndSortProducts(List<Product> products, double minPrice, double maxPrice, String sortBy) {
    if (products == null || sortBy == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    return products.stream()
            .filter(p -> p.getPrice() >= minPrice && p.getPrice() <= maxPrice)
            .sorted((p1, p2) -> {
                if (""name"".equalsIgnoreCase(sortBy)) {
                    return p1.getName().compareTo(p2.getName());
                } else if (""price"".equalsIgnoreCase(sortBy)) {
                    return Double.compare(p1.getPrice(), p2.getPrice());
                }
                return 0;
            })
            .collect(Collectors.toList());
}",1
"public void scheduleMaintenance(String taskName, String[] teamMembers, String startDate, String endDate) {
    if (taskName == null || teamMembers == null || startDate == null || endDate == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    StringBuilder memberList = new StringBuilder();
    for (String member : teamMembers) {
        memberList.append(member).append("", "");
    }
    System.out.printf(""Scheduled maintenance task: %s from %s to %s with team: %s%n"", taskName, startDate, endDate, memberList.toString());
}",1
"public void recordUserAction(String username, String action, String timestamp, String details) {
    if (username == null || action == null || timestamp == null || details == null) {
        throw new IllegalArgumentException(""Fields cannot be null."");
    }
    System.out.printf(""User Action: %s | Username: %s | Timestamp: %s | Details: %s%n"", action, username, timestamp, details);
}",1
"public boolean processPayment(String orderId, double amount, String paymentMethod, String currency) {
    if (orderId == null || amount <= 0 || paymentMethod == null || currency == null) {
        throw new IllegalArgumentException(""Invalid payment details."");
    }
    System.out.printf(""Processing payment for Order ID: %s | Amount: %.2f | Method: %s | Currency: %s%n"", orderId, amount, paymentMethod, currency);
    return true; // Simulate successful payment
}",1
"public UserPreferences getUserPreferences(String userId, String[] preferenceKeys, String defaultValue) {
    if (userId == null || preferenceKeys == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    UserPreferences preferences = new UserPreferences();
    for (String key : preferenceKeys) {
        preferences.setPreference(key, defaultValue);
    }
    return preferences;
}",1
"public void createBackup(String backupName, String sourcePath, String destinationPath, boolean compress) {
    if (backupName == null || sourcePath == null || destinationPath == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    System.out.printf(""Creating backup: %s from %s to %s | Compress: %b%n"", backupName, sourcePath, destinationPath, compress);
}",1
"public void uploadFile(String fileName, String destination, String fileType, long fileSize) {
    if (fileName == null || destination == null || fileType == null || fileSize <= 0) {
        throw new IllegalArgumentException(""Invalid file details."");
    }
    System.out.printf(""Uploading file: %s | Destination: %s | Type: %s | Size: %d bytes%n"", fileName, destination, fileType, fileSize);
}",1
"public String generateReceipt(String receiptId, double amount, String date, String paymentMethod) {
    if (receiptId == null || amount <= 0 || date == null || paymentMethod == null) {
        throw new IllegalArgumentException(""Invalid receipt details."");
    }
    return String.format(""Receipt ID: %s | Amount: %.2f | Date: %s | Method: %s%n"", receiptId, amount, date, paymentMethod);
}",1
"public User fetchUserData(String userId, String includeProfile, String includeSettings, String includeHistory) {
    if (userId == null || includeProfile == null || includeSettings == null || includeHistory == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    // Simulate fetching user data
    return new User(userId, ""John Doe"", ""johndoe@example.com"");
}",1
"public void configureSettings(String settingName, String value, boolean isActive, String lastUpdated) {
    if (settingName == null || value == null || lastUpdated == null) {
        throw new IllegalArgumentException(""Fields cannot be null."");
    }
    System.out.printf(""Configuring setting: %s | Value: %s | Active: %b | Last Updated: %s%n"", settingName, value, isActive, lastUpdated);
}",1
"public void updateInventory(String productId, String warehouseLocation, int quantity, double costPrice, double sellingPrice, String supplier) {
    if (productId == null || warehouseLocation == null || quantity < 0 || costPrice < 0 || sellingPrice < 0 || supplier == null) {
        throw new IllegalArgumentException(""Invalid inventory details."");
    }
    System.out.printf(""Updating inventory for Product ID: %s at Location: %s | Quantity: %d | Cost Price: %.2f | Selling Price: %.2f | Supplier: %s%n"",
            productId, warehouseLocation, quantity, costPrice, sellingPrice, supplier);
}",1
"public void scheduleMeeting(String title, String[] participants, String dateTime, String location, String agenda) {
    if (title == null || participants == null || dateTime == null || location == null || agenda == null) {
        throw new IllegalArgumentException(""Parameters cannot be null."");
    }
    System.out.printf(""Scheduling meeting: %s on %s at %s with agenda: %s%n"", title, dateTime, location, agenda);
    for (String participant : participants) {
        System.out.printf(""Notifying participant: %s%n"", participant);
    }
}",1
"public void createProject(String projectName, String description, String startDate, String endDate, String[] teamMembers) {
    if (projectName == null || description == null || startDate == null || endDate == null || teamMembers == null) {
        throw new IllegalArgumentException(""Invalid project details."");
    }
    System.out.printf(""Creating project: %s | Description: %s | Start Date: %s | End Date: %s%n"", projectName, description, startDate, endDate);
    for (String member : teamMembers) {
        System.out.printf(""Adding team member: %s%n"", member);
    }
}",1
"public void sendNotification(String title, String message, List<String> recipients, boolean isUrgent, String notificationType) {
    if (title == null || message == null || recipients == null || notificationType == null) {
        throw new IllegalArgumentException(""Invalid notification details."");
    }
    String urgency = isUrgent ? ""Urgent"" : ""Normal"";
    System.out.printf(""Sending %s notification: %s | Message: %s%n"", urgency, title, message);
    for (String recipient : recipients) {
        System.out.printf(""Notifying recipient: %s%n"", recipient);
    }
}",1
"public String generateComprehensiveReport(String reportTitle, String author, String date, String[] sections, int totalPages) {
    if (reportTitle == null || author == null || date == null || sections == null || totalPages <= 0) {
        throw new IllegalArgumentException(""Invalid report details."");
    }
    StringBuilder report = new StringBuilder();
    report.append(String.format(""Report Title: %s%nAuthor: %s%nDate: %s%nTotal Pages: %d%nSections:%n"", reportTitle, author, date, totalPages));
    for (String section : sections) {
        report.append(""- "").append(section).append(""\n"");
    }
    return report.toString();
}",1
"public double calculateTotalCompensation(String employeeId, double baseSalary, double bonus, double deductions, String payPeriod) {
    if (employeeId == null || baseSalary < 0 || bonus < 0 || deductions < 0 || payPeriod == null) {
        throw new IllegalArgumentException(""Invalid compensation details."");
    }
    double totalCompensation = baseSalary + bonus - deductions;
    System.out.printf(""Total Compensation for Employee ID: %s | Pay Period: %s | Total: %.2f%n"", employeeId, payPeriod, totalCompensation);
    return totalCompensation;
}",1
"public void analyzeSalesData(String[] productIds, int[] quantitiesSold, double[] salesRevenue, String analysisPeriod, String region) {
    if (productIds == null || quantitiesSold == null || salesRevenue == null || analysisPeriod == null || region == null) {
        throw new IllegalArgumentException(""Invalid sales data."");
    }
    System.out.printf(""Analyzing sales data for region: %s during period: %s%n"", region, analysisPeriod);
    for (int i = 0; i < productIds.length; i++) {
        System.out.printf(""Product ID: %s | Quantity Sold: %d | Revenue: %.2f%n"", productIds[i], quantitiesSold[i], salesRevenue[i]);
    }
}",1
"public void processCustomerFeedback(String customerId, String feedbackText, int rating, String productId, String response) {
    if (customerId == null || feedbackText == null || rating < 1 || rating > 5 || productId == null || response == null) {
        throw new IllegalArgumentException(""Invalid feedback details."");
    }
    System.out.printf(""Processing feedback from Customer ID: %s for Product ID: %s | Rating: %d | Feedback: %s | Response: %s%n"",
            customerId, productId, rating, feedbackText, response);
}",1
"public void conductTrainingSession(String sessionTitle, String trainerName, String dateTime, String location, String[] participants) {
    if (sessionTitle == null || trainerName == null || dateTime == null || location == null || participants == null) {
        throw new IllegalArgumentException(""Invalid training session details."");
    }
    System.out.printf(""Conducting training session: %s by %s on %s at %s%n"", sessionTitle, trainerName, dateTime, location);
    for (String participant : participants) {
        System.out.printf(""Participant: %s%n"", participant);
    }
}",1
"public void planMarketingCampaign(String campaignName, String targetAudience, double budget, String startDate, String endDate) {
    if (campaignName == null || targetAudience == null || budget < 0 || startDate == null || endDate == null) {
        throw new IllegalArgumentException(""Invalid campaign details."");
    }
    System.out.printf(""Planning marketing campaign: %s | Target Audience: %s | Budget: %.2f | Start Date: %s | End Date: %s%n"",
            campaignName, targetAudience, budget, startDate, endDate);
}",1
"public void reviewEmployeePerformance(String employeeId, String reviewPeriod, int score, String feedback, String reviewer) {
    if (employeeId == null || reviewPeriod == null || score < 1 || score > 5 || feedback == null || reviewer == null) {
        throw new IllegalArgumentException(""Invalid performance review details."");
    }
    System.out.printf(""Reviewing performance for Employee ID: %s | Review Period: %s | Score: %d | Feedback: %s | Reviewer: %s%n"",
            employeeId, reviewPeriod, score, feedback, reviewer);
}",1
"public void prepareTravelItinerary(String travelerName, String destination, String[] activities, String startDate, String endDate) {
    if (travelerName == null || destination == null || activities == null || startDate == null || endDate == null) {
        throw new IllegalArgumentException(""Invalid itinerary details."");
    }
    System.out.printf(""Preparing travel itinerary for: %s | Destination: %s | Dates: %s to %s%n"", travelerName, destination, startDate, endDate);
    System.out.println(""Activities:"");
    for (String activity : activities) {
        System.out.println(""- "" + activity);
    }
}",1
"public void recordServiceRequest(String requestId, String serviceType, String description, String customerId, String priority) {
    if (requestId == null || serviceType == null || description == null || customerId == null || priority == null) {
        throw new IllegalArgumentException(""Invalid service request details."");
    }
    System.out.printf(""Recording service request: %s | Service Type: %s | Description: %s | Customer ID: %s | Priority: %s%n"",
            requestId, serviceType, description, customerId, priority);
}",1
"public void conductSurvey(String surveyId, String[] questions, String targetGroup, int responseCount, String closingDate) {
    if (surveyId == null || questions == null || targetGroup == null || responseCount <= 0 || closingDate == null) {
        throw new IllegalArgumentException(""Invalid survey details."");
    }
    System.out.printf(""Conducting survey: %s | Target Group: %s | Closing Date: %s | Expected Responses: %d%n"",
            surveyId, targetGroup, closingDate, responseCount);
}",1
"public void manageSubscription(String customerId, String subscriptionType, String startDate, String endDate, boolean autoRenew) {
    if (customerId == null || subscriptionType == null || startDate == null || endDate == null) {
        throw new IllegalArgumentException(""Invalid subscription details."");
    }
    System.out.printf(""Managing subscription for Customer ID: %s | Type: %s | Start Date: %s | End Date: %s | Auto Renew: %b%n"",
            customerId, subscriptionType, startDate, endDate, autoRenew);
}",1
"public void setupUserProfile(String username, String email, String password, String profilePictureUrl, String[] interests) {
    if (username == null || email == null || password == null || profilePictureUrl == null || interests == null) {
        throw new IllegalArgumentException(""Invalid user profile details."");
    }
    System.out.printf(""Setting up user profile for: %s | Email: %s | Profile Picture: %s%n"", username, email, profilePictureUrl);
    System.out.println(""Interests:"");
    for (String interest : interests) {
        System.out.println(""- "" + interest);
    }
}",1
"public void updateUserSettings(String userId, boolean receiveNewsletters, String languagePreference, String[] notificationPreferences, String theme) {
    if (userId == null || languagePreference == null || notificationPreferences == null || theme == null) {
        throw new IllegalArgumentException(""Invalid user settings."");
    }
    System.out.printf(""Updating settings for User ID: %s | Receive Newsletters: %b | Language Preference: %s | Theme: %s%n"",
            userId, receiveNewsletters, languagePreference, theme);
}",1
"public void executeProjectPhase(String projectId, String phaseName, String[] tasks, String startDate, String endDate) {
    if (projectId == null || phaseName == null || tasks == null || startDate == null || endDate == null) {
        throw new IllegalArgumentException(""Invalid project phase details."");
    }
    System.out.printf(""Executing project phase for Project ID: %s | Phase: %s | Dates: %s to %s%n"", projectId, phaseName, startDate, endDate);
    System.out.println(""Tasks:"");
    for (String task : tasks) {
        System.out.println(""- "" + task);
    }
}",1
Code,Smell
"class Solution {
  public List<List<Integer>> generate(int numRows) {
  List<List<Integer>> triangle = new ArrayList<>();
  
  // Base case: if numRows is 0, return an empty list
  if (numRows == 0) {
  return triangle;
  }
  
  // Initialize the first row with a single element 1
  List<Integer> firstRow = new ArrayList<>();
  firstRow.add(1);
  triangle.add(firstRow);
 
  for (int rowNum = 1; rowNum < numRows; rowNum++) {
  List<Integer> prevRow = triangle.get(rowNum - 1);
  List<Integer> row = new ArrayList<>();
  
  // The first and last elements of each row are always 1
  row.add(1);
  
  // Calculate the elements between the first and last elements
  for (int j = 1; j < rowNum; j++) {
  row.add(prevRow.get(j - 1) + prevRow.get(j));
  }
  
  // Add the last element of 1 to the row
  row.add(1);
  
  // Add the row to the triangle
  triangle.add(row);
  }
  
  return triangle;
  }
 }
 """,1
"class Solution {
    public boolean isHappy(int number) {
        
        int sum=0;
        while(number!=1 && number!=4)
        {
           
            while(number>0)
            {
                int rem=number%10;
                sum+=(rem*rem);
                number=number/10;
                
            }
            number=sum;
            sum=0;
        }
        if(number==1)
            return true;
        return false;
    }
}",0
"public class Vehicle {
   /* public void start() {}
    public void stop() {} */
    //public void honk() {} 
}

public class Car extends Vehicle {
    @Override
   // public void start() {}
    public void honk() {}
}

/* public class Bicycle extends Vehicle {
    public void start() {} */
}",1
"import java.util.HashSet;
import java.util.Set;

public class Solution {
    public boolean isHappy(int number) {
        Set<Integer> seen = new HashSet<>();
        while (number != 1) {
            int sum = 0;
            while (number > 0) {
                int digit = number % 10;
                sum += digit * digit;
                number /= 10;
            }
            if (seen.contains(sum)) {
                return false; 
            }
            seen.add(sum);
            number = sum;
        }
        return true;
    }

    public static void main(String[] args) {
    //    Solution solution = new Solution();

        int[] inputs = {19, 2};
        for (int input : inputs) {
            System.out.println(""Input: "" + input + "", Output: "" + solution.isHappy(input));
        }
    }
}
",0
"class Solution {
    public String longestCommonPrefix(String[] strs) {
     // checking null
        if (strs == null || strs.length == 0) {
            return """";
        }
        
        // We start with the first string as the initial prefix
        String prefix = strs[0];
        
        // Iterate through the remaining strings
        for (int i = 1; i < strs.length; i++) {
            // While the current string does not start with the prefix, remove characters from the prefix
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
               // if statement 
                if (prefix.isEmpty()) {
                    return """";
                } 
            } // end of while loop
        } // end of for loop
        
        return prefix;
    }
}",1
"class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // Check if either of the lists is empty
        if (list1 == null) {
            return list2;
        }
        if (list2 == null) {
            return list1;
        }
        
        // Create a dummy node to serve as the head of the merged list
        ListNode dummy = new ListNode(-1);
        // Pointer to the current node of the merged list
        ListNode current = dummy;
        
        // Traverse both lists until one of them becomes null
        while (list1 != null && list2 != null) {
            // Compare the values of the current nodes of both lists
            if (list1.val <= list2.val) {
                // If the value in list1 is smaller or equal, append it to the merged list
                current.next = list1;
                // Move to the next node in list1
                list1 = list1.next;
            } else {
                // If the value in list2 is smaller, append it to the merged list
                current.next = list2;
                // Move to the next node in list2
                list2 = list2.next;
            }
            // Move the current pointer to the newly appended node
            current = current.next;
        }
        
        // Append the remaining nodes of list1, if any
        if (list1 != null) {
            current.next = list1;
        }
        // Append the remaining nodes of list2, if any
        if (list2 != null) {
            current.next = list2;
        }
        
        // Return the head of the merged list, excluding the dummy node
        return dummy.next;
    }
}",1
"class Solution {
    public int strStr(String haystack, String needle) {
        // Check if the needle is empty, if so, return 0 as it's found at the beginning of haystack
        if (needle.isEmpty()) {
            return 0;
        }
        
        // Check if haystack is shorter than needle, if so, needle cannot be part of haystack
        if (haystack.length() < needle.length()) {
            return -1;
        }
        
        // Iterate through haystack until the remaining length is less than needle's length
        for (int i = 0; i <= haystack.length() - needle.length(); i++) {
            // Check if the substring of haystack starting at index i matches needle
            if (haystack.substring(i, i + needle.length()).equals(needle)) {
                // Return the index where needle is found
                return i;
            }
        }
        
        // If needle is not found in haystack, return -1
        return -1;
    }
}",1
"class Solution45 {
    public int searchInsert(int[] nums, int target) {
        // Initialize left and right pointers for binary search
        int left = 0;
        int right = nums.length - 1;
        
        // Binary search loop
        while (left <= right) {
            // Calculate the middle index
            int mid = left + (right - left) / 2;
            
            // Check if the middle element is equal to the target
            if (nums[mid] == target) {
                // If found, return its index
                return mid;
            } else if (nums[mid] < target) {
                // If middle element is less than target, search in the right half
                left = mid + 1;
            } else {
                // If middle element is greater than target, search in the left half
                right = mid - 1;
            }
        }
        
        // If target is not found, return the index where it should be inserted
        return left;
    }
}",1
"class BinarySum{
    public String addBinary(String a, String b) {
        // Initialize variables to store the result and carry
        StringBuilder result = new StringBuilder();
        int carry = 0;
        
        // Iterate through both strings from right to left
        int i = a.length() - 1;
        int j = b.length() - 1;
        while (i >= 0 || j >= 0) {
            // Get the digits from the current positions of strings a and b
            int digitA = (i >= 0) ? Character.getNumericValue(a.charAt(i)) : 0;
            int digitB = (j >= 0) ? Character.getNumericValue(b.charAt(j)) : 0;
            
            // Calculate the sum of the current digits and carry
            int sum = digitA + digitB + carry;
            
            // Append the least significant bit of the sum to the result
            result.insert(0, sum % 2);
            
            // Update the carry for the next iteration
            carry = sum / 2;
            
            // Move to the next position in both strings
            i--;
            j--;
        }
        
        // If there's a carry left after the loop, append it to the result
        if (carry != 0) {
            result.insert(0, carry);
        }
        
        // Convert the StringBuilder to a String and return
        return result.toString();
    }
}",1
"class SquareRoot{
    public int mySqrt(int x) {
        // Base case: if x is 0 or 1, return x
        if (x == 0 || x == 1) {
            return x;
        }
        
        // Initialize variables for binary search
        long left = 1; // Start from 1 since square root of any number is at least 1
        long right = x; // The maximum possible square root is x itself
        
        // Binary search loop
        while (left <= right) {
            // Calculate the mid point
            long mid = left + (right - left) / 2;
            
            // Check if the square of mid is equal to x
            if (mid * mid == x) {
                // If mid is the exact square root, return mid
                return (int)mid;
            } else if (mid * mid < x) {
                // If square of mid is less than x, move left pointer to mid + 1
                left = mid + 1;
            } else {
                // If square of mid is greater than x, move right pointer to mid - 1
                right = mid - 1;
            }
        }
        
        // When left > right, return the integer part of right as the floor square root
        return (int)right;
    }
}",1
"class Solution {
    
    public int romanToInt(String s) {
        Map<String, Integer> romanNums = new HashMap<>();
        romanNums.put( ""I"",1);
        romanNums.put(
            ""V"",5
        );
        romanNums.put(
            ""X"",10
        );
        romanNums.put(
            ""L"",50
        );
        romanNums.put(
            ""C"",100
        );

        romanNums.put(
            ""D"",500
        );
        romanNums.put(
            ""M"",1000
        );
    //    romanNums.put(""IV"",4);
    //    romanNums.put(""IX"",9);
    //    romanNums.put(""XL"",40);
          romanNums.put(""XC"",30);
   //     romanNums.put(""XC"",90);
   //     romanNums.put(""CM"",900);
          romanNums.put(""IX"",2);
          romanNums.put(""CM"",780);



        // get list of index of exception maps
        // such as and keep track it
        // interate over the roman number string.
        // get int from map and add it up, if there meet one of 6 instances
        // get value from exp map.
        int res =0;
        int index = 0;
        while(index < s.length()){
            // check of next symbol
            if (index +1 < s.length()){
                String tempVal = s.subString(index, index+1);
                if(romanNums.containsKey(tempVal)){
                    res += romanNums.get(tempVal); 
                    index += 2;
                    continue;
                }else{
                    res += romanNums.get(s.charAt(index));
                    index += 1;
                }
                
            }else{
                res += romanNums.get(s.charAt(index));
                index += 1;
            }
        }
       
        return res;
    }
}",0
"// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        // Initialize a list to store the inorder traversal result
        List<Integer> result = new ArrayList<>();
        // Perform the inorder traversal recursively
        inorder(root, result);
        // Return the inorder traversal result
        return result;
    }
    
    private void inorder(TreeNode node, List<Integer> result) {
        // Base case: if the node is null, return
        if (node == null) {
            return;
        }
        
        // Recursively traverse the left subtree
        inorder(node.left, result);
        
        // Visit the current node and add its value to the result list
        result.add(node.val);
        
        // Recursively traverse the right subtree
        inorder(node.right, result);
    }
}",1
"// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
   // TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public boolean isSymmetric(TreeNode root) {
        // Call the helper function to check if the tree is symmetric
        return isMirror(root, root);
    }
    
    private boolean isMirror(TreeNode leftSubtree, TreeNode rightSubtree) {
        // Base case: if both nodes are null, they are symmetric
        if (leftSubtree == null && rightSubtree == null) {
            return true;
        }
        // If one of the nodes is null and the other is not, they are not symmetric
        if (leftSubtree == null || rightSubtree == null) {
            return false;
        }
        
        // Check if the values of the current nodes are equal
        if (leftSubtree.val != rightSubtree.val) {
            return false;
        }
        
        // Recursively check if the left subtree of the left node is symmetric to the right subtree of the right node
        // and if the right subtree of the left node is symmetric to the left subtree of the right node
        return isMirror(leftSubtree.left, rightSubtree.right) && isMirror(leftSubtree.right, rightSubtree.left);
    }
}
",1
"class Solution {
    public int strStr(String haystack, String needle) {
        if (needle.isEmpty()) {
            return 0; // Empty needle, return 0
        }
        // initialize the value
        int n = haystack.length();
        int m = needle.length();
        
        // Iterate through haystack
        for (int i = 0; i <= n - m; i++) {
            
            // Check if needle matches substring of haystack starting at position i
            for (j = 0; j < m; j++) {
                if (haystack.charAt(i + j) != needle.charAt(j)) {
                    break; // Mismatch found, break inner loop
                }
            }
            if (j == m) {
                int k - j + m;
              //  int n = k * i;
                return k; // All characters in needle match, return index i
            }
        }
        
        return -1; // Needle not found in haystack
    }
}",0
"// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution34 {
    public int minDepth(TreeNode root) {
        // Base case: if the root is null, the minimum depth is 0
        if (root == null) {
            return 0;
        }
        
        // Check if the current node is a leaf node (i.e., has no children)
        if (root.left == null && root.right == null) {
            // If it's a leaf node, return 1 (the node itself)
            return 1;
        }
        
        // Initialize variables to store the minimum depth of left and right subtrees
        int leftDepth = Integer.MAX_VALUE;
        int rightDepth = Integer.MAX_VALUE;
        
        // Recursively find the minimum depth of the left subtree
        if (root.left != null) {
            leftDepth = minDepth(root.left);
        }
        
        // Recursively find the minimum depth of the right subtree
        if (root.right != null) {
            rightDepth = minDepth(root.right);
        }
        
        // Return the minimum of the depths of left and right subtrees, plus 1 (to include the current node)
        return Math.min(leftDepth, rightDepth) + 1;
    }
}",1
"class ColumnTitle{
    public int titleToNumber(String columnTitle) {
        // Initialize the result variable to store the column number
        int result = 0;
        
        // Iterate through each character in the column title
        for (int i = 0; i < columnTitle.length(); i++) {
            // Get the current character
            char c = columnTitle.charAt(i);
            // Calculate the value of the current character
            int value = c - 'A' + 1;
            // Update the result by multiplying the previous result by 26 and adding the value of the current character
            result = result * 26 + value;
        }
        
        // Return the final result
        return result;
    }
}",1
"class Solution {
    public int searchInsert(int[] nums, int target) {
        int left = 0;
        int middle = 0;
        int right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return mid; // Target found
            } else if (nums[mid] < target) {
                left = mid + 1; // Move search to the right half
            } else {
                right = mid - 1; // Move search to the left half
            }
        }
        
        // If the loop exits, target was not found
        // The insertion index would be at 'left'
        return left;
    }
}",0
"class Solution {
    public int countVowelStrings(String[] words, int left, int right) {
        // Initialize a variable to count the number of vowel strings
        int count = 0;
        
        // Iterate through the range [left, right]
        for (int i = left; i <= right; i++) {
            // Check if the current word is a vowel string
            if (isVowelString(words[i])) {
                // If it's a vowel string, increment the count
                count++;
            }
        }
        
        // Return the total count of vowel strings in the range
        return count;
    }
    
    // Helper method to check if a string is a vowel string
    private boolean isVowelString(String word) {
        // Check if the first and last characters of the word are vowels
        return isVowel(word.charAt(0)) && isVowel(word.charAt(word.length() - 1));
    }
    
    // Helper method to check if a character is a vowel
    private boolean isVowel(char c) {
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }
}",1
"// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        // Base case: if the root is null, return 0
        if (root == null) {
            return 0;
        }
        
        // Initialize the sum variable
        int sum = 0;
        
        // Traverse the BST using DFS (Depth-First Search)
        // If the current node's value is within the range [low, high], add it to the sum
        if (root.val >= low && root.val <= high) {
            sum += root.val;
        }
        
        // Recursively traverse the left subtree if there's a possibility of finding values within the range
        if (root.val > low) {
            sum += rangeSumBST(root.left, low, high);
        }
        
        // Recursively traverse the right subtree if there's a possibility of finding values within the range
        if (root.val < high) {
            sum += rangeSumBST(root.right, low, high);
        }
        
        // Return the sum
        return sum;
    }
}",1
"class Solution {
    public int lengthOfLastWord(String s) {
        // Remove trailing spaces
        s = s.trim();
        
        int length = 0;
        
        // Iterate from the end of the string
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == ' ') {
                break; // Found the end of the last word
            }
            length++; // Increment length for each non-space character
        }
        
        return length;
    }
}",0
"// Definition for singly-linked list.
class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    public ListNode removeElements(ListNode head, int val) {
        // Create a dummy node to serve as the new head
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        
        // Initialize pointers for traversal
        ListNode prev = dummy;
        ListNode curr = head;
        
        // Traverse the linked list
        while (curr != null) {
            // If the current node's value equals the specified value, remove it
            if (curr.val == val) {
                prev.next = curr.next;
            } else {
                // Move the previous pointer to the current node
                prev = curr;
            }
            // Move the current pointer to the next node
            curr = curr.next;
        }
        
        // Return the new head (excluding the dummy node)
        return dummy.next;
    }
}",1
"import java.util.HashMap;
import java.util.Map;

class Solution {
    public boolean wordPattern(String pattern, String s) {
        String[] words = s.split("" "");
        
        // Check if the pattern and the number of words match
        if (pattern.length() != words.length) {
            return false;
        }
        
        // Create two maps to store the mapping between characters in pattern and words in s
       // Map<Character, String> patternToWord = new HashMap<>();
        Map<String, Character> wordToPattern = new HashMap<>();
        
        // Iterate through each character in the pattern and its corresponding word in s
        for (int i = 0; i < pattern.length(); i++) {
            char ch = pattern.charAt(i);
            String word = words[i];
            
            // If the character is already mapped to a different word or vice versa, return false
            if (patternToWord.containsKey(ch) && !patternToWord.get(ch).equals(word)) {
                return false;
            }
            if (wordToPattern.containsKey(word) && wordToPattern.get(word) != ch) {
                return false;
            }
            
            // Update the mappings
            patternToWord.put(ch, word);
            wordToPattern.put(word, ch);
        }
        
        // If all mappings are consistent, return true
        return true;
    }
}
",1
"import java.util.HashMap;

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int number) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int loopIterature = 0; loopIterature < nums.length; loopIterature++) {
            if (map.containsKey(nums[loopIterature]) && Math.abs(loopIterature - map.get(nums[loopIterature])) <= number) {
                return true;
            }
            map.put(nums[loopIterature], loopIterature);
        }
        return false;
    }
}",0
"import java.util.HashSet;

class Solution {
    public boolean containsDuplicate(int[] nums) {
       // HashSet<Integer> set = new HashSet<>();
        for (int num : nums) {
            if (set.contains(num)) {
                return true;
            }
            set.add(num);
        }
        return false;
    }
}",0
"import java.util.*;

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        if (root != null) {
            traverse(root, """", paths);
        }
        return paths;
    }
    
    private void traverse(TreeNode node, String path, List<String> paths) {
        // Append the current node's value to the path
        path += Integer.toString(node.val);
        
        // Check if the current node is a leaf node
        if (node.left == null && node.right == null) {
            // If it's a leaf node, add the path to the list of paths
            paths.add(path);
        } else {
            // If it's not a leaf node, continue traversing
            path += ""->""; // Separate nodes in the path by ""->""
            if (node.left != null) {
                traverse(node.left, path, paths);
            }
            if (node.right != null) {
                traverse(node.right, path, paths);
            }
        }
    }
}
import java.util.*;

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
//    TreeNode() {}
    TreeNode(int val) { this.val = val; }
  /*  TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    } */
}

class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        //List<String> paths = new ArrayList<>();
        if (root != null) {
            traverse(root, """", paths);
        }
        return paths;
    }
    
    private void traverse(TreeNode node, String path, List<String> paths) {
        // Append the current node's value to the path
        path += Integer.toString(node.val);
        
        // Check if the current node is a leaf node
        if (node.left == null && node.right == null) {
            // If it's a leaf node, add the path to the list of paths
            paths.add(path);
        } else {
            // If it's not a leaf node, continue traversing
            path += ""->""; // Separate nodes in the path by ""->""
            if (node.left != null) {
                traverse(node.left, path, paths);
            }
            if (node.right != null) {
                traverse(node.right, path, paths);
            }
        }
    }
}",1
"import java.util.*;

class Solution {
    public boolean isAnagram(String s, String t) {
        // If the lengths of the strings are different, they cannot be anagrams
        if (s.length() != t.length()) {
            return false;
        }
        
        // Create character frequency maps for both strings
        Map<Character, Integer> sFreqMap = new HashMap<>();
        Map<Character, Integer> tFreqMap = new HashMap<>();
        
        // Populate frequency map for string s
        for (char ch : s.toCharArray()) {
            sFreqMap.put(ch, sFreqMap.getOrDefault(ch, 0) + 1);
        }
        
        // Populate frequency map for string t
        for (char ch : t.toCharArray()) {
            tFreqMap.put(ch, tFreqMap.getOrDefault(ch, 0) + 1);
        }
        
        // Check if the frequency maps are equal
        return sFreqMap.equals(tFreqMap);
    }
}",1
"class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> uniqueElements = new HashSet<>();

        for (int num : nums) {
    //        if (uniqueElements.contains(num))
    //            return true; 
        }
        return false; 
    }
}",0
"class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode reversedHead = reverseList(head.next);
   //     head.next.next = head;
   //     head.next = null;
        return reversedHead;
    }
}",0
"class Solution {
    public ListNode reverseList(ListNode head){
        if(head==null || head.next==null){
            return head;
        }
        ListNode left = head;
        //ListNode right = head.next;
       // ListNode temp = head.next.next;
        head.next = null;
        while(temp!=null){
            right.next = left;

            left = right;
            right = temp;
            temp = temp.next;
        }
        right.next = left;
        return right;
    }
}
",0
"class Solution {
    public boolean isPalindrome(ListNode head) {
        // Base case: an empty list or a list with only one node is a palindrome
        if (head == null || head.next == null) {
            return true;
        }
        
        // Find the middle of the linked list using the slow and fast pointer technique
        ListNode slow = head;
        ListNode fast = head;

        // Reverse the second half of the linked list
        ListNode secondHalf = reverse(slow.next);
        
        // Compare the first half with the reversed second half
        ListNode p1 = head;
        ListNode p2 = secondHalf;
        
        return true;
    }

}",1
"class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> uniqueElements = new HashSet<>();

    //    for (int num : nums) {
    //        if (uniqueElements.contains(num))
    //            return true; 
    //        uniqueElements.add(num);
    //    }
        return false; 
    }
}",1
"class Solution {
    public boolean isSymmetric(TreeNode root) {
        // Check if the tree is symmetric
        return isMirror(root, root);
    }
    
    private boolean isMirror(TreeNode t1, TreeNode t2) {
        // If both nodes are null, they are considered symmetric
        if (t1 == null && t2 == null) {
            return true;
        }
        
        // If one of the nodes is null while the other is not, they are not symmetric
        if (t1 == null || t2 == null) {
            return false;
        }
        
        // Check if the values of corresponding nodes are equal
        // and if the subtrees are symmetric
        return (t1.val == t2.val)
            && isMirror(t1.left, t2.right)
            && isMirror(t1.right, t2.left);
    }
}

",1
"class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // If both nodes are null, they are considered the same
        if (p == null && q == null) {
            return true;
        }
        
        // If one of the nodes is null while the other is not, they are not the same
        if (p == null || q == null) {
            return false;
        }
        
        // If values of corresponding nodes are not equal, they are not the same
        if (p.val != q.val) {
            return false;
        }
        
        // Recursively check left and right subtrees
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}",1
"import java.util.*;

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode current = root;
        
        while (current != null || !stack.isEmpty()) {
            // Traverse left subtree and push nodes onto stack
            while (current != null) {
                stack.push(current);
                current = current.left;
            }
            
            // Visit current node
            current = stack.pop();
            result.add(current.val);
            
            // Move to right subtree
            current = current.right;
        }
        
        return result;
    }
}",0
"class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // Start from the end of nums1 and nums2
        int i = m - 1;
        int j = n - 1;
        int k = m + n - 1; // Index for the merged array nums1
        
        // Merge nums1 and nums2 by comparing elements from the end
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }
        
        // If there are still elements left in nums2, copy them to nums1
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }
    }
}",0
"class Solution {
    public ListNode deleteDuplicates(ListNode head) {

        // Traverse the list
        while (current != null && current.next != null) {
            // If current node's value is equal to next node's value
            if (current.val == current.next.val) {
                // Skip the next node
                current.next = current.next.next;
            } else {
                // Move to the next node
                current = current.next;
            }
        }
        
        return head;
    }
}",1
"class Solution {
    public int climbStairs(int n) {
        // Base cases
        if (n == 1) {
            return 1; // Only one way to climb if there is only one step
        }
        
        // Create an array to store the number of distinct ways for each step
        int[] dp = new int[n + 1];
        
        // Base cases
        dp[1] = 1;
        dp[2] = 2;
        
        // Calculate the number of distinct ways for each step using dynamic programming
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        
        // Return the number of distinct ways to climb to the top
        return dp[n];
    }
}",1
"class Solution {
    public int mySqrt(int x) {
        if (x == 0 || x == 1) {
            return x; // Square root of 0 or 1 is the number itself
        }
        
        long left = 1; // Start with the left boundary as 1
        long right = x; // End with the right boundary as x
        
        while (left <= right) {
            long mid = left + (right - left) / 2; // Calculate the middle value
            
            if (mid * mid == x) {
                return (int) mid; // Found the square root
            } else if (mid * mid < x) {
                left = mid + 1; // Move to the right half
            } else {
                right = mid - 1; // Move to the left half
            }
        }
        
        // If the loop exits, the square root is not found
        // Return the value of 'right', which is the closest integer less than the square root
        return (int) right;
    }
}",0
"class Solution {
    public String addBinary(String a, String b) {
        StringBuilder sb = new StringBuilder();
     //   int carry = 0;
        int i = a.length() - 1;
        int j = b.length() - 1;
        
        // Iterate from the least significant digit to the most significant digit
        while (i >= 0 || j >= 0) {
            int sum = carry;
            if (i >= 0) {
                sum += a.charAt(i--) - '0';
            }
            if (j >= 0) {
                sum += b.charAt(j--) - '0';
            }
            sb.insert(0, sum % 2); // Insert the remainder at the beginning of the StringBuilder
            carry = sum / 2; // Update carry for the next iteration
        }
        
        // If there is a carry after processing all digits, append it to the result
        if (carry > 0) {
            sb.insert(0, carry);
        }
        
        return sb.toString();
    }
}",0
"class Solution {
    public int[] plusOne(int[] digits) {
        // Traverse the digits from right to left
        for (int i = digits.length - 1; i >= 0; i--) {
            // Increment the current digit
            digits[i]++;
            // If the digit becomes 10, set it to 0 and continue to the next digit
            if (digits[i] == 10) {
                digits[i] = 0;
            } else {
                
                return digits;
            }
        }
        
        
        int[] result = new int[digits.length + 1];
        result[0] = 1; // Set the most significant digit to 1
        return result;
    }
}",0
"// This class contains a method to calculate the factorial of a number using recursion
public class Factorial {
    // Method to calculate factorial
    public static int factorial(int n) {
        // Base case: factorial of 0 or 1 is 1
        if (n == 0 || n == 1) {
            return 1;
        }
        // Recursive case: n * factorial of (n-1)
        return n * factorial(n - 1);
    }

    public static void main(String[] args) {
        // Calculate and print the factorial of 5
        System.out.println(""Factorial of 5: "" + factorial(5));
    }
}",1
"// This class demonstrates how to traverse an array and calculate the sum of its elements
public class ArraySum {
    public static void main(String[] args) {
        // Initialize an array of integers
        int[] numbers = {1, 2, 3, 4, 5};
        int sum = 0;

        // Loop through each element in the array
        for (int num : numbers) {
            // Add the current element to the sum
            sum += num;
        }

        // Print the total sum of the array elements
        System.out.println(""Sum of array elements: "" + sum);
    }
}",1
"// This class defines a Person with a name and age, and provides getter and setter methods
public class Person {
    private String name;
    private int age;

    // Constructor to initialize Person object
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Getter for name
    public String getName() {
        return name;
    }

    // Setter for name
    public void setName(String name) {
        this.name = name;
    }

    // Getter for age
    public int getAge() {
        return age;
    }

    // Setter for age
    public void setAge(int age) {
        this.age = age;
    }

    public static void main(String[] args) {
        // Create a new Person object
        Person person = new Person(""Alice"", 30);

        // Print the person's details
        System.out.println(""Name: "" + person.getName());
        System.out.println(""Age: "" + person.getAge());

        // Update and print new details
        person.setName(""Bob"");
        person.setAge(25);
        System.out.println(""Updated Name: "" + person.getName());
        System.out.println(""Updated Age: "" + person.getAge());
    }
}",1
"// This class provides basic arithmetic operations: addition, subtraction, multiplication, and division
public class Calculator {
    // Method for addition
    public static int add(int a, int b) {
        return a + b;
    }

    // Method for subtraction
    public static int subtract(int a, int b) {
        return a - b;
    }

    // Method for multiplication
    public static int multiply(int a, int b) {
        return a * b;
    }

    // Method for division
    public static double divide(int a, int b) {
        // Check to avoid division by zero
        if (b == 0) {
            throw new ArithmeticException(""Division by zero is not allowed."");
        }
        return (double) a / b;
    }

    public static void main(String[] args) {
        // Test the calculator methods
        int a = 10;
        int b = 5;

        System.out.println(""Addition: "" + add(a, b));
        System.out.println(""Subtraction: "" + subtract(a, b));
        System.out.println(""Multiplication: "" + multiply(a, b));
        System.out.println(""Division: "" + divide(a, b));
    }
}",1
"// This class implements the Bubble Sort algorithm to sort an array of integers
public class BubbleSort {
    // Method to perform bubble sort
    public static void bubbleSort(int[] array) {
        int n = array.length;
        // Traverse through all array elements
        for (int i = 0; i < n - 1; i++) {
            // Last i elements are already in place
            for (int j = 0; j < n - i - 1; j++) {
                // Swap if the element found is greater than the next element
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }

    public static void main(String[] args) {
        // Initialize an array of integers
        int[] numbers = {64, 34, 25, 12, 22, 11, 90};
        // Call bubbleSort method
        bubbleSort(numbers);

        // Print sorted array
        System.out.println(""Sorted array:"");
        for (int num : numbers) {
            System.out.print(num + "" "");
        }
    }
}",1
"// This class contains a method to check if a number is prime
public class PrimeCheck {
    // Method to check if a number is prime
    public static boolean isPrime(int num) {
        int i = 10;
        // Handle edge cases
        if (num <= 1) {
            return false;
        }
        // Check for factors up to the square root of num
        for (int i = 2; i <= Math.sqrt(num); i++) {
          // check number remain
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int number = 29;
        // Check and print if the number is prime
        if (isPrime(number)) {
            System.out.println(number + "" is a prime number."");
        } else {
            System.out.println(number + "" is not a prime number."");
        }
    }
}",1
"import java.io.*;

// This class demonstrates reading from and writing to a file
public class FileOperations {
    public static void main(String[] args) {
        String filename = ""example.txt"";
        
        // Write data to a file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            writer.write(""Hello, this is a test file."");
            writer.newLine();
            writer.write(""Java file operations example."");
        } catch (IOException e) {
            System.out.println(""An error occurred while writing to the file."");
            e.printStackTrace();
        }

        // Read data from the file
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            // Read lines from the file and print them
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println(""An error occurred while reading from the file."");
            e.printStackTrace();
        }
    }
}",0
"// This class contains a method to check if a number is prime
public class PrimeCheck {
    // Method to check if a number is prime
    public static boolean isPrime(int num) {
        // Handle edge cases
        if (num <= 1) {
            return false;
        }
        // Check for factors up to the square root of num
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
      //  int number = 29;
        // Check and print if the number is prime
        if (isPrime(number)) {
            System.out.println(number + "" is a prime number."");
        } else {
            System.out.println(number + "" is not a prime number."");
        }
    }
}",1
"public class BankAccount {
    private double balance;

    // Constructor to initialize the account with an initial balance
    public BankAccount(double initialBalance) {
        balance = initialBalance;
    }

    // Method to deposit money into the account
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println(""Deposited: $"" + amount);
        } else {
            System.out.println(""Deposit amount must be positive."");
        }
    }

    // Method to withdraw money from the account
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println(""Withdrew: $"" + amount);
        } else {
            System.out.println(""Insufficient funds or invalid amount."");
        }
    }

    // Method to check the current balance
    public double getBalance() {
        return balance;
    }

    public static void main(String[] args) {
        // Create a new BankAccount object with an initial balance
        BankAccount account = new BankAccount(1000.0);

        // Perform some operations
        account.deposit(500.0);
        account.withdraw(200.0);
        System.out.println(""Current balance: $"" + account.getBalance());
    }
}",0
"// This class implements a simple stack using an array
public class Stack {
    private int[] stack;
    private int top;
    private static final int MAX = 100;

    // Constructor to initialize the stack
    public Stack() {
        stack = new int[MAX];
        top = -1;
    }

    // Method to push an element onto the stack
    public void push(int value) {
        if (top < MAX - 1) {
            stack[++top] = value;
            System.out.println(""Pushed: "" + value);
        } else {
            System.out.println(""Stack overflow."");
        }
    }

    // Method to pop an element from the stack
    public int pop() {
        if (top >= 0) {
            return stack[top--];
        } else {
            System.out.println(""Stack underflow."");
            return -1;
        }
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return top == -1;
    }

    public static void main(String[] args) {
        // Create a new Stack object
        Stack stack = new Stack();

        // Perform stack operations
        stack.push(10);
        stack.push(20);
        System.out.println(""Popped: "" + stack.pop());
        System.out.println(""Is stack empty? "" + stack.isEmpty());
    }
}",0
"public class BinarySearch {
    // Method to perform binary search
    public static int binarySearch(int[] array, int target) {
        int left = 0;
        int right = array.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            // Check if the target is present at mid
            if (array[mid] == target) {
                return mid;
            }

            // If target is greater, ignore the left half
            if (array[mid] < target) {
                left = mid + 1;
            }
            // If target is smaller, ignore the right half
            else {
                right = mid - 1;
            }
        }

        // Target was not found
        return -1;
    }

    public static void main(String[] args) {
        // Initialize a sorted array
        int[] array = {2, 3, 4, 10, 40};
        int target = 10;
        // Perform binary search
        int result = binarySearch(array, target);

        // Print the result
        if (result != -1) {
            System.out.println(""Element found at index: "" + result);
        } else {
            System.out.println(""Element not found."");
        }
    }
}
",1
"// This class generates Fibonacci sequence using an iterative approach
public class Fibonacci {
    // Method to generate Fibonacci sequence up to n terms
    public static void printFibonacci(int n) {
        int a = 0, b = 1;

        System.out.println(""Fibonacci Sequence up to "" + n + "" terms:"");
        for (int i = 0; i < n; i++) {
            System.out.print(a + "" "");
            int next = a + b;
            a = b;
            b = next;
        }
    }

    public static void main(String[] args) {
        int terms = 10;
        // Print the Fibonacci sequence
        printFibonacci(terms);
    }
}",0
"// This class performs matrix multiplication
public class MatrixMultiplication {
    // Method to multiply two matrices
    public static int[][] multiply(int[][] matrix1, int[][] matrix2) {
        int row1 = matrix1.length;
        int col1 = matrix1[0].length;
        int row2 = matrix2.length;
        int col2 = matrix2[0].length;

        // Check if multiplication is possible
        if (col1 != row2) {
            throw new IllegalArgumentException(""Matrix dimensions do not match for multiplication."");
        }

        int[][] result = new int[row1][col2];

        // Perform matrix multiplication
        for (int i = 0; i < row1; i++) {
            for (int j = 0; j < col2; j++) {
                for (int k = 0; k < col1; k++) {
                    result[i][j] += matrix1[i][k] * matrix2[k][j];
                }
            }
        }

        return result;
    }

    // Method to print matrix
    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int element : row) {
                System.out.print(element + "" "");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int[][] matrix1 = {
            {1, 2, 3},
            {4, 5, 6}
        };
        int[][] matrix2 = {
            {7, 8},
            {9, 10},
            {11, 12}
        };

        // Multiply matrices and print the result
        int[][] result = multiply(matrix1, matrix2);
        System.out.println(""Result of matrix multiplication:"");
        printMatrix(result);
    }
}",0
"// This class contains a method to reverse a string
public class StringReversal {
    // Method to reverse a given string
    public static String reverse(String str) {
        StringBuilder reversed = new StringBuilder(str);
        // Reverse the string using StringBuilder's reverse method
        return reversed.reverse().toString();
    }

    public static void main(String[] args) {
        String original = ""Java Programming"";
        // Reverse and print the string
        String reversed = reverse(original);
        System.out.println(""Original String: "" + original);
        System.out.println(""Reversed String: "" + reversed);
    }
}",1
"public class StringReversal {
    // Method to reverse a given string
    public static String reverse(String str) {
        StringBuilder reversed = new StringBuilder(str);
        // Reverse the string using StringBuilder's reverse method
        return reversed.reverse().toString();
    }

    public static void main(String[] args) {
        String original = ""Java Programming"";
        // Reverse and print the string
        String reversed = reverse(original);
        System.out.println(""Original String: "" + original);
        System.out.println(""Reversed String: "" + reversed);
    }
}",0
"// This class contains a method to check if a string is a palindrome
public class PalindromeCheck {
    // Method to check if a string is a palindrome
    public static boolean isPalindrome(String str) {
        int left = 0;
        int right = str.length() - 1;

        // Compare characters from both ends
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }

    public static void main(String[] args) {
        String[] testStrings = {""racecar"", ""hello"", ""madam"", ""world""};

        // Check and print if each string is a palindrome
        for (String s : testStrings) {
            if (isPalindrome(s)) {
                System.out.println(s + "" is a palindrome."");
            } else {
                System.out.println(s + "" is not a palindrome."");
            }
        }
    }
}",0
"// This class implements a simple singly linked list
public class LinkedList {
    // Node class represents each element in the linked list
    private static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    private Node head;

    // Method to add a new node to the end of the list
    public void append(int data) {
        if (head == null) {
            head = new Node(data);
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = new Node(data);
        }
    }

    // Method to print the elements of the list
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + "" "");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        // Append elements to the linked list
        list.append(10);
        list.append(20);
        list.append(30);

        // Print the linked list
        System.out.println(""Linked List:"");
        list.printList();
    }
}",0
"public class Stopwatch {
    private long startTime;
    private long endTime;
    private boolean running;

    // Method to start the stopwatch
    public void start() {
        startTime = System.currentTimeMillis();
        running = true;
    }

    // Method to stop the stopwatch
    public void stop() {
        endTime = System.currentTimeMillis();
        running = false;
    }

    // Method to get the elapsed time in seconds
    public double getElapsedTime() {
        if (running) {
            return (System.currentTimeMillis() - startTime) / 1000.0;
        } else {
            return (endTime - startTime) / 1000.0;
        }
    }

    public static void main(String[] args) {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.start();
        
        // Simulate some work with sleep
        try {
            Thread.sleep(2000); // Sleep for 2 seconds
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        stopwatch.stop();
        // Print the elapsed time
        System.out.println(""Elapsed time: "" + stopwatch.getElapsedTime() + "" seconds"");
    }
}",0
"// Base class representing a general shape
class Shape {
    // Method to calculate the area of the shape
    public double getArea() {
        return 0;
    }

    // Method to display shape information
    public void display() {
        System.out.println(""Shape"");
    }
}

// Derived class representing a circle
class Circle extends Shape {
    private double radius;

    // Constructor to initialize the radius
    public Circle(double radius) {
        this.radius = radius;
    }

    // Override method to calculate the area of the circle
    @Override
    public double getArea() {
        return Math.PI * radius * radius;
    }

    // Override method to display circle information
    @Override
    public void display() {
        System.out.println(""Circle with radius: "" + radius);
    }
}

// Derived class representing a rectangle
class Rectangle extends Shape {
    private double width, height;

    // Constructor to initialize width and height
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    // Override method to calculate the area of the rectangle
    @Override
    public double getArea() {
        return width * height;
    }

    // Override method to display rectangle information
    @Override
    public void display() {
        System.out.println(""Rectangle with width: "" + width + "" and height: "" + height);
    }
}

public class InheritanceDemo {
    public static void main(String[] args) {
        // Create instances of Circle and Rectangle
        Shape shape1 = new Circle(5);
        Shape shape2 = new Rectangle(4, 6);

        // Display and print areas
        shape1.display();
        System.out.println(""Area: "" + shape1.getArea());

        shape2.display();
        System.out.println(""Area: "" + shape2.getArea());
        System.out.println(""Area: "" + shape3.getArea());
    }
}",1
"// This class implements the Quick Sort algorithm to sort an array of integers
public class QuickSort {
    // Method to perform quick sort
    public static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            // Partition the array
            int pi = partition(array, low, high);

            // Recursively sort elements before and after partition
            quickSort(array, low, pi - 1);
            quickSort(array, pi + 1, high);
        }
    }

    // Method to partition the array
    private static int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = (low - 1);

        for (int j = low; j < high; j++) {
            if (array[j] <= pivot) {
                i++;
                // Swap array[i] and array[j]
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }

        // Swap array[i + 1] and array[high]
        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;

        return i + 1;
    }

    public static void main(String[] args) {
        int[] array = {10, 7, 8, 9, 1, 5};
        int n = array.length;

        // Call quickSort method
        quickSort(array, 0, n - 1);

        // Print sorted array
        System.out.println(""Sorted array:"");
        for (int num : array) {
            System.out.print(num + "" "");
        }
    }
}",1
"import java.util.Scanner;

// This class implements a basic calculator with addition, subtraction, multiplication, and division
public class Calculator {
    // Method to perform basic arithmetic operations
    public static double calculate(double num1, double num2, char operator) {
        switch (operator) {
            case '+':
                return num1 + num2;
            case '-':
                return num1 - num2;
            case '*':
                return num1 * num2;
            case '/':
                if (num2 != 0) {
                    return num1 / num2;
                } else {
                    throw new ArithmeticException(""Division by zero is not allowed."");
                }
            default:
                throw new IllegalArgumentException(""Invalid operator."");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input numbers and operator from the user
        System.out.print(""Enter first number: "");
        double num1 = scanner.nextDouble();
        System.out.print(""Enter second number: "");
        double num2 = scanner.nextDouble();
        System.out.print(""Enter operator (+, -, *, /): "");
        char operator = scanner.next().charAt(0);

        // Perform calculation and print result
        try {
            double result = calculate(num1, num2, operator);
            System.out.println(""Result: "" + result);
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
        }

        scanner.close();
    }
}",0
"import java.util.Scanner;

// This class implements a basic calculator with addition, subtraction, multiplication, and division
public class Calculator {
    // Method to perform basic arithmetic operations
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input numbers and operator from the user
        System.out.print(""Enter first number: "");
        
        double num2 = scanner.nextDouble();
        System.out.print(""Enter operator (+, -, *, /): "");
        char operator = scanner.next().charAt(0);

        // Perform calculation and print result
        try {
            double result = calculate(num1, num2, operator);
            System.out.println(""Result: "" + result);
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
        }

        scanner.close();
    }
}",0
"import java.util.Scanner;

// This class implements a basic calculator with addition, subtraction, multiplication, and division
public class Calculator {
    // Method to perform basic arithmetic operations
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input numbers and operator from the user
        System.out.print(""Enter first number: "");
        char operator = scanner.next().charAt(0);

        // Perform calculation and print result
        try {
            double result = calculate(num1, num2, operator);
            System.out.println(""Result: "" + result);
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
        }

        scanner.close();
    }
}",1
"// Base class representing a general shape
class Shape {
    // Method to calculate the area of the shape
    public double getArea() {
        return 0;
    }

    // Method to display shape information
    public void display() {
        System.out.println(""Shape"");
    }
}

// Derived class representing a circle
class Circle extends Shape {
    private double radius;

    // Constructor to initialize the radius
    public Circle(double radius) {
        this.radius = radius;
    }

    // Override method to calculate the area of the circle
    @Override
    public double getArea() {
        return Math.PI * radius * radius;
    }

    // Override method to display circle information
    @Override
    public void display() {
        System.out.println(""Circle with radius: "" + radius);
    }
}

// Derived class representing a rectangle
class Rectangle extends Shape {
    private double width, height;

    // Constructor to initialize width and height
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    // Override method to calculate the area of the rectangle
    @Override
    public double getArea() {
        return width * height;
    }

    // Override method to display rectangle information
    @Override
    public void display() {
        System.out.println(""Rectangle with width: "" + width + "" and height: "" + height);
    }
}

public class InheritanceDemo {
    public static void main(String[] args) {
        // Create instances of Circle and Rectangle
        Shape shape1 = new Circle(5);
        Shape shape2 = new Rectangle(4, 6);

        // Display and print areas
        shape1.display();
        System.out.println(""Area: "" + shape1.getArea());

        shape2.display();
        System.out.println(""Area: "" + shape2.getArea());
    }
}",1
"class Circle extends Shape {
    private double radius;

    // Constructor to initialize the radius
    public Circle(double radius) {
        this.radius = radius;
    }

    // Override method to calculate the area of the circle
    @Override
    public double getArea() {
        return Math.PI * radius * radius;
    }

    // Override method to display circle information
    @Override
    public void display() {
        System.out.println(""Circle with radius: "" + radius);
    }
}",0
"// Derived class representing a rectangle
class Rectangle extends Shape {
    private double width, height;

    // Constructor to initialize width and height
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    // Override method to calculate the area of the rectangle
    @Override
    public double getArea() {
        return width * height;
    }

    // Override method to display rectangle information
    @Override
    public void display() {
        System.out.println(""Rectangle with width: "" + width + "" and height: "" + height);
    }
}

public class InheritanceDemo {
    public static void main(String[] args) {
        // Create instances of Circle and Rectangle
        Shape shape1 = new Circle(5);
        Shape shape2 = new Rectangle(4, 6);

        // Display and print areas
        shape1.display();
        System.out.println(""Area: "" + shape1.getArea());

        shape2.display();
        System.out.println(""Area: "" + shape2.getArea());
        System.out.println(""Area: "" + shape3.getArea());
    }
}",0
"// Derived class representing a rectangle
class Rectangle extends Shape {
    private double width, height;

    // Constructor to initialize width and height
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    // Override method to calculate the area of the rectangle
    @Override
    public double getArea() {
        return width * height;
    }

    // Override method to display rectangle information
    @Override
    public void display() {
        System.out.println(""Rectangle with width: "" + width + "" and height: "" + height);
    }
}

public class InheritanceDemo {
    public static void main(String[] args) {
        // Create instances of Circle and Rectangle
        Shape shape1 = new Circle(5);
        Shape shape2 = new Rectangle(4, 6);

        // Display and print areas
        shape1.display();
        System.out.println(""Area: "" + shape1.getArea());

        shape2.display();
        System.out.println(""Area: "" + shape2.getArea());
        System.out.println(""Area: "" + shape3.getArea());
    }
}",1
"public class Factorial {
    // Method to calculate factorial of a number
    public static int factorial(int n) {
        // Base case: factorial of 0 or 1 is 1
        if (n == 0 || n == 1) {
            return 1;
        }
        // Recursive case: n * factorial of (n-1)
        return n * factorial(n - 1);
    }

    public static void main(String[] args) {
        int number = 5;
        // Calculate and print the factorial of the number
        System.out.println(""Factorial of "" + number + "" is: "" + factorial(number));
    }
}",1
"// This class simulates a simple bank account with deposit and withdrawal functionality
public class BankAccount {
    private double balance;

    // Constructor to initialize the account with a starting balance
    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }


    // Method to withdraw money from the account
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
        } else {
            System.out.println(""Insufficient balance or invalid amount."");
        }
    }

    public static void main(String[] args) {
        BankAccount account = new BankAccount(1000);
        // Perform deposit and withdrawal operations
        account.deposit(500);
        account.withdraw(200);

        // Print the final balance
        System.out.println(""Current balance: "" + account.getBalance());
    }
}",1
"// This class simulates a simple bank account with deposit and withdrawal functionality
public class BankAccount {
    private double balance;

    // Constructor to initialize the account with a starting balance
    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    // Method to deposit money into the account
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
        } else {
            System.out.println(""Deposit amount must be positive."");
        }
    }

    // Method to withdraw money from the account
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
        } else {
            System.out.println(""Insufficient balance or invalid amount."");
        }
    }

    // Method to check the account balance
    public double getBalance() {
        return balance;
    }

    public static void main(String[] args) {
        BankAccount account = new BankAccount(1000);
        // Perform deposit and withdrawal operations
        account.deposit(500);
        account.withdraw(200);

        // Print the final balance
        System.out.println(""Current balance: "" + account.getBalance());
    }
}",0
"// This class counts the number of words in a given string
public class WordCounter {
    // Method to count words in a string
    public static int countWords(String sentence) {
        // Split the string by whitespace and count the length of the resulting array
         if (sentence == null || sentence.trim().isEmpty()) {
            return 0; // Handle empty or null strings
        }
        String[] words = sentence.trim().split(""\\s+"");
        return words.length;
    }

    public static void main(String[] args) {
        String sentence = ""Java programming is fun and educational."";
        // Count and print the number of words in the sentence
        System.out.println(""Number of words: "" + countWords(sentence));
    }
}",1
"// This class counts the number of words in a given string
public class WordCounter {
    // Method to count words in a string
    public static int countWords(String sentence) {
        // Split the string by whitespace and count the length of the resulting array
         if (sentence == null || sentence.trim().isEmpty()) {
            return 0; // Handle empty or null strings
        }

    }

    public static void main(String[] args) {
        String sentence = ""Java programming is fun and educational."";
        // Count and print the number of words in the sentence
        System.out.println(""Number of words: "" + countWords(sentence));
    }
}",1
"public class WordsCounter {
    // Method to count words in a string
    public static int countWords(String sentence) {
        // Split the string by whitespace and count the length of the resulting array
         if (sentence == null || sentence.trim().isEmpty()) {
            return 0; // Handle empty or null strings
        }

    }

    public static void main(String[] args) {
        String sentence = ""Java programming is fun and educational."";
        // Count and print the number of words in the sentence
        System.out.println(""Number of words: "" + countWords(sentence));
    }
}",1
"public class Stack {
    private int[] stack;
    private int top;
    private static final int MAX_SIZE = 100; // Maximum size of the stack

    // Constructor to initialize the stack
    public Stack() {
        stack = new int[MAX_SIZE];
        top = -1;
    }

    // Method to push an element onto the stack
    public void push(int value) {
        if (top < MAX_SIZE - 1) {
            stack[++top] = value;
        } else {
            System.out.println(""Stack overflow."");
        }
    }

    // Method to pop an element from the stack
    public int pop() {
        if (top >= 0) {
            return stack[top--];
        } else {
            System.out.println(""Stack underflow."");
            return -1; // Indicate an error
        }
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return top == -1;
    }

    public static void main(String[] args) {
        Stack stack = new Stack();
        // Push and pop elements from the stack
        stack.push(10);
        stack.push(20);
        stack.push(30);

        while (!stack.isEmpty()) {
            System.out.println(""Popped: "" + stack.pop());
        }
    }
}
",0
"import java.io.*;

// This class demonstrates reading from and writing to a file
public class FileReadWrite {
    // Method to write text to a file
    public static void writeToFile(String fileName, String text) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            writer.write(text);
            System.out.println(""Text written to file successfully."");
        } catch (IOException e) {
            System.out.println(""Error writing to file: "" + e.getMessage());
        }
    }

    // Method to read text from a file
    public static void readFromFile(String fileName) {
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println(""Error reading from file: "" + e.getMessage());
        }
    }

    public static void main(String[] args) {
        String fileName = ""example.txt"";
        String text = ""Hello, this is a test."";

        // Write to the file and then read from it
        writeToFile(fileName, text);
        readFromFile(fileName);
    }
}",0
"import java.io.*;

// This class demonstrates reading from and writing to a file
public class FileReadWrite {
    // Method to write text to a file
    public static void main(String[] args) {
        String fileName = ""example.txt"";
        String text = ""Hello, this is a test."";

        // Write to the file and then read from it
        writeToFile(fileName, text);
        readFromFile(fileName);
    }
}",1
"// This class calculates the sum and average of elements in an array
public class ArrayStatistics {
    // Method to calculate the sum of elements in an array
    public static int calculateSum(int[] array) {
        int sum = 0;
        for (int num : array) {
            sum += num;
        }
        return sum;
    }

    // Method to calculate the average of elements in an array
    public static double calculateAverage(int[] array) {
        if (array.length == 0) return 0; // Avoid division by zero
        int sum = calculateSum(array);
        return (double) sum / array.length;
    }

    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};
        // Calculate and print the sum and average
        System.out.println(""Sum: "" + calculateSum(numbers));
        System.out.println(""Average: "" + calculateAverage(numbers));
    }
}",0
"// This class calculates the sum and average of elements in an array
public class ArrayStatistics {
    // Method to calculate the sum of elements in an array
    public static int calculateSum(int[] array) {
        int sum = 0;
        for (int num : array) {
            sum += num;
        }
        return sum;
    }

    // Main Method
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};
        // Calculate and print the sum and average
        System.out.println(""Sum: "" + calculateSum(numbers));
        System.out.println(""Average: "" + calculateAverage(numbers));
    }
}",1
"// This class represents a Person with getter and setter methods
public class Person {
    private String name;
    private int age;

    // Constructor to initialize the person object
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Getter for name
    public String getName() {
        return name;
    }

    // Setter for name
    public void setName(String name) {
        this.name = name;
    }

    // Getter for age
    public int getAge() {
        return age;
    }

    // Setter for age
    public void setAge(int age) {
        if (age > 0) {
            this.age = age;
        } else {
            System.out.println(""Age must be positive."");
        }
    }

    public static void main(String[] args) {
        Person person = new Person(""Alice"", 30);
        // Display initial person details
        System.out.println(""Name: "" + person.getName() + "", Age: "" + person.getAge());

        // Update and display new person details
        person.setName(""Bob"");
        person.setAge(35);
        System.out.println(""Updated Name: "" + person.getName() + "", Age: "" + person.getAge());
    }
}",1
"
public class Person {
    private String name;
    private int age;

    // Constructor to initialize the person object
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Getter for name
    public String getName() {
        return name;
    }

    // Setter for name
    public void setName(String name) {
        this.name = name;
    }

    // Getter for age
    public int getAge() {
        return age;
    }

    // Setter for age
    public void setAge(int age) {
        if (age > 0) {
            this.age = age;
        } else {
            System.out.println(""Age must be positive."");
        }
    }

    public static void main(String[] args) {
        Person person = new Person(""Alice"", 30);
        // Display initial person details
        System.out.println(""Name: "" + person.getName() + "", Age: "" + person.getAge());

        // Update and display new person details
        person.setName(""Bob"");
        person.setAge(35);
        System.out.println(""Updated Name: "" + person.getName() + "", Age: "" + person.getAge());
    }
}
",0
"public class BubbleSort {
    // Method to perform bubble sort
    public static void bubbleSort(int[] array) {
        int n = array.length;
        boolean swapped;

        // Perform bubble sort
        do {
            swapped = false;
            for (int i = 0; i < n - 1; i++) {
                if (array[i] > array[i + 1]) {
                    // Swap array[i] and array[i+1]
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    swapped = true;
                }
            }
            n--; // Reduce the range for optimization
        } while (swapped);
    }

    public static void main(String[] args) {
        int[] array = {64, 25, 12, 22, 11};
        System.out.println(""Original array:"");
        for (int num : array) {
            System.out.print(num + "" "");
        }
        System.out.println();

        // Sort the array and print the result
        bubbleSort(array);
        System.out.println(""Sorted array:"");
        for (int num : array) {
            System.out.print(num + "" "");
        }
    }
}
",0
"// This class implements the Bubble Sort algorithm to sort an array
public class BubbleSort {
    // Method to perform bubble sort
    public static void bubbleSort(int[] array) {

        // Perform bubble sort
        do {
            swapped = false;
            for (int i = 0; i < n - 1; i++) {
                if (array[i] > array[i + 1]) {
                    // Swap array[i] and array[i+1]
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    swapped = true;
                }
            }
            n--; // Reduce the range for optimization
        } while (swapped);
    }

    public static void main(String[] args) {
        // Sort the array and print the result
        bubbleSort(array);
        System.out.println(""Sorted array:"");
    }
}",0
"import java.util.Scanner;

// This class implements a simple command-line calculator
public class CommandLineCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input numbers and operator from the user
        System.out.print(""Enter first number: "");
        double num1 = scanner.nextDouble();

        double result;
        // Print the result
        System.out.println(""Result: "" + result);
        scanner.close();
    }
}",1
"import java.util.Scanner;

// This class implements a simple command-line calculator
public class CommandLineCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input numbers and operator from the user
        System.out.print(""Enter first number: "");
        double num1 = scanner.nextDouble();
        System.out.print(""Enter second number: "");
        double num2 = scanner.nextDouble();
        System.out.print(""Enter operator (+, -, *, /): "");
        char operator = scanner.next().charAt(0);

        double result;

        // Perform calculation based on operator
        switch (operator) {
            case '+':
                result = num1 + num2;
                break;
            case '-':
                result = num1 - num2;
                break;
            case '*':
                result = num1 * num2;
                break;
            case '/':
                if (num2 != 0) {
                    result = num1 / num2;
                } else {
                    System.out.println(""Error: Division by zero."");
                    return;
                }
                break;
            default:
                System.out.println(""Invalid operator."");
                return;
        }

        // Print the result
        System.out.println(""Result: "" + result);
        scanner.close();
    }
}",0
"import java.util.ArrayList;
import java.util.Collections;

// This class demonstrates sorting a list using Java Collections Framework
public class ListSorting {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(3);
        list.add(1);
        list.add(4);
        list.add(1);
        list.add(5);
        list.add(9);

        System.out.println(""Original list:"");
        System.out.println(list);

        // Sort the list
        Collections.sort(list);

        System.out.println(""Sorted list:"");
        System.out.println(list);
    }
}",0
"// This class checks if a given number is prime
public class PrimeCheck {
    // Method to check if a number is prime
    public static boolean isPrime(int num) {
        // Numbers less than or equal to 1 are not prime
        if (num <= 1) {
            return false;
        }
        // Check divisibility from 2 to the square root of the number
        for (int i = 2; i <= Math.sqrt(num); i++) {
            // If the number is divisible by any number other than 1 and itself, it's not prime
            if (num % i == 0) {
                return false;
            }
        }
        // If no divisors were found, the number is prime
        return true;
    }

    public static void main(String[] args) {
        int number = 29;
        // Check if the number is prime and print the result
        System.out.println(""Is "" + number + "" prime? "" + isPrime(number));
    }
}",1
"public class PrimeCheck {
    // Method to check if a number is prime
    public static boolean isPrime(int num) {
        // Check divisibility from 2 to the square root of the number
        for (int i = 2; i <= Math.sqrt(num); i++) {
            // If the number is divisible by any number other than 1 and itself, it's not prime
            if (num % i == 0) {
                return false;
            }
        }
        // If no divisors were found, the number is prime
        return true;
    }

    public static void main(String[] args) {
        int number = 29;
        // Check if the number is prime and print the result
        System.out.println(""Is "" + number + "" prime? "" + isPrime(number));
    }
}",1
"import java.util.*;

public class FirstUniqueCharacter {
    public int firstUniqChar(String s) {
        Map<Character, Integer> charCount = new HashMap<>();
        
        // Count occurrences of each character
        for (char c : s.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }
        
        // Find the first non-repeating character
        for (int i = 0; i < s.length(); i++) {
            if (charCount.get(s.charAt(i)) == 1) {
                return i;
            }
        }
        
        return -1; // No non-repeating character found
    }

    public static void main(String[] args) {
        FirstUniqueCharacter solution = new FirstUniqueCharacter();
        String s = ""leetcode"";
        System.out.println(solution.firstUniqChar(s)); // Output: 0
    }
}
",0
"public class LinearSearch {
  int[] numbers = {10, 20, 30, 40, 50};
  // Traverse each element in the array
//  System.out.println(""Element not found."");
}",1
"class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        int[] counts = new int[2];
        for (int student : students) counts[student]++;
        
        int remaining = sandwiches.length;
        for (int sandwich : sandwiches) {
            if (counts[sandwich] == 0) break;
            if (remaining-- == 0) break;
            counts[sandwich]--;
        }
        
        return remaining;
    }
}",0
"public class FibonacciSequence {
    // Method to generate Fibonacci sequence
    public static void generateFibonacci(int terms) {
        int first = 0, second = 1;

        // Print the first term
        System.out.print(first + "" "");

        // Generate and print the remaining terms
        for (int i = 1; i < terms; i++) {
            System.out.print(second + "" "");
            int next = first + second; // Calculate the next term
            first = second;            // Update the first term to the second term
                 second = next;             // Update the second term to the next term
        }
       
    }

    public static void main(String[] args) {
        int terms = 10; // Number of terms in the Fibonacci sequence to generate
        // Call the method to generate the Fibonacci sequence
        generateFibonacci(terms);
    }
}",0
"public class FibonacciSequence {
    // Method to generate Fibonacci sequence
    public static void generateFibonacci(int terms) {
        int first = 0, second = 1;

        // Print the first term
        System.out.print(first + "" "");

        // Generate and print the remaining terms
        for (int i = 1; i < terms; i++) {
            System.out.print(second + "" "");
            int next = first + second; // Calculate the next term
            first = second;            // Update the first term to the second term
        }
       
    }

    public static void main(String[] args) {
        int terms = 10; // Number of terms in the Fibonacci sequence to generate
        // Call the method to generate the Fibonacci sequence
        generateFibonacci(terms);
    }
}",1
"public class PalindromeLinkedList {
    public boolean isPalindrome(ListNode head) {
        // Create an arraylist to store values of nodes
        List<Integer> values = new ArrayList<>();
        
        // Traverse the linked list and store values in the arraylist
        ListNode current = head;
        while (current != null) {
            values.add(current.val);
            current = current.next;
        }
        
        // Use two pointers to compare elements from both ends
        int left = 0, right = values.size() - 1;
        while (left < right) {
            if (!values.get(left).equals(values.get(right))) {
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }
    
    // Example usage
    public static void main(String[] args) {
        // Construct the linked list: 1 -> 2 -> 2 -> 1
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(2);
        head.next.next.next = new ListNode(1);
        
        PalindromeLinkedList solution = new PalindromeLinkedList();
        System.out.println(solution.isPalindrome(head)); // Output: true
    }
}",0
"public class LinearSearch {
    // Method to perform linear search
    public static int linearSearch(int[] array, int key) {
        // Traverse each element in the array
        for (int i = 0; i < array.length; i++) {
            // If the current element matches the key, return its index
            if (array[i] == key) {
                return i;
            }
        }
        // If the key is not found, return -1
        return -1;
    }

    public static void main(String[] args) {
        int[] numbers = {10, 20, 30, 40, 50}; // Array to search within
        int key = 30; // Element to search for

        // Call the linear search method and store the result
        int result = linearSearch(numbers, key);

        // Check if the element was found and print the appropriate message
        if (result != -1) {
            System.out.println(""Element found at index: "" + result);
        } else {
            System.out.println(""Element not found."");
        }
    }
}",1
"public class LinearSearch {
 // Traverse each element in the array
}",1
"public class PowerOfFour {
    public boolean isPowerOfFour(int n) {
        if (n <= 0) return false;
        while (n % 4 == 0) {
            n /= 4;
        }
        return n == 1;
    }

    public static void main(String[] args) {
        PowerOfFour solution = new PowerOfFour();
        int n = 16;
        System.out.println(solution.isPowerOfFour(n)); // Output: true
    }
}",0
"// This class provides a method to reverse a string
public class StringReverser {
    // Method to reverse a string
    public static String reverseString(String input) {
        // Convert the input string to a character array
        char[] charArray = input.toCharArray();
        int left = 0, right = charArray.length - 1;

        // Swap characters from the beginning and end until the middle is reached
        while (left < right) {
            // Swap the characters
            char temp = charArray[left];
            charArray[left] = charArray[right];
            charArray[right] = temp;

            // Move towards the center
            left++;
            right--;
        }

        // Convert the character array back to a string and return it
        return new String(charArray);
    }

    public static void main(String[] args) {
        String input = ""Hello, World!""; // String to be reversed
        // Call the reverse method and print the reversed string
        System.out.println(""Reversed string: "" + reverseString(input));
    }
}
",1
"class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
     //   return nums[n/2];
    }
}",0
"public class LargestElement {
    public static int findLargest(int[] array) {
        int largest = array[0];

        // Traverse the array to find the actual largest element
        for (int i = 1; i < array.length; i++) {
            if (array[i] > largest) {
                largest = array[i]; // Update largest if a larger element is found
            }
        }

        // Return the largest element found
        return largest;
    }

    public static void main(String[] args) {
        int[] numbers = {10, 20, 30, 40, 50}; // Array to search within

        // Find and print the largest element
        System.out.println(""Largest element: "" + findLargest(numbers));
    }
}",1
"public class PalindromeCheck {
    // Method to check if a string is a palindrome
    public static boolean isPalindrome(String input) {
        // Convert the input string to lowercase to make the check case-insensitive
        String cleanedInput = input.toLowerCase().replaceAll(""\\s+"", """");

        // Compare the string with its reverse
        return cleanedInput.equals(new StringBuilder(cleanedInput).reverse().toString());
    }

    public static void main(String[] args) {
        String input = ""A man a plan a canal Panama""; // String to check

        // Check if the string is a palindrome and print the result
        System.out.println(""Is palindrome? "" + isPalindrome(input));
    }
}",1
"// This class calculates the factorial of a number
public class Factorial {

    // Method to calculate factorial recursively
    public static int factorial(int n) {
        if (n == 0) 
            return 1;  // Base case: factorial of 0 is 1
        else 
            return n * factorial(n - 1);  // Recursive call
    }

    public static void main(String[] args) {
        int number = 5;  // Number to calculate factorial for
        System.out.println(""Factorial: "" + factorial(number));  // Output result
    }
}
",0
"// This class checks if a string is a palindrome
public class Palindrome {

    // Method to check if a string is palindrome
    public static boolean isPalindrome(String str) {
        int i = 0, j = str.length() - 1;

        // Compare characters from both ends
        while (i < j) {
            if (str.charAt(i) != str.charAt(j))
                return false;  // If mismatch found, it's not a palindrome
            i++;
            j--;
        }
        return true;  // All characters matched
    }

    public static void main(String[] args) {
        String input = ""madam"";  // Example string
        System.out.println(isPalindrome(input));  // Check and output result
    }
}",0
"// This class generates the Fibonacci sequence
public class Fibonacci {

    // Method to generate Fibonacci numbers up to n
    public static void generateFibonacci(int n) {
        int a = 0, b = 1, c;
        System.out.print(a + "" "" + b);  // Print initial values

        // Loop to generate remaining Fibonacci numbers
        for (int i = 2; i < n; i++) {
            c = a + b;
            System.out.print("" "" + c);  // Output the next Fibonacci number
            a = b;
            b = c;
        }
        System.out.println();  // New line after sequence
    }

    public static void main(String[] args) {
        generateFibonacci(10);  // Generate first 10 Fibonacci numbers
    }
}",0
"// This class demonstrates bubble sort algorithm
public class BubbleSort {

    // Method to perform bubble sort on an array
    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        // Outer loop for passes
        for (int i = 0; i < n - 1; i++) {
            // Inner loop for comparison
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Swap elements
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    public static void main(String[] args) {
        int[] arr = {64, 25, 12, 22, 11};  // Example array
        bubbleSort(arr);  // Sort the array
        for (int i : arr)
            System.out.print(i + "" "");  // Print sorted array
    }
}",0
"// This class finds the maximum of three numbers
public class FindMaximum {

    // Method to find maximum of three numbers
    public static int max(int a, int b, int c) {
        // Compare three numbers
        return (a > b && a > c) ? a : (b > c) ? b : c;
    }

    public static void main(String[] args) {
        int a = 10, b = 20, c = 5;  // Example numbers
        System.out.println(""Maximum: "" + max(a, b, c));  // Output maximum number
    }
}",1
"// This class checks if a number is prime
public class PrimeChecker {

    // Method to check if a number is prime
    public static boolean isPrime(int n) {
        if (n <= 1) return false;  // 0 and 1 are not prime
        // Loop through possible divisors
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0)
                return false;  // If divisible, not prime
        }
        return true;  // If no divisors found, it's prime
    }

    public static void main(String[] args) {
        int number = 29;  // Example number
        System.out.println(isPrime(number));  // Check and output result
    }
}",0
"// This class calculates the sum of an array's elements
public class ArraySum {

    // Method to sum all elements in an array
    public static int sumArray(int[] arr) {
        int sum = 0;
        // Loop through the array and add elements
        for (int i : arr) {
            sum += i;
        }
        return sum;  // Return total sum
    }

    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};  // Example array
        System.out.println(""Sum: "" + sumArray(numbers));  // Output sum
    }
}",0
"// This class reverses a string
public class ReverseString {

    // Method to reverse a given string
    public static String reverse(String str) {
        String reversed = """";
        // Loop through the string from end to start
        for (int i = str.length() - 1; i >= 0; i--) {
            reversed += str.charAt(i);  // Append characters in reverse order
        }
        return reversed;  // Return reversed string
    }

    public static void main(String[] args) {
        String original = ""hello"";  // Example string
        System.out.println(reverse(original));  // Output reversed string
    }
}",0
"// This class counts the number of vowels in a string
public class VowelCounter {

    // Method to count vowels
    public static int countVowels(String str) {
        int count = 0;
        // Loop through each character
        for (char c : str.toLowerCase().toCharArray()) {
            if (""aeiou"".indexOf(c) != -1) {
                count++;  // Increment if vowel found
            }
        }
        return count;  // Return the total vowel count
    }

    public static void main(String[] args) {
        String sentence = ""Hello World"";  // Example sentence
        System.out.println(""Vowel count: "" + countVowels(sentence));  // Output count
    }
}",0
"// This class calculates the area of a circle
public class CircleArea {

    // Method to calculate area of a circle
    public static double area(double radius) {
        return Math.PI * radius * radius;  // Area formula: πr²
    }

    public static void main(String[] args) {
        double radius = 7.0;  // Example radius
        System.out.println(""Area: "" + area(radius));  // Output area of circle
    }
}",0
"// This class calculates the factorial of a number
public class Factorial {

    // Method to calculate factorial recursively
    public static int factorial(int n) {
        if (n == 0) 
            return 1;  // Base case: factorial of 0 is 1
        else 
            return n * factorial(n - 1);  // Recursive call
    }

    public static void main(String[] args) {
        int number = 5;  // Number to calculate factorial for
        System.out.println(""Factorial: "" + factorial(number));  // Output result
    }
}",0
"// This class generates the Fibonacci sequence
public class Fibonacci {

    // Method to generate Fibonacci numbers
    public static void generateFibonacci(int n) {
        int a = 0, b = 1;
        System.out.print(a + "" "" + b);  // Print initial values
        // Generate remaining Fibonacci numbers
        for (int i = 2; i < n; i++) {
            int next = a + b;
            System.out.print("" "" + next);
            a = b;
            b = next;
        }
        System.out.println();  // Newline
    }

    public static void main(String[] args) {
        generateFibonacci(10);  // Generate first 10 Fibonacci numbers
    }
}",0
"// This class checks if a number is prime
public class PrimeChecker {

    // Method to check if a number is prime
    public static boolean isPrime(int n) {
        if (n <= 1) return false;  // Check for non-prime cases
        // Check divisibility
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0)
                return false;  // Return false if divisible
        }
        return true;  // Prime number
    }

    public static void main(String[] args) {
        int number = 29;  // Test number
        System.out.println(isPrime(number));  // Check if prime
    }
}",0
"// This class checks if a string is a palindrome
public class Palindrome {

    // Method to check if a string is palindrome
    public static boolean isPalindrome(String str) {
        int i = 0, j = str.length() - 1;
        // Compare characters from both ends
        while (i < j) {
            if (str.charAt(i) != str.charAt(j))
                return false;  // If mismatch found
            i++;
            j--;
        }
        return true;  // All characters matched
    }

    public static void main(String[] args) {
        String input = ""madam"";  // Example string
        System.out.println(isPalindrome(input));  // Output result
    }
}",0
"// This class calculates the sum of an array's elements
public class ArraySum {

    // Method to sum all elements in an array
    public static int sumArray(int[] arr) {
        int sum = 0;
        // Loop through the array
        for (int i : arr) {
            sum += i;  // Add elements
        }
        return sum;  // Return total sum
    }

    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};  // Example array
        System.out.println(""Sum: "" + sumArray(numbers));  // Output sum
    }
}",0
"// This class reverses a string
public class ReverseString {

    // Method to reverse a given string
    public static String reverse(String str) {
        String reversed = """";
        // Append characters in reverse order
        for (int i = str.length() - 1; i >= 0; i--) {
            reversed += str.charAt(i);
        }
        return reversed;  // Return reversed string
    }

    public static void main(String[] args) {
        String original = ""hello"";  // Example string
        System.out.println(reverse(original));  // Output reversed string
    }
}",0
"// This class counts the number of vowels in a string
public class VowelCounter {

    // Method to count vowels in a string
    public static int countVowels(String str) {
        int count = 0;
        // Check each character
        for (char c : str.toLowerCase().toCharArray()) {
            if (""aeiou"".indexOf(c) != -1)
                count++;  // Increment if vowel
        }
        return count;  // Return vowel count
    }

    public static void main(String[] args) {
        String sentence = ""Hello World"";  // Example string
        System.out.println(""Vowel count: "" + countVowels(sentence));  // Output count
    }
}",0
"// This class demonstrates bubble sort algorithm
public class BubbleSort {

    // Method to perform bubble sort
    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        // Outer loop for passes
        for (int i = 0; i < n - 1; i++) {
            // Inner loop for comparison
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Swap elements
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    public static void main(String[] args) {
        int[] arr = {64, 25, 12, 22, 11};  // Example array
        bubbleSort(arr);  // Sort the array
        for (int i : arr)
            System.out.print(i + "" "");  // Output sorted array
    }
}",0
"// This class calculates the area of a circle
public class CircleArea {

    // Method to calculate area
    public static double area(double radius) {
        return Math.PI * radius * radius;  // Formula for area
    }

    public static void main(String[] args) {
        double radius = 7.0;  // Example radius
        System.out.println(""Area: "" + area(radius));  // Output result
    }
}",0
"// This class finds the maximum of three numbers
public class MaxFinder {

    // Method to find maximum
    public static int findMax(int a, int b, int c) {
        // Use ternary operator to find max
        return (a > b && a > c) ? a : (b > c) ? b : c;
    }

    public static void main(String[] args) {
        int a = 10, b = 20, c = 5;  // Example numbers
        System.out.println(""Max: "" + findMax(a, b, c));  // Output maximum
    }
}",1
"// This class calculates the average of three numbers
public class SimpleAverage {

    // Method to calculate average
    public static double average(int a, int b, int c) {
        return (a + b + c) / 3.0;
    }

    // Main method
    public static void main(String[] args) {
        double avg = average(3, 4, 5);  // Calculate average
        System.out.println(""Average: "" + avg);  // Output result
    }
}",1
"// This class multiplies two numbers
public class SimpleMultiply {

    // Method to multiply two numbers
    public static int multiply(int a, int b) {
        return a * b;
    }

    // Main method
    public static void main(String[] args) {
        int result = multiply(3, 4);
        System.out.println(""Multiplication: "" + result);
    }
}",1
"// This class divides two numbers
public class SimpleDivide {

    // Method to divide two numbers
    public static double divide(int a, int b) {
        return (double) a / b;
    }

    // Main method
    public static void main(String[] args) {
        double result = divide(10, 2);
        System.out.println(""Division: "" + result);
    }
}",1
"// This class checks if a number is prime
public class PrimeChecker {

    // Method to check prime number
    public static boolean isPrime(int n) {
        if (n <= 1) return false;
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) return false;
        }
        return true;
    }

    // Main method
    public static void main(String[] args) {
        boolean result = isPrime(7);
        System.out.println(""Is prime: "" + result);
    }
}",0
"// This class subtracts two numbers
public class SimpleSubtract {

    // Method to subtract two numbers
    public static int subtract(int a, int b) {
        return a - b;
    }

    // Main method
    public static void main(String[] args) {
        int result = subtract(9, 5);
        System.out.println(""Subtraction: "" + result);
    }
}",1
"public class Calculator {

    // This method adds two numbers
    public int add(int a, int b) {
        return a + b;
    }

    // This method subtracts two numbers
    public int subtract(int a, int b) {
        return a - b;
    }

    /* 
     This method multiplies two numbers
     It is a very basic method
    */
    public int multiply(int a, int b) {
        return a * b;
    }

    // This method divides two numbers
    public int divide(int a, int b) {
        return a / b;
    }
}",1
"public class Person {

    // Name of the person
    private String name;

    // Age of the person
    private int age;

    // Constructor to initialize Person object
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Get the name of the person
    public String getName() {
        return name;
    }

    // Set the name of the person
    public void setName(String name) {
        this.name = name;
    }

    // Get the age of the person
    public int getAge() {
        return age;
    }

    // Set the age of the person
    public void setAge(int age) {
        this.age = age;
    }
}",1
"public class Circle {

    // Radius of the circle
    private double radius;

    // Constructor to initialize Circle object
    public Circle(double radius) {
        this.radius = radius;
    }

    /* 
     This method calculates the area of the circle
     Area = π * r^2
    */
    public double calculateArea() {
        return Math.PI * radius * radius;
    }

    // This method calculates the circumference of the circle
    public double calculateCircumference() {
        return 2 * Math.PI * radius;
    }
}",1
"public class Student {

    // Name of the student
    private String name;

    // Grade of the student
    private int grade;

    // Constructor to initialize the student object
    public Student(String name, int grade) {
        this.name = name;
        this.grade = grade;
    }

    // This method returns the grade of the student
    public int getGrade() {
        return grade;
    }

    // This method sets the grade of the student
    public void setGrade(int grade) {
        this.grade = grade;
    }
}",1
"public class Employee {

    // Name of the employee
    private String name;

    // Salary of the employee
    private double salary;

    /* 
     Constructor to initialize the employee object
     */
    public Employee(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }

    // This method returns the salary of the employee
    public double getSalary() {
        return salary;
    }

    // This method sets the salary of the employee
    public void setSalary(double salary) {
        this.salary = salary;
    }
}",1
"public class Rectangle {

    // Width of the rectangle
    private double width;

    // Height of the rectangle
    private double height;

    // Constructor to initialize Rectangle object
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    // This method calculates the area of the rectangle
    public double calculateArea() {
        return width * height;
    }

    /* 
     This method calculates the perimeter of the rectangle
     Perimeter = 2 * (width + height)
    */
    public double calculatePerimeter() {
        return 2 * (width + height);
    }
}",1
"public class Triangle {

    // Base of the triangle
    private double base;

    // Height of the triangle
    private double height;

    // Constructor to initialize Triangle object
    public Triangle(double base, double height) {
        this.base = base;
        this.height = height;
    }

    /* 
     This method calculates the area of the triangle
     Area = 0.5 * base * height
    */
    public double calculateArea() {
        return 0.5 * base * height;
    }

    // This method calculates the perimeter of the triangle
    public double calculatePerimeter(double sideA, double sideB) {
        return sideA + sideB + base;
    }
}",1
"public class Book {

    // Title of the book
    private String title;

    // Author of the book
    private String author;

    // Constructor to initialize Book object
    public Book(String title, String author) {
        this.title = title;
        this.author = author;
    }

    // Get the title of the book
    public String getTitle() {
        return title;
    }

    // Set the title of the book
    public void setTitle(String title) {
        this.title = title;
    }

    // Get the author of the book
    public String getAuthor() {
        return author;
    }

    // Set the author of the book
    public void setAuthor(String author) {
        this.author = author;
    }
}",1
"public class Car {

    // Make of the car
    private String make;

    // Model of the car
    private String model;

    // Year of manufacture
    private int year;

    // Constructor to initialize Car object
    public Car(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    // Get the make of the car
    public String getMake() {
        return make;
    }

    // Set the make of the car
    public void setMake(String make) {
        this.make = make;
    }

    // Get the model of the car
    public String getModel() {
        return model;
    }

    // Set the model of the car
    public void setModel(String model) {
        this.model = model;
    }

    // Get the year of the car
    public int getYear() {
        return year;
    }

    // Set the year of the car
    public void setYear(int year) {
        this.year = year;
    }
}",1
"public class Dog {

    // Name of the dog
    private String name;

    // Breed of the dog
    private String breed;

    // Age of the dog
    private int age;

    // Constructor to initialize Dog object
    public Dog(String name, String breed, int age) {
        this.name = name;
        this.breed = breed;
        this.age = age;
    }

    // This method returns the name of the dog
    public String getName() {
        return name;
    }

    // This method sets the name of the dog
    public void setName(String name) {
        this.name = name;
    }

    // This method returns the breed of the dog
    public String getBreed() {
        return breed;
    }

    // This method sets the breed of the dog
    public void setBreed(String breed) {
        this.breed = breed;
    }

    // This method returns the age of the dog
    public int getAge() {
        return age;
    }

    // This method sets the age of the dog
    public void setAge(int age) {
        this.age = age;
    }
}",1
"public class Dog {

    // Name of the dog
    private String name;

    // Breed of the dog
    private String breed;

    // Age of the dog
    private int age;

    // Constructor to initialize Dog object
    public Dog(String name, String breed, int age) {
        this.name = name;
        this.breed = breed;
        this.age = age;
    }

    // This method returns the name of the dog
    public String getName() {
        return name;
    }

    // This method sets the name of the dog
    public void setName(String name) {
        this.name = name;
    }

    // This method returns the breed of the dog
    public String getBreed() {
        return breed;
    }

    // This method sets the breed of the dog
    public void setBreed(String breed) {
        this.breed = breed;
    }

    // This method returns the age of the dog
    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}",1
"public class Employee {

    // Name of the employee
    private String name;

    // Salary of the employee
    private double salary;

    /* 
     Constructor to initialize the employee object
     */
    public Employee(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }

    // This method returns the salary of the employee
    public double getSalary() {
        return salary;
    }

    // This method sets the salary of the employee
    public void setSalary(double salary) {
        this.salary = salary;
    }
}",1
"public class Employee {

    // Name of the employee
    private String name;

    // Salary of the employee
    private double salary;

    /* 
     Constructor to initialize the employee object
     */
    public Employee(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }

    // This method returns the salary of the employee
    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }
}",1
"public class Rectangle {

    // Width of the rectangle
    private double width;

    // Height of the rectangle
    private double height;

    // Constructor to initialize Rectangle object
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    // This method calculates the area of the rectangle
    public double calculateArea() {
        return width * height;
    }

    /* 
     This method calculates the perimeter of the rectangle
     Perimeter = 2 * (width + height)
    */
    public double calculatePerimeter() {
        return 2 * (width + height);
    }
}",1
"public class Rectangle {

    // Width of the rectangle
    private double width;

    // Height of the rectangle
    private double height;

    // Constructor to initialize Rectangle object
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    // This method calculates the area of the rectangle
    public double calculateArea() {
        return width * height;
    }

    public double calculatePerimeter() {
        return 2 * (width + height);
    }
}",1
"public class Triangle {

    // Base of the triangle
    private double base;

    // Height of the triangle
    private double height;

    // Constructor to initialize Triangle object
    public Triangle(double base, double height) {
        this.base = base;
        this.height = height;
    }

    /* 
     This method calculates the area of the triangle
     Area = 0.5 * base * height
    */
    public double calculateArea() {
        return 0.5 * base * height;
    }

    // This method calculates the perimeter of the triangle
    public double calculatePerimeter(double sideA, double sideB) {
        return sideA + sideB + base;
    }
}",1
"public class Book {

    // Title of the book
    private String title;

    // Author of the book
    private String author;

    // Constructor to initialize Book object
    public Book(String title, String author) {
        this.title = title;
        this.author = author;
    }

    // Get the title of the book
    public String getTitle() {
        return title;
    }

    // Set the title of the book
    public void setTitle(String title) {
        this.title = title;
    }

    // Get the author of the book
    public String getAuthor() {
        return author;
    }

    // Set the author of the book
    public void setAuthor(String author) {
        this.author = author;
    }
}",1
"public class Car {

    // Make of the car
    private String make;

    // Model of the car
    private String model;

    // Year of manufacture
    private int year;

    // Constructor to initialize Car object
    public Car(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    // Get the make of the car
    public String getMake() {
        return make;
    }

    // Set the make of the car
    public void setMake(String make) {
        this.make = make;
    }

    // Get the model of the car
    public String getModel() {
        return model;
    }

    // Set the model of the car
    public void setModel(String model) {
        this.model = model;
    }

    // Get the year of the car
    public int getYear() {
        return year;
    }

    // Set the year of the car
    public void setYear(int year) {
        this.year = year;
    }
}",1
"public class Dog {

    // Name of the dog
    private String name;

    // Breed of the dog
    private String breed;

    // Age of the dog
    private int age;

    // Constructor to initialize Dog object
    public Dog(String name, String breed, int age) {
        this.name = name;
        this.breed = breed;
        this.age = age;
    }

    // This method returns the name of the dog
    public String getName() {
        return name;
    }

    // This method sets the name of the dog
    public void setName(String name) {
        this.name = name;
    }

    // This method returns the breed of the dog
    public String getBreed() {
        return breed;
    }

    // This method sets the breed of the dog
    public void setBreed(String breed) {
        this.breed = breed;
    }


    public int getAge() {
        return age;
    }
    }
}",1
"public class Point {

    // X-coordinate of the point
    private int x;

    // Y-coordinate of the point
    private int y;

    // Constructor to initialize Point object
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    // Get the x-coordinate
    public int getX() {
        return x;
    }

    // Set the x-coordinate
    public void setX(int x) {
        this.x = x;
    }

    // Get the y-coordinate
    public int getY() {
        return y;
    }

    // Set the y-coordinate
    public void setY(int y) {
        this.y = y;
    }
}",1
"public class Laptop {

    // Brand of the laptop
    private String brand;

    // RAM size of the laptop
    private int ramSize;

    // Constructor to initialize Laptop object
    public Laptop(String brand, int ramSize) {
        this.brand = brand;
        this.ramSize = ramSize;
    }

    // Get the brand of the laptop
    public String getBrand() {
        return brand;
    }

    // Set the brand of the laptop
    public void setBrand(String brand) {
        this.brand = brand;
    }

    // Get the RAM size of the laptop
    // Get the RAM size of the laptop
    public int getRamSize() {
        return ramSize;
    }

    // Set the RAM size of the laptop
    public void setRamSize(int ramSize) {
        this.ramSize = ramSize;
    }
}
",1
"public class Book {


    private String title;

    private String author;

    // Constructor to initialize Book object
    public Book(String title, String author) {
        this.title = title;
        this.author = author;
    }

    // Get the title of the book
    public String getTitle() {
        return title;
    }

    // Set the title of the book
    public void setTitle(String title) {
        this.title = title;
    }

    // Get the author of the book
    public String getAuthor() {
        return author;
    }

    // Set the author of the book
    public void setAuthor(String author) {
        this.author = author;
    }
}",0
"public class Triangle {

    // Base of the triangle
    private double base;


    private double height;

    public Triangle(double base, double height) {
        this.base = base;
        this.height = height;
    }

    /* 
     This method calculates the area of the triangle
     Area = 0.5 * base * height
    */
    public double calculateArea() {
        return 0.5 * base * height;
    }

    // This method calculates the perimeter of the triangle
    public double calculatePerimeter(double sideA, double sideB) {
        return sideA + sideB + base;
    }
}
",1
"public class Book {


    private String title;

    // Author of the book
    private String author;

    // Constructor to initialize Book object
    public Book(String title, String author) {
        this.title = title;
        this.author = author;
    }

    // Get the title of the book
    public String getTitle() {
        return title;
    }

    // Set the title of the book
    public void setTitle(String title) {
        this.title = title;
    }

    // Get the author of the book
    public String getAuthor() {
        return author;
    }

    // Set the author of the book
    public void setAuthor(String author) {
        this.author = author;
    }
}",1
"public class Car {

    // Make of the car
    private String make;

    // Model of the car
    private String model;

    // Year of manufacture
    private int year;

    // Constructor to initialize Car object
    public Car(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    // Get the make of the car
    public String getMake() {
        return make;
    }

    // Set the make of the car
    public void setMake(String make) {
        this.make = make;
    }

    // Get the model of the car
    public String getModel() {
        return model;
    }

    // Set the model of the car
    public void setModel(String model) {
        this.model = model;
    }

    // Get the year of the car
    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }
}
",1
"public class Point {

    // X-coordinate of the point
    private int x;

    // Y-coordinate of the point
    private int y;

    // Constructor to initialize Point object
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    // Get the x-coordinate
    public int getX() {
        return x;
    }


    public void setX(int x) {
        this.x = x;
    }


}",1
"public class Course {

    // Name of the course
    private String name;

    // Code of the course
    private String code;

    // Constructor to initialize Course object
    public Course(String name, String code) {
        this.code = code;
    }

    // Get the name of the course
    public String getName() {
        return name;
    }

    // Set the name of the course
    public void setName(String name) {
        this.name = name;
    }

    // Get the code of the course
    public String getCode() {
        return code;
    }

    // Set the code of the course
    public void setCode(String code) {
        this.code = code;
    }
}
",1
"public class Course {

    // Name of the course
    private String name;

    // Code of the course
    private String code;

    // Constructor to initialize Course object
    public Course(String name, String code) {
        this.code = code;
    }

    // Get the name of the course
    public String getName() {
        return name;
    }

    // Set the name of the course
    // Get the code of the course
    public String getCode() {
        return code;
    }

    // Set the code of the course
    public void setCode(String code) {
        this.code = code;
    }
}",1
"public class Pen {

    // Brand of the pen
    private String brand;

    // Ink color of the pen
    private String inkColor;

    // Constructor to initialize Pen object
    public Pen(String brand, String inkColor) {
        this.brand = brand;
        this.inkColor = inkColor;
    }

    // Get the brand of the pen
    public String getBrand() {
        return brand;
    }

    // Set the brand of the pen
    public void setBrand(String brand) {
        this.brand = brand;
    }

    // Get the ink color of the pen
    public String getInkColor() {
        return inkColor;
    }

    // Set the ink color of the pen
    public void setInkColor(String inkColor) {
        this.inkColor = inkColor;
    }
}",1
"public class Pen {

    // Brand of the pen
    private String brand;

    // Ink color of the pen
    private String inkColor;

    // Constructor to initialize Pen object
    public Pen(String brand, String inkColor) {
        this.brand = brand;
        this.inkColor = inkColor;
    }

    // Get the brand of the pen
    public String getBrand() {
        return brand;
    }

    // Set the brand of the pen
    // Get the ink color of the pen
    // Set the ink color of the pen
    public void setInkColor(String inkColor) {
        this.inkColor = inkColor;
    }
}",1
"public class Building {

    // Name of the building
    private String name;

    // Number of floors in the building
    private int floors;

    // Constructor to initialize Building object
    public Building(String name, int floors) {
        this.name = name;
        this.floors = floors;
    }

    // Get the name of the building
    public String getName() {
        return name;
    }

    // Set the name of the building
    public void setName(String name) {
        this.name = name;
    }

    // Get the number of floors
    public int getFloors() {
        return floors;
    }

    // Set the number of floors
    public void setFloors(int floors) {
        this.floors = floors;
    }
}",1
"public class Building {

    // Name of the building
    private String name;

    // Number of floors in the building
    private int floors;

    // Constructor to initialize Building object
    // Get the name of the building
    public String getName() {
        return name;
    }

}",1
"public class Smartphone {

    // Brand of the smartphone
    private String brand;

    // Model of the smartphone
    private String model;

    // Constructor to initialize Smartphone object
    public Smartphone(String brand, String model) {
        this.brand = brand;
        this.model = model;
    }

    // Get the brand of the smartphone
    public String getBrand() {
        return brand;
    }

    // Set the brand of the smartphone
    public void setBrand(String brand) {
        this.brand = brand;
    }

    // Get the model of the smartphone
    public String getModel() {
        return model;
    }

    // Set the model of the smartphone
    public void setModel(String model) {
        this.model = model;
    }
}",1
"public class Smartphone {

    // Brand of the smartphone
    private String brand;

    // Model of the smartphone
    private String model;


    // Get the brand of the smartphone
    public String getBrand() {
        return brand;
    }

    // Set the brand of the smartphone
    public void setBrand(String brand) {
        this.brand = brand;
    }

    // Get the model of the smartphone
    public String getModel() {
        return model;
    }

    // Set the model of the smartphone
    public void setModel(String model) {
        this.model = model;
    }
}
",1
"public class Employee {

    // Employee ID
    private int id;

    // Name of the employee
    private String name;

    // Constructor to initialize Employee object
    public Employee(int id, String name) {
        this.id = id;
        this.name = name;
    }

    // Get the employee ID
    public int getId() {
        return id;
    }

    // Set the employee ID
    public void setId(int id) {
        this.id = id;
    }

    // Get the name of the employee
    public String getName() {
        return name;
    }

    // Set the name of the employee
    public void setName(String name) {
        this.name = name;
    }
}",1
"public class Employee {

    // Constructor to initialize Employee object
    public Employee(int id, String name) {
        this.id = id;
        this.name = name;
    }

    // Get the employee ID
    public int getId() {
        return id;
    }

    // Set the employee ID
    public void setId(int id) {
        this.id = id;
    }

    // Get the name of the employee
    public String getName() {
        return name;
    }

    // Set the name of the employee
    public void setName(String name) {
        this.name = name;
    }
}
",1
"public class BankAccount {

    // Account holder's name
    private String holderName;

    // Account balance
    private double balance;

    // Constructor to initialize BankAccount object
    public BankAccount(String holderName, double balance) {
        this.holderName = holderName;
        this.balance = balance;
    }

    // Get the account holder's name
    public String getHolderName() {
        return holderName;
    }

    // Set the account holder's name
    public void setHolderName(String holderName) {
        this.holderName = holderName;
    }

    // Get the account balance
    public double getBalance() {
        return balance;
    }

    // Set the account balance
    public void setBalance(double balance) {
        this.balance = balance;
    }
}",1
"public class BankAccount {

    // Account holder's name
    private String holderName;

    // Account balance
    private double balance;

    // Constructor to initialize BankAccount object
    public BankAccount(String holderName, double balance) {
        this.holderName = holderName;
        this.balance = balance;
    }



    // Set the account holder's name

    // Get the account balance
    public double getBalance() {
        return balance;
    }

    // Set the account balance
    public void setBalance(double balance) {
        this.balance = balance;
    }
}
",1
"public abstract class Shape {

    // Abstract method to calculate area
    public abstract double calculateArea();

    // Abstract method to calculate perimeter
    public abstract double calculatePerimeter();
}",1
"public abstract class Shape {

    // Abstract method to calculate area
    public abstract double calculateArea();
    public abstract double calculatePerimeter();
}",0
"public class Lamp {

    // Status of the lamp (on or off)
    private boolean isOn;

    // Constructor to initialize Lamp object
    public Lamp(boolean isOn) {
        this.isOn = isOn;
    }

    // This method turns the lamp on
    public void turnOn() {
        isOn = true;
    }

    // This method turns the lamp off
    public void turnOff() {
        isOn = false;
    }

    // This method checks if the lamp is on
    public boolean isOn() {
        return isOn;
    }
}",1
"public class Lamp {

    // Status of the lamp (on or off)
    private boolean isOn;

    // Constructor to initialize Lamp object
    public Lamp(boolean isOn) {
        this.isOn = isOn;
    }

    // This method turns the lamp on
    public void turnOn() {
        isOn = true;
    }

    // This method turns the lamp off
    public void turnOff() {
        isOn = false;
    }

    public boolean isOn() {
        return isOn;
    }
}",1
"public class Chair {

    // Material of the chair
    private String material;

    // Height of the chair
    private int height;

    // Constructor to initialize Chair object
    public Chair(String material, int height) {
        this.material = material;
        this.height = height;
    }

    // Get the material of the chair
    public String getMaterial() {
        return material;
    }

    // Set the material of the chair
    public void setMaterial(String material) {
        this.material = material;
    }

    // Get the height of the chair
    public int getHeight() {
        return height;
    }

    // Set the height of the chair
    public void setHeight(int height) {
        this.height = height;
    }
}",1
"public class Chair {

    // Material of the chair
    private String material;

    // Constructor to initialize Chair object
    public Chair(String material, int height) {
        this.material = material;
        this.height = height;
    }

    // Get the material of the chair
    public String getMaterial() {
        return material;
    }

    // Set the material of the chair
    public void setMaterial(String material) {
        this.material = material;
    }

    // Get the height of the chair
    public int getHeight() {
        return height;
    }

    // Set the height of the chair
    public void setHeight(int height) {
        this.height = height;
    }
}
",1
"public class Bus {

    // Number of seats in the bus
    private int seats;

    // Route number of the bus
    private int routeNumber;

    // Constructor to initialize Bus object
    public Bus(int seats, int routeNumber) {
        this.seats = seats;
        this.routeNumber = routeNumber;
    }

    // Get the number of seats
    public int getSeats() {
        return seats;
    }

    // Set the number of seats
    public void setSeats(int seats) {
        this.seats = seats;
    }

    // Get the route number
    public int getRouteNumber() {
        return routeNumber;
    }

    // Set the route number
    public void setRouteNumber(int routeNumber) {
        this.routeNumber = routeNumber;
    }
}
",1
"public class Bus {

    // Number of seats in the bus
    private int seats;

    // Route number of the bus
    private int routeNumber;

    // Constructor to initialize Bus object
    public Bus(int seats, int routeNumber) {
        this.seats = seats;
        this.routeNumber = routeNumber;
    }

    // Set the number of seats
    // Get the route number
    public int getRouteNumber() {
        return routeNumber;
    }

    // Set the route number
    public void setRouteNumber(int routeNumber) {
        this.routeNumber = routeNumber;
    }
}
",1
"public class House {

    // Address of the house
    private String address;

    // Number of rooms in the house
    private int rooms;

    // Constructor to initialize House object
    public House(String address, int rooms) {
        this.address = address;
        this.rooms = rooms;
    }

    // Get the address of the house
    public String getAddress() {
        return address;
    }

    // Set the address of the house
    public void setAddress(String address) {
        this.address = address;
    }

    // Get the number of rooms
    public int getRooms() {
        return rooms;
    }

    // Set the number of rooms
    public void setRooms(int rooms) {
        this.rooms = rooms;
    }
}",1
"public class House {

    // Address of the house
    private String address;

    // Number of rooms in the house
    private int rooms;

    // Constructor to initialize House object
    // Get the address of the house
    // Set the address of the house
    public void setAddress(String address) {
        this.address = address;
    }

    // Get the number of rooms
    public int getRooms() {
        return rooms;
    }

    // Set the number of rooms
    public void setRooms(int rooms) {
        this.rooms = rooms;
    }
}
",1
"public class Boat {

    // Name of the boat
    private String name;

    // Length of the boat
    private double length;

    // Constructor to initialize Boat object
    public Boat(String name, double length) {
        this.name = name;
        this.length = length;
    }

    // Get the name of the boat
    public String getName() {
        return name;
    }

    // Set the name of the boat
    public void setName(String name) {
        this.name = name;
    }

    // Get the length of the boat
    public double getLength() {
        return length;
    }

    // Set the length of the boat
    public void setLength(double length) {
        this.length = length;
    }
}",1
"public class Boat {

    // Name of the boat
    private String name;

    // Get the name of the boat
    public String getName() {
        return name;
    }

    // Set the name of the boat
    public void setName(String name) {
        this.name = name;
    }

    // Get the length of the boat
    public double getLength() {
        return length;
    }

    // Set the length of the boat
    public void setLength(double length) {
        this.length = length;
    }
}
",1
"public class Table {

    // Material of the table
    private String material;

    // Width of the table
    private int width;

    // Constructor to initialize Table object
    public Table(String material, int width) {
        this.material = material;
        this.width = width;
    }

    // Get the material of the table
    public String getMaterial() {
        return material;
    }

    // Set the material of the table
    public void setMaterial(String material) {
        this.material = material;
    }

    // Get the width of the table
    public int getWidth() {
        return width;
    }

    // Set the width of the table
    public void setWidth(int width) {
        this.width = width;
    }
}",1
"public class Table {

    // Material of the table
    private String material;

    // Constructor to initialize Table object
    public Table(String material, int width) {
        this.material = material;
        this.width = width;
    }

     // Set the material of the table
    public void setMaterial(String material) {
        this.material = material;
    }

    // Get the width of the table
    public int getWidth() {
        return width;
    }

    // Set the width of the table
    public void setWidth(int width) {
        this.width = width;
    }
}
",1
"public class Student {

    // Student's name
    private String name;

    // Student's ID
    private int id;

    // Constructor to initialize student
    public Student(String name, int id) {
        this.name = name;
        this.id = id;
    }

    // Get student's name
    public String getName() {
        return name;
    }

    // Set student's name
    public void setName(String name) {
        this.name = name;
    }

    // Get student's ID
    public int getId() {
        return id;
    }

    // Set student's ID
    public void setId(int id) {
        this.id = id;
    }
}",1
"public class Student {

    // Student's name
    private String name;

    // Student's ID
    private int id;


    // Get student's name
    public String getName() {
        return name;
    }

    // Set student's name
    public void setName(String name) {
        this.name = name;
    }

    // Get student's ID
    public int getId() {
        return id;
    }

    // Set student's ID
    public void setId(int id) {
        this.id = id;
    }
}
",1
"public class Laptop {

    // Brand of the laptop
    private String brand;

    // RAM size in GB
    private int ram;

    // Constructor to initialize laptop
    public Laptop(String brand, int ram) {
        this.brand = brand;
        this.ram = ram;
    }

    // Get the brand of the laptop
    public String getBrand() {
        return brand;
    }

    // Set the brand of the laptop
    public void setBrand(String brand) {
        this.brand = brand;
    }

    // Get the RAM size
    public int getRam() {
        return ram;
    }

    // Set the RAM size
    public void setRam(int ram) {
        this.ram = ram;
    }
}",1
"public class Laptop {

    // Brand of the laptop
    private String brand;

    // RAM size in GB
    private int ram;

    // Constructor to initialize laptop
    public Laptop(String brand, int ram) {
        this.brand = brand;
        this.ram = ram;
    }

    // Get the brand of the laptop
    public String getBrand() {
        return brand;
    }

    // Set the brand of the laptop
    // Set the RAM size
    public void setRam(int ram) {
        this.ram = ram;
    }
}",1
"public class Rectangle {

    // Width of the rectangle
    private double width;


    // Constructor to initialize rectangle
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    // Get the width of the rectangle
    public double getWidth() {
        return width;
    }

    // Set the width of the rectangle
    public void setWidth(double width) {
        this.width = width;
    }

    // Get the height of the rectangle
    public double getHeight() {
        return height;
    }

    // Set the height of the rectangle
    public void setHeight(double height) {
        this.height = height;
    }

}",1
"public class Rectangle {


    // Constructor to initialize rectangle
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    // Get the width of the rectangle
    public double getWidth() {
        return width;
    }

    // Set the width of the rectangle
    public void setWidth(double width) {
        this.width = width;
    }

    // Get the height of the rectangle
    public double getHeight() {
        return height;
    }

    // Set the height of the rectangle
    public void setHeight(double height) {
        this.height = height;
    }

}",1
"public class Car {

    // Make of the car
    private String make;

    // Model of the car
    private String model;

    // Year of the car
    private int year;

    // Constructor to initialize car object
    public Car(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    // Get the make of the car
    public String getMake() {
        return make;
    }

    // Set the make of the car
    public void setMake(String make) {
        this.make = make;
    }

    // Get the model of the car
    public String getModel() {
        return model;
    }

    // Set the model of the car
    public void setModel(String model) {
        this.model = model;
    }

    // Get the year of the car
    public int getYear() {
        return year;
    }

    // Set the year of the car
    public void setYear(int year) {
        this.year = year;
    }
}",1
"public class Car {

    // Make of the car
    private String make;
    private String model;

    // Year of the car
    private int year;

    // Constructor to initialize car object
    public Car(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    // Get the make of the car
    public String getMake() {
        return make;
    }

    // Set the make of the car
    public void setMake(String make) {
        this.make = make;
    }

    // Get the model of the car
    public String getModel() {
        return model;
    }

    // Set the model of the car
    public void setModel(String model) {
        this.model = model;
    }

    // Get the year of the car
    public int getYear() {
        return year;
    }

    // Set the year of the car
    public void setYear(int year) {
        this.year = year;
    }
}
",1
"public class Person {

    // Person's first name
    private String firstName;

    // Person's last name
    private String lastName;

    // Person's age
    private int age;


    // Get the person's first name
    public String getFirstName() {
        return firstName;
    }

    // Set the person's first name
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    // Get the person's last name
    public String getLastName() {
        return lastName;
    }

    // Set the person's last name
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    // Get the person's age
    public int getAge() {
        return age;
    }

    // Set the person's age
    public void setAge(int age) {
        this.age = age;
    }
}",1
"public class Person {

    // Person's first name
    private String firstName;

    // Person's last name
    private String lastName;
    // Get the person's first name
    public String getFirstName() {
        return firstName;
    }

    // Set the person's first name
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    // Get the person's last name
    public String getLastName() {
        return lastName;
    }

    // Set the person's last name
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    // Get the person's age
    public int getAge() {
        return age;
    }

    // Set the person's age
    public void setAge(int age) {
        this.age = age;
    }
}",1
"public class Book {

    // Title of the book
    private String title;

    // Author of the book
    private String author;

    // Number of pages in the book
    private int pages;

    // Constructor to initialize book object
    public Book(String title, String author, int pages) {
        this.title = title;
        this.author = author;
        this.pages = pages;
    }

    // Get the title of the book
    public String getTitle() {
        return title;
    }

    // Set the title of the book
    public void setTitle(String title) {
        this.title = title;
    }

    // Get the author of the book
    public String getAuthor() {
        return author;
    }

    // Set the author of the book
    public void setAuthor(String author) {
        this.author = author;
    }

    // Get the number of pages in the book
    public int getPages() {
        return pages;
    }

    // Set the number of pages in the book
    public void setPages(int pages) {
        this.pages = pages;
    }
}",1
"public class Book {

    // Title of the book
    private String title;

    // Author of the book
    private String author;

    // Number of pages in the book
    private int pages;

    // Constructor to initialize book object
    public Book(String title, String author, int pages) {
        this.title = title;
        this.author = author;
        this.pages = pages;
    }

    // Get the title of the book
    public String getTitle() {
        return title;
    }

    // Set the title of the book
    public void setTitle(String title) {
        this.title = title;
    }

    // Get the author of the book
    public String getAuthor() {
        return author;
    }

    // Set the author of the book
    public void setAuthor(String author) {
        this.author = author;
    }

    // Get the number of pages in the book

}",1
"public class Circle {

    // Radius of the circle
    private double radius;

    // Constructor to initialize circle object
    public Circle(double radius) {
        this.radius = radius;
    }

    // Get the radius of the circle
    public double getRadius() {
        return radius;
    }

    // Set the radius of the circle
    public void setRadius(double radius) {
        this.radius = radius;
    }

    // Calculate the area of the circle
    public double getArea() {
        return Math.PI * radius * radius;
    }

    // Calculate the circumference of the circle
    public double getCircumference() {
        return 2 * Math.PI * radius;
    }
}",1
"public class Circle {


    // Constructor to initialize circle object
    public Circle(double radius) {
        this.radius = radius;
    }

    // Get the radius of the circle
    public double getRadius() {
        return radius;
    }

    // Set the radius of the circle
    public void setRadius(double radius) {
        this.radius = radius;
    }

    // Calculate the area of the circle
    public double getArea() {
        return Math.PI * radius * radius;
    }

    // Calculate the circumference of the circle
    public double getCircumference() {
        return 2 * Math.PI * radius;
    }
}
",1
"public class Library {

    // Name of the library
    private String name;

    // Number of books in the library
    private int bookCount;

    // Constructor to initialize library object
    public Library(String name, int bookCount) {
        this.name = name;
        this.bookCount = bookCount;
    }

    // Get the name of the library
    public String getName() {
        return name;
    }

    // Set the name of the library
    public void setName(String name) {
        this.name = name;
    }

    // Get the number of books in the library
    public int getBookCount() {
        return bookCount;
    }

    public void setBookCount(int bookCount) {
        this.bookCount = bookCount;
    }
}",1
"public class Library {

    // Name of the library
    private String name;


    // Constructor to initialize library object
    public Library(String name, int bookCount) {
        this.name = name;
        this.bookCount = bookCount;
    }

    // Get the name of the library
    public String getName() {
        return name;
    }

    // Set the name of the library
    public void setName(String name) {
        this.name = name;
    }

    // Get the number of books in the library
    public int getBookCount() {
        return bookCount;
    }

    public void setBookCount(int bookCount) {
        this.bookCount = bookCount;
    }
}",1
"public class Square {

    // Side length of the square
    private double side;

    // Constructor to initialize square object
    public Square(double side) {
        this.side = side;
    }

    // Get the side length of the square
    public double getSide() {
        return side;
    }

    // Set the side length of the square
    public void setSide(double side) {
        this.side = side;
    }

    // Calculate the area of the square
    public double getArea() {
        return side * side;
    }

    // Calculate the perimeter of the square
    public double getPerimeter() {
        return 4 * side;
    }
}",1
"public class Square {

    // Side length of the square
    private double side;

    // Constructor to initialize square object
    public Square(double side) {
        this.side = side;
    }

    // Get the side length of the square
    public double getSide() {
        return side;
    }

    // Set the side length of the square
    public void setSide(double side) {
        this.side = side;
    }

    // Calculate the area of the square
    public double getArea() {
        return side * side;
    }

    // Calculate the perimeter of the square
    // Calculate the perimeter of the square
    public double getPerimeter() {
        return 4 * side;
    }
}",1
"public class BusStop {

    // Name of the bus stop
    private String name;

    // Get the name of the bus stop
    public String getName() {
        return name;
    }

    // Set the name of the bus stop
    public void setName(String name) {
        this.name = name;
    }

    // Get the number of buses
    public int getBusCount() {
        return busCount;
    }

    // Set the number of buses
    public void setBusCount(int busCount) {
        this.busCount = busCount;
    }
}",1
"public class BusStop {

    // Get the name of the bus stop
    public String getName() {
        return name;
    }

    // Set the name of the bus stop
    public void setName(String name) {
        this.name = name;
    }

    // Get the number of buses
    public int getBusCount() {
        return busCount;
    }

    // Set the number of buses
    public void setBusCount(int busCount) {
        this.busCount = busCount;
    }
}",1
"public class Employee {

    // Employee name
    private String name;

    // Employee ID
    private int id;

    // Employee department
    private String department;

    // Constructor to initialize the employee
    public Employee(String name, int id, String department) {
        this.name = name;
        this.id = id;
        this.department = department;
    }

    // Get employee name
    public String getName() {
        return name;
    }

    // Set employee name
    public void setName(String name) {
        this.name = name;
    }

    // Get employee ID
    public int getId() {
        return id;
    }

    // Set employee ID
    public void setId(int id) {
        this.id = id;
    }

    // Get department
    public String getDepartment() {
        return department;
    }

    // Set department
    public void setDepartment(String department) {
        this.department = department;
    }
}",1
"public class Employee {

    // Employee name
    private String name;

    // Employee ID
    private int id;

    // Employee department


    // Get employee name
    public String getName() {
        return name;
    }

    // Set employee name
    public void setName(String name) {
        this.name = name;
    }

    // Get employee ID
    public int getId() {
        return id;
    }

    // Set employee ID
    public void setId(int id) {
        this.id = id;
    }

    // Get department
    public String getDepartment() {
        return department;
    }

    // Set department
    public void setDepartment(String department) {
        this.department = department;
    }
}",1
"public class BankAccount {

    // Account number
    private String accountNumber;

    // Account balance
    private double balance;

    // Constructor to initialize bank account
    public BankAccount(String accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    // Deposit money into the account
    public void deposit(double amount) {
        balance += amount;
    }

    // Withdraw money from the account
    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            return true;
        }
        return false;
    }

    // Get the account balance
    public double getBalance() {
        return balance;
    }
}",1
"public class BankAccount {

    // Account number
    private String accountNumber;

    // Account balance
    private double balance;

    // Constructor to initialize bank account
    public BankAccount(String accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    // Deposit money into the account
    public void deposit(double amount) {
        balance += amount;
    }

    // Withdraw money from the account
    public boolean withdraw(double amount) {
        if (amount <= balance) {
            return true;
        }
        return false;
    }

    // Get the account balance
    public double getBalance() {
        return balance;
    }
}",1
"public class House {

    // House address
    private String address;

    // Number of rooms
    private int rooms;

}",1
"public class House {

    // House address
    private String address;
    private int rooms;

}",0
"public class Course {

    // Course title
    private String title;

    // Course credits
    private int credits;

    // Instructor of the course
    private String instructor;


    // Get course title
    public String getTitle() {
        return title;
    }

    // Set course title
    public void setTitle(String title) {
        this.title = title;
    }

    // Get course credits
    public int getCredits() {
        return credits;
    }

    // Set course credits
    public void setCredits(int credits) {
        this.credits = credits;
    }

    // Get course instructor
    public String getInstructor() {
        return instructor;
    }

}",1
"public class Course {

    // Course title
    private String title;

    // Course credits
    private int credits;

    // Instructor of the course
    private String instructor;


    // Get course title
    public String getTitle() {
        return title;
    }

    // Set course title
    public void setTitle(String title) {
        this.title = title;
    }

    // Get course credits
    public int getCredits() {
        return credits;
    }

    // Set course credits
    // Get course instructor
    public String getInstructor() {
        return instructor;
    }

}",1
"public class Bookstore {

    // Name of the bookstore
    private String name;

    // Address of the bookstore
    private String address;

    // Number of books in the store
    private int numBooks;

    // Constructor to initialize bookstore
    public Bookstore(String name, String address, int numBooks) {
        this.name = name;
        this.address = address;
        this.numBooks = numBooks;
    }

}",1
"public class Bookstore {

    // Name of the bookstore
    private String name;

    // Address of the bookstore
    private String address;

    // Constructor to initialize bookstore
    public Bookstore(String name, String address, int numBooks) {
        this.name = name;
        this.address = address;
        this.numBooks = numBooks;
    }

}",1
"public class Game {

    // Title of the game
    private String title;

   
    // Get game title
    public String getTitle() {
        return title;
    }

    // Set game title
    public void setTitle(String title) {
        this.title = title;
    }

    // Get game genre
    public String getGenre() {
        return genre;
    }

    // Set game genre
    public void setGenre(String genre) {
        this.genre = genre;
    }

    // Get release year
    public int getReleaseYear() {
        return releaseYear;
    }

    // Set release year
    public void setReleaseYear(int releaseYear) {
        this.releaseYear = releaseYear;
    }
}",1
"public class Game {
   
    // Get game title
    public String getTitle() {
        return title;
    }

    // Set game title
    public void setTitle(String title) {
        this.title = title;
    }

    // Get game genre
    public String getGenre() {
        return genre;
    }

    // Set game genre
    public void setGenre(String genre) {
        this.genre = genre;
    }

    // Get release year
    public int getReleaseYear() {
        return releaseYear;
    }

    // Set release year
    public void setReleaseYear(int releaseYear) {
        this.releaseYear = releaseYear;
    }
}",1
"public class Calculator {

    // Add two numbers
    public int add(int a, int b) {
        return a + b;
    }

    // Subtract two numbers
    public int subtract(int a, int b) {
        return a - b;
    }

    // Multiply two numbers
    public int multiply(int a, int b) {
        return a * b;
    }

    // Divide two numbers
    public int divide(int a, int b) {
        return a / b;
    }

    // Get the remainder
    public int modulus(int a, int b) {
        return a % b;
    }
}",1
"public class Calculator {

    // Add two numbers
    public int add(int a, int b) {
        return a + b;
    }

    // Subtract two numbers
    public int subtract(int a, int b) {
        return a - b;
    }

    // Multiply two numbers
    // Divide two numbers
    // Get the remainder
    public int modulus(int a, int b) {
        return a % b;
    }
}",1
"public class TV {

    // TV brand
    private String brand;

    // Screen size
    private int size;

    // TV resolution
    private String resolution;

    // Constructor to initialize TV
    public TV(String brand, int size, String resolution) {
        this.brand = brand;
        this.size = size;
        this.resolution = resolution;
    }

    // Get TV brand
    public String getBrand() {
        return brand;
    }

    // Set TV brand
    public void setBrand(String brand) {
        this.brand = brand;
    }

    // Get screen size
    public int getSize() {
        return size;
    }

    // Set screen size
    public void setSize(int size) {
        this.size = size;
    }

    // Get resolution
    public String getResolution() {
        return resolution;
    }

    // Set resolution
    public void setResolution(String resolution) {
        this.resolution = resolution;
    }
}",1
"public class TV {

    // TV brand
    private String brand;


    // Constructor to initialize TV
    public TV(String brand, int size, String resolution) {
        this.brand = brand;

    }

    // Get TV brand
    public String getBrand() {
        return brand;
    }

    // Set TV brand
    public void setBrand(String brand) {
        this.brand = brand;
    }

    // Get screen size
    public int getSize() {
        return size;
    }

    // Set screen size
    public void setSize(int size) {
        this.size = size;
    }

    // Get resolution
    public String getResolution() {
        return resolution;
    }

    // Set resolution
    public void setResolution(String resolution) {
        this.resolution = resolution;
    }
}",1
"public class Smartphone {

    // Smartphone brand
    private String brand;

    // Model of the smartphone
    private String model;

    // Storage capacity in GB
    private int storage;

    // Constructor to initialize smartphone
    public Smartphone(String brand, String model, int storage) {
        this.brand = brand;
    }

    // Get smartphone brand
    public String getBrand() {
        return brand;
    }

    // Set smartphone brand
    public void setBrand(String brand) {
        this.brand = brand;
    }


}",1
"public class Smartphone {

    // Smartphone brand
    private String brand;

    // Model of the smartphone
    private String model;

    // Constructor to initialize smartphone
    public Smartphone(String brand, String model, int storage) {
        this.brand = brand;
    }

    // Get smartphone brand
    public String getBrand() {
        return brand;
    }

    // Set smartphone brand
    public void setBrand(String brand) {
        this.brand = brand;
    }


}",1
"public class Student {

    // Student name
    private String name;

    // Student ID
    private int id;

    // Student grade
    private double grade;

    // Constructor to initialize student
    public Student(String name, int id, double grade) {
        this.name = name;
        this.id = id;
    }

    // Get student name
    public String getName() {
        return name;
    }

    // Set student name
    public void setName(String name) {
        this.name = name;
    }

    // Get student ID
    public int getId() {
        return id;
    }

    // Set student ID
    public void setId(int id) {
        this.id = id;
    }

    // Get student grade
    public double getGrade() {
        return grade;
    }

    // Set student grade
    public void setGrade(double grade) {
        this.grade = grade;
    }
}",1
"public class Student {

    // Student grade
    private double grade;

    // Constructor to initialize student
    public Student(String name, int id, double grade) {
        this.name = name;
        this.id = id;
    }

    // Get student name
    public String getName() {
        return name;
    }

    // Set student name
    public void setName(String name) {
        this.name = name;
    }

    // Get student ID
    public int getId() {
        return id;
    }

    // Set student ID
    public void setId(int id) {
        this.id = id;
    }

    // Get student grade
    public double getGrade() {
        return grade;
    }

    // Set student grade
    public void setGrade(double grade) {
        this.grade = grade;
    }
}",1
"public class Example1 {
    // This class demonstrates a simple calculation
    private int a;  // First number
    private int b;  // Second number

    /* Constructor */
    public Example1(int a, int b) {
        this.a = a;
        this.b = b;
    }

    // Adds two numbers
    public int add() {
        return a + b; // Returns sum
    }
}",1
"public class Example2 {
    // This class contains a string manipulation example
    private String message;  // The message to process

    /* Constructor to initialize the message */
    public Example2(String message) {
        this.message = message;
    }

    // Returns the message in uppercase
    public String toUpperCase() {
        return message.toUpperCase();  // Convert to upper case
    }

    // Returns the length of the message
    public int length() {
        return message.length();  // Get string length
    }
}",1
"public class Example3 {
    // A basic class with a multiplication method

    /* Method to multiply two numbers */
    public int multiply(int a, int b) {
        return a * b;  // Return the product
    }
}",1
"public class Example4 {
    // This class demonstrates a simple loop
    private int n;  // Number of iterations

    /* Constructor */
    public Example4(int n) {
        this.n = n;
    }

    // Print numbers from 1 to n
    public void printNumbers() {
        for (int i = 1; i <= n; i++) {
            System.out.println(i);  // Print each number
        }
    }
}",1
"public class Example5 {
    // A class to hold person details
    private String name;  // Person's name
    private int age;      // Person's age

    /* Constructor */
    public Example5(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Returns the person's name
    public String getName() {
        return name;  // Return name
    }

    // Returns the person's age
    public int getAge() {
        return age;  // Return age
    }
}
",1
"public class Example6 {
    // Demonstrating an array sum
    private int[] numbers;  // Array of numbers

    /* Constructor */
    public Example6(int[] numbers) {
        this.numbers = numbers;
    }

    // Sum all the numbers in the array
    public int sum() {
        int sum = 0;  // Initialize sum
        for (int number : numbers) {
            sum += number;  // Add each number to sum
        }
        return sum;  // Return total sum
    }
}",0
"public class Example7 {
    // This class reverses a string
    private String text;  // Text to reverse

    /* Constructor */
    public Example7(String text) {
        this.text = text;
    }

    // Reverse the string
    public String reverse() {
        return new StringBuilder(text).reverse().toString();  // Reverse text
    }
}",1
"public class Example8 {
    // Basic bank account class
    private double balance;  // Account balance

    /* Constructor */
    public Example8(double initialBalance) {
        this.balance = initialBalance;
    }

    // Deposit money into the account
    public void deposit(double amount) {
        balance += amount;  // Add to balance
    }

    // Withdraw money from the account
    public void withdraw(double amount) {
        balance -= amount;  // Subtract from balance
    }

    // Return the current balance
    public double getBalance() {
        return balance;  // Return balance
    }
}",1
"public class Example9 {
    // A simple counter class
    private int count;  // Counter value

    /* Constructor */
    public Example9() {
        this.count = 0;
    }

    // Increment the counter
    public void increment() {
        count++;  // Increase count by 1
    }

    // Get the current counter value
    public int getCount() {
        return count;  // Return counter value
    }
}",1
"public class Example10 {
    // This class checks if a number is even
    private int number;  // Number to check

    /* Constructor */
    public Example10(int number) {
        this.number = number;
    }

    // Check if the number is even
    public boolean isEven() {
        return number % 2 == 0;  // Return true if even
    }
}",1
"public class Example11 {
    // Class to demonstrate factorial calculation
    private int number;  // The number to calculate factorial

    /* Constructor to initialize the number */
    public Example11(int number) {
        this.number = number;
    }

    // Method to calculate factorial
    // Method to calculate factorial
    public int factorial() {
        int result = 1;
        for (int i = 1; i <= number; i++) {
            result *= i;  // Multiply each number
        }
        return result;  // Return the factorial result
    }
}",1
"public class Example12 {
    // Class to calculate the area of a circle
    private double radius;  // Circle radius

    /* Constructor to initialize the radius */
    public Example12(double radius) {
        this.radius = radius;
    }

    // Method to calculate area
    public double calculateArea() {
        return Math.PI * radius * radius;  // Formula for area of a circle
    }
}",1
"public class Example13 {
    // Class to hold a 2D point
    private int x;  // X-coordinate
    private int y;  // Y-coordinate

    /* Constructor to initialize coordinates */
    public Example13(int x, int y) {
        this.x = x;
        this.y = y;
    }

    // Method to display the point
    public void display() {
        System.out.println(""("" + x + "", "" + y + "")"");  // Print the coordinates
    }
}",1
"public class Example14 {
    // Class to calculate the sum of digits of a number
    private int number;  // The number to sum digits from

    /* Constructor */
    public Example14(int number) {
        this.number = number;
    }

    // Method to sum digits
    public int sumDigits() {
        int sum = 0;
        while (number > 0) {
            sum += number % 10;  // Add the last digit to sum
            number /= 10;  // Remove the last digit
        }
        return sum;  // Return the sum of digits
    }
}",0
"public class Example15 {
    // Class to calculate the maximum of three numbers
    private int a, b, c;  // Three numbers

    /* Constructor */
    public Example15(int a, int b, int c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }

    // Method to find maximum
    public int max() {
        return Math.max(a, Math.max(b, c));  // Return the largest number
    }
}",1
"public class Example16 {
    // Class to check if a number is prime
    private int number;  // The number to check

    /* Constructor */
    public Example16(int number) {
        this.number = number;
    }

    // Method to check if prime
    // Method to check if prime
    public boolean isPrime() {
        if (number <= 1) return false;
        for (int i = 2; i < number; i++) {
            if (number % i == 0) return false;  // Not prime if divisible
        }
        return true;  // Return true if prime
    }
}",1
"public class Example17 {
    // Class to swap two numbers
    private int x;  // First number
    private int y;  // Second number

    /* Constructor */
    public Example17(int x, int y) {
        this.x = x;
        this.y = y;
    }

    // Method to swap numbers
    public void swap() {
        int temp = x;  // Use a temporary variable for swapping
        x = y;
        y = temp;
    }

    // Method to display numbers
    public void display() {
        System.out.println(""x: "" + x + "", y: "" + y);  // Print x and y
    }
}",0
"public class Example18 {
    // Class to demonstrate temperature conversion
    private double celsius;  // Temperature in Celsius

    /* Constructor */
    public Example18(double celsius) {
        this.celsius = celsius;
    }

    // Method to convert to Fahrenheit
    public double toFahrenheit() {
        return (celsius * 9 / 5) + 32;  // Formula for Celsius to Fahrenheit
    }
}",1
"public class Example19 {
    // Class to generate a random number between a range
    private int min;  // Minimum range
    private int max;  // Maximum range

    /* Constructor */
    public Example19(int min, int max) {
        this.min = min;
        this.max = max;
    }

    // Method to generate random number
    public int getRandomNumber() {
        return (int)(Math.random() * (max - min + 1) + min);  // Return random number
    }
}",1
"public class Example20 {
    // Class to reverse an array
    private int[] arr;  // Array to reverse

    /* Constructor */
    public Example20(int[] arr) {
        this.arr = arr;
    }

    // Method to reverse the array
    public void reverseArray() {
        for (int i = 0; i < arr.length / 2; i++) {
            int temp = arr[i];  // Temporary swap variable
            arr[i] = arr[arr.length - i - 1];
            arr[arr.length - i - 1] = temp;
        }
    }

    // Method to display array
    public void display() {
        for (int num : arr) {
            System.out.print(num + "" "");  // Print each element
        }
        System.out.println();
    }
}",0
"public class Example21 {
    // Class to find the minimum number in an array
    private int[] arr;  // Array of numbers

    /* Constructor */
    public Example21(int[] arr) {
        this.arr = arr;
    }

    // Method to find the minimum number
    public int findMin() {
        int min = arr[0];
        for (int num : arr) {
            if (num < min) {
                min = num;  // Update minimum
            }
        }
        return min;  // Return minimum value
    }
}",0
"public class Example22 {
    // Class to calculate the power of a number
    private int base;   // Base number
    private int exponent;  // Exponent

    /* Constructor */
    public Example22(int base, int exponent) {
        this.base = base;
        this.exponent = exponent;
    }

    // Method to calculate power
    public int calculatePower() {
        int result = 1;
        for (int i = 0; i < exponent; i++) {
            result *= base;  // Multiply base for each iteration
        }
        return result;  // Return result of base^exponent
    }
}",0
"public class Example23 {
    // Class to demonstrate string concatenation
    private String firstName;  // First name
    private String lastName;   // Last name

    /* Constructor */
    public Example23(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    // Method to concatenate first and last names
    public String getFullName() {
        return firstName + "" "" + lastName;  // Concatenate with a space
    }
}",1
"public class Example24 {
    // Class to find the greatest common divisor (GCD)
    private int a;  // First number
    private int b;  // Second number

    /* Constructor */
    public Example24(int a, int b) {
        this.a = a;
        this.b = b;
    }

    // Method to calculate GCD
    public int gcd() {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;  // Use the Euclidean algorithm
        }
        return a;  // Return the GCD
    }
}",0
"public class ABC {
    // Class to demonstrate the use of switch-case
    private int day;  // Day number

    /* Constructor */
    public ABC(int day) {
        this.day = day;
    }

    // Method to get day of the week
    public String getDayOfWeek() {
        switch (day) {
            case 1: return ""Sunday"";
            case 2: return ""Monday"";
            case 3: return ""Tuesday"";
            case 4: return ""Wednesday"";
            case 5: return ""Thursday"";
            case 6: return ""Friday"";
            case 7: return ""Saturday"";
            default: return ""Invalid day"";
        }
    }
}",0
"public class Example26 {
    // Class to convert kilometers to miles
    private double kilometers;  // Distance in kilometers

    /* Constructor */
    public Example26(double kilometers) {
        this.kilometers = kilometers;
    }

    // Method to convert kilometers to miles
    public double toMiles() {
        return kilometers * 0.621371;  // Conversion factor
    }
}",1
"public class Example27 {
    // Class to demonstrate string reversal
    private String input;  // Input string

    /* Constructor */
    public Example27(String input) {
        this.input = input;
    }

    // Method to reverse the string
    public String reverseString() {
        return new StringBuilder(input).reverse().toString();  // Reverse string
    }
}",1
"public class Example28 {
    // Class to count vowels in a string
    private String text;  // Input text

    /* Constructor */
    public Example28(String text) {
        this.text = text;
    }

    // Method to count vowels
    public int countVowels() {
        int count = 0;
        for (char ch : text.toCharArray()) {
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||
                ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {
                count++;  // Increment for vowels
            }
        }
        return count;  // Return vowel count
    }
}",0
"public class Example29 {
    // Class to demonstrate palindrome check
    private String text;  // Input text

    /* Constructor */
    public Example29(String text) {
        this.text = text;
    }

    // Method to check if the string is a palindrome
    public boolean isPalindrome() {
        String reversed = new StringBuilder(text).reverse().toString();
        return text.equals(reversed);  // Return true if palindrome
    }
}",1
"public class Example30 {
    // Class to demonstrate linear search in an array
    private int[] arr;  // Array of numbers

    /* Constructor */
    public Example30(int[] arr) {
        this.arr = arr;
    }

    // Method to search for a number
    // Method to search for a number
    public boolean search(int target) {
        for (int num : arr) {
            if (num == target) {
                return true;  // Return true if found
            }
        }
        return false;  // Return false if not found
    }
}
",1
"public class Example31 {
    // Class to calculate square of a number
    private int number;  // The number to be squared

    /* Constructor */
    public Example31(int number) {
        this.number = number;
    }

    // Method to calculate square
    public int calculateSquare() {
        return number * number;  // Multiply number by itself
    }
}",1
"public class Example32 {
    // Class to represent a Rectangle
    private int length;  // Length of the rectangle
    private int width;   // Width of the rectangle

    /* Constructor */
    public Example32(int length, int width) {
        this.length = length;
        this.width = width;
    }

    // Method to calculate area
    public int calculateArea() {
        return length * width;  // Formula for area of a rectangle
    }
}",1
"public class Example33 {
    // Class to demonstrate reversing an integer
    private int number;  // The number to be reversed

    /* Constructor */
    public Example33(int number) {
        this.number = number;
    }

    // Method to reverse the number
    public int reverseNumber() {
        int reversed = 0;
        while (number != 0) {
            int digit = number % 10;
            reversed = reversed * 10 + digit;  // Append the digit to reversed
            number /= 10;
        }
        return reversed;  // Return the reversed number
    }
}",0
"public class Example34 {
    // Class to check if a number is even
    private int number;  // The number to check

    /* Constructor */
    public Example34(int number) {
        this.number = number;
    }

    // Method to check if the number is even
    public boolean isEven() {
        return number % 2 == 0;  // True if the number is divisible by 2
    }
}",1
"public class Example35 {
    // Class to calculate compound interest
    private double principal;  // Principal amount
    private double rate;       // Rate of interest
  
    /* Constructor */
    public Example35(double principal, double rate, int time) {
        this.principal = principal;
        this.rate = rate;
        this.time = time;
    }

    // Method to calculate compound interest
    public double calculateInterest() {
        return principal * Math.pow((1 + rate / 100), time);  // Compound interest formula
    }
}",0
"public class Example36 {
    // Class to calculate factorial recursively
    private int number;  // The number to calculate factorial for

    /* Constructor */
    public Example36(int number) {
        this.number = number;
    }

    // Recursive method to calculate factorial
    public int factorial(int n) {
        if (n <= 1) return 1;  // Base case
        return n * factorial(n - 1);  // Recursive call
    }
}",1
"public class Example37 {
    // Class to find the maximum number in an array
    private int[] arr;  // Array of numbers

    /* Constructor */
    public Example37(int[] arr) {
        this.arr = arr;
    }

    // Method to find maximum
    public int findMax() {
        int max = arr[0];
        for (int num : arr) {
            if (num > max) {
                max = num;  // Update max if a larger number is found
            }
        }
        return max;  // Return the maximum number
    }
}",0
"public class Example38 {
    // Class to simulate rolling a die
    private int sides;  // Number of sides on the die

    /* Constructor */
    public Example38(int sides) {
        this.sides = sides;
    }

    // Method to roll the die and return a random number
    public int roll() {
        return (int)(Math.random() * sides) + 1;  // Return random number between 1 and sides
    }
}",1
"public class ABC{
    // Class to check if a string is a valid email
    private String email;  // The email string

    /* Constructor */
    public ABC(String email) {
        this.email = email;
    }

    // Method to check if the email is valid
    public boolean isValidEmail() {
        return email.contains(""@"") && email.contains(""."");  // Check for '@' and '.'
    }
}
",1
"public class Example40 {
    // Class to calculate sum of elements in an array
    private int[] arr;  // Array of numbers

    /* Constructor */
    public Example40(int[] arr) {
        this.arr = arr;
    }

    // Method to calculate sum
    public int calculateSum() {
        int sum = 0;
        for (int num : arr) {
            sum += num;  // Add each number to sum
        }
        return sum;  // Return the sum
    }
}",0
"public class Example40 {
    // Class to calculate sum of elements in an array

    /* Constructor */
    public Example40(int[] arr) {
        this.arr = arr;
    }

    // Method to calculate sum
    public int calculateSum() {
        int sum = 0;
        for (int num : arr) {
            sum += num;  // Add each number to sum
        }
        return sum;  // Return the sum
    }
}
",1
"public class Example41 {
    // Class to check if a number is odd
    private int number;  // The number to check

    /* Constructor */
    public Example41(int number) {
        this.number = number;
    }

    // Method to check if the number is odd
    public boolean isOdd() {
        return number % 2 != 0;  // True if the number is not divisible by 2
    }
}",1
"public class Example42 {
    // Class to demonstrate simple multiplication
    private int a;  // First number
    private int b;  // Second number

    /* Constructor */
    public Example42(int a, int b) {
        this.a = a;
        this.b = b;
    }

    // Method to multiply the two numbers
    public int multiply() {
        return a * b;  // Multiply a and b
    }
}",1
"public class Example43 {
    // Class to convert Celsius to Kelvin
    private double celsius;  // Temperature in Celsius

    /* Constructor */
    public Example43(double celsius) {
        this.celsius = celsius;
    }

    // Method to convert to Kelvin
    public double toKelvin() {
        return celsius + 273.15;  // Formula for Celsius to Kelvin
    }
}",1
"public class Example43 {
    // Class to convert Celsius to Kelvin

    /* Constructor */
    public Example43(double celsius) {
        this.celsius = celsius;
    }

    // Method to convert to Kelvin
    public double toKelvin() {
        return celsius + 273.15;  // Formula for Celsius to Kelvin
    }
}",1
"public class Example44 {
    // Class to reverse a string recursively
    private String text;  // Input string

    /* Constructor */
    public Example44(String text) {
        this.text = text;
    }

    // Recursive method to reverse the string
    public String reverse(String s) {
        if (s.isEmpty()) return s;  // Base case
        return reverse(s.substring(1)) + s.charAt(0);  // Recursive call
    }
}",1
"public class Example45 {
    // Class to check if a year is a leap year
    private int year;  // The year to check

    /* Constructor */
    public Example45(int year) {
        this.year = year;
    }

    // Method to check if the year is a leap year
    public boolean isLeapYear() {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);  // Leap year condition
    }
}",1
"public class Example46 {
    // Class to calculate perimeter of a rectangle
    private int length;  // Length of the rectangle
    private int width;   // Width of the rectangle

    /* Constructor */
    public Example46(int length, int width) {
        this.length = length;
        this.width = width;
    }

    // Method to calculate perimeter
    public int calculatePerimeter() {
        return 2 * (length + width);  // Formula for perimeter of a rectangle
    }
}",1
"public class Example47 {
    // Class to generate Fibonacci sequence up to n numbers
    private int n;  // Number of Fibonacci numbers to generate

    /* Constructor */
    public Example47(int n) {
        this.n = n;
    }

    // Method to generate Fibonacci sequence
    public void generateFibonacci() {
        int a = 0, b = 1;
        for (int i = 0; i < n; i++) {
            System.out.print(a + "" "");  // Print current Fibonacci number
            int next = a + b;
            a = b;
            b = next;  // Move to the next number
        }
    }
}",0
"public class Example48 {
    // Class to demonstrate finding the median of an array
    private int[] arr;  // Array of numbers

    /* Constructor */
    public Example48(int[] arr) {
        this.arr = arr;
    }

    // Method to find median
    public double findMedian() {
        Arrays.sort(arr);  // Sort the array
        int n = arr.length;
        if (n % 2 == 0) {
            return (arr[n / 2 - 1] + arr[n / 2]) / 2.0;  // Return average of middle two
        } else {
            return arr[n / 2];  // Return middle element
        }
    }
}",0
"public class Example49 {
    // Class to check if a number is prime
    private int number;  // The number to check

    /* Constructor */
    public Example49(int number) {
        this.number = number;
    }

    // Method to check if the number is prime
    public boolean isPrime() {
        if (number <= 1) return false;  // Negative numbers and 0/1 are not prime
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) return false;  // Number is divisible by another number
        }
        return true;  // Number is prime
    }
}",0
"public class Example49 {
    // Class to check if a number is prime

    /* Constructor */
    public Example49(int number) {
        this.number = number;
    }

    // Method to check if the number is prime
    public boolean isPrime() {
        if (number <= 1) return false;  // Negative numbers and 0/1 are not prime
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) return false;  // Number is divisible by another number
        }
        return true;  // Number is prime
    }
}",0
"public class Example50 {
    // Class to check if a number is a perfect square
    private int number;  // The number to check

    /* Constructor */
    public Example50(int number) {
        this.number = number;
    }

    // Method to check if the number is a perfect square
    public boolean isPerfectSquare() {
        int sqrt = (int)Math.sqrt(number);  // Find the square root
        return sqrt * sqrt == number;  // Return true if square of sqrt equals the number
    }
}",1
"public class TemperatureConverter {
    // Class to convert temperatures between Celsius and Fahrenheit
    private double celsius;  // Temperature in Celsius

    /* Constructor */
    public TemperatureConverter(double celsius) {
        this.celsius = celsius;
    }

    // Method to convert Celsius to Fahrenheit
    public double toFahrenheit() {
        return (celsius * 9/5) + 32;  // Conversion formula
    }
}",1
"public class CircleArea {
    // Class to calculate the area of a circle
    private double radius;  // Radius of the circle

    /* Constructor */
    public CircleArea(double radius) {
        this.radius = radius;
    }

    // Method to calculate area
    public double calculateArea() {
        return Math.PI * radius * radius;  // Area formula
    }
}
",1
"public class StringManipulator {
    // Class to manipulate strings
    private String text;  // Input string

    /* Constructor */
    public StringManipulator(String text) {
        this.text = text;
    }

    public String toUpperCase() {
        return text.toUpperCase();  // Convert to uppercase
    }
}",0
"public class PrimeChecker {
    // Class to check if a number is prime
    private int number;  // The number to check

    /* Constructor */
    public PrimeChecker(int number) {
        this.number = number;
    }

    // Method to check for primality
    public boolean isPrime() {
        if (number <= 1) return false;  // Not prime if less than or equal to 1
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) return false;  // Divisible by i, not prime
        }
        return true;  // Number is prime
    }
}",0
"public class PrimeChecker {
    // Class to check if a number is prime
    private int number;  // The number to check

    /* Constructor */
    public PrimeChecker(int number) {
        this.number = number;
    }

    // Method to check for primality
    public boolean isPrime() {
      
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) return false;  // Divisible by i, not prime
        }
        return true;  // Number is prime
    }
}",0
"public class PrimeChecker {
    // Class to check if a number is prime

    /* Constructor */
    public PrimeChecker(int number) {
        this.number = number;
    }

    // Method to check for primality
    public boolean isPrime() {
      
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) return false;  // Divisible by i, not prime
        }
        return true;  // Number is prime
    }
}",1
"public class PalindromeChecker {
    // Class to check if a string is a palindrome
    private String text;  // Input string

    /* Constructor */
    public PalindromeChecker(String text) {
        this.text = text;
    }

    // Method to check for palindrome
    public boolean isPalindrome() {
        String reversed = new StringBuilder(text).reverse().toString();
        return text.equals(reversed);  // Check if original equals reversed
    }
}
",1
"public class FactorialCalculator {
    // Class to calculate factorial of a number
    private int number;  // The number to calculate factorial for

    /* Constructor */
    public FactorialCalculator(int number) {
        this.number = number;
    }

    // Recursive method to calculate factorial
    public int factorial(int n) {
        if (n <= 1) return 1;  // Base case for recursion
        return n * factorial(n - 1);  // Recursive call
    }
}
",1
"public class FibonacciGenerator {
    // Class to generate Fibonacci numbers
    private int count;  // Number of Fibonacci numbers to generate

    /* Constructor */
    public FibonacciGenerator(int count) {
        this.count = count;
    }

    // Method to generate Fibonacci sequence
    public void generateFibonacci() {
        int a = 0, b = 1;
        for (int i = 0; i < count; i++) {
            System.out.print(a + "" "");  // Print current Fibonacci number
            int next = a + b;
            a = b;
            b = next;  // Move to next number
        }
    }
}",0
"public class SumCalculator {
    // Class to calculate the sum of an array
    private int[] numbers;  // Array of integers

    /* Constructor */
    public SumCalculator(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to calculate the sum
    public int calculateSum() {
        for (int num : numbers) {
            sum += num;  // Add each number to sum
        }
        return sum;  // Return the total sum
    }
}",0
"public class SumCalculator {
    // Class to calculate the sum of an array

    /* Constructor */
    public SumCalculator(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to calculate the sum
    public int calculateSum() {
        for (int num : numbers) {
            sum += num;  // Add each number to sum
        }
        return sum;  // Return the total sum
    }
}",1
"public class RectanglePerimeter {
    // Class to calculate the perimeter of a rectangle
    private int length;  // Length of the rectangle
    private int width;   // Width of the rectangle

    /* Constructor */
    public RectanglePerimeter(int length, int width) {
        this.length = length;
        this.width = width;
    }

    // Method to calculate perimeter
    public int calculatePerimeter() {
        return 2 * (length + width);  // Perimeter formula
    }
}",1
"public class LeapYearChecker {
    // Class to check if a year is a leap year
    private int year;  // The year to check

    /* Constructor */
    public LeapYearChecker(int year) {
        this.year = year;
    }

    // Method to check for leap year
    public boolean isLeapYear() {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);  // Leap year condition
    }
}",1
"public class NumberReverser {
    // Class to reverse a number
    private int number;  // The number to reverse

    /* Constructor */
    public NumberReverser(int number) {
        this.number = number;
    }

    // Method to reverse the number
    public int reverse() {
        int reversed = 0;
        while (number != 0) {
            int digit = number % 10;
            reversed = reversed * 10 + digit;  // Append digit to reversed
            number /= 10;  // Remove last digit
        }
        return reversed;  // Return the reversed number
    }
}",0
"public class GCD {
    // Class to find the Greatest Common Divisor (GCD)
    private int a;  // First number
    private int b;  // Second number

    /* Constructor */
    public GCD(int a, int b) {
        this.a = a;
        this.b = b;
    }

    // Method to calculate GCD using Euclidean algorithm
    public int calculateGCD() {
        while (b != 0) {
            int temp = b;
            b = a % b;  // Remainder
            a = temp;  // Update a
        }
        return a;  // Return GCD
    }
}",0
"public class OddEvenChecker {
    // Class to check if a number is odd or even
    private int number;  // The number to check

    /* Constructor */
    public OddEvenChecker(int number) {
        this.number = number;
    }

    // Method to check if the number is even
    public boolean isEven() {
        return number % 2 == 0;  // Return true if even
    }
}",1
"public class AverageCalculator {
    // Class to calculate the average of an array
    private int[] numbers;  // Array of integers

    /* Constructor */
    public AverageCalculator(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to calculate the average
    public double calculateAverage() {
        int sum = 0;
        for (int num : numbers) {
            sum += num;  // Add each number to sum
        }
        return (double) sum / numbers.length;  // Return average
    }
}",0
"public class AverageCalculator {
    // Class to calculate the average of an array

    /* Constructor */
    public AverageCalculator(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to calculate the average
    public double calculateAverage() {
        int sum = 0;
        for (int num : numbers) {
            sum += num;  // Add each number to sum
        }
        return (double) sum / numbers.length;  // Return average
    }
}",0
"public class AverageCalculator {
    // Class to calculate the average of an array

    /* Constructor */
    public AverageCalculator(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to calculate the average
    public double calculateAverage() {
        for (int num : numbers) {
            sum += num;  // Add each number to sum
        }
        return (double) sum / numbers.length;  // Return average
    }
}",1
"public class StringLength {
    // Class to find the length of a string
    private String text;  // Input string

    /* Constructor */
    public StringLength(String text) {
        this.text = text;
    }

    // Method to return the length of the string
    public int getLength() {
        return text.length();  // Return string length
    }
}",1
"public class ArraySorter {
    // Class to sort an array of integers
    private int[] numbers;  // Array of integers

    /* Constructor */
    public ArraySorter(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to sort the array
    public void sort() {
        Arrays.sort(numbers);  // Sort the array
    }
}",1
"public class MaxFinder {
    // Class to find the maximum number in an array
    private int[] numbers;  // Array of integers

    /* Constructor */
    public MaxFinder(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to find maximum
    public int findMax() {
        int max = numbers[0];  // Assume first number is max
        for (int num : numbers) {
            if (num > max) {
                max = num;  // Update max if larger number found
            }
        }
        return max;  // Return the maximum number
    }
}",0
"public class MaxFinder {
    // Class to find the maximum number in an array
    private int[] numbers;  // Array of integers

    /* Constructor */
    public MaxFinder(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to find maximum
    public int findMax() {
        int max = numbers[0];  // Assume first number is max
        return max;  // Return the maximum number
    }
}",1
"public class EvenNumbersPrinter {
    // Class to print even numbers up to a limit
    private int limit;  // Limit up to which to print

    /* Constructor */
    public EvenNumbersPrinter(int limit) {
        this.limit = limit;
    }

    // Method to print even numbers
    public void printEvens() {
        for (int i = 0; i <= limit; i += 2) {
            System.out.print(i + "" "");  // Print even number
        }
    }
}",1
"import java.util.Random;

public class RandomNumberGenerator {
    // Class to generate random numbers
    private Random random;  // Random number generator

    /* Constructor */
    public RandomNumberGenerator() {
        this.random = new Random();  // Initialize random generator
    }

    // Method to generate a random number between min and max
    public int generateRandom(int min, int max) {
        return random.nextInt(max - min + 1) + min;  // Generate random number
    }
}",1
"public class WordCounter {
    // Class to count words in a string
    private String text;  // Input string

    /* Constructor */
    public WordCounter(String text) {
        this.text = text;
    }

    // Method to count words
    public int countWords() {
        String[] words = text.trim().split(""\\s+"");  // Split text into words
        return words.length;  // Return word count
    }
}",1
"public class AgeValidator {
    // Class to validate age
    private int age;  // Age to validate

    /* Constructor */
    public AgeValidator(int age) {
        this.age = age;
    }

    // Method to check if age is valid
    public boolean isValid() {
        return age >= 0;  // Age should be non-negative
    }
}",1
"public class DistanceCalculator {
    // Class to calculate the distance between two points
    private double x1, y1, x2, y2;  // Coordinates of the points

    /* Constructor */
    public DistanceCalculator(double x1, double y1, double x2, double y2) {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
    }

    // Method to calculate distance
    public double calculateDistance() {
        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));  // Distance formula
    }
}",0
"public class CountVowels {
    // Class to count vowels in a string
    private String text;  // Input string

    /* Constructor */
    public CountVowels(String text) {
        this.text = text;
    }

    // Method to count vowels
    public int count() {
        int count = 0;
        for (char c : text.toLowerCase().toCharArray()) {
            if (""aeiou"".indexOf(c) != -1) {
                count++;  // Increment count for each vowel
            }
        }
        return count;  // Return total vowel count
    }
}",0
"public class CharacterCounter {
    // Class to count characters in a string
    private String text;  // Input string

    /* Constructor */
    public CharacterCounter(String text) {
        this.text = text;
    }

    // Method to count characters
    public int countCharacters() {
        return text.length();  // Return character count
    }
}",1
"public class SquareCalculator {
    // Class to calculate the square of a number
    private int number;  // Number to square

    /* Constructor */
    public SquareCalculator(int number) {
        this.number = number;
    }

    // Method to calculate square
    public int calculateSquare() {
        return number * number;  // Return square of the number
    }
}",1
"public class BinaryConverter {
    // Class to convert decimal to binary
    private int decimal;  // Decimal number to convert

    /* Constructor */
    public BinaryConverter(int decimal) {
        this.decimal = decimal;
    }

    // Method to convert to binary
    public String toBinary() {
        return Integer.toBinaryString(decimal);  // Return binary representation
    }
}",1
"public class SimpleCalculator {
    // Class to perform basic arithmetic operations
    private double num1, num2;  // Two numbers

    /* Constructor */
    public SimpleCalculator(double num1, double num2) {
        this.num1 = num1;
        this.num2 = num2;
    }

    // Method to add numbers
    public double add() {
        return num1 + num2;  // Return sum
    }
}",1
"public class AverageFinder {
    // Class to find the average of numbers
    private double[] numbers;  // Array of numbers

    /* Constructor */
    public AverageFinder(double[] numbers) {
        this.numbers = numbers;
    }

    // Method to find the average
    public double findAverage() {
        double sum = 0;
        for (double num : numbers) {
            sum += num;  // Add to sum
        }
        return sum / numbers.length;  // Return average
    }
}
",0
"public class AverageFinder {
    // Class to find the average of numbers
    private double[] numbers;  // Array of numbers

    /* Constructor */
    public AverageFinder(double[] numbers) {
        this.numbers = numbers;
    }

    // Method to find the average
    public double findAverage() {
        double sum = 0;
        return sum / numbers.length;  // Return average
    }
}",1
"public class StringReverser {
    // Class to reverse a string
    private String text;  // Input string

    /* Constructor */
    public StringReverser(String text) {
        this.text = text;
    }

    // Method to reverse the string
    public String reverse() {
        return new StringBuilder(text).reverse().toString();  // Return reversed string
    }
}",1
"public class StringReverser {
    // Class to reverse a string
    private String text;  // Input string

    /* Constructor */
    public StringReverser(String text) {
        this.text = text;
    }

    // Method to reverse the string
    // Method to reverse the string
    // Method to reverse the string
    public String reverse() {
        return new StringBuilder(text).reverse().toString();  // Return reversed string
    }
}",1
"public class StringReverser {
    // Class to reverse a string
    private String text;  // Input string

    /* Constructor */
    public StringReverser(String text) {
        this.text = text;
    }

    // Method to reverse the string

    // Method to reverse the string
    public String reverse() {
        return new StringBuilder(text).reverse().toString();  // Return reversed string
    }
}
",1
"public class AverageTemperature {
    // Class to calculate the average temperature
    private double[] temperatures;  // Array of temperatures

    /* Constructor */
    public AverageTemperature(double[] temperatures) {
        this.temperatures = temperatures;
    }

    // Method to calculate average temperature
    public double calculateAverage() {
        double sum = 0;
        for (double temp : temperatures) {
            sum += temp;  // Add to sum
        }
        return sum / temperatures.length;  // Return average
    }
}",1
"public class AverageTemperature {
    // Class to calculate the average temperature
    private double[] temperatures;  // Array of temperatures

    /* Constructor */
    public AverageTemperature(double[] temperatures) {
        this.temperatures = temperatures;
    }

    // Method to calculate average temperature
    public double calculateAverage() {
        double sum = 0;
        return sum / temperatures.length;  // Return average
    }
}",1
"public class PowerCalculator {
    // Class to calculate the power of a number
    private double base;  // Base number
    private int exponent;  // Exponent

    /* Constructor */
    public PowerCalculator(double base, int exponent) {
        this.base = base;
        this.exponent = exponent;
    }

    // Method to calculate power
    public double calculatePower() {
        return Math.pow(base, exponent);  // Return base raised to exponent
    }
}",1
"public class VowelRemover {
    // Class to remove vowels from a string
    private String text;  // Input string

    /* Constructor */
    public VowelRemover(String text) {
        this.text = text;
    }

    // Method to remove vowels
    public String removeVowels() {
        return text.replaceAll(""[aeiouAEIOU]"", """");  // Remove all vowels
    }
}",1
"public class DigitCounter {
    // Class to count the number of digits in a number
    private int number;  // The number to count digits of

    /* Constructor */
    public DigitCounter(int number) {
        this.number = number;
    }

    // Method to count digits
    public int countDigits() {
        return String.valueOf(Math.abs(number)).length();  // Return number of digits
    }
}",1
"import java.util.HashSet;

public class CommonElementsFinder {
    // Class to find common elements in two arrays
    private int[] array1;  // First array
    private int[] array2;  // Second array

    /* Constructor */
    public CommonElementsFinder(int[] array1, int[] array2) {
        this.array1 = array1;
        this.array2 = array2;
    }

    // Method to find common elements
    public HashSet<Integer> findCommonElements() {
        HashSet<Integer> commonElements = new HashSet<>();  // Set to store common elements
        for (int num : array1) {
            for (int num2 : array2) {
                if (num == num2) {
                    commonElements.add(num);  // Add if found in both arrays
                }
            }
        }
        return commonElements;  // Return set of common elements
    }
}
",0
"public class DecimalToHexadecimalConverter {
    // Class to convert decimal numbers to hexadecimal
    private int decimal;  // Decimal number to convert

    /* Constructor */
    public DecimalToHexadecimalConverter(int decimal) {
        this.decimal = decimal;
    }

    // Method to convert to hexadecimal
    public String toHexadecimal() {
        return Integer.toHexString(decimal).toUpperCase();  // Return hexadecimal representation
    }
}
",1
"public class FibonacciChecker {
    // Class to check if a number is in the Fibonacci sequence
    private int number;  // Number to check

    /* Constructor */
    public FibonacciChecker(int number) {
        this.number = number;
    }

    // Method to check for Fibonacci
    public boolean isFibonacci() {
        int a = 0, b = 1;
        while (b < number) {
            int temp = b;
            b = a + b;  // Next Fibonacci number
            a = temp;
        }
        return b == number;  // Return true if number is in sequence
    }
}",0
"public class CharacterReplacer {
    // Class to replace characters in a string
    private String text;  // Input string

    /* Constructor */
    public CharacterReplacer(String text) {
        this.text = text;
    }

    // Method to replace a character with another
    public String replace(char oldChar, char newChar) {
        return text.replace(oldChar, newChar);  // Replace oldChar with newChar
    }
}",1
"import java.util.HashSet;

public class UniqueElementsFinder {
    // Class to find unique elements in an array
    private int[] numbers;  // Input array

    /* Constructor */
    public UniqueElementsFinder(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to find unique elements
    public HashSet<Integer> findUniqueElements() {
        HashSet<Integer> uniqueElements = new HashSet<>();  // Set to store unique elements
        for (int num : numbers) {
            uniqueElements.add(num);  // Add number to set
        }
        return uniqueElements;  // Return set of unique elements
    }
}",0
"public class MinimumFinder {
    // Class to find the minimum number in an array
    private int[] numbers;  // Input array

    /* Constructor */
    public MinimumFinder(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to find minimum
    public int findMin() {
        int min = numbers[0];  // Assume first number is min
        for (int num : numbers) {
            if (num < min) {
                min = num;  // Update min if smaller number found
            }
        }
        return min;  // Return the minimum number
    }
}",0
"public class StringCombiner {
    // Class to combine two strings
    private String str1;  // First string
    private String str2;  // Second string

    /* Constructor */
    public StringCombiner(String str1, String str2) {
        this.str1 = str1;
        this.str2 = str2;
    }

    // Method to combine strings
    public String combine() {
        return str1 + str2;  // Return combined string
    }
}",1
"public class DistanceConverter {
    // Class to convert distance from kilometers to miles
    private double kilometers;  // Distance in kilometers

    /* Constructor */
    public DistanceConverter(double kilometers) {
        this.kilometers = kilometers;
    }

    // Method to convert to miles
    public double toMiles() {
        return kilometers * 0.621371;  // Conversion factor
    }
}",1
"public class CharCounter {
    // Class to count occurrences of a character in a string
    private String text;  // Input string
    private char character;  // Character to count

    /* Constructor */
    public CharCounter(String text, char character) {
        this.text = text;
        this.character = character;
    }

    // Method to count occurrences
    public int countOccurrences() {
        int count = 0;
        for (char c : text.toCharArray()) {
            if (c == character) {
                count++;  // Increment count for each occurrence
            }
        }
        return count;  // Return total occurrences
    }
}",0
"import java.util.Arrays;

public class ArrayMerger {
    // Class to merge two arrays
    private int[] array1;  // First array
    private int[] array2;  // Second array

    /* Constructor */
    public ArrayMerger(int[] array1, int[] array2) {
        this.array1 = array1;
        this.array2 = array2;
    }

    // Method to merge arrays
    public int[] merge() {
        int[] merged = new int[array1.length + array2.length];  // New merged array
        System.arraycopy(array1, 0, merged, 0, array1.length);  // Copy first array
        System.arraycopy(array2, 0, merged, array1.length, array2.length);  // Copy second array
        return merged;  // Return merged array
    }
}",0
"import java.net.MalformedURLException;
import java.net.URL;

public class URLValidator {
    // Class to validate URLs
    private String url;  // URL to validate

    /* Constructor */
    public URLValidator(String url) {
        this.url = url;
    }

    // Method to check if URL is valid
    public boolean isValid() {
        try {
            new URL(url);  // Attempt to create a URL object
            return true;  // Return true if successful
        } catch (MalformedURLException e) {
            return false;  // Return false if an exception occurs
        }
    }
}",0
"public class SentenceReverser {
    // Class to reverse a sentence
    private String sentence;  // Input sentence

    /* Constructor */
    public SentenceReverser(String sentence) {
        this.sentence = sentence;
    }

    // Method to reverse the sentence
    public String reverse() {
        String[] words = sentence.split("" "");  // Split sentence into words
        StringBuilder reversed = new StringBuilder();
        for (int i = words.length - 1; i >= 0; i--) {
            reversed.append(words[i]).append("" "");  // Append words in reverse order
        }
        return reversed.toString().trim();  // Return reversed sentence
    }
}",0
"import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

public class ArrayShuffler {
    // Class to shuffle an array
    private int[] array;  // Input array

    /* Constructor */
    public ArrayShuffler(int[] array) {
        this.array = array;
    }

    // Method to shuffle the array
    public int[] shuffle() {
        List<Integer> list = new ArrayList<>();
        for (int num : array) {
            list.add(num);  // Add array elements to a list
        }
        Collections.shuffle(list);  // Shuffle the list
        for (int i = 0; i < array.length; i++) {
            array[i] = list.get(i);  // Update array with shuffled elements
        }
        return array;  // Return shuffled array
    }
}",0
"public class PalindromeChecker {
    // Class to check if a string is a palindrome
    private String text;  // Input string

    /* Constructor */
    public PalindromeChecker(String text) {
        this.text = text;
    }

    // Method to check for palindrome
    public boolean isPalindrome() {
        String reversed = new StringBuilder(text).reverse().toString();  // Reverse the string
        return text.equalsIgnoreCase(reversed);  // Check if original and reversed are the same
    }
}",1
"public class FactorialCalculator {
    // Class to calculate factorial of a number
    private int number;  // Number to calculate factorial for

    /* Constructor */
    public FactorialCalculator(int number) {
        this.number = number;
    }

    // Method to calculate factorial
    public long calculateFactorial() {
        long factorial = 1;
        for (int i = 1; i <= number; i++) {
            factorial *= i;  // Multiply to find factorial
        }
        return factorial;  // Return the calculated factorial
    }
}",0
"public class FactorialCalculator {
    // Class to calculate factorial of a number

    /* Constructor */
    public FactorialCalculator(int number) {
        this.number = number;
    }

    // Method to calculate factorial
    public long calculateFactorial() {
        long factorial = 1;
        for (int i = 1; i <= number; i++) {
            factorial *= i;  // Multiply to find factorial
        }
        return factorial;  // Return the calculated factorial
    }
}",0
"public class StringSplitter {
    // Class to split a string by a delimiter
    private String text;  // Input string
    private String delimiter;  // Delimiter to split by

    /* Constructor */
    public StringSplitter(String text, String delimiter) {
        this.text = text;
        this.delimiter = delimiter;
    }

    // Method to split string
    public String[] split() {
        return text.split(delimiter);  // Return array of split strings
    }
}",1
"public class PrimeNumberChecker {
    // Class to check if a number is prime
    private int number;  // Number to check

    /* Constructor */
    public PrimeNumberChecker(int number) {
        this.number = number;
    }

    // Method to check for prime
    public boolean isPrime() {
        if (number <= 1) return false;  // Not prime if less than or equal to 1
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;  // Return false if divisible
            }
        }
        return true;  // Return true if no divisors found
    }
}",0
"public class TemperatureConverter {
    // Class to convert Celsius to Fahrenheit
    private double celsius;  // Temperature in Celsius

    /* Constructor */
    public TemperatureConverter(double celsius) {
        this.celsius = celsius;
    }

    // Method to convert to Fahrenheit
    public double toFahrenheit() {
        return (celsius * 9 / 5) + 32;  // Conversion formula
    }
}",1
"import java.util.regex.Pattern;

public class EmailValidator {
    // Class to validate email addresses
    private String email;  // Email address to validate

    /* Constructor */
    public EmailValidator(String email) {
        this.email = email;
    }

    // Method to check if email is valid
    public boolean isValid() {
        String emailRegex = ""^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$"";  // Regex for email
        return Pattern.matches(emailRegex, email);  // Return true if matches
    }
}",1
"public class NumberReverser {
    // Class to reverse the digits of a number
    private int number;  // Number to reverse

    /* Constructor */
    public NumberReverser(int number) {
        this.number = number;
    }

    // Method to reverse the number
    public int reverse() {
        int reversed = 0;
        while (number != 0) {
            reversed = reversed * 10 + number % 10;  // Build reversed number
            number /= 10;  // Remove last digit
        }
        return reversed;  // Return the reversed number
    }
}",0
"public class ArrayRotator {
    // Class to rotate an array to the right
    private int[] array;  // Input array
    private int positions;  // Number of positions to rotate

    /* Constructor */
    public ArrayRotator(int[] array, int positions) {
        this.array = array;
        this.positions = positions;
    }

    // Method to rotate array
    public int[] rotate() {
        int length = array.length;
        int[] rotated = new int[length];  // New rotated array
        for (int i = 0; i < length; i++) {
            rotated[(i + positions) % length] = array[i];  // Rotate elements
        }
        return rotated;  // Return rotated array
    }
}",0
"public class RepeatedStringCounter {
    // Class to count occurrences of a substring
    private String text;  // Input string
    private String substring;  // Substring to count

    /* Constructor */
    public RepeatedStringCounter(String text, String substring) {
        this.text = text;
        this.substring = substring;
    }

    // Method to count occurrences
    public int countOccurrences() {
        int count = 0;
        int index = 0;
        while ((index = text.indexOf(substring, index)) != -1) {
            count++;  // Increment count for each occurrence
            index += substring.length();  // Move index forward
        }
        return count;  // Return total occurrences
    }
}",0
"public class GradeCalculator {
    // Class to calculate grade based on marks
    private double marks;  // Marks obtained

    /* Constructor */
    public GradeCalculator(double marks) {
        this.marks = marks;
    }

    // Method to calculate grade
    public String calculateGrade() {
        if (marks >= 90) {
            return ""A"";  // Grade A
        } else if (marks >= 80) {
            return ""B"";  // Grade B
        } else if (marks >= 70) {
            return ""C"";  // Grade C
        } else if (marks >= 60) {
            return ""D"";  // Grade D
        } else {
            return ""F"";  // Grade F
        }
    }
}",0
"public class MaxFinder {
    // Class to find the maximum number in an array
    private int[] numbers;  // Input array

    /* Constructor */
    public MaxFinder(int[] numbers) {
        this.numbers = numbers;
    }

    // Method to find maximum
    public int findMax() {
        int max = numbers[0];  // Assume first number is max
        for (int num : numbers) {
            if (num > max) {
                max = num;  // Update max if larger number found
            }
        }
        return max;  // Return the maximum number
    }
}",0
"public class StringRepeater {
    // Class to repeat a string a specified number of times
    private String text;  // Input string
    private int times;  // Number of repetitions

    /* Constructor */
    public StringRepeater(String text, int times) {
        this.text = text;
        this.times = times;
    }

    // Method to repeat string
    public String repeat() {
        StringBuilder repeated = new StringBuilder();
        for (int i = 0; i < times; i++) {
            repeated.append(text);  // Append string multiple times
        }
        return repeated.toString();  // Return repeated string
    }
}",0
"import java.util.HashMap;

public class URLShortener {
    // Class to shorten URLs
    private HashMap<String, String> urlMap;  // Map to store URLs
    private int id;  // Unique ID for shortening

    /* Constructor */
    public URLShortener() {
        this.urlMap = new HashMap<>();  // Initialize URL map
        this.id = 0;  // Initialize ID
    }

    // Method to shorten a URL
    public String shorten(String url) {
        String shortUrl = ""short.ly/"" + (++id);  // Create short URL
        urlMap.put(shortUrl, url);  // Store mapping
        return shortUrl;  // Return short URL
    }

    // Method to retrieve original URL
    public String retrieve(String shortUrl) {
        return urlMap.get(shortUrl);  // Return original URL from map
    }
}
",0
"import java.util.Arrays;

public class AnagramChecker {
    // Class to check if two strings are anagrams
    private String str1;  // First string
    private String str2;  // Second string

    /* Constructor */
    public AnagramChecker(String str1, String str2) {
        this.str1 = str1;
        this.str2 = str2;
    }

    // Method to check for anagrams
    public boolean areAnagrams() {
        char[] charArray1 = str1.replaceAll(""\\s+"", """").toLowerCase().toCharArray();  // Process first string
        char[] charArray2 = str2.replaceAll(""\\s+"", """").toLowerCase().toCharArray();  // Process second string
        Arrays.sort(charArray1);  // Sort first string characters
        Arrays.sort(charArray2);  // Sort second string characters
        return Arrays.equals(charArray1, charArray2);  // Compare sorted arrays
    }
}",0
"public class FibonacciGenerator {
    // Class to generate Fibonacci series up to a given number
    private int limit;  // The upper limit for the Fibonacci series

    /* Constructor */
    public FibonacciGenerator(int limit) {
        this.limit = limit;  // Initialize the limit
    }

    // Method to generate Fibonacci series
    public int[] generate() {
        int[] fib = new int[limit];  // Array to hold Fibonacci numbers
        fib[0] = 0;  // First Fibonacci number
        fib[1] = 1;  // Second Fibonacci number

        // Generate Fibonacci numbers up to the limit
        for (int i = 2; i < limit; i++) {
            fib[i] = fib[i - 1] + fib[i - 2];  // Sum of the two previous numbers
        }
        return fib;  // Return the generated series
    }
}",1
"public class StringReverser {
    // Class to reverse a given string
    private String input;  // Input string to reverse

    /* Constructor */
    public StringReverser(String input) {
        this.input = input;  // Initialize input string
    }

    // Method to reverse the string
    public String reverse() {
        StringBuilder reversed = new StringBuilder();  // StringBuilder to build reversed string
        for (int i = input.length() - 1; i >= 0; i--) {
            reversed.append(input.charAt(i));  // Append characters in reverse order
        }
        return reversed.toString();  // Return the reversed string
    }
}",0
"public class StringReverser {
    // Class to reverse a given string
    private String input;  // Input string to reverse


    // Method to reverse the string
    public String reverse() {
        StringBuilder reversed = new StringBuilder();  // StringBuilder to build reversed string
        for (int i = input.length() - 1; i >= 0; i--) {
            reversed.append(input.charAt(i));  // Append characters in reverse order
        }
        return reversed.toString();  // Return the reversed string
    }
}",0
"public class VowelCounter {
    // Class to count vowels in a string
    private String text;  // Input string

    /* Constructor */
    public VowelCounter(String text) {
        this.text = text;  // Initialize text
    }

    // Method to count vowels
    public int countVowels() {
        int count = 0;  // Initialize vowel count
        for (char c : text.toCharArray()) {
            // Check if character is a vowel
            if (""aeiouAEIOU"".indexOf(c) != -1) {
                count++;  // Increment count for each vowel
            }
        }
        return count;  // Return total count of vowels
    }
}",1
"public class DigitSummer {
    // Class to sum the digits of a number
    private int number;  // Input number

    /* Constructor */
    public DigitSummer(int number) {
        this.number = number;  // Initialize number
    }

    // Method to calculate the sum of digits
    public int sumDigits() {
        int sum = 0;  // Initialize sum
        while (number != 0) {
            sum += number % 10;  // Add last digit to sum
            number /= 10;  // Remove last digit
        }
        return sum;  // Return total sum of digits
    }
}",0
"public class GCDCalculator {
    // Class to calculate the Greatest Common Divisor (GCD)
    private int num1;  // First number
    private int num2;  // Second number

    /* Constructor */
    public GCDCalculator(int num1, int num2) {
        this.num1 = num1;  // Initialize first number
        this.num2 = num2;  // Initialize second number
    }

    // Method to calculate GCD using Euclidean algorithm
    public int calculateGCD() {
        while (num2 != 0) {
            int temp = num2;  // Store second number
            num2 = num1 % num2;  // Update second number
            num1 = temp;  // Update first number
        }
        return num1;  // Return the GCD
    }
}",0
"public class CurrencyConverter {
    // Class to convert currency from USD to other currencies
    private double amount;  // Amount in USD
    private double conversionRate;  // Conversion rate to target currency

    /* Constructor */
    public CurrencyConverter(double amount, double conversionRate) {
        this.amount = amount;  // Initialize amount
        this.conversionRate = conversionRate;  // Initialize conversion rate
    }

    // Method to convert USD to target currency
    public double convert() {
        return amount * conversionRate;  // Return converted amount
    }
}",1
"public class FactorialCalculator {
    // Class to calculate factorial of a number
    private int number;  // Number to calculate factorial for

    /* Constructor */
    public FactorialCalculator(int number) {
        this.number = number;  // Initialize number
    }

    // Method to calculate factorial recursively
    public long calculateFactorial() {
        return (number == 0) ? 1 : number * new FactorialCalculator(number - 1).calculateFactorial();  // Recursion
    }
}",1
"import java.util.Arrays;

public class AnagramFinder {
    // Class to check if two strings are anagrams
    private String str1;  // First string
    private String str2;  // Second string

    /* Constructor */
    public AnagramFinder(String str1, String str2) {
        this.str1 = str1;  // Initialize first string
        this.str2 = str2;  // Initialize second string
    }

    // Method to check for anagrams
    public boolean areAnagrams() {
        char[] charArray1 = str1.replaceAll(""\\s+"", """").toLowerCase().toCharArray();  // Process first string
        char[] charArray2 = str2.replaceAll(""\\s+"", """").toLowerCase().toCharArray();  // Process second string
        Arrays.sort(charArray1);  // Sort first string characters
        Arrays.sort(charArray2);  // Sort second string characters
        return Arrays.equals(charArray1, charArray2);  // Compare sorted arrays
    }
}",0
"import java.util.HashSet;

public class UniqueCharacterChecker {
    // Class to check if a string has all unique characters
    private String input;  // Input string

    /* Constructor */
    public UniqueCharacterChecker(String input) {
        this.input = input;  // Initialize input string
    }

    // Method to check for unique characters
    public boolean hasUniqueCharacters() {
        HashSet<Character> charSet = new HashSet<>();  // Set to store characters
        for (char c : input.toCharArray()) {
            if (!charSet.add(c)) {  // Try to add character to set
                return false;  // Return false if character already exists
            }
        }
        return true;  // Return true if all characters are unique
    }
}",0
"public class StringCombiner {
    // Class to combine two strings with a separator
    private String str1;  // First string
    private String str2;  // Second string
    private String separator;  // Separator to use

    /* Constructor */
    public StringCombiner(String str1, String str2, String separator) {
        this.str1 = str1;  // Initialize first string
        this.str2 = str2;  // Initialize second string
        this.separator = separator;  // Initialize separator
    }

    // Method to combine strings
    public String combine() {
        return str1 + separator + str2;  // Return combined string
    }
}",0
"public class StringCombiner {
    // Class to combine two strings with a separator
    private String str1;  // First string
    private String str2;  // Second string
    private String separator;  // Separator to use

    /* Constructor */
    public StringCombiner(String str1, String str2, String separator) {
        this.separator = separator;  // Initialize separator
    }

    // Method to combine strings
    public String combine() {
        return str1 + separator + str2;  // Return combined string
    }
}",1
"public class ArrayAverageCalculator {
    // Class to calculate the average of an array of numbers
    private double[] numbers;  // Input array of numbers

    /* Constructor */
    public ArrayAverageCalculator(double[] numbers) {
        this.numbers = numbers;  // Initialize numbers array
    }

    // Method to calculate average
    public double calculateAverage() {
        double sum = 0;  // Initialize sum
        for (double num : numbers) {
            sum += num;  // Add each number to sum
        }
        return (numbers.length > 0) ? (sum / numbers.length) : 0;  // Return average
    }
}",0
"public class ArrayAverageCalculator {
    // Class to calculate the average of an array of numbers
    private double[] numbers;  // Input array of numbers

    /* Constructor */
    public ArrayAverageCalculator(double[] numbers) {
        this.numbers = numbers;  // Initialize numbers array
    }

    // Method to calculate average
    public double calculateAverage() {
        double sum = 0;  // Initialize sum
        return (numbers.length > 0) ? (sum / numbers.length) : 0;  // Return average
    }
}",1
"public class ArraySearcher {
    // Class to search for an element in an array
    private int[] array;  // Input array
    private int target;  // Target element to search for

    /* Constructor */
    public ArraySearcher(int[] array, int target) {
        this.array = array;  // Initialize array
        this.target = target;  // Initialize target
    }

    // Method to perform linear search
    public int linearSearch() {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == target) {
                return i;  // Return index if found
            }
        }
        return -1;  // Return -1 if not found
    }
}",0
"public class LeapYearChecker {
    // Class to check if a year is a leap year
    private int year;  // Year to check

    /* Constructor */
    public LeapYearChecker(int year) {
        this.year = year;  // Initialize year
    }

    // Method to check for leap year
    public boolean isLeapYear() {
        // Check leap year conditions
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }
}",1
"public class LeapYearChecker {
    // Class to check if a year is a leap year
    private int year;  // Year to check

    /* Constructor */
    public LeapYearChecker(int year) {
        this.year = year;  // Initialize year
    }

}",1
"public class LeapYearChecker {
    // Class to check if a year is a leap year
    private int year;  // Year to check

    public LeapYearChecker(int year) {
        this.year = year;  // Initialize year
    }

}",0
"public class PalindromeChecker {
    // Class to check if a string is a palindrome
    private String input;  // Input string

    /* Constructor */
    public PalindromeChecker(String input) {
        this.input = input;  // Initialize input string
    }

    // Method to check for palindrome
    public boolean isPalindrome() {
        String reversed = new StringBuilder(input).reverse().toString();  // Reverse the string
        return input.equals(reversed);  // Compare original and reversed strings
    }
}",1
"public class PalindromeChecker {
    // Class to check if a string is a palindrome
    private String input;  // Input string

    /* Constructor */
    public PalindromeChecker(String input) {
        this.input = input;  // Initialize input string
    }

}",1
"public class PrimeChecker {
    // Class to check if a number is prime
    private int number;  // Number to check

    /* Constructor */
    public PrimeChecker(int number) {
        this.number = number;  // Initialize number
    }

    // Method to check for prime
    public boolean isPrime() {
        if (number <= 1) return false;  // Not prime if less than or equal to 1
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;  // Not prime if divisible
            }
        }
        return true;  // Return true if prime
    }
}",0
"public class WordCounter {
    // Class to count the number of words in a string
    private String text;  // Input text

    /* Constructor */
    public WordCounter(String text) {
        this.text = text;  // Initialize text
    }

    // Method to count words
    public int countWords() {
        String[] words = text.trim().split(""\\s+"");  // Split text by whitespace
        return (text.isEmpty()) ? 0 : words.length;  // Return word count
    }
}",1
"public class CharacterCounter {
    // Class to count occurrences of a character in a string
    private String text;  // Input text
    private char character;  // Character to count

    /* Constructor */
    public CharacterCounter(String text, char character) {
        this.text = text;  // Initialize text
        this.character = character;  // Initialize character to count
    }

    // Method to count occurrences of the character
    public int countCharacter() {
        int count = 0;  // Initialize count
        for (char c : text.toCharArray()) {
            if (c == character) {
                count++;  // Increment count if character matches
            }
        }
        return count;  // Return total count
    }
}",0
"import java.util.HashMap;

public class URLShortener {
    // Class to shorten URLs
    private HashMap<String, String> urlMap;  // Map to store original and short URLs
    private String baseURL;  // Base URL for shortening

    /* Constructor */
    public URLShortener(String baseURL) {
        this.baseURL = baseURL;  // Initialize base URL
        this.urlMap = new HashMap<>();  // Initialize URL map
    }

    // Method to shorten a URL
    public String shortenURL(String originalURL) {
        String shortURL = baseURL + ""/"" + Integer.toHexString(originalURL.hashCode());  // Generate short URL
        urlMap.put(shortURL, originalURL);  // Map short URL to original URL
        return shortURL;  // Return the shortened URL
    }

    // Method to retrieve the original URL
    public String getOriginalURL(String shortURL) {
        return urlMap.get(shortURL);  // Return original URL from map
    }
}",0
"public class URLShortener {
    // Class to shorten URLs
    private HashMap<String, String> urlMap;  // Map to store original and short URLs
    private String baseURL;  // Base URL for shortening

    /* Constructor */
    public URLShortener(String baseURL) {
        this.baseURL = baseURL;  // Initialize base URL
        this.urlMap = new HashMap<>();  // Initialize URL map
    }

    // Method to shorten a URL
    public String shortenURL(String originalURL) {
        String shortURL = baseURL + ""/"" + Integer.toHexString(originalURL.hashCode());  // Generate short URL
        return shortURL;  // Return the shortened URL
    }

    // Method to retrieve the original URL
    public String getOriginalURL(String shortURL) {
        return urlMap.get(shortURL);  // Return original URL from map
    }
}",1
"public class TemperatureConverter {
    // Class to convert temperature between Celsius and Fahrenheit
    private double temperature;  // Temperature to convert
    private boolean isCelsius;  // Flag to check if input is in Celsius

    /* Constructor */
    public TemperatureConverter(double temperature, boolean isCelsius) {
        this.temperature = temperature;  // Initialize temperature
        this.isCelsius = isCelsius;  // Initialize temperature unit
    }

    // Method to convert temperature
    public double convert() {
        return isCelsius ? (temperature * 9/5) + 32 : (temperature - 32) * 5/9;  // Convert based on unit
    }
}",1
"public class TemperatureConverter {
    // Class to convert temperature between Celsius and Fahrenheit
    private double temperature;  // Temperature to convert
    private boolean isCelsius;  // Flag to check if input is in Celsius

    /* Constructor */
    public TemperatureConverter(double temperature, boolean isCelsius) {
        this.temperature = temperature;  // Initialize temperature
        this.isCelsius = isCelsius;  // Initialize temperature unit
    }

}",0
"import java.util.ArrayList;

public class ShoppingCart {
    // Class to represent a shopping cart
    private ArrayList<String> items;  // List of items in the cart

    /* Constructor */
    public ShoppingCart() {
        this.items = new ArrayList<>();  // Initialize items list
    }

    // Method to add an item to the cart
    public void addItem(String item) {
        items.add(item);  // Add item to the list
    }

    // Method to get total number of items in the cart
    public int getTotalItems() {
        return items.size();  // Return size of the list
    }
}",1
"import java.util.ArrayList;

public class ShoppingCart {
    // Class to represent a shopping cart
    private ArrayList<String> items;  // List of items in the cart

    /* Constructor */
    public ShoppingCart() {
        this.items = new ArrayList<>();  // Initialize items list
    }

    // Method to add an item to the cart
    public void addItem(String item) {
        items.add(item);  // Add item to the list
    }

}",1
"
public class ShoppingCart {
    // Class to represent a shopping cart
    private ArrayList<String> items;  // List of items in the cart

    /* Constructor */
    public ShoppingCart() {
        this.items = new ArrayList<>();  // Initialize items list
    }

    // Method to add an item to the cart
    public void addItem(String item) {
        items.add(item);  // Add item to the list
    }

}",1
"public class Circle {
    // Class to represent a circle
    private double radius;  // Radius of the circle

    /* Constructor */
    public Circle(double radius) {
        this.radius = radius;  // Initialize radius
    }

    // Method to calculate area of the circle
    public double calculateArea() {
        return Math.PI * radius * radius;  // Area formula
    }

    // Method to calculate circumference of the circle
    public double calculateCircumference() {
        return 2 * Math.PI * radius;  // Circumference formula
    }
}",1
"public class Circle {
    // Class to represent a circle
    private double radius;  // Radius of the circle

    // Method to calculate area of the circle
    public double calculateArea() {
        return Math.PI * radius * radius;  // Area formula
    }

    // Method to calculate circumference of the circle
    public double calculateCircumference() {
        return 2 * Math.PI * radius;  // Circumference formula
    }
}
",1
"public class Rectangle {
    // Class to represent a rectangle
    private double length;  // Length of the rectangle
    private double width;  // Width of the rectangle

    /* Constructor */
    public Rectangle(double length, double width) {
        this.length = length;  // Initialize length
        this.width = width;  // Initialize width
    }

    // Method to calculate area of the rectangle
    public double calculateArea() {
        return length * width;  // Area formula
    }

    // Method to calculate perimeter of the rectangle
    public double calculatePerimeter() {
        return 2 * (length + width);  // Perimeter formula
    }
}",1
"public class Rectangle {
    // Class to represent a rectangle
    private double length;  // Length of the rectangle

    // Method to calculate area of the rectangle
    public double calculateArea() {
        return length * width;  // Area formula
    }

    // Method to calculate perimeter of the rectangle
    public double calculatePerimeter() {
        return 2 * (length + width);  // Perimeter formula
    }
}",1
"public class Calculator {
    // Class to perform basic arithmetic operations
    private double num1;  // First number
    private double num2;  // Second number

    /* Constructor */
    public Calculator(double num1, double num2) {
        this.num1 = num1;  // Initialize first number
        this.num2 = num2;  // Initialize second number
    }

    // Method to add two numbers
    public double add() {
        return num1 + num2;  // Addition
    }

    // Method to subtract two numbers
    public double subtract() {
        return num1 - num2;  // Subtraction
    }

    // Method to multiply two numbers
    public double multiply() {
        return num1 * num2;  // Multiplication
    }

    // Method to divide two numbers
    public double divide() {
        if (num2 == 0) {
            throw new ArithmeticException(""Division by zero!"");  // Check for division by zero
        }
        return num1 / num2;  // Division
    }
}",1
"public class OddEvenChecker {
    // Class to check if a number is odd or even
    private int number;  // Number to check

    /* Constructor */
    public OddEvenChecker(int number) {
        this.number = number;  // Initialize number
    }

    // Method to check if number is odd
    public boolean isOdd() {
        return number % 2 != 0;  // Return true if odd
    }

    // Method to check if number is even
    public boolean isEven() {
        return number % 2 == 0;  // Return true if even
    }
}",1
"public class OddEvenChecker {

    /* Constructor */
    public OddEvenChecker(int number) {
        this.number = number;  // Initialize number
    }

    // Method to check if number is odd
    public boolean isOdd() {
        return number % 2 != 0;  // Return true if odd
    }

    // Method to check if number is even
    public boolean isEven() {
        return number % 2 == 0;  // Return true if even
    }
}",1
"public class LoginSystem {
    // Class to represent a simple login system
    private String username;  // Username
    private String password;  // Password

    /* Constructor */
    public LoginSystem(String username, String password) {
        this.username = username;  // Initialize username
        this.password = password;  // Initialize password
    }

    // Method to validate login
    public boolean validate(String inputUsername, String inputPassword) {
        return username.equals(inputUsername) && password.equals(inputPassword);  // Check credentials
    }
}",1
"public class LoginSystem {
    // Class to represent a simple login system
    private String username;  // Username
    private String password;  // Password

    /* Constructor */
    public LoginSystem(String username, String password) {
        this.username = username;  // Initialize username
        this.password = password;  // Initialize password
    }

}",0
"public class Book {
    // Class to represent a book
    private String title;  // Title of the book
    private String author;  // Author of the book
    private int pages;  // Number of pages in the book

    /* Constructor */
    public Book(String title, String author, int pages) {
        this.title = title;  // Initialize title
        this.author = author;  // Initialize author
        this.pages = pages;  // Initialize pages
    }

    // Method to get book info
    public String getInfo() {
        return title + "" by "" + author + "", "" + pages + "" pages"";  // Return book details
    }
}",0
"import java.util.ArrayList;

public class ShoppingList {
    // Class to represent a shopping list
    private ArrayList<String> items;  // List of items in the shopping list

    /* Constructor */
    public ShoppingList() {
        this.items = new ArrayList<>();  // Initialize items list
    }

    // Method to add an item to the shopping list
    public void addItem(String item) {
        items.add(item);  // Add item to the list
    }

    // Method to get total number of items in the shopping list
    public int getTotalItems() {
        return items.size();  // Return size of the list
    }

    // Method to print all items in the shopping list
    public void printItems() {
        System.out.println(""Shopping List: "" + items);  // Print items
    }
}",1
"import java.util.ArrayList;

public class ShoppingList {
    // Class to represent a shopping list
    private ArrayList<String> items;  // List of items in the shopping list

    // Method to add an item to the shopping list
    public void addItem(String item) {
        items.add(item);  // Add item to the list
    }

    // Method to get total number of items in the shopping list
    public int getTotalItems() {
        return items.size();  // Return size of the list
    }

    // Method to print all items in the shopping list
    public void printItems() {
        System.out.println(""Shopping List: "" + items);  // Print items
    }
}",1
"
public class ShoppingList {
    // Class to represent a shopping list
    private ArrayList<String> items;  // List of items in the shopping list

    // Method to add an item to the shopping list
    public void addItem(String item) {
        items.add(item);  // Add item to the list
    }

    // Method to get total number of items in the shopping list
    public int getTotalItems() {
        return items.size();  // Return size of the list
    }

    // Method to print all items in the shopping list
    public void printItems() {
        System.out.println(""Shopping List: "" + items);  // Print items
    }
}",1
"public class DistanceCalculator {
    // Class to calculate distance between two points
    private double x1;  // X-coordinate of point 1
    private double y1;  // Y-coordinate of point 1
    private double x2;  // X-coordinate of point 2
    private double y2;  // Y-coordinate of point 2

    /* Constructor */
    public DistanceCalculator(double x1, double y1, double x2, double y2) {
        this.x1 = x1;  // Initialize point 1
        this.y1 = y1;  // Initialize point 1
        this.x2 = x2;  // Initialize point 2
        this.y2 = y2;  // Initialize point 2
    }

    // Method to calculate distance
    public double calculateDistance() {
        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));  // Distance formula
    }
}",0
"public class Fibonacci {
    // Class to calculate Fibonacci sequence
    private int n;  // Number of terms in the sequence

    /* Constructor */
    public Fibonacci(int n) {
        this.n = n;  // Initialize number of terms
    }

    // Method to generate Fibonacci sequence
    public int[] generateSequence() {
        int[] fib = new int[n];  // Array to store Fibonacci sequence
        fib[0] = 0;  // First term
        if (n > 1) {
            fib[1] = 1;  // Second term
            for (int i = 2; i < n; i++) {
                fib[i] = fib[i - 1] + fib[i - 2];  // Calculate next term
            }
        }
        return fib;  // Return Fibonacci sequence
    }
}",0
"public class FactorialCalculator {
    // Class to calculate factorial of a number
    private int number;  // Number to calculate factorial

    /* Constructor */
    public FactorialCalculator(int number) {
        this.number = number;  // Initialize number
    }

    // Method to calculate factorial
    public long calculateFactorial() {
        long factorial = 1;  // Initialize factorial
        for (int i = 1; i <= number; i++) {
            factorial *= i;  // Multiply to get factorial
        }
        return factorial;  // Return calculated factorial
    }
}",0
"public class FibonacciCalculator {
    // Class to calculate Fibonacci numbers
    private int n;  // The nth Fibonacci number to calculate

    /* Constructor */
    public FibonacciCalculator(int n) {
        this.n = n;  // Initialize with the value of n
    }

    // Method to calculate the nth Fibonacci number using recursion
    public int calculate() {
        if (n <= 1) return n;  // Base case: return n for 0 or 1
        return new FibonacciCalculator(n - 1).calculate() + new FibonacciCalculator(n - 2).calculate();  // Recursive call
    }
}",1
"public class GCDCalculator {
    // Class to calculate the Greatest Common Divisor (GCD) of two numbers
    private int a;  // First number
    private int b;  // Second number

    /* Constructor */
    public GCDCalculator(int a, int b) {
        this.a = a;  // Initialize first number
        this.b = b;  // Initialize second number
    }

    // Method to calculate GCD using Euclid's algorithm
    public int calculateGCD() {
        while (b != 0) {
            int temp = b;  // Temporary variable to hold b
            b = a % b;  // Update b to remainder of a divided by b
            a = temp;  // Update a to previous value of b
        }
        return a;  // Return GCD
    }
}",0
"public class Student {
    // Class to represent a student
    private String name;  // Student's name
    private int age;  // Student's age
    private String studentID;  // Unique student identifier

    /* Constructor */
    public Student(String name, int age, String studentID) {
        this.name = name;  // Initialize name
        this.age = age;  // Initialize age
        this.studentID = studentID;  // Initialize student ID
    }

    // Method to display student details
    public void displayDetails() {
        System.out.println(""Name: "" + name);  // Print name
        System.out.println(""Age: "" + age);  // Print age
        System.out.println(""Student ID: "" + studentID);  // Print student ID
    }
}",0
"public class ShoppingCartItem {
    // Class to represent an item in a shopping cart
    private String itemName;  // Name of the item
    private double price;  // Price of the item
    private int quantity;  // Quantity of the item

    /* Constructor */
    public ShoppingCartItem(String itemName, double price, int quantity) {
        this.itemName = itemName;  // Initialize item name
        this.price = price;  // Initialize item price
        this.quantity = quantity;  // Initialize item quantity
    }

    // Method to calculate total price for the item
    public double calculateTotalPrice() {
        return price * quantity;  // Return price times quantity
    }
}",0
"import java.util.ArrayList;

public class Library {
    // Class to represent a library
    private ArrayList<Book> books;  // List to store books

    /* Constructor */
    public Library() {
        this.books = new ArrayList<>();  // Initialize the list of books
    }

    // Method to add a book to the library
    public void addBook(Book book) {
        books.add(book);  // Add book to the list
    }

    // Method to display all books in the library
    public void displayBooks() {
        for (Book book : books) {
            System.out.println(book.getTitle());  // Print each book's title
        }
    }
}",1
"import java.util.regex.Pattern;

public class DateValidator {
    // Class to validate date formats
    private String date;  // Date string to validate

    /* Constructor */
    public DateValidator(String date) {
        this.date = date;  // Initialize date string
    }

    // Method to validate the date format (DD/MM/YYYY)
    public boolean isValidDate() {
        String regex = ""^([0-2][0-9]|(3)[0-1])/(0[1-9]|1[0-2])/(\\d{4})$"";  // Regex for date format
        return Pattern.matches(regex, date);  // Return true if date matches regex
    }
}",1
"import java.util.Random;

public class DiceRoller {
    // Class to simulate rolling a dice
    private Random random;  // Random number generator

    /* Constructor */
    public DiceRoller() {
        this.random = new Random();  // Initialize random number generator
    }

    // Method to roll a dice and return the result (1-6)
    public int roll() {
        return random.nextInt(6) + 1;  // Return a random number between 1 and 6
    }
}",1
"public class NumberToWordsConverter {
    // Class to convert numbers into words
    private int number;  // Number to convert

    /* Constructor */
    public NumberToWordsConverter(int number) {
        this.number = number;  // Initialize number
    }

    // Method to convert the number to words
    public String convert() {
        // Simple conversion for demonstration purposes
        if (number == 1) return ""One"";  // Check for 1
        if (number == 2) return ""Two"";  // Check for 2
        return ""Number out of range"";  // Fallback for other numbers
    }
}",1
"public class BasicMathOperations {
    // Class to perform basic math operations
    private double num1;  // First number
    private double num2;  // Second number

    /* Constructor */
    public BasicMathOperations(double num1, double num2) {
        this.num1 = num1;  // Initialize first number
        this.num2 = num2;  // Initialize second number
    }

    // Method to add two numbers
    public double add() {
        return num1 + num2;  // Return the sum
    }

    // Method to subtract two numbers
    public double subtract() {
        return num1 - num2;  // Return the difference
    }
}",1
"public abstract class Shape {
    // Abstract class to represent a shape
    // Method to calculate area (to be implemented by subclasses)
    public abstract double calculateArea();  
}",1
"public class Triangle extends Shape {
    // Class to represent a triangle
    private double base;  // Base of the triangle
    private double height;  // Height of the triangle

    /* Constructor */
    public Triangle(double base, double height) {
        this.base = base;  // Initialize base
        this.height = height;  // Initialize height
    }

    // Method to calculate area of the triangle
    @Override
    public double calculateArea() {
        return 0.5 * base * height;  // Area formula for triangle
    }
}",0
"public class Rectangle extends Shape {
    // Class to represent a rectangle
    private double length;  // Length of the rectangle
    private double width;  // Width of the rectangle

    /* Constructor */
    public Rectangle(double length, double width) {
        this.length = length;  // Initialize length
        this.width = width;  // Initialize width
    }

    // Method to calculate area of the rectangle
    @Override
    public double calculateArea() {
        return length * width;  // Area formula for rectangle
    }
}",0
"public class QuadraticEquation {
    // Class to represent a quadratic equation ax^2 + bx + c = 0
    private double a;  // Coefficient of x^2
    private double b;  // Coefficient of x
    private double c;  // Constant term

    /* Constructor */
    public QuadraticEquation(double a, double b, double c) {
        this.a = a;  // Initialize a
        this.b = b;  // Initialize b
        this.c = c;  // Initialize c
    }

    // Method to calculate the roots of the quadratic equation
    public double[] calculateRoots() {
        double discriminant = b * b - 4 * a * c;  // Calculate the discriminant
        if (discriminant > 0) {
            // Two real and distinct roots
            double root1 = (-b + Math.sqrt(discriminant)) / (2 * a);  // First root
            double root2 = (-b - Math.sqrt(discriminant)) / (2 * a);  // Second root
            return new double[]{root1, root2};  // Return both roots
        } else if (discriminant == 0) {
            // One real root
            double root = -b / (2 * a);  // Root
            return new double[]{root};  // Return single root
        } else {
            return new double[]{};  // No real roots
        }
    }
}
",0
"public class Person {
    // Class to represent a person
    private String name;  // Person's name
    private int age;  // Person's age

    /* Constructor */
    public Person(String name, int age) {
        this.name = name;  // Initialize name
        this.age = age;  // Initialize age
    }

    // Method to display person's details
    public void display() {
        System.out.println(""Name: "" + name + "", Age: "" + age);  // Print name and age
    }
}",1
"public class Book {
    // Class to represent a book
    private String title;  // Book title
    private String author;  // Book author

    /* Constructor */
    public Book(String title, String author) {
        this.title = title;  // Initialize title
        this.author = author;  // Initialize author
    }

    // Method to get the title of the book
    public String getTitle() {
        return title;  // Return title
    }
}",1
"public class Car {
    // Class to represent a car
    private String brand;  // Car brand
    private String model;  // Car model

    /* Constructor */
    public Car(String brand, String model) {
        this.brand = brand;  // Initialize brand
        this.model = model;  // Initialize model
    }

    // Method to display car details
    public void displayCarInfo() {
        System.out.println(""Brand: "" + brand + "", Model: "" + model);  // Print brand and model
    }
}",1
"public class TemperatureConverter {
    // Class to convert temperatures between Celsius and Fahrenheit
    private double temperature;  // Temperature to convert

    /* Constructor */
    public TemperatureConverter(double temperature) {
        this.temperature = temperature;  // Initialize temperature
    }

    // Method to convert Celsius to Fahrenheit
    public double toFahrenheit() {
        return (temperature * 9/5) + 32;  // Conversion formula
    }

    // Method to convert Fahrenheit to Celsius
    public double toCelsius() {
        return (temperature - 32) * 5/9;  // Conversion formula
    }
}",1
"public class BankAccount {
    // Class to represent a bank account
    private String accountNumber;  // Unique account identifier
    private double balance;  // Account balance

    /* Constructor */
    public BankAccount(String accountNumber) {
        this.accountNumber = accountNumber;  // Initialize account number
        this.balance = 0;  // Initialize balance to 0
    }

    // Method to deposit money into the account
    public void deposit(double amount) {
        balance += amount;  // Add amount to balance
    }

    // Method to withdraw money from the account
    public void withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;  // Subtract amount from balance
        } else {
            System.out.println(""Insufficient funds"");  // Insufficient balance message
        }
    }
}",0
"import java.util.regex.Pattern;

public class EmailValidator {
    // Class to validate email addresses
    private String email;  // Email address to validate

    /* Constructor */
    public EmailValidator(String email) {
        this.email = email;  // Initialize email address
    }

    // Method to check if the email format is valid
    public boolean isValidEmail() {
        String regex = ""^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$"";  // Regex for email format
        return Pattern.matches(regex, email);  // Return true if email matches regex
    }
}",1
"public class Stopwatch {
    // Class to implement a simple stopwatch
    private long startTime;  // Time when the stopwatch was started
    private long elapsedTime;  // Total elapsed time

    /* Constructor */
    public Stopwatch() {
        this.elapsedTime = 0;  // Initialize elapsed time to 0
    }

    // Method to start the stopwatch
    public void start() {
        this.startTime = System.currentTimeMillis();  // Capture current time
    }

    // Method to stop the stopwatch and update elapsed time
    public void stop() {
        elapsedTime += System.currentTimeMillis() - startTime;  // Update elapsed time
    }

    // Method to get the total elapsed time in seconds
    public double getElapsedTime() {
        return elapsedTime / 1000.0;  // Convert milliseconds to seconds
    }
}",1
"public class EmailSender {
    // Class to send emails
    private String recipient;  // Email recipient
    private String subject;  // Email subject
    private String body;  // Email body

    /* Constructor */
    public EmailSender(String recipient, String subject, String body) {
        this.recipient = recipient;  // Initialize recipient
        this.subject = subject;  // Initialize subject
        this.body = body;  // Initialize body
    }

    // Method to simulate sending an email
    public void sendEmail() {
        System.out.println(""Sending email to: "" + recipient);  // Print recipient
        System.out.println(""Subject: "" + subject);  // Print subject
        System.out.println(""Body: "" + body);  // Print body
    }
}",0
"public class PrimeChecker {
    // Class to check if a number is prime
    private int number;  // Number to check

    /* Constructor */
    public PrimeChecker(int number) {
        this.number = number;  // Initialize number
    }

    // Method to check if the number is prime
    public boolean isPrime() {
        if (number <= 1) return false;  // Numbers less than 2 are not prime
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) return false;  // If divisible, not prime
        }
        return true;  // Number is prime
    }
}",0
"public class Counter {
    // Class to count up to a specified number
    private int count;  // Current count
    private int limit;  // Count limit

    /* Constructor */
    public Counter(int limit) {
        this.limit = limit;  // Initialize limit
        this.count = 0;  // Initialize count to 0
    }

    // Method to increment the count
    public void increment() {
        if (count < limit) {
            count++;  // Increment count
        } else {
            System.out.println(""Limit reached"");  // Limit message
        }
    }

    // Method to get the current count
    public int getCount() {
        return count;  // Return current count
    }
}",0
"public class ArrayUtil {
    // Class to provide utility methods for arrays

    // Method to find the maximum value in an array of integers
    public static int findMax(int[] array) {
        int max = array[0];  // Assume first element is the max
        for (int num : array) {
            if (num > max) {
                max = num;  // Update max if current number is greater
            }
        }
        return max;  // Return maximum value
    }
}",0
"import java.util.Timer;
import java.util.TimerTask;

public class AlarmClock {
    // Class to implement a simple alarm clock
    private Timer timer;  // Timer for scheduling the alarm

    /* Constructor */
    public AlarmClock() {
        this.timer = new Timer();  // Initialize timer
    }

    // Method to set an alarm for a specified delay in milliseconds
    public void setAlarm(long delay) {
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                System.out.println(""Alarm ringing!"");  // Alarm message
            }
        }, delay);  // Schedule alarm
    }
}",0
"public class SimpleCalculator {
    // Class to perform basic arithmetic operations
    // Method to add two numbers
    public double add(double a, double b) {
        return a + b;  // Return sum
    }

    // Method to subtract two numbers
    public double subtract(double a, double b) {
        return a - b;  // Return difference
    }
}",1
"import java.util.HashMap;

public class VotingSystem {
    // Class to implement a simple voting system
    private HashMap<String, Integer> votes;  // Map to store candidate names and their votes

    /* Constructor */
    public VotingSystem() {
        this.votes = new HashMap<>();  // Initialize votes map
    }

    // Method to cast a vote for a candidate
    public void vote(String candidate) {
        votes.put(candidate, votes.getOrDefault(candidate, 0) + 1);  // Increment vote count
    }

    // Method to get the total votes for a candidate
    public int getVotes(String candidate) {
        return votes.getOrDefault(candidate, 0);  // Return total votes or 0 if not found
    }
}",1
"public class User {
    // Class to represent a user in a system
    private String username;  // User's name
    private String password;  // User's password

    /* Constructor */
    public User(String username, String password) {
        this.username = username;  // Initialize username
        this.password = password;  // Initialize password
    }

    // Method to authenticate user with provided password
    public boolean authenticate(String password) {
        return this.password.equals(password);  // Check if password matches
    }
}",1
"import java.util.ArrayList;

public class TodoList {
    // Class to represent a simple to-do list
    private ArrayList<String> tasks;  // List of tasks

    /* Constructor */
    public TodoList() {
        this.tasks = new ArrayList<>();  // Initialize tasks list
    }

    // Method to add a task to the list
    public void addTask(String task) {
        tasks.add(task);  // Add task to the list
    }

    // Method to display all tasks in the list
    public void displayTasks() {
        for (String task : tasks) {
            System.out.println(task);  // Print each task
        }
    }
}",1
"public class LightBulb {
    // Class to represent a light bulb
    private boolean isOn;  // State of the light bulb

    /* Constructor */
    public LightBulb() {
        this.isOn = false;  // Initialize state to off
    }

    // Method to turn on the light bulb
    public void turnOn() {
        isOn = true;  // Set state to on
    }

    // Method to turn off the light bulb
    public void turnOff() {
        isOn = false;  // Set state to off
    }

    // Method to check if the light bulb is on
    public boolean isOn() {
        return isOn;  // Return the state of the light bulb
    }
}",1
"public class Rectangle {
    // Class to represent a rectangle
    private double length;  // Length of the rectangle
    private double width;   // Width of the rectangle

    /* Constructor */
    public Rectangle(double length, double width) {
        this.length = length;  // Initialize length
        this.width = width;    // Initialize width
    }

    // Method to calculate the area of the rectangle
    public double area() {
        return length * width;  // Return area
    }
}",1
"public class Circle {
    // Class to represent a circle
    private double radius;  // Radius of the circle

    /* Constructor */
    public Circle(double radius) {
        this.radius = radius;  // Initialize radius
    }

    // Method to calculate the area of the circle
    public double area() {
        return Math.PI * radius * radius;  // Return area
    }
}
",1
"public class Employee {
    // Class to represent an employee
    private String name;  // Employee's name
    private double salary;  // Employee's salary

    /* Constructor */
    public Employee(String name, double salary) {
        this.name = name;  // Initialize name
        this.salary = salary;  // Initialize salary
    }

    // Method to give a raise to the employee
    public void giveRaise(double percentage) {
        salary += salary * (percentage / 100);  // Update salary
    }
}",1
"import java.util.ArrayList;

public class ShoppingCart {
    // Class to represent a shopping cart
    private ArrayList<String> items;  // List of items in the cart

    /* Constructor */
    public ShoppingCart() {
        this.items = new ArrayList<>();  // Initialize items list
    }

    // Method to add an item to the cart
    public void addItem(String item) {
        items.add(item);  // Add item to the list
    }

    // Method to display items in the cart
    public void displayItems() {
        for (String item : items) {
            System.out.println(item);  // Print each item
        }
    }
}",1
"public class Note {
    // Class to represent a note
    private String content;  // Content of the note

    /* Constructor */
    public Note(String content) {
        this.content = content;  // Initialize content
    }

    // Method to display the note
    public void display() {
        System.out.println(""Note: "" + content);  // Print content
    }
}",1
"import java.util.ArrayList;

public class StopwatchWithLap {
    // Class to implement a stopwatch with lap functionality
    private long startTime;  // Time when the stopwatch started
    private ArrayList<Long> lapTimes;  // List to store lap times

    /* Constructor */
    public StopwatchWithLap() {
        this.lapTimes = new ArrayList<>();  // Initialize lap times list
    }

    // Method to start the stopwatch
    public void start() {
        this.startTime = System.currentTimeMillis();  // Record start time
    }

    // Method to record a lap time
    public void lap() {
        lapTimes.add(System.currentTimeMillis() - startTime);  // Store lap time
    }

    // Method to display all lap times
    public void displayLaps() {
        for (long lap : lapTimes) {
            System.out.println(""Lap time: "" + (lap / 1000.0) + "" seconds"");  // Print each lap time
        }
    }
}",1
"import java.util.HashMap;

public class Bank {
    // Class to represent a bank
    private HashMap<String, BankAccount> accounts;  // Map to store bank accounts

    /* Constructor */
    public Bank() {
        this.accounts = new HashMap<>();  // Initialize accounts map
    }

    // Method to add a new account
    public void addAccount(String accountNumber) {
        accounts.put(accountNumber, new BankAccount(accountNumber));  // Create new account
    }

    // Method to get an account
    public BankAccount getAccount(String accountNumber) {
        return accounts.get(accountNumber);  // Return account or null
    }
}",1
"import java.util.LinkedList;

public class SimpleQueue {
    // Class to represent a simple queue
    private LinkedList<Integer> queue;  // Queue to store elements

    /* Constructor */
    public SimpleQueue() {
        this.queue = new LinkedList<>();  // Initialize queue
    }

    // Method to enqueue an element
    public void enqueue(int value) {
        queue.addLast(value);  // Add element to the end of the queue
    }

    // Method to dequeue an element
    public int dequeue() {
        if (!queue.isEmpty()) {
            return queue.removeFirst();  // Remove and return the first element
        }
        throw new IllegalStateException(""Queue is empty"");  // Throw exception if empty
    }
}",0
"public class Calculator {
    // Class to perform basic calculations

    // Method to multiply two numbers
    public double multiply(double a, double b) {
        return a * b;  // Return product
    }

    // Method to divide two numbers
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Cannot divide by zero"");  // Error for division by zero
        }
        return a / b;  // Return quotient
    }
}",1
"import java.util.ArrayList;

public class WeatherStation {
    // Class to represent a weather station
    private ArrayList<Double> temperatures;  // List of recorded temperatures

    /* Constructor */
    public WeatherStation() {
        this.temperatures = new ArrayList<>();  // Initialize temperatures list
    }

    // Method to record a temperature
    public void recordTemperature(double temperature) {
        temperatures.add(temperature);  // Add temperature to the list
    }

    // Method to calculate the average temperature
    public double averageTemperature() {
        double sum = 0;  // Initialize sum
        for (double temp : temperatures) {
            sum += temp;  // Add each temperature
        }
        return temperatures.isEmpty() ? 0 : sum / temperatures.size();  // Return average
    }
}",0
"import java.util.regex.Pattern;

public class URLValidator {
    // Class to validate URLs
    private String url;  // URL to validate

    /* Constructor */
    public URLValidator(String url) {
        this.url = url;  // Initialize URL
    }

    // Method to check if the URL format is valid
    public boolean isValid() {
        String regex = ""^(http://|https://).*"";  // Regex for URL format
        return Pattern.matches(regex, url);  // Return true if URL matches regex
    }
}",1
"import java.util.HashMap;

public class Inventory {
    // Class to manage an inventory of items
    private HashMap<String, Integer> items;  // Map to store item names and quantities

    /* Constructor */
    public Inventory() {
        this.items = new HashMap<>();  // Initialize items map
    }

    // Method to add an item to the inventory
    public void addItem(String itemName, int quantity) {
        items.put(itemName, items.getOrDefault(itemName, 0) + quantity);  // Update quantity
    }

    // Method to get the quantity of an item
    public int getQuantity(String itemName) {
        return items.getOrDefault(itemName, 0);  // Return quantity or 0 if not found
    }
}",1
"public class GameScore {
    // Class to track the score of a game
    private int score;  // Current score

    /* Constructor */
    public GameScore() {
        this.score = 0;  // Initialize score to 0
    }

    // Method to increase the score
    public void addScore(int points) {
        score += points;  // Add points to score
    }

    // Method to get the current score
    public int getScore() {
        return score;  // Return current score
    }
}",1
"public class Student {
    // Class to represent a student
    private String name;  // Student's name
    private int grade;  // Student's grade

    /* Constructor */
    public Student(String name, int grade) {
        this.name = name;  // Initialize name
        this.grade = grade;  // Initialize grade
    }

    // Method to check if the student has passed
    public boolean hasPassed() {
        return grade >= 60;  // Return true if grade is 60 or more
    }
}",1
"public class LightSwitch {
    // Class to represent a light switch
    private boolean isOn;  // State of the light switch

    /* Constructor */
    public LightSwitch() {
        this.isOn = false;  // Initialize state to off
    }

    // Method to toggle the switch
    public void toggle() {
        isOn = !isOn;  // Change the state
    }

    // Method to check if the light is on
    public boolean isOn() {
        return isOn;  // Return the state
    }
}",1
"public class Email {
    // Class to represent an email
    private String recipient;  // Recipient's email address
    private String subject;  // Subject of the email
    private String body;  // Body content of the email

    /* Constructor */
    public Email(String recipient, String subject, String body) {
        this.recipient = recipient;  // Initialize recipient
        this.subject = subject;  // Initialize subject
        this.body = body;  // Initialize body
    }

    // Method to send the email
    public void send() {
        System.out.println(""Sending email to "" + recipient);  // Notify sending
        System.out.println(""Subject: "" + subject);  // Print subject
        System.out.println(""Body: "" + body);  // Print body
    }
}",0
"import java.util.ArrayList;

public class Library {
    // Class to represent a library
    private ArrayList<String> books;  // List of books in the library

    /* Constructor */
    public Library() {
        this.books = new ArrayList<>();  // Initialize books list
    }

    // Method to add a book to the library
    public void addBook(String book) {
        books.add(book);  // Add book to the list
    }

    // Method to display all books in the library
    public void displayBooks() {
        for (String book : books) {
            System.out.println(book);  // Print each book
        }
    }
}",1
"public class SimpleTimer {
    // Class to implement a simple timer
    private long startTime;  // Time when the timer started

    /* Constructor */
    public SimpleTimer() {
        this.startTime = 0;  // Initialize start time
    }

    // Method to start the timer
    public void start() {
        startTime = System.currentTimeMillis();  // Record start time
    }

    // Method to get elapsed time in seconds
    public double getElapsedTime() {
        return (System.currentTimeMillis() - startTime) / 1000.0;  // Return elapsed time
    }
}",1
"public class Book {
    // Class to represent a book
    private String title;  // Title of the book
    private String author;  // Author of the book

    /* Constructor */
    public Book(String title, String author) {
        this.title = title;  // Initialize title
        this.author = author;  // Initialize author
    }

    // Method to display book details
    public void displayDetails() {
        System.out.println(""Title: "" + title);  // Print title
        System.out.println(""Author: "" + author);  // Print author
    }
}",0
"public class SmartThermostat {
    // Class to represent a smart thermostat
    private double temperature;  // Current temperature setting

    /* Constructor */
    public SmartThermostat() {
        this.temperature = 20.0;  // Default temperature
    }

    // Method to set the temperature
    public void setTemperature(double temperature) {
        this.temperature = temperature;  // Update temperature
    }

    // Method to get the current temperature
    public double getTemperature() {
        return temperature;  // Return current temperature
    }
}",1
"public class CoffeeMachine {
    // Class to represent a coffee machine
    private boolean isOn;  // State of the coffee machine

    /* Constructor */
    public CoffeeMachine() {
        this.isOn = false;  // Initialize state to off
    }

    // Method to turn on the coffee machine
    public void turnOn() {
        isOn = true;  // Set state to on
    }

    // Method to brew coffee
    public void brew() {
        if (isOn) {
            System.out.println(""Brewing coffee..."");  // Notify brewing
        } else {
            System.out.println(""Please turn on the coffee machine first."");  // Error message
        }
    }
}",0
"public class GameCharacter {
    // Class to represent a game character
    private String name;  // Character's name
    private int health;  // Character's health points

    /* Constructor */
    public GameCharacter(String name, int health) {
        this.name = name;  // Initialize name
        this.health = health;  // Initialize health
    }

    // Method to take damage
    public void takeDamage(int damage) {
        health -= damage;  // Decrease health
    }

    // Method to check if character is alive
    public boolean isAlive() {
        return health > 0;  // Return true if health is greater than 0
    }
}",1
"public class MusicPlayer {
    // Class to represent a music player
    private boolean isPlaying;  // State of the music player

    /* Constructor */
    public MusicPlayer() {
        this.isPlaying = false;  // Initialize state to stopped
    }

    // Method to play music
    public void play() {
        isPlaying = true;  // Set state to playing
        System.out.println(""Playing music..."");  // Notify playing
    }

    // Method to stop music
    public void stop() {
        isPlaying = false;  // Set state to stopped
        System.out.println(""Music stopped."");  // Notify stopped
    }
}",1
"import java.util.ArrayList;

public class NoteBook {
    // Class to represent a notebook
    private ArrayList<String> notes;  // List of notes

    /* Constructor */
    public NoteBook() {
        this.notes = new ArrayList<>();  // Initialize notes list
    }

    // Method to add a note
    public void addNote(String note) {
        notes.add(note);  // Add note to the list
    }

    // Method to display all notes
    public void displayNotes() {
        for (String note : notes) {
            System.out.println(note);  // Print each note
        }
    }
}",1
"public class AlarmClock {
    // Class to represent an alarm clock
    private String time;  // Alarm time

    /* Constructor */
    public AlarmClock(String time) {
        this.time = time;  // Initialize alarm time
    }

    // Method to ring the alarm
    public void ring() {
        System.out.println(""Alarm ringing at "" + time);  // Notify alarm
    }
}",1
"public class PasswordValidator {
    // Class to validate passwords
    private String password;  // Password to validate

    /* Constructor */
    public PasswordValidator(String password) {
        this.password = password;  // Initialize password
    }

    // Method to check if the password is strong
    public boolean isStrong() {
        return password.length() >= 8;  // Return true if length is at least 8
    }
}",1
"public class TemperatureConverter {
    // Class to convert temperatures
    // Method to convert Celsius to Fahrenheit
    public double celsiusToFahrenheit(double celsius) {
        return (celsius * 9/5) + 32;  // Return Fahrenheit value
    }

    // Method to convert Fahrenheit to Celsius
    public double fahrenheitToCelsius(double fahrenheit) {
        return (fahrenheit - 32) * 5/9;  // Return Celsius value
    }
}",1
"public class PizzaOrder {
    // Class to represent a pizza order
    private String size;  // Size of the pizza
    private String toppings;  // Toppings on the pizza

    /* Constructor */
    public PizzaOrder(String size, String toppings) {
        this.size = size;  // Initialize size
        this.toppings = toppings;  // Initialize toppings
    }

    // Method to display order details
    public void displayOrder() {
        System.out.println(""Pizza Size: "" + size);  // Print size
        System.out.println(""Toppings: "" + toppings);  // Print toppings
    }
}",0
"public class Recipe {
    // Class to represent a recipe
    private String name;  // Name of the recipe
    private String ingredients;  // Ingredients required

    /* Constructor */
    public Recipe(String name, String ingredients) {
        this.name = name;  // Initialize name
        this.ingredients = ingredients;  // Initialize ingredients
    }

    // Method to display recipe details
    public void displayRecipe() {
        System.out.println(""Recipe: "" + name);  // Print recipe name
        System.out.println(""Ingredients: "" + ingredients);  // Print ingredients
    }
}",0
"import java.util.ArrayList;

public class TaskManager {
    // Class to manage tasks
    private ArrayList<String> tasks;  // List of tasks

    /* Constructor */
    public TaskManager() {
        this.tasks = new ArrayList<>();  // Initialize tasks list
    }

    // Method to add a task
    public void addTask(String task) {
        tasks.add(task);  // Add task to the list
    }

    // Method to display all tasks
    public void displayTasks() {
        for (String task : tasks) {
            System.out.println(task);  // Print each task
        }
    }
}",1
"public class Calculator {
    // Class to represent a simple calculator

    /* Method to add two numbers */
    public double add(double a, double b) {
        return a + b;  // Return the sum of a and b
    }

    /* Method to subtract two numbers */
    public double subtract(double a, double b) {
        return a - b;  // Return the difference of a and b
    }

    /* Method to multiply two numbers */
    public double multiply(double a, double b) {
        return a * b;  // Return the product of a and b
    }

    /* Method to divide two numbers */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Cannot divide by zero!"");  // Error for division by zero
        }
        return a / b;  // Return the quotient of a and b
    }
}",1
"public class Vehicle {
    // Class to represent a vehicle
    private String brand;  // Vehicle brand
    private String model;  // Vehicle model
    private int year;  // Manufacture year

    /* Constructor */
    public Vehicle(String brand, String model, int year) {
        this.brand = brand;  // Initialize brand
        this.model = model;  // Initialize model
        this.year = year;  // Initialize year
    }

    /* Method to display vehicle information */
    public void displayInfo() {
        System.out.println(""Brand: "" + brand);  // Print vehicle brand
        System.out.println(""Model: "" + model);  // Print vehicle model
        System.out.println(""Year: "" + year);  // Print manufacture year
    }
}",0
"public class Note {
    // Class to represent a note
    private String title;  // Title of the note
    private String content;  // Content of the note

    /* Constructor */
    public Note(String title, String content) {
        this.title = title;  // Initialize title
        this.content = content;  // Initialize content
    }

    /* Method to display the note */
    public void display() {
        System.out.println(""Title: "" + title);  // Print note title
        System.out.println(""Content: "" + content);  // Print note content
    }
}",0
"public class Student {
    // Class to represent a student
    private String name;  // Student's name
    private int age;  // Student's age
    private String major;  // Student's major

    /* Constructor */
    public Student(String name, int age, String major) {
        this.name = name;  // Initialize name
        this.age = age;  // Initialize age
        this.major = major;  // Initialize major
    }

    /* Method to display student details */
    public void displayDetails() {
        System.out.println(""Name: "" + name);  // Print student's name
        System.out.println(""Age: "" + age);  // Print student's age
        System.out.println(""Major: "" + major);  // Print student's major
    }
}",0
"import java.util.ArrayList;

public class Bookstore {
    // Class to represent a bookstore
    private ArrayList<String> books;  // List of books in the bookstore

    /* Constructor */
    public Bookstore() {
        this.books = new ArrayList<>();  // Initialize the book list
    }

    /* Method to add a book */
    public void addBook(String book) {
        books.add(book);  // Add the book to the list
    }

    /* Method to display all books */
    public void displayBooks() {
        System.out.println(""Books in the store: "");  // Header for the book list
        for (String book : books) {
            System.out.println(book);  // Print each book
        }
    }
}
",0
"import java.util.ArrayList;

public class ShoppingCart {
    // Class to represent a shopping cart
    private ArrayList<String> items;  // List of items in the cart

    /* Constructor */
    public ShoppingCart() {
        this.items = new ArrayList<>();  // Initialize the items list
    }

    /* Method to add an item to the cart */
    public void addItem(String item) {
        items.add(item);  // Add item to the cart
        System.out.println(item + "" added to cart."");  // Notify user
    }

    /* Method to display all items in the cart */
    public void displayItems() {
        System.out.println(""Items in your cart: "");  // Header for the cart
        for (String item : items) {
            System.out.println(item);  // Print each item
        }
    }
}",0
"import java.util.ArrayList;

public class ToDoList {
    // Class to represent a to-do list
    private ArrayList<String> tasks;  // List of tasks

    /* Constructor */
    public ToDoList() {
        this.tasks = new ArrayList<>();  // Initialize the tasks list
    }

    /* Method to add a task */
    public void addTask(String task) {
        tasks.add(task);  // Add task to the list
        System.out.println(""Task added: "" + task);  // Notify user
    }

    /* Method to display all tasks */
    public void displayTasks() {
        System.out.println(""To-Do List: "");  // Header for the to-do list
        for (String task : tasks) {
            System.out.println(task);  // Print each task
        }
    }
}",0
"public class CurrencyConverter {
    // Class to convert currencies

    /* Method to convert USD to EUR */
    public double usdToEur(double amount) {
        return amount * 0.85;  // Conversion rate for USD to EUR
    }

    /* Method to convert EUR to USD */
    public double eurToUsd(double amount) {
        return amount * 1.18;  // Conversion rate for EUR to USD
    }
}",1
"import java.util.HashMap;

public class StudentGrades {
    // Class to represent student grades
    private HashMap<String, Double> grades;  // Map of student names to grades

    /* Constructor */
    public StudentGrades() {
        this.grades = new HashMap<>();  // Initialize grades map
    }

    /* Method to add a student's grade */
    public void addGrade(String student, double grade) {
        grades.put(student, grade);  // Add student's grade to the map
    }

    /* Method to display all student grades */
    public void displayGrades() {
        System.out.println(""Student Grades: "");  // Header for grades
        for (String student : grades.keySet()) {
            System.out.println(student + "": "" + grades.get(student));  // Print each student's grade
        }
    }
}",0
"public class Stopwatch {
    // Class to represent a simple stopwatch
    private long startTime;  // Time when the stopwatch started

    /* Method to start the stopwatch */
    public void start() {
        startTime = System.currentTimeMillis();  // Record start time
        System.out.println(""Stopwatch started."");  // Notify user
    }

    /* Method to get elapsed time in seconds */
    public double getElapsedTime() {
        long elapsed = System.currentTimeMillis() - startTime;  // Calculate elapsed time
        return elapsed / 1000.0;  // Return elapsed time in seconds
    }
}",1
"public class ChatMessage {
    // Class to represent a chat message
    private String sender;  // Sender's name
    private String message;  // Message content

    /* Constructor */
    public ChatMessage(String sender, String message) {
        this.sender = sender;  // Initialize sender
        this.message = message;  // Initialize message
    }

    /* Method to display the chat message */
    public void display() {
        System.out.println(sender + "": "" + message);  // Print message with sender
    }
}",1
"public class Event {
    // Class to represent an event
    private String name;  // Name of the event
    private String date;  // Date of the event

    /* Constructor */
    public Event(String name, String date) {
        this.name = name;  // Initialize name
        this.date = date;  // Initialize date
    }

    /* Method to display event details */
    public void displayDetails() {
        System.out.println(""Event: "" + name);  // Print event name
        System.out.println(""Date: "" + date);  // Print event date
    }
}",0
"public class User {
    // Class to represent a user
    private String username;  // Username
    private String password;  // User's password

    /* Constructor */
    public User(String username, String password) {
        this.username = username;  // Initialize username
        this.password = password;  // Initialize password
    }

    /* Method to display user information */
    public void displayInfo() {
        System.out.println(""Username: "" + username);  // Print username
        // Password is not displayed for security reasons
    }
}",1
"import java.util.ArrayList;

public class Recipe {
    // Class to represent a recipe
    private String name;  // Recipe name
    private ArrayList<String> ingredients;  // List of ingredients

    /* Constructor */
    public Recipe(String name) {
        this.name = name;  // Initialize recipe name
        this.ingredients = new ArrayList<>();  // Initialize ingredients list
    }

    /* Method to add an ingredient */
    public void addIngredient(String ingredient) {
        ingredients.add(ingredient);  // Add ingredient to the list
    }

    /* Method to display recipe details */
    public void displayRecipe() {
        System.out.println(""Recipe: "" + name);  // Print recipe name
        System.out.println(""Ingredients: "");  // Header for ingredients
        for (String ingredient : ingredients) {
            System.out.println(""- "" + ingredient);  // Print each ingredient
        }
    }
}",0
"public class Reminder {
    // Class to represent a reminder
    private String message;  // Reminder message
    private String time;  // Time for the reminder

    /* Constructor */
    public Reminder(String message, String time) {
        this.message = message;  // Initialize message
        this.time = time;  // Initialize time
    }

    /* Method to display the reminder */
    public void displayReminder() {
        System.out.println(""Reminder: "" + message + "" at "" + time);  // Print reminder details
    }
}",1
"public class Animal {
    // Class to represent an animal
    private String name;  // Animal's name
    private String species;  // Species of the animal

    /* Constructor */
    public Animal(String name, String species) {
        this.name = name;  // Initialize name
        this.species = species;  // Initialize species
    }

    /* Method to display animal details */
    public void displayDetails() {
        System.out.println(""Animal: "" + name);  // Print animal's name
        System.out.println(""Species: "" + species);  // Print species
    }
}",0
"import java.util.ArrayList;

public class ShoppingList {
    // Class to represent a shopping list
    private ArrayList<String> items;  // List of items

    /* Constructor */
    public ShoppingList() {
        this.items = new ArrayList<>();  // Initialize items list
    }

    /* Method to add an item */
    public void addItem(String item) {
        items.add(item);  // Add item to the list
    }

    /* Method to display the shopping list */
    public void displayItems() {
        System.out.println(""Shopping List: "");  // Header for shopping list
        for (String item : items) {
            System.out.println(""- "" + item);  // Print each item
        }
    }
}",0
"import java.util.ArrayList;

public class Playlist {
    // Class to represent a playlist
    private String name;  // Playlist name
    private ArrayList<String> songs;  // List of songs

    /* Constructor */
    public Playlist(String name) {
        this.name = name;  // Initialize playlist name
        this.songs = new ArrayList<>();  // Initialize songs list
    }

    /* Method to add a song */
    public void addSong(String song) {
        songs.add(song);  // Add song to the playlist
    }

    /* Method to display the playlist */
    public void displayPlaylist() {
        System.out.println(""Playlist: "" + name);  // Print playlist name
        System.out.println(""Songs: "");  // Header for songs
        for (String song : songs) {
            System.out.println(""- "" + song);  // Print each song
        }
    }
}",0
"public class TravelPlan {
    // Class to represent a travel plan
    private String destination;  // Travel destination
    private int days;  // Number of days for the trip

    /* Constructor */
    public TravelPlan(String destination, int days) {
        this.destination = destination;  // Initialize destination
        this.days = days;  // Initialize number of days
    }

    /* Method to display the travel plan */
    public void displayPlan() {
        System.out.println(""Travel to: "" + destination);  // Print destination
        System.out.println(""Duration: "" + days + "" days"");  // Print duration
    }
}",0
"public class Quiz {
    // Class to represent a simple quiz
    private String question;  // Quiz question
    private String answer;  // Correct answer

    /* Constructor */
    public Quiz(String question, String answer) {
        this.question = question;  // Initialize question
        this.answer = answer;  // Initialize answer
    }

    /* Method to display the quiz */
    public void displayQuiz() {
        System.out.println(""Question: "" + question);  // Print quiz question
        System.out.println(""Answer: "" + answer);  // Print correct answer
    }
}",0
"public class Movie {
    // Class to represent a movie
    private String title;  // Movie title
    private String director;  // Movie director
    private int year;  // Release year

    /* Constructor */
    public Movie(String title, String director, int year) {
        this.title = title;  // Initialize title
        this.director = director;  // Initialize director
        this.year = year;  // Initialize year
    }

    /* Method to display movie details */
    public void displayDetails() {
        System.out.println(""Title: "" + title);  // Print movie title
        System.out.println(""Director: "" + director);  // Print director
        System.out.println(""Year: "" + year);  // Print release year
    }
}",0
"import java.util.HashMap;

public class PhoneBook {
    // Class to represent a phone book
    private HashMap<String, String> contacts;  // Map of contacts

    /* Constructor */
    public PhoneBook() {
        this.contacts = new HashMap<>();  // Initialize contacts map
    }

    /* Method to add a contact */
    public void addContact(String name, String phoneNumber) {
        contacts.put(name, phoneNumber);  // Add contact to the phone book
    }

    /* Method to display all contacts */
    public void displayContacts() {
        System.out.println(""Phone Book: "");  // Header for phone book
        for (String name : contacts.keySet()) {
            System.out.println(name + "": "" + contacts.get(name));  // Print each contact
        }
    }
}",0
"public class Email {
    // Class to represent an email
    private String sender;  // Sender's email address
    private String recipient;  // Recipient's email address
    private String subject;  // Subject of the email
    private String body;  // Body of the email

    /* Constructor */
    public Email(String sender, String recipient, String subject, String body) {
        this.sender = sender;  // Initialize sender
        this.recipient = recipient;  // Initialize recipient
        this.subject = subject;  // Initialize subject
        this.body = body;  // Initialize body
    }

    /* Method to display email details */
    public void displayEmail() {
        System.out.println(""From: "" + sender);  // Print sender
        System.out.println(""To: "" + recipient);  // Print recipient
        System.out.println(""Subject: "" + subject);  // Print subject
        System.out.println(""Body: "" + body);  // Print body
    }
}",0
"public class FitnessTracker {
    // Class to represent a fitness tracker
    private String user;  // User's name
    private double steps;  // Number of steps taken

    /* Constructor */
    public FitnessTracker(String user) {
        this.user = user;  // Initialize user
        this.steps = 0;  // Initialize steps to zero
    }

    /* Method to add steps */
    public void addSteps(double steps) {
        this.steps += steps;  // Add steps to the total
    }

    /* Method to display total steps */
    public void displaySteps() {
        System.out.println(user + "" has taken "" + steps + "" steps."");  // Print total steps
    }
}",1
"import java.util.ArrayList;

public class Diary {
    // Class to represent a diary
    private ArrayList<String> entries;  // List of diary entries

    /* Constructor */
    public Diary() {
        this.entries = new ArrayList<>();  // Initialize entries list
    }

    /* Method to add an entry */
    public void addEntry(String entry) {
        entries.add(entry);  // Add entry to the diary
    }

    /* Method to display all entries */
    public void displayEntries() {
        System.out.println(""Diary Entries: "");  // Header for diary
        for (String entry : entries) {
            System.out.println(entry);  // Print each entry
        }
    }
}",0
"import java.util.ArrayList;

public class Garden {
    // Class to represent a garden
    private String name;  // Garden name
    private ArrayList<String> plants;  // List of plants

    /* Constructor */
    public Garden(String name) {
        this.name = name;  // Initialize garden name
        this.plants = new ArrayList<>();  // Initialize plants list
    }

    /* Method to add a plant */
    public void addPlant(String plant) {
        plants.add(plant);  // Add plant to the garden
    }

    /* Method to display garden details */
    public void displayGarden() {
        System.out.println(""Garden: "" + name);  // Print garden name
        System.out.println(""Plants: "");  // Header for plants
        for (String plant : plants) {
            System.out.println(""- "" + plant);  // Print each plant
        }
    }
}",0
"public class Game {
    // Class to represent a game
    private String title;  // Game title
    private String genre;  // Game genre

    /* Constructor */
    public Game(String title, String genre) {
        this.title = title;  // Initialize title
        this.genre = genre;  // Initialize genre
    }

    /* Method to display game details */
    public void displayDetails() {
        System.out.println(""Game: "" + title);  // Print game title
        System.out.println(""Genre: "" + genre);  // Print game genre
    }
}",0
"public class Event {
    // Class to represent an event
    private String name;  // Event name
    private String date;  // Event date

    /* Constructor */
    public Event(String name, String date) {
        this.name = name;  // Initialize name
        this.date = date;  // Initialize date
    }

    /* Method to display event details */
    public void displayEvent() {
        System.out.println(""Event: "" + name);  // Print event name
      
    }
}",1
"public class Address {
    // Class to represent an address
    private String street;  // Street address
    private String city;  // City name
    private String state;  // State name
    private String zip;  // ZIP code

    /* Constructor */
    public Address(String street, String city, String state, String zip) {
        this.street = street;  // Initialize street
        this.city = city;  // Initialize city
        this.state = state;  // Initialize state
        this.zip = zip;  // Initialize ZIP code
    }

    /* Method to display address details */
    public void displayAddress() {
        System.out.println(""Address: "" + street + "", "" + city + "", "" + state + "" "" + zip);  // Print full address
    }
}",0
"public class Task {
    // Class to represent a task
    private String title;  // Task title
    private boolean completed;  // Completion status

    /* Constructor */
    public Task(String title) {
        this.title = title;  // Initialize title
        this.completed = false;  // Initialize as not completed
    }

    /* Method to mark the task as completed */
    public void markCompleted() {
        completed = true;  // Set completed status to true
    }

    /* Method to display task details */
    public void displayTask() {
        System.out.println(""Task: "" + title + "" [Completed: "" + completed + ""]"");  // Print task status
    }
}",1
"public class Book {
    // Class to represent a book
    private String title;  // Title of the book
    private String author;  // Author of the book
    private int pages;  // Number of pages in the book

    /* Constructor */
    public Book(String title, String author, int pages) {
        this.title = title;  // Initialize book title
        this.author = author;  // Initialize author name
        this.pages = pages;  // Initialize number of pages
    }

    /* Method to display book details */
    public void displayDetails() {
        System.out.println(""Book Title: "" + title);  // Print the book title
        System.out.println(""Author: "" + author);  // Print the author's name
        System.out.println(""Pages: "" + pages);  // Print the number of pages
    }
}",0
"public class Car {
    // Class to represent a car
    private String make;  // Manufacturer of the car
    private String model;  // Model of the car
    private int year;  // Year of manufacture

    /* Constructor */
    public Car(String make, String model, int year) {
        this.make = make;  // Initialize car make
        this.model = model;  // Initialize car model
        this.year = year;  // Initialize manufacture year
    }

    /* Method to display car details */
    public void displayDetails() {
        System.out.println(""Car Make: "" + make);  // Print the car make
        System.out.println(""Model: "" + model);  // Print the car model
        System.out.println(""Year: "" + year);  // Print the year of manufacture
    }
}",0
"public class Student {
    // Class to represent a student
    private String name;  // Name of the student
    private int age;  // Age of the student
    private String major;  // Major field of study

    /* Constructor */
    public Student(String name, int age, String major) {
        this.name = name;  // Initialize student's name
        this.age = age;  // Initialize student's age
        this.major = major;  // Initialize major field of study
    }

    /* Method to display student details */
    public void displayDetails() {
        System.out.println(""Student Name: "" + name);  // Print the student's name
        System.out.println(""Age: "" + age);  // Print the student's age
        System.out.println(""Major: "" + major);  // Print the student's major
    }
}",0
"import java.util.ArrayList;

public class TaskManager {
    // Class to manage a list of tasks
    private ArrayList<String> tasks;  // List of tasks

    /* Constructor */
    public TaskManager() {
        tasks = new ArrayList<>();  // Initialize the tasks list
    }

    /* Method to add a task */
    public void addTask(String task) {
        tasks.add(task);  // Add task to the list
    }

    /* Method to display all tasks */
    public void displayTasks() {
       
        for (String task : tasks) {
            System.out.println(""- "" + task);  // Print each task
        }
    }
}",1
"public class Contact {
    // Class to represent a contact in a phone book
    private String name;  // Contact's name
    private String phoneNumber;  // Contact's phone number

    /* Constructor */
    public Contact(String name, String phoneNumber) {
        this.name = name;  // Initialize contact's name
        this.phoneNumber = phoneNumber;  // Initialize contact's phone number
    }

    /* Method to display contact details */
    public void displayContact() {
        System.out.println(""Contact Name: "" + name);  // Print the contact's name
        System.out.println(""Phone Number: "" + phoneNumber);  // Print the contact's phone number
    }
}",0
"public class Contact {
    // Class to represent a contact in a phone book
    private String name;  // Contact's name
    private String phoneNumber;  // Contact's phone number

    /* Constructor */
    public Contact(String name, String phoneNumber) {
        this.name = name;  // Initialize contact's name
    }

    /* Method to display contact details */
    public void displayContact() {
        System.out.println(""Contact Name: "" + name);  // Print the contact's name
        System.out.println(""Phone Number: "" + phoneNumber);  // Print the contact's phone number
    }
}",1
"public class Calculator {
    // Class to perform basic arithmetic operations

    /* Method to add two numbers */
    public int add(int a, int b) {
        return a + b;  // Return the sum of a and b
    }

    /* Method to subtract two numbers */
    public int subtract(int a, int b) {
        return a - b;  // Return the difference of a and b
    }

    /* Method to multiply two numbers */
    public int multiply(int a, int b) {
        return a * b;  // Return the product of a and b
    }

    /* Method to divide two numbers */
    public double divide(int a, int b) {
        if (b != 0) {
            return (double) a / b;  // Return the quotient of a and b
        } else {
            throw new IllegalArgumentException(""Division by zero is not allowed."");  // Handle division by zero
        }
    }
}",1
"public class BankAccount {
    // Class to represent a bank account
    private String accountNumber;  // Account number
    private double balance;  // Current balance

    /* Constructor */
    public BankAccount(String accountNumber) {
        this.accountNumber = accountNumber;  // Initialize account number
        this.balance = 0.0;  // Initialize balance to zero
    }

    /* Method to deposit money */
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;  // Add amount to balance
        } else {
            System.out.println(""Deposit amount must be positive."");  // Handle invalid deposit
        }
    }

    /* Method to withdraw money */
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;  // Subtract amount from balance
        } else {
            System.out.println(""Invalid withdrawal amount."");  // Handle invalid withdrawal
        }
    }

    /* Method to display account details */
    public void displayAccountDetails() {
        System.out.println(""Account Number: "" + accountNumber);  // Print account number
        System.out.println(""Balance: $"" + balance);  // Print current balance
    }
}",0
"public class Weather {
    // Class to represent weather data
    private String location;  // Location of the weather data
    private double temperature;  // Temperature in Celsius

    /* Constructor */
    public Weather(String location, double temperature) {
        this.location = location;  // Initialize location
        this.temperature = temperature;  // Initialize temperature
    }

    /* Method to display weather information */
    public void displayWeather() {
        System.out.println(""Weather in "" + location + "": "" + temperature + ""°C"");  // Print weather info
    }
}",1
"import java.util.ArrayList;

public class EventPlanner {
    // Class to plan events
    private String eventName;  // Name of the event
    private ArrayList<String> attendees;  // List of attendees

    /* Constructor */
    public EventPlanner(String eventName) {
        this.eventName = eventName;  // Initialize event name
        this.attendees = new ArrayList<>();  // Initialize attendees list
    }

    /* Method to add an attendee */
    public void addAttendee(String attendee) {
        attendees.add(attendee);  // Add attendee to the list
    }

    /* Method to display event details */
    public void displayEventDetails() {
        System.out.println(""Event: "" + eventName);  // Print event name
        System.out.println(""Attendees: "");  // Header for attendees
        for (String attendee : attendees) {
            System.out.println(""- "" + attendee);  // Print each attendee
        }
    }
}",0
"import java.util.ArrayList;

public class Notebook {
    // Class to represent a notebook
    private String subject;  // Subject of the notebook
    private ArrayList<String> notes;  // List of notes

    /* Constructor */
    public Notebook(String subject) {
        this.subject = subject;  // Initialize subject
        this.notes = new ArrayList<>();  // Initialize notes list
    }

    /* Method to add a note */
    public void addNote(String note) {
        notes.add(note);  // Add note to the list
    }

    /* Method to display all notes */
    public void displayNotes() {
        System.out.println(""Notebook Subject: "" + subject);  // Print subject of the notebook
        System.out.println(""Notes: "");  // Header for notes
        for (String note : notes) {
            System.out.println(""- "" + note);  // Print each note
        }
    }
}",0
"import java.util.ArrayList;

public class Library {
    // Class to represent a library
    private ArrayList<Book> books;  // List of books in the library

    /* Constructor */
    public Library() {
        this.books = new ArrayList<>();  // Initialize books list
    }

    /* Method to add a book */
    public void addBook(Book book) {
        books.add(book);  // Add book to the library
    }

    /* Method to display all books */
    public void displayBooks() {
        System.out.println(""Books in the Library: "");  // Header for books
        for (Book book : books) {
            book.displayDetails();  // Display each book's details
            System.out.println();  // Print a blank line for spacing
        }
    }
}",0
"import java.util.ArrayList;

public class ShoppingCart {
    // Class to represent a shopping cart
    private ArrayList<String> items;  // List of items in the cart

    /* Constructor */
    public ShoppingCart() {
        items = new ArrayList<>();  // Initialize items list
    }

    /* Method to add an item */
    public void addItem(String item) {
        items.add(item);  // Add item to the cart
    }

    /* Method to display all items */
    public void displayItems() {
        System.out.println(""Items in Shopping Cart: "");  // Header for cart items
        for (String item : items) {
            System.out.println(""- "" + item);  // Print each item
        }
    }
}",0
"import java.util.ArrayList;

public class ShoppingCart {
    // Class to represent a shopping cart

    /* Constructor */
    public ShoppingCart() {
        items = new ArrayList<>();  // Initialize items list
    }

    /* Method to add an item */
    public void addItem(String item) {
        items.add(item);  // Add item to the cart
    }

    /* Method to display all items */
    public void displayItems() {
        System.out.println(""Items in Shopping Cart: "");  // Header for cart items
        for (String item : items) {
            System.out.println(""- "" + item);  // Print each item
        }
    }
}
",1
"import java.util.ArrayList;

public class Playlist {
    // Class to represent a music playlist
    private String name;  // Name of the playlist
    private ArrayList<String> songs;  // List of songs in the playlist

    /* Constructor */
    public Playlist(String name) {
        this.name = name;  // Initialize playlist name
        this.songs = new ArrayList<>();  // Initialize songs list
    }

    /* Method to add a song */
    public void addSong(String song) {
        songs.add(song);  // Add song to the playlist
    }

    /* Method to display playlist details */
    public void displayPlaylist() {
        System.out.println(""Playlist: "" + name);  // Print playlist name
        System.out.println(""Songs: "");  // Header for songs
        for (String song : songs) {
            System.out.println(""- "" + song);  // Print each song
        }
    }
}",0
"public class Animal {
    // Class to represent an animal
    private String name;  // Name of the animal
    private String species;  // Species of the animal

    /* Constructor */
    public Animal(String name, String species) {
        this.name = name;  // Initialize animal name
        this.species = species;  // Initialize animal species
    }

    /* Method to display animal details */
    public void displayDetails() {
        System.out.println(""Animal Name: "" + name);  // Print the animal's name
        System.out.println(""Species: "" + species);  // Print the animal's species
    }
}",0
"public class Animal {
    // Class to represent an animal
    private String name;  // Name of the animal
    private String species;  // Species of the animal

    /* Constructor */
    public Animal(String name, String species) {
        this.name = name;  // Initialize animal name
    }

    /* Method to display animal details */
    public void displayDetails() {
        System.out.println(""Animal Name: "" + name);  // Print the animal's name
        System.out.println(""Species: "" + species);  // Print the animal's species
    }
}
",1
"public class Teacher {
    // Class to represent a teacher
    private String name;  // Teacher's name
    private String subject;  // Subject taught by the teacher

    /* Constructor */
    public Teacher(String name, String subject) {
        this.name = name;  // Initialize teacher's name
    }

    /* Method to display teacher details */
    public void displayDetails() {
        System.out.println(""Teacher Name: "" + name);  // Print the teacher's name
        System.out.println(""Subject: "" + subject);  // Print the subject taught
    }
}
",1
"import java.util.ArrayList;

public class Recipe {
    // Class to represent a cooking recipe
    private String title;  // Title of the recipe
    private ArrayList<String> ingredients;  // List of ingredients

    /* Constructor */
    public Recipe(String title) {
        this.title = title;  // Initialize recipe title
        this.ingredients = new ArrayList<>();  // Initialize ingredients list
    }

    /* Method to add an ingredient */
    public void addIngredient(String ingredient) {
        ingredients.add(ingredient);  // Add ingredient to the recipe
    }

    /* Method to display recipe details */
    public void displayRecipe() {
        System.out.println(""Recipe: "" + title);  // Print recipe title
        System.out.println(""Ingredients: "");  // Header for ingredients
        for (String ingredient : ingredients) {
            System.out.println(""- "" + ingredient);  // Print each ingredient
        }
    }
}",0
"public class FitnessTracker {
    // Class to track fitness activities
    private String user;  // User's name
    private int steps;  // Steps taken
    private double caloriesBurned;  // Calories burned

    /* Constructor */
    public FitnessTracker(String user) {
        this.user = user;  // Initialize user name
        this.steps = 0;  // Initialize steps to zero
        this.caloriesBurned = 0.0;  // Initialize calories burned to zero
    }

    /* Method to add steps */
    public void addSteps(int steps) {
        this.steps += steps;  // Add steps to the total
    }

    /* Method to add calories burned */
    public void addCalories(double calories) {
        this.caloriesBurned += calories;  // Add calories burned
    }

    /* Method to display fitness data */
    public void displayFitnessData() {
        System.out.println(""User: "" + user);  // Print user name
        System.out.println(""Total Steps: "" + steps);  // Print total steps taken
        System.out.println(""Calories Burned: "" + caloriesBurned);  // Print calories burned
    }
}",0
"import java.util.ArrayList;

public class PhotoAlbum {
    // Class to represent a photo album
    private String title;  // Title of the album
    private ArrayList<String> photos;  // List of photos in the album

    /* Constructor */
    public PhotoAlbum(String title) {
        this.title = title;  // Initialize album title
        this.photos = new ArrayList<>();  // Initialize photos list
    }

    /* Method to add a photo */
    public void addPhoto(String photo) {
        photos.add(photo);  // Add photo to the album
    }

    /* Method to display album details */
    public void displayAlbum() {
        System.out.println(""Photo Album: "" + title);  // Print album title
        System.out.println(""Photos: "");  // Header for photos
        for (String photo : photos) {
            System.out.println(""- "" + photo);  // Print each photo
        }
    }
}",0
"public class FitnessClass {
    // Class to represent a fitness class
    private String className;  // Name of the fitness class
    private String instructor;  // Instructor of the class

    /* Constructor */
    public FitnessClass(String className, String instructor) {
        this.className = className;  // Initialize class name
    }

    /* Method to display class details */
    public void displayClassDetails() {
        System.out.println(""Fitness Class: "" + className);  // Print class name
        System.out.println(""Instructor: "" + instructor);  // Print instructor name
    }
}
",1
"public class Movie {
    // Class to represent a movie
    private String title;  // Title of the movie
    private String director;  // Director of the movie
    private int year;  // Year of release

    /* Constructor */
    public Movie(String title, String director, int year) {
        this.title = title;  // Initialize movie title
        this.director = director;  // Initialize director name
        this.year = year;  // Initialize year of release
    }

    /* Method to display movie details */
    public void displayDetails() {
        System.out.println(""Movie Title: "" + title);  // Print movie title
        System.out.println(""Director: "" + director);  // Print director's name
        System.out.println(""Year: "" + year);  // Print year of release
    }
}",0
"public class Subscription {
    // Class to represent a subscription service
    private String serviceName;  // Name of the service
    private double monthlyFee;  // Monthly fee for the subscription

    /* Constructor */
    public Subscription(String serviceName, double monthlyFee) {
        this.serviceName = serviceName;  // Initialize service name
    }

    /* Method to display subscription details */
    public void displayDetails() {
        System.out.println(""Subscription Service: "" + serviceName);  // Print service name
        System.out.println(""Monthly Fee: $"" + monthlyFee);  // Print monthly fee
    }
}
",1
"public class SocialMediaProfile {
    // Class to represent a social media profile
    private String username;  // Username of the profile
    private String bio;  // Bio of the user

    /* Constructor */
    public SocialMediaProfile(String username, String bio) {
        this.username = username;  // Initialize username
    }

    /* Method to display profile details */
    public void displayProfile() {
        System.out.println(""Username: "" + username);  // Print username
        System.out.println(""Bio: "" + bio);  // Print bio
    }
}
",1
"public class InsurancePolicy {
    // Class to represent an insurance policy
    private String policyNumber;  // Policy number
    private String holderName;  // Name of the policyholder

    /* Constructor */
    public InsurancePolicy(String policyNumber, String holderName) {
        this.policyNumber = policyNumber;  // Initialize policy number
        this.holderName = holderName;  // Initialize policyholder name
    }

    /* Method to display policy details */
    public void displayPolicy() {
        System.out.println(""Policy Number: "" + policyNumber);  // Print policy number
        System.out.println(""Holder Name: "" + holderName);  // Print policyholder name
    }
}",0
"public class UniversityCourse {
    // Class to represent a university course
    private String courseName;  // Name of the course
    private String instructor;  // Instructor of the course

    /* Constructor */
    public UniversityCourse(String courseName, String instructor) {
        this.courseName = courseName;  // Initialize course name
    }

    /* Method to display course details */
    public void displayCourseDetails() {
        System.out.println(""Course Name: "" + courseName);  // Print course name
        System.out.println(""Instructor: "" + instructor);  // Print instructor name
    }
}
",1
"public class BankAccount {
    // Class to represent a bank account
    private String accountNumber;  // Account number
    private double balance;  // Account balance

    /* Constructor */
    public BankAccount(String accountNumber) {
        this.accountNumber = accountNumber;  // Initialize account number
        this.balance = 0.0;  // Initialize balance to zero
    }

    /* Method to deposit money */
    public void deposit(double amount) {
        balance += amount;  // Add amount to balance
    }

    /* Method to display account details */
    public void displayAccount() {
        System.out.println(""Account Number: "" + accountNumber);  // Print account number
        System.out.println(""Balance: $"" + balance);  // Print account balance
    }
}",1
"public class Event {
    // Class to represent an event
    private String eventName;  // Name of the event
    private String date;  // Date of the event

    /* Constructor */
    public Event(String eventName, String date) {
        this.eventName = eventName;  // Initialize event name
        this.date = date;  // Initialize event date
    }

    /* Method to display event details */
    public void displayEventDetails() {
        System.out.println(""Event Name: "" + eventName);  // Print event name
        System.out.println(""Date: "" + date);  // Print event date
    }
}",0
"public class LibraryCard {
    // Class to represent a library card
    private String cardNumber;  // Card number
    private String holderName;  // Name of the cardholder


    /* Method to display card details */
    public void displayCardDetails() {
        System.out.println(""Library Card Number: "" + cardNumber);  // Print card number
        System.out.println(""Holder Name: "" + holderName);  // Print cardholder name
    }
}",0
"public class Vehicle {
    // Class to represent a vehicle
    private String make;  // Make of the vehicle
    private String model;  // Model of the vehicle

    /* Constructor */
    public Vehicle(String make, String model) {
        this.model = model;  // Initialize vehicle model
    }

    /* Method to display vehicle details */
    public void displayDetails() {
      
        System.out.println(""Model: "" + model);  // Print vehicle model
    }
}",1
"public class Game {
    // Class to represent a game
    private String title;  // Title of the game
    private String genre;  // Genre of the game

    /* Constructor */
    public Game(String title, String genre) {
        this.title = title;  // Initialize game title
    }

    /* Method to display game details */
    public void displayDetails() {
        System.out.println(""Game Title: "" + title);  // Print game title
        System.out.println(""Genre: "" + genre);  // Print game genre
    }
}
",1
"public class Note {
    // Class to represent a note
    private String title;  // Title of the note
    private String content;  // Content of the note

    /* Constructor */
    public Note(String title, String content) {
        this.title = title;  // Initialize note title
        this.content = content;  // Initialize note content
    }

    /* Method to display note details */
    public void displayNote() {
        System.out.println(""Note Title: "" + title);  // Print note title
        System.out.println(""Content: "" + content);  // Print note content
    }
}",0
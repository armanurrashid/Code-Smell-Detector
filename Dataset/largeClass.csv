Code,Smell
"import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;

public class Capitalization extends Panel_BackButton_Template {

    private JButton file_read_button, file_check_button;
    private JTextArea text, result_textarea;
    private JScrollPane read_scrolltext1, result_scrolltext;
    private ImageIcon file_read_img, file_check_img, save_button_img;

    String FileExtension;
    String extension;
    File file;
    String save_filename;
    JFileChooser savefile;
    ButtonSound sound_button = new ButtonSound();

    Capitalization() throws IOException {
        App_Icon();
        super.frame();
        super.setContainer();
        super.setTitle(""Capitalization"");
        super.setPanel();
        super.BackButton();

        file_read_img = new ImageIcon(getClass().getResource(""Picture//ReadFile2.png""));
        file_read_button = new JButton(file_read_img);
        file_read_button.setBackground(new Color(28, 73, 102));
        file_read_button.setBorder(null);
        file_read_button.setBounds(40, 19, file_read_img.getIconWidth(), file_read_img.getIconHeight());
        jpanel.add(file_read_button);

        file_check_img = new ImageIcon(getClass().getResource(""Picture//Check.png""));
        file_check_button = new JButton(file_check_img);
        file_check_button.setBackground(new Color(28, 73, 102));
        file_check_button.setBorder(null);
        file_check_button.setBounds(482, 295, file_check_img.getIconWidth(), file_check_img.getIconHeight());
        jpanel.add(file_check_button);

        save_button_img = new ImageIcon(getClass().getResource(""Picture//Save_button.png""));
        JButton save_button = new JButton(save_button_img);
        save_button.setBackground(new Color(28, 73, 102));
        save_button.setBorder(null);
        save_button.setBounds(485, 575, save_button_img.getIconWidth(), save_button_img.getIconHeight());
        jpanel.add(save_button);

        text = new JTextArea();
        text.setLineWrap(true);
        text.setWrapStyleWord(true);
        text.setEditable(false);
        text.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0, 255)));
        text.setFont(new Font(""Times new Roman"", Font.BOLD, 16));
        jpanel.add(text);

        read_scrolltext1 = new JScrollPane(text, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        read_scrolltext1.setBounds(40, 53, 540, 230);
        jpanel.add(read_scrolltext1);

        result_textarea = new JTextArea();
        result_textarea.setLineWrap(true);
        result_textarea.setWrapStyleWord(true);
        result_textarea.setEditable(false);
        result_textarea.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0, 255)));
        result_textarea.setFont(new Font(""Times new Roman"", Font.BOLD, 16));
        jpanel.add(result_textarea);

        result_scrolltext = new JScrollPane(result_textarea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        result_scrolltext.setBounds(40, 335, 540, 230);
        jpanel.add(result_scrolltext);

        back_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                dispose();
                Back_Button BB = new Back_Button();
                BB.backbutton();
            }
        });

        save_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();

                if (result_textarea.getText().length() > 0) {
                    save_filename = JOptionPane.showInputDialog(""Write New File Name"");
                    savefile = new JFileChooser();
                    savefile.setDialogTitle(""Choose Directory"");
                    savefile.setSelectedFile(new File(save_filename));
                    int sf = savefile.showSaveDialog(null);
                    if (sf == JFileChooser.APPROVE_OPTION) {
                        sound_button.playsound();

                        try {
                            Object[] choices = {""Docx"", ""Pdf"", ""Cancel""};
                            Object defaultChoice = choices[0];
                            int n = JOptionPane.showOptionDialog(null, ""Select Format"", ""Format Choice"", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, choices, defaultChoice);
                            if (n == JOptionPane.YES_OPTION) {
                                sound_button.playsound();
                                save_file save_file = new save_file();
                                save_file.save_as_docx(savefile.getSelectedFile(), result_textarea.getText());
                            } else if (n == JOptionPane.NO_OPTION) {
                                sound_button.playsound();
                                save_file save_file = new save_file();
                                save_file.save_as_pdf(savefile.getSelectedFile(), result_textarea.getText());
                            } else {
                                sound_button.playsound();
                            }
                        } catch (Exception ee) {
                            JOptionPane.showMessageDialog(null, ee);
                        }
                    } else {
                        sound_button.playsound();
                    }
                } else {
                    Object[] options = {""Ok""};
                    int n = JOptionPane.showOptionDialog(null, ""There is no text to save"", ""Warning"", JOptionPane.OK_OPTION, JOptionPane.NO_OPTION, null, options, options[0]);
                    if (n == JOptionPane.OK_OPTION) {
                        sound_button.playsound();
                    }
                }
            }
        });

        file_read_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                file_read file_read = new file_read();
                file_read.fileRead(sound_button, file_read_button, text);
            }
        });

        file_check_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                String str = text.getText() + "" "";

                // Check whether the file is empty or not
                if (str.length() == 0) {
                    Object[] options = {""Ok""};
                    int n = JOptionPane.showOptionDialog(null, ""Nothing to Check"", ""Warning"", JOptionPane.OK_OPTION, JOptionPane.NO_OPTION, null, options, options[0]);
                    if (n == JOptionPane.OK_OPTION) {
                        sound_button.playsound();
                    }
                }

                String s = capitalize(str);

                // Showing the capitalized string in text area
                result_textarea.setText(s);
            }
        });
    }

    private String capitalize(String str) {
        if (str != null && str.length() != 0) {
            return getCapitalizeString(str);
        } else {
            return str;
        }
    }

    private String getCapitalizeString(String str) {
        // At first we will make the string as lower case
        char[] new_chars = str.replaceAll(""[,.!?;:]"", ""$0"").toLowerCase().toCharArray();

        // Passing the lower case string to a function for proper capitalization
        return new String(handleCharsArray(new_chars));
    }

    private char[] handleCharsArray(char[] chars) {
        // Making first character as uppercase
        chars[0] = Character.toUpperCase(chars[0]);

        // Iterating through until the second last character
        for (int i = 0; i < chars.length - 1; i++) {
            // Check if the character is (!), (?), (.), or (:) because after these characters any character must be in uppercase
            if ((chars[i] == '!') || (chars[i] == '?') || (chars[i] == '.') || (chars[i] == ':')) {
                // After various conditions, the next letter will be in uppercase
                if ((i < chars.length - 5) && (chars[i + 1] == '\n') && (chars[i + 2] == '\n') && (chars[i + 3] == '\n') && (chars[i + 4] == '\n') && (chars[i + 5] != ' ' && chars[i + 5] != '\n')) {
                    i += 5;
                    chars[i] = Character.toUpperCase(chars[i]);
                } else if ((i < chars.length - 4) && (chars[i + 1] == '\n') && (chars[i + 2] == '\n') && (chars[i + 3] == '\n') && (chars[i + 4] != ' ' && chars[i + 4] != '\n')) {
                    i += 4;
                    chars[i] = Character.toUpperCase(chars[i]);
                } else if ((i < chars.length - 3) && (chars[i + 1] == '\n') && (chars[i + 2] == '\n') && (chars[i + 3] != ' ' && chars[i + 3] != '\n')) {
                    i += 3;
                    chars[i] = Character.toUpperCase(chars[i]);
                } else if ((i < chars.length - 5) && (chars[i + 1] == ' ') && (chars[i + 2] == ' ') && (chars[i + 3] == ' ') && (chars[i + 4] == ' ') && (chars[i + 5] != '\n' && chars[i + 5] != ' ')) {
                    i += 5;
                    chars[i] = Character.toUpperCase(chars[i]);
                } else if ((i < chars.length - 4) && (chars[i + 1] == ' ') && (chars[i + 2] == ' ') && (chars[i + 3] == ' ') && (chars[i + 4] != '\n' && chars[i + 4] != ' ')) {
                    i += 4;
                    chars[i] = Character.toUpperCase(chars[i]);
                } else if ((i < chars.length - 3) && (chars[i + 1] == ' ') && (chars[i + 2] == ' ') && (chars[i + 3] != '\n' && chars[i + 3] != ' ')) {
                    i += 3;
                    chars[i] = Character.toUpperCase(chars[i]);
                } else if ((i < chars.length - 1) && (chars[i + 1] != ' ' && chars[i + 1] != '\n')) {
                    chars[i + 1] = Character.toUpperCase(chars[i + 1]);
                }
            }
        }
        return chars;
    }

    public static void main(String[] args) throws IOException {
        new Capitalization();
    }
}
",1
"public class Car {
    private String make;
    private String model;
    private int year;
    private String color;
    private boolean isRunning;
    private boolean isParked;

    public Car(String make, String model, int year, String color) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.color = color;
        this.isRunning = false;
        this.isParked = true;
    }

    public void start() {
        if (isParked) {
            isRunning = true;
            isParked = false;
            System.out.println(""The car has started."");
        } else {
            System.out.println(""You can't start the car while it's already running or not parked."");
        }
    }

    public void stop() {
        if (isRunning) {
            isRunning = false;
            isParked = true;
            System.out.println(""The car has stopped."");
        } else {
            System.out.println(""You can't stop the car while it's not running or already parked."");
        }
    }

    public void accelerate(int speed) {
        if (isRunning && !isParked) {
            System.out.println(""The car is accelerating to "" + speed + "" mph."");
        } else {
            System.out.println(""You can't accelerate while the car is not running or parked."");
        }
    }

    public void brake() {
        if (isRunning && !isParked) {
            System.out.println(""The car is braking."");
        } else {
            System.out.println(""You can't brake while the car is not running or parked."");
        }
    }

    public void paint(String newColor) {
        color = newColor;
        System.out.println(""The car has been painted "" + newColor + ""."");
    }

    public void tuneUp() {
        System.out.println(""The car has had a tune-up."");
    }

    public void repairEngine() {
        System.out.println(""The engine has been repaired."");
    }

    public void replaceTires() {
        System.out.println(""The tires have been replaced."");
    }
}
",0
"import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

public class Home extends JFrame {

    public static int volume_icon_variable = 1;
    int value_of_text_file;
    private Container container;
    private ImageIcon duplicity_img, capitalization_img, spell_img, aboutus_img, guideline_img, volumeON_img, volumeOFF_img;
    ButtonSound sound_button = new ButtonSound();

    // New attribute
    private int buttonClickCount = 0;

    public Home() throws IOException {

        App_Icon();

        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setBounds(350, 25, 650, 680);
        this.setTitle(""Duplicity Checker"");
        this.setResizable(false);

        container = this.getContentPane();
        container.setLayout(null);
        container.setBackground(new Color(255, 255, 255, 255));

        JLabel image = new JLabel(new ImageIcon(getClass().getResource(""Picture//home_img.jpg"")));
        image.setBounds(135, 0, 400, 400);
        container.add(image);

        volumeON_img = new ImageIcon(getClass().getResource(""Picture//off1.png""));
        JButton volume_on_button = new JButton(volumeON_img);
        volume_on_button.setBackground(new Color(255, 255, 255, 255));
        volume_on_button.setBorder(null);
        volume_on_button.setBounds(565, 20, volumeON_img.getIconWidth(), volumeON_img.getIconHeight());
        container.add(volume_on_button);

        volumeOFF_img = new ImageIcon(getClass().getResource(""Picture//on1.png""));
        JButton volume_off_button = new JButton(volumeOFF_img);
        volume_off_button.setBackground(new Color(255, 255, 255, 255));
        volume_off_button.setBorder(null);
        volume_off_button.setBounds(585, 28, volumeOFF_img.getIconWidth(), volumeOFF_img.getIconHeight());

        Font f = new Font(""Calibri"", Font.BOLD, 20);

        duplicity_img = new ImageIcon(getClass().getResource(""Picture//Duplicity_image.png""));
        JButton duplicity_button = new JButton(duplicity_img);
        duplicity_button.setBackground(new Color(255, 255, 255, 255));
        duplicity_button.setBorder(null);
        duplicity_button.setBounds(200, 400, duplicity_img.getIconWidth(), duplicity_img.getIconHeight());
        container.add(duplicity_button);

        capitalization_img = new ImageIcon(getClass().getResource(""Picture//Capitalization_image.png""));
        JButton capitalization_button = new JButton(capitalization_img);
        capitalization_button.setBackground(new Color(255, 255, 255, 255));
        capitalization_button.setBorder(null);
        capitalization_button.setBounds(55, 465, capitalization_img.getIconWidth(), capitalization_img.getIconHeight());
        container.add(capitalization_button);

        spell_img = new ImageIcon(getClass().getResource(""Picture//spell_check_image.png""));
        JButton spell_button = new JButton(spell_img);
        spell_button.setBackground(new Color(255, 255, 255, 255));
        spell_button.setBorder(null);
        spell_button.setBounds(350, 465, spell_img.getIconWidth(), spell_img.getIconHeight());
        container.add(spell_button);

        aboutus_img = new ImageIcon(getClass().getResource(""Picture//aboutus_image.png""));
        JButton aboutus_button = new JButton(aboutus_img);
        aboutus_button.setBackground(new Color(255, 255, 255, 255));
        aboutus_button.setBorder(null);
        aboutus_button.setBounds(55, 530, aboutus_img.getIconWidth(), aboutus_img.getIconHeight());
        container.add(aboutus_button);

        guideline_img = new ImageIcon(getClass().getResource(""Picture//Guideline_image.png""));
        JButton guide_button = new JButton(guideline_img);
        guide_button.setBackground(new Color(255, 255, 255, 255));
        guide_button.setBorder(null);
        guide_button.setBounds(350, 530, guideline_img.getIconWidth(), guideline_img.getIconHeight());
        container.add(guide_button);

        try {
            // On/Off button sound
            Scanner scanner = new Scanner(new File(""value3.txt""));
            while (scanner.hasNextInt()) {
                value_of_text_file = scanner.nextInt();
                if (value_of_text_file == 0) {
                    volume_on_button.setIcon(volumeOFF_img);
                    volume_icon_variable = 0;
                    sound_button.OFFvariable = 0;
                    sound_button.ONvariable = 1;
                } else {
                    volume_on_button.setIcon(volumeON_img);
                }
            }
        } catch (FileNotFoundException fileNotFoundException) {
            fileNotFoundException.printStackTrace();
        }

        duplicity_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                buttonClickCount++; // Increment the click count
                try {
                    Object[] choices = {""Choose Randomly"", ""Select Folder"", ""Cancel""};
                    Object defaultChoice = choices[0];
                    int n = JOptionPane.showOptionDialog(null, ""How do you want to check?"", ""Confirmation"",
                            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, choices, defaultChoice);
                    if (n == JOptionPane.YES_OPTION) {
                        sound_button.playsound();
                        Duplicity_Random_File LF = new Duplicity_Random_File();
                        LF.setVisible(true);
                        dispose();
                    } else if (n == JOptionPane.NO_OPTION) {
                        sound_button.playsound();
                        Duplicity_Folder LF = new Duplicity_Folder();
                        LF.setVisible(true);
                        dispose();
                    } else {
                        sound_button.playsound();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });

        capitalization_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                Capitalization LF = null;
                try {
                    LF = new Capitalization();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                LF.setVisible(true);
                dispose();
            }
        });

        spell_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                Spell_Check LF = null;
                try {
                    LF = new Spell_Check();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                LF.setVisible(true);
                dispose();
            }
        });

        aboutus_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                Aboutus aboutus = new Aboutus();
                aboutus.setVisible(true);
                dispose();
            }
        });

        guide_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                User_GuideLines guideLines = new User_GuideLines();
                guideLines.setVisible(true);
                dispose();
            }
        });

        volume_on_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                if (volume_icon_variable == 0) {
                    volume_on_button.setIcon(volumeON_img);
                    sound_button.ONvariable = 0;
                    sound_button.OFFvariable = 1;
                    volume_icon_variable = 1;
                } else {
                    volume_on_button.setIcon(volumeOFF_img);
                    sound_button.OFFvariable = 0;
                    sound_button.ONvariable = 1;
                    volume_icon_variable = 0;
                }

                try {
                    FileOutputStream fout = new FileOutputStream(""value3.txt"");
                    PrintStream pout = new PrintStream(fout);
                    int kk = volume_icon_variable;
                    pout.println(kk);
                    pout.close();
                    fout.close();
                } catch (FileNotFoundException fileNotFoundException) {
                    fileNotFoundException.printStackTrace();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
        });
    }

    public void App_Icon() {
        ImageIcon logo = new ImageIcon(getClass().getResource(""Picture//icon.jpg""));
        this.setIconImage(logo.getImage());
    }

    public static void main(String[] args) throws IOException {
        Home hm = new Home();
        hm.setVisible(true);
    }
}
",1
"public class MathOperations {

    public int getSquare(int num) {
        return num * num;
    }

    public int getCube(int num) {
        return num * num * num;
    }
}",0
"import java.util.Map;

public class TaxAndTimeUtils {

    public static double calculateTax(double subtotal, String country, String state, Map<String, Double> taxRates) {
        double taxRate;
        if (""US"".equals(country)) {
            taxRate = taxRates.get(state);
        } else {
            taxRate = taxRates.get(country);
        }
        return subtotal + subtotal * taxRate;
    }

    public static String findTimeZone(String country, String state, Map<String, String> zones) {
        String timezone;
        if (""US"".equals(country)) {
            timezone = zones.get(state);
        } else {
            timezone = zones.get(country);
        }
        return timezone;
    }
}",0
"import java.util.Map;

public class DataProcessor {

    public void processData(Map<String, String> data) {
        String status = data.get(""status"");
        if (""pending"".equals(status)) {
            notifyUser(data.get(""user""));
            sendEmail(data.get(""user""), ""Your request is pending."");
        } else if (""approved"".equals(status)) {
            notifyUser(data.get(""user""));
            sendEmail(data.get(""user""), ""Your request has been approved."");
        }
    }

    private void notifyUser(String user) {
        // Implementation for notifying the user
    }

    private void sendEmail(String user, String message) {
        // Implementation for sending an email
    }
}",0
"import java.util.HashMap;

class Solution {

    public int[] twoSum(int[] nums, int target) {
        // Map to store the indices of elements
        HashMap<Integer, Integer> map = new HashMap<>();
        
        // Traverse the array
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            
            // If the complement exists in the map, return the indices
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            
            // Otherwise, put the current element and its index in the map
            map.put(nums[i], i);
        }
        
        // If no solution is found, return an empty array
        return new int[] {};
    }
}",0
"public class Solution {

    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    result[0] = i;
                    result[1] = j;
                    return result; // Add this return statement to stop the search after finding the result
                }
            }
        }
        
        return result;
    }
}",0
"public class RectangleCalculator {

    public int calculateArea(int length, int width) {
        return length * width;
    }

    public int calculatePerimeter(int length, int width) {
        return 2 * (length + width);
    }
}",0
"public class ArrayStats {

    private static int[] array_a = {10, 20, 30, 40, 50};
    private static int[] array_b = {5, 15, 25, 35, 45};

    public static void main(String[] args) {
        int sum_a = 0;
        for (int i = 0; i < array_a.length; i++) {
            sum_a += array_a[i];
        }
        int average_a = sum_a / array_a.length;

        int sum_b = 0;
        for (int i = 0; i < array_b.length; i++) {
            sum_b += array_b[i];
        }
        int average_b = sum_b / array_b.length;

        System.out.println(""Average of array_a: "" + average_a);
        System.out.println(""Average of array_b: "" + average_b);
    }
}",0
"public class MyClass {

    public void method1() {
        System.out.println(""Hello, world!"");
        System.out.println(""This is method1"");
    }

    public void method2() {
        System.out.println(""Hello, world!"");
        System.out.println(""This is method2"");
    }
}",0
"public class DeadCodeExample {

    public static void main(String[] args) {
        int x = 5;
        int y = 10;
        
        // This variable is declared but never used
        int z = 0;
        
        System.out.println(""x + y = "" + (x + y));
    }
}",0
"public class DeadCodeExample {

    public static void main(String[] args) {
        int x = 5;
        int y = 10;

        if (x > y) {
            System.out.println(""x is greater than y"");
        } else {
            System.out.println(""x is not greater than y"");
        }

        System.out.println(""This line of code is dead."");
    }

    // This method is never called
    public static void unreachableMethod() {
        System.out.println(""This method is unreachable."");
    }
}",0
"import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Calculator extends JFrame {
    private Container c;
    private FlowLayout cardlayout = new FlowLayout();
    private Font font = new Font(""Arial"", Font.BOLD, 30);
    private double cnum1, cnum2, cresult;
    private int addc = 0, subc = 0, mulc = 0, divc = 0;
    private int add = 0, flagforpoint = 0, flagforsign = 0;
    private JTextArea textarea;  // New attribute added

    public Calculator() {
        initComponent();
    }

    public void initComponent() {
        c = this.getContentPane();
        c.setLayout(null);
        c.setBackground(Color.decode(""#F0F3F4""));

        textarea = new JTextArea();  // Initialize new attribute
        textarea.setFont(font);
        textarea.setEditable(false);
        textarea.setBounds(20, 10, 420, 110);
        c.add(textarea);

        JPanel panel1 = new JPanel();
        panel1.setLayout(cardlayout);
        panel1.setBounds(10, 130, 440, 300);
        c.add(panel1);

        JButton button7 = new JButton(""7"");
        button7.setFont(font);
        button7.setPreferredSize(new Dimension(100, 50));
        panel1.add(button7);

        JButton button8 = new JButton(""8"");
        button8.setFont(font);
        button8.setPreferredSize(new Dimension(100, 50));
        panel1.add(button8);

        JButton button9 = new JButton(""9"");
        button9.setFont(font);
        button9.setPreferredSize(new Dimension(100, 50));
        panel1.add(button9);

        JButton addbutton = new JButton(""+"");
        addbutton.setFont(font);
        addbutton.setPreferredSize(new Dimension(100, 50));
        panel1.add(addbutton);

        JButton button4 = new JButton(""4"");
        button4.setFont(font);
        button4.setPreferredSize(new Dimension(100, 50));
        panel1.add(button4);

        JButton button5 = new JButton(""5"");
        button5.setFont(font);
        button5.setPreferredSize(new Dimension(100, 50));
        panel1.add(button5);

        JButton button6 = new JButton(""6"");
        button6.setFont(font);
        button6.setPreferredSize(new Dimension(100, 50));
        panel1.add(button6);

        JButton subbutton = new JButton(""-"");
        subbutton.setFont(font);
        subbutton.setPreferredSize(new Dimension(100, 50));
        panel1.add(subbutton);

        JButton button1 = new JButton(""1"");
        button1.setFont(font);
        button1.setPreferredSize(new Dimension(100, 50));
        panel1.add(button1);

        JButton button2 = new JButton(""2"");
        button2.setFont(font);
        button2.setPreferredSize(new Dimension(100, 50));
        panel1.add(button2);

        JButton button3 = new JButton(""3"");
        button3.setFont(font);
        button3.setPreferredSize(new Dimension(100, 50));
        panel1.add(button3);

        JButton mulbutton = new JButton(""*"");
        mulbutton.setFont(font);
        mulbutton.setPreferredSize(new Dimension(100, 50));
        panel1.add(mulbutton);

        JButton pointbutton = new JButton(""."");
        pointbutton.setFont(font);
        pointbutton.setPreferredSize(new Dimension(100, 50));
        panel1.add(pointbutton);

        JButton button0 = new JButton(""0"");
        button0.setFont(font);
        button0.setPreferredSize(new Dimension(100, 50));
        panel1.add(button0);

        JButton equalbutton = new JButton(""="");
        equalbutton.setFont(font);
        equalbutton.setPreferredSize(new Dimension(100, 50));
        panel1.add(equalbutton);

        JButton divbutton = new JButton(""/"");
        divbutton.setFont(font);
        divbutton.setPreferredSize(new Dimension(100, 50));
        panel1.add(divbutton);

        JButton clearbutton = new JButton(""Clear"");
        clearbutton.setFont(font);
        clearbutton.setPreferredSize(new Dimension(420, 50));
        panel1.add(clearbutton);

        button1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textarea.append(""1"");
            }
        });

        button2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textarea.append(""2"");
            }
        });

        button3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textarea.append(""3"");
            }
        });

        button4.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textarea.append(""4"");
            }
        });

        button5.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textarea.append(""5"");
            }
        });

        button6.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textarea.append(""6"");
            }
        });

        button7.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textarea.append(""7"");
            }
        });

        button8.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textarea.append(""8"");
            }
        });

        button9.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textarea.append(""9"");
            }
        });

        button0.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textarea.append(""0"");
            }
        });

        pointbutton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (flagforpoint == 0) {
                    textarea.append(""."");
                    flagforpoint = 1;
                } else {
                    JOptionPane.showMessageDialog(null, ""You can't use it twice"");
                }
            }
        });

        addbutton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (flagforsign == 0) {
                    cnum1 = Double.parseDouble(textarea.getText());
                    add = 1;
                    textarea.setText("""");
                    flagforpoint = 0;
                    flagforsign = 1;
                } else {
                    JOptionPane.showMessageDialog(null, ""You can't use it twice"");
                }
            }
        });

        subbutton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (textarea.getText().isEmpty()) {
                    textarea.setText(""-"");
                    flagforpoint = 0;
                } else {
                    cnum1 = Double.parseDouble(textarea.getText());
                    add = 2;
                    textarea.setText("""");
                    flagforpoint = 0;
                }
            }
        });

        mulbutton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (flagforsign == 0) {
                    cnum1 = Double.parseDouble(textarea.getText());
                    textarea.setText("""");
                    add = 3;
                    flagforpoint = 0;
                    flagforsign = 1;
                } else {
                    JOptionPane.showMessageDialog(null, ""You can't use it twice"");
                }
            }
        });

        divbutton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (flagforsign == 0) {
                    cnum1 = Double.parseDouble(textarea.getText());
                    textarea.setText("""");
                    add = 4;
                    flagforpoint = 0;
                    flagforsign = 1;
                } else {
                    JOptionPane.showMessageDialog(null, ""You can't use it twice"");
                }
            }
        });

        equalbutton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                cnum2 = Double.parseDouble(textarea.getText());
                switch (add) {
                    case 1:
                        cresult = cnum1 + cnum2;
                        textarea.setText(Double.toString(cresult));
                        break;
                    case 2:
                        cresult = cnum1 - cnum2;
                        textarea.setText(Double.toString(cresult));
                        break;
                    case 3:
                        cresult = cnum1 * cnum2;
                        textarea.setText(Double.toString(cresult));
                        break;
                    case 4:
                        cresult = cnum1 / cnum2;
                        textarea.setText(Double.toString(cresult));
                        break;
                }
            }
        });

        clearbutton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cnum1 = 0;
                cnum2 = 0;
                textarea.setText("""");
                add = 0;
                flagforpoint = 0;
                flagforsign = 0;
            }
        });
    }

    public static void main(String[] args) {
        Calculator frame = new Calculator();
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(650, 250, 480, 500);
    }
}",1
"import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Home extends Frame_Setup {
    public JPanel button_panel;
    public JButton normal_mode_button, cricket_mode_button;
    private JLabel null_label; // Added missing attribute declaration
    private ImageIcon normal_mode_icon; // Assuming these are attributes
    private ImageIcon cricket_mode_icon; // Assuming these are attributes

    public Home(String page_title) {
        super(page_title); // Here we are using super key to use parent class's constructor
        setContainer();
        setButtonPanel();
        setButtons();
        setActionListeners();
    }

    public void setContainer() {
        // Method Overriding Concept Used
        super.setContainer(); // Here we get setContainer() of parent class
        container.setLayout(new BorderLayout(100, 100)); // 100 is Horizontal gap and 100 is Vertical Gap
        container.setBackground(Color.white);
    }

    public void setButtonPanel() {
        button_panel = new JPanel();
        button_panel.setLayout(new GridLayout(2, 1));
        button_panel.setBackground(Color.white);
        container.add(button_panel, BorderLayout.CENTER);
        setNullLabel();
    }

    public void setButtons() {
        normal_mode_button = new JButton(normal_mode_icon);
        normal_mode_button.setBackground(Color.WHITE);
        normal_mode_button.setBorder(null);
        normal_mode_button.setFocusPainted(false);
        button_panel.add(normal_mode_button);

        cricket_mode_button = new JButton(cricket_mode_icon);
        cricket_mode_button.setBackground(Color.WHITE);
        cricket_mode_button.setBorder(null);
        cricket_mode_button.setFocusPainted(false);
        button_panel.add(cricket_mode_button);
    }

    public void setNullLabel() {
        null_label = new JLabel();
        container.add(null_label, BorderLayout.EAST);
        null_label = new JLabel();
        container.add(null_label, BorderLayout.WEST);
        null_label = new JLabel();
        container.add(null_label, BorderLayout.NORTH);
        null_label = new JLabel();
        container.add(null_label, BorderLayout.SOUTH);
    }

    public void setActionListeners() {
        normal_mode_button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                Normal_Calculator frame = new Normal_Calculator(""Normal Mode"");
                frame.setVisible(true);
            }
        });

        cricket_mode_button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                Cricket_Calculator frame = new Cricket_Calculator(""Cricket Mode"");
                frame.setVisible(true);
            }
        });
    }
}
",0
"import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Cricket_Calculator extends Frame_Setup {
    public JPanel button_panel;
    public JButton one_day_match_button, t20_match_button, test_match_button, home_button;
    private JLabel null_label; // Assuming this is declared in the parent class Frame_Setup
    private ImageIcon one_day_match_button_icon; // Assuming these are attributes
    private ImageIcon t20_match_button_icon; // Assuming these are attributes
    private ImageIcon test_match_button_icon; // Assuming these are attributes
    private ImageIcon button_home_icon; // Assuming these are attributes

    public Cricket_Calculator(String page_title) {
        super(page_title); // Here we are using super key to use parent class's constructor
        setContainer();
        setButtonPanel();
        setButtons();
        setActionListeners();
    }

    public void setContainer() {
        // Method Overriding Concept Used
        super.setContainer(); // Here we get setContainer() of parent class
        container.setLayout(new BorderLayout(70, 50)); // 70 is Horizontal gap and 50 is Vertical Gap
        container.setBackground(Color.white);
    }

    public void setButtonPanel() {
        button_panel = new JPanel();
        button_panel.setLayout(new GridLayout(4, 1));
        button_panel.setBackground(Color.WHITE);
        container.add(button_panel, BorderLayout.CENTER);
        setNullLabel();
    }

    public void setButtons() {
        one_day_match_button = new JButton(one_day_match_button_icon);
        one_day_match_button.setBackground(Color.WHITE);
        one_day_match_button.setBorder(null);
        one_day_match_button.setFocusPainted(false);
        button_panel.add(one_day_match_button);

        t20_match_button = new JButton(t20_match_button_icon);
        t20_match_button.setBackground(Color.WHITE);
        t20_match_button.setBorder(null);
        t20_match_button.setFocusPainted(false);
        button_panel.add(t20_match_button);

        test_match_button = new JButton(test_match_button_icon);
        test_match_button.setBackground(Color.WHITE);
        test_match_button.setBorder(null);
        test_match_button.setFocusPainted(false);
        button_panel.add(test_match_button);

        home_button = new JButton(button_home_icon);
        home_button.setBackground(Color.WHITE);
        home_button.setBorder(null);
        home_button.setFocusPainted(false);
        button_panel.add(home_button);
    }

    public void setActionListeners() {
        one_day_match_button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                Cricket_Mode frame = new Cricket_Mode(""Cricket_Mode"", ""One Day Match"");
                frame.setVisible(true);
            }
        });

        t20_match_button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                Cricket_Mode frame = new Cricket_Mode(""Cricket_Mode"", ""T20 Match"");
                frame.setVisible(true);
            }
        });

        test_match_button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                Cricket_Mode frame = new Cricket_Mode(""Cricket_Mode"", ""Test Match"");
                frame.setVisible(true);
            }
        });

        home_button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                Home frame = new Home(""Home"");
                frame.setVisible(true);
            }
        });
    }

    public void setNullLabel() {
        null_label = new JLabel();
        container.add(null_label, BorderLayout.EAST);
        null_label = new JLabel();
        container.add(null_label, BorderLayout.WEST);
        null_label = new JLabel();
        container.add(null_label, BorderLayout.NORTH);
        null_label = new JLabel();
        container.add(null_label, BorderLayout.SOUTH);
    }

    /*public static void main(String[] args) {
        Cricket_Calculator frame = new Cricket_Calculator(""Cricket Mode"");
        frame.setVisible(true);
    }*/
}
",1
"public class Main_Calculator extends Frame_Templete {

    double num, ans;
    int calculation, point_counter = 0, equal_counter = 0;
    private JButton btnSwitchThemes, one, two, three, four, five, six, seven, eight, nine, zero, plus, minus, mul, divide, backward, equal, point, home, clear;
    private JRadioButton on, off;
    private ButtonGroup grp;
    private JLabel calculate, minibar;
    private JTextField display;

    Main_Calculator() {
        super.frame();
        super.setTitle(""Calculator"");
        super.container();
        initcomponents();
    }

    private void initcomponents() {

        Font font = new Font(""Arial"", Font.CENTER_BASELINE, 25);
        Font f1 = new Font(""Arial"", Font.BOLD, 30);

        minibar = new JLabel("""");
        minibar.setBounds(350, 18, 100, 25);
        minibar.setFont(font);
        container.add(minibar);

        display = new JTextField();
        display.setBounds(80, 55, 335, 45);
        display.setEditable(false);
        display.setFont(f1);
        container.add(display);

        one = new JButton(""1"");
        one.setBounds(80, 270, 67, 38);
        container.add(one);

        two = new JButton(""2"");
        two.setBounds(170, 270, 67, 38);
        container.add(two);

        three = new JButton(""3"");
        three.setBounds(260, 270, 67, 38);
        container.add(three);

        four = new JButton(""4"");
        four.setBounds(80, 220, 67, 38);
        container.add(four);

        five = new JButton(""5"");
        five.setBounds(170, 220, 67, 38);
        container.add(five);

        six = new JButton(""6"");
        six.setBounds(260, 220, 67, 38);
        container.add(six);

        mul = new JButton(""*"");
        mul.setBounds(350, 170, 67, 38);
        container.add(mul);

        seven = new JButton(""7"");
        seven.setBounds(80, 170, 67, 38);
        container.add(seven);

        eight = new JButton(""8"");
        eight.setBounds(170, 170, 67, 38);
        container.add(eight);

        nine = new JButton(""9"");
        nine.setBounds(260, 170, 67, 38);
        container.add(nine);

        divide = new JButton(""/"");
        divide.setBounds(350, 220, 67, 38);
        container.add(divide);

        backward = new JButton(""←"");
        backward.setBounds(170, 120, 67, 38);
        container.add(backward);

        zero = new JButton(""0"");
        zero.setBounds(170, 320, 67, 38);
        container.add(zero);

        plus = new JButton(""+"");
        plus.setBounds(350, 320, 67, 38);
        container.add(plus);

        minus = new JButton(""-"");
        minus.setBounds(350, 270, 67, 38);
        container.add(minus);

        clear = new JButton(""C"");
        clear.setBounds(80, 120, 67, 38);
        container.add(clear);

        home = new JButton(""Home"");
        home.setBounds(260, 120, 67, 38);
        container.add(home);

        point = new JButton(""."");
        point.setBounds(80, 320, 67, 38);
        container.add(point);

        equal = new JButton(""="");
        equal.setBounds(260, 320, 67, 38);
        container.add(equal);

        one.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                display.setText(display.getText() + ""1"");
                equal_counter = 0;
            }
        });

        two.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                display.setText(display.getText() + ""2"");
                equal_counter = 0;
            }
        });

        three.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                display.setText(display.getText() + ""3"");
                equal_counter = 0;
            }
        });

        four.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                display.setText(display.getText() + ""4"");
                equal_counter = 0;
            }
        });

        five.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                display.setText(display.getText() + ""5"");
                equal_counter = 0;
            }
        });

        six.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                display.setText(display.getText() + ""6"");
                equal_counter = 0;
            }
        });

        seven.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                display.setText(display.getText() + ""7"");
                equal_counter = 0;
            }
        });

        eight.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                display.setText(display.getText() + ""8"");
                equal_counter = 0;
            }
        });

        nine.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                display.setText(display.getText() + ""9"");
                equal_counter = 0;
            }
        });

        zero.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                display.setText(display.getText() + ""0"");
                equal_counter = 0;
            }
        });

        point.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remove_result();
                if (point_counter == 0) {
                    display.setText(display.getText() + ""."");
                    point_counter = 1;
                } else {
                    JOptionPane.showMessageDialog(null, ""Two points are not allowed"");
                }
                equal_counter = 0;
            }
        });

        plus.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                num = Double.parseDouble(display.getText());
                calculation = 1;
                display.setText("""");
                minibar.setText(num + ""+"");
                point_counter = 0;
            }
        });

        minus.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (display.getText().isEmpty()) {
                    display.setText(""-"");
                    point_counter = 0;
                } else {
                    calculation = 2;
                    num = Double.parseDouble(display.getText());
                    display.setText("""");
                    minibar.setText(num + ""-"");
                    point_counter = 0;
                }
            }
        });

        divide.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                num = Double.parseDouble(display.getText());
                calculation = 4;
                display.setText("""");
                minibar.setText(num + ""/"");
                point_counter = 0;
            }
        });

        mul.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                num = Double.parseDouble(display.getText());
                calculation = 3;
                display.setText("""");
                minibar.setText(num + ""*"");
                point_counter = 0;
            }
        });

        equal.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                equal_counter = 1;
                calculation();
                minibar.setText("""");
                point_counter = 1;
            }
        });

        backward.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int length = display.getText().length();
                int number = display.getText().length() - 1;
                String store;
                if (length > 0) {
                    StringBuilder back = new StringBuilder(display.getText());
                    back.deleteCharAt(number);
                    store = back.toString();
                    display.setText(store);
                }
            }
        });

        clear.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                display.setText("""");
                minibar.setText("" "");
                point_counter = 0;
            }
        });

        home.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Layout lay = new Layout();
                lay.setVisible(true);
                dispose();
            }
        });

        grp = new ButtonGroup();
        on = new JRadioButton(""on"");
        on.setSelected(true);
        on.setBounds(350, 120, 67, 19);
        container.add(on);

        off = new JRadioButton(""off"");
        off.setBounds(350, 139, 67, 19);
        off.setOpaque(true);
        container.add(off);

        grp.add(on);
        grp.add(off);

        off.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                disable();
            }
        });

        on.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                enable();
            }
        });

        btnSwitchThemes = new JButton(""Switch Themes"");
        btnSwitchThemes.setBounds(170, 380, 150, 38);
        container.add(btnSwitchThemes);
        btnSwitchThemes.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Code to switch themes can be added here
            }
        });
    }

    public void calculation() {
        switch (calculation) {
            case 1:
                ans = num + Double.parseDouble(display.getText());
                display.setText(Double.toString(ans));
                break;
            case 2:
                ans = num - Double.parseDouble(display.getText());
                display.setText(Double.toString(ans));
                break;
            case 3:
                ans = num * Double.parseDouble(display.getText());
                display.setText(Double.toString(ans));
                break;
            case 4:
                ans = num / Double.parseDouble(display.getText());
                display.setText(Double.toString(ans));
                break;
        }
    }

    public void remove_result() {
        if (equal_counter == 1) {
            display.setText("""");
        }
    }

    public void disable() {
        display.setEnabled(false);
        on.setEnabled(true);
        off.setEnabled(false);
        one.setEnabled(false);
        two.setEnabled(false);
        three.setEnabled(false);
        four.setEnabled(false);
        five.setEnabled(false);
        six.setEnabled(false);
        seven.setEnabled(false);
        eight.setEnabled(false);
        nine.setEnabled(false);
        zero.setEnabled(false);
        plus.setEnabled(false);
        mul.setEnabled(false);
        minus.setEnabled(false);
        divide.setEnabled(false);
        point.setEnabled(false);
        equal.setEnabled(false);
        backward.setEnabled(false);
        clear.setEnabled(false);
        home.setEnabled(false);
    }

    public void enable() {
        display.setEnabled(true);
        on.setEnabled(false);
        off.setEnabled(true);
        one.setEnabled(true);
        two.setEnabled(true);
        three.setEnabled(true);
        four.setEnabled(true);
        five.setEnabled(true);
        six.setEnabled(true);
        seven.setEnabled(true);
        eight.setEnabled(true);
        nine.setEnabled(true);
        zero.setEnabled(true);
        plus.setEnabled(true);
        mul.setEnabled(true);
        minus.setEnabled(true);
        divide.setEnabled(true);
        point.setEnabled(true);
        equal.setEnabled(true);
        backward.setEnabled(true);
        clear.setEnabled(true);
        home.setEnabled(true);
    }

    public static void main(String[] args) {
        Main_Calculator cal = new Main_Calculator();
        cal.setVisible(true);
    }
}
",1
"public class Loan_Calculator extends Frame_Templete {

    private JTextField amounttext, interesttext, monthtext, totaltext, paymenttext;
    private JLabel loancalculator, amount, interest, month, total, payment;
    private JButton enter, clear, home;
    private Font font, f1;

    Loan_Calculator() {
        super.frame();
        super.container();
        super.setTitle(""Loan Calculator"");
        initcomponent();
    }

    private void initcomponent() {

        Font font = new Font(""Arial"", Font.CENTER_BASELINE, 30);

        loancalculator = new JLabel(""Loan Calculator"");
        loancalculator.setBounds(140, 15, 300, 30);
        loancalculator.setFont(font);
        container.add(loancalculator);

        amount = new JLabel(""Loan Amount               :"");
        amount.setBounds(50, 70, 130, 30);
        container.add(amount);

        interest = new JLabel(""Interest Rate (%)         :"");
        interest.setBounds(50, 115, 130, 30);
        container.add(interest);

        month = new JLabel(""Month                            :"");
        month.setBounds(50, 160, 130, 30);
        container.add(month);

        total = new JLabel(""Total Payment             :"");
        total.setBounds(50, 240, 130, 30);
        container.add(total);

        payment = new JLabel(""Payment Per Month   :"");
        payment.setBounds(50, 285, 130, 40);
        container.add(payment);

        amounttext = new JTextField();
        amounttext.setBounds(190, 73, 195, 25);
        amounttext.setFont(f1);
        container.add(amounttext);

        interesttext = new JTextField();
        interesttext.setBounds(190, 118, 195, 25);
        interesttext.setFont(f1);
        container.add(interesttext);

        monthtext = new JTextField();
        monthtext.setBounds(190, 163, 195, 25);
        monthtext.setFont(f1);
        container.add(monthtext);

        totaltext = new JTextField();
        totaltext.setBounds(190, 245, 195, 25);
        totaltext.setEnabled(false);
        totaltext.setFont(f1);
        container.add(totaltext);

        paymenttext = new JTextField();
        paymenttext.setBounds(190, 293, 195, 25);
        paymenttext.setEnabled(false);
        paymenttext.setFont(f1);
        container.add(paymenttext);

        enter = new JButton(""Enter"");
        enter.setBounds(300, 205, 85, 25);
        container.add(enter);

        clear = new JButton(""Clear"");
        clear.setBounds(190, 330, 85, 25);
        container.add(clear);

        home = new JButton(""Home"");
        home.setBounds(300, 330, 85, 25);
        container.add(home);

        enter.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (amounttext.getText().isEmpty() || interesttext.getText().isEmpty() || monthtext.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, ""Enter all value"");
                } else {
                    if (checkMonth() == true && checkLoan() == false && checkInterest() == false) {
                        JOptionPane.showMessageDialog(null, ""Month input is invalid"");
                        monthtext.setText("""");
                        totaltext.setText("""");
                        paymenttext.setText("""");
                    } else if (checkMonth() == false && checkLoan() == true && checkInterest() == false) {
                        JOptionPane.showMessageDialog(null, ""Loan input is invalid"");
                        amounttext.setText("""");
                        totaltext.setText("""");
                        paymenttext.setText("""");
                    } else if (checkMonth() == false && checkLoan() == false && checkInterest() == true) {
                        JOptionPane.showMessageDialog(null, ""Interest input is invalid"");
                        interesttext.setText("""");
                        totaltext.setText("""");
                        paymenttext.setText("""");
                    } else if (checkMonth() == true && checkLoan() == true && checkInterest() == false) {
                        JOptionPane.showMessageDialog(null, ""Loan & Month input is invalid"");
                        monthtext.setText("""");
                        amounttext.setText("""");
                        totaltext.setText("""");
                        paymenttext.setText("""");
                    } else if (checkMonth() == true && checkLoan() == false && checkInterest() == true) {
                        JOptionPane.showMessageDialog(null, ""Interest & Month input is invalid"");
                        monthtext.setText("""");
                        interesttext.setText("""");
                        totaltext.setText("""");
                        paymenttext.setText("""");
                    } else if (checkMonth() == false && checkLoan() == true && checkInterest() == true) {
                        JOptionPane.showMessageDialog(null, ""Loan & Interest input is invalid"");
                        amounttext.setText("""");
                        interesttext.setText("""");
                        totaltext.setText("""");
                        paymenttext.setText("""");
                    } else {
                        try {
                            double totalamount = 0;
                            double Loan_Amount = Double.parseDouble(amounttext.getText());
                            double Interest_Rate = Double.parseDouble(interesttext.getText());
                            double Month = Double.parseDouble(monthtext.getText());

                            totalamount = Loan_Amount + Loan_Amount * Interest_Rate / 100;
                            totaltext.setText(String.valueOf(totalamount));

                            double payment_per_month = 0;
                            payment_per_month = (totalamount / Month);
                            paymenttext.setText(String.valueOf(payment_per_month));

                            totaltext.setEnabled(true);
                            paymenttext.setEnabled(true);
                            totaltext.setEditable(false);
                            paymenttext.setEditable(false);
                        } catch (Exception e1) {
                            JOptionPane.showMessageDialog(null, ""your input is not valid"");
                            totaltext.setText("""");
                            paymenttext.setText("""");
                            amounttext.setText("""");
                            interesttext.setText("""");
                            monthtext.setText("""");
                        }
                    }
                }
            }
        });

        clear.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                amounttext.setText("""");
                interesttext.setText("""");
                monthtext.setText("""");
                totaltext.setText("""");
                paymenttext.setText("""");
                totaltext.setEnabled(false);
                paymenttext.setEnabled(false);
            }
        });

        home.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Layout layout = new Layout();
                layout.setVisible(true);
                dispose();
            }
        });
    }

    boolean checkMonth() {
        String inputString = monthtext.getText();
        Pattern pattern = Pattern.compile(""^[0-9]+$"");
        Matcher matcher = pattern.matcher(inputString);
        boolean isStringContainsSpecialCharacter = matcher.find();
        if (isStringContainsSpecialCharacter)
            return false;
        else
            return true;
    }

    boolean checkLoan() {
        String inputString = amounttext.getText();
        Pattern pattern = Pattern.compile(""^[+]?[0-9]*(?:\\.[0-9]*)?$"");
        Matcher matcher = pattern.matcher(inputString);
        boolean isStringContainsSpecialCharacter = matcher.find();
        if (isStringContainsSpecialCharacter)
            return false;
        else
            return true;
    }

    boolean checkInterest() {
        String inputString = interesttext.getText();
        Pattern pattern = Pattern.compile(""^[+]?[0-9]*(?:\\.[0-9]*)?$"");
        Matcher matcher = pattern.matcher(inputString);
        boolean isStringContainsSpecialCharacter = matcher.find();
        if (isStringContainsSpecialCharacter)
            return false;
        else
            return true;
    }
}",1
"public class mainClass { 
    private void initcomponents() {

        Font f = new Font(""Arial"", Font.CENTER_BASELINE, 30);
        Font f1 = new Font(""Arial"", Font.BOLD, 15);

        converter = new JLabel(""Converter"");
        converter.setBounds(175, 20, 300, 25);
        converter.setFont(f);
        container.add(converter);

        display = new JTextField();
        display.setBounds(105, 65, 280, 35);
        container.add(display);

        from = new JLabel(""From"");
        from.setBounds(105, 115, 300, 25);
        from.setFont(f1);
        container.add(from);

        to = new JLabel(""To"");
        to.setBounds(275, 115, 300, 25);
        to.setFont(f1);
        container.add(to);

        combo1 = new JComboBox(fromcombo);
        combo1.setBounds(105, 155, 110, 30);
        combo1.setEditable(false);
        combo1.setSelectedIndex(0);
        container.add(combo1);

        combo2 = new JComboBox(tocombo);
        combo2.setBounds(275, 155, 110, 30);
        combo2.setEditable(false);
        combo2.setSelectedIndex(0);
        container.add(combo2);

        enter = new JButton(""Convert"");
        enter.setBounds(305, 205, 80, 30);
        container.add(enter);

        result = new JTextField();
        result.setBounds(105, 255, 280, 35);
        result.setEnabled(false);
        result.setFont(f1);
        container.add(result);

        home = new JButton(""Home"");
        home.setBounds(220, 310, 80, 30);
        container.add(home);

        clear = new JButton(""Clear"");
        clear.setBounds(305, 310, 80, 30);
        container.add(clear);

        clear.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                display.setText("""");
                result.setText("""");
                result.setEnabled(false);
            }
        });

        home.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                Layout lay = new Layout();
                lay.setVisible(true);
                dispose();
            }
        });

        enter.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (display.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, ""Enter value"");
                } else {

                    if (checkDisplay() == true) {
                        JOptionPane.showMessageDialog(null, ""your input is invalid"");
                        display.setText("""");
                        result.setText("""");
                        result.setEnabled(false);

                    } else {

                        try {

                            int from_value = combo1.getSelectedIndex();
                            int to_value = combo2.getSelectedIndex();
                            double output;
                            double xyz = Double.parseDouble(display.getText());
                            if (from_value == 0) {
                                if (to_value == 0) {
                                    output = (xyz * 1);
                                    result.setText("""" + output + ""  Inch"");
                                }
                                if (to_value == 1) {
                                    output = (xyz * 0.08333);
                                    result.setText("""" + output + ""  Foot"");

                                }
                                if (to_value == 2) {
                                    output = (xyz * .00001578282);
                                    result.setText("""" + output + ""  Mile"");
                                }
                                if (to_value == 3) {
                                    output = (xyz * 2.54);
                                    result.setText("""" + output + ""  Centimeter"");
                                }
                                if (to_value == 4) {
                                    output = (xyz * .0254);
                                    result.setText("""" + output + ""  Meter"");
                                }
                                if (to_value == 5) {
                                    output = (xyz * 0.0000254);
                                    result.setText("""" + output + ""  Kilometer"");
                                }
                            } else if (from_value == 1) {
                                if (to_value == 0) {
                                    output = (xyz * 12);
                                    result.setText("""" + output + ""  Inch"");
                                }
                                if (to_value == 1) {
                                    output = (xyz * 1);
                                    result.setText("""" + output + ""  Foot"");
                                }
                                if (to_value == 2) {
                                    output = (xyz * 0.000189393939);
                                    result.setText("""" + output + ""  Mile"");
                                }
                                if (to_value == 3) {
                                    output = (xyz * 30.48);
                                    result.setText("""" + output + ""  Centimeter"");
                                }
                                if (to_value == 4) {
                                    output = (xyz * 0.3048);
                                    result.setText("""" + output + ""  Meter"");
                                }
                                if (to_value == 5) {
                                    output = (xyz * 0.0003048);
                                    result.setText("""" + output + ""  Kilometer"");
                                }
                            } else if (from_value == 2) {
                                if (to_value == 0) {
                                    output = (xyz * 63364);
                                    result.setText("""" + output + ""  Inch"");
                                }
                                if (to_value == 1) {
                                    output = (xyz * 5280);
                                    result.setText("""" + output + ""  Foot"");
                                }
                                if (to_value == 2) {
                                    output = (xyz * 1);
                                    result.setText("""" + output + ""  Mile"");
                                }
                                if (to_value == 3) {
                                    output = (xyz * 160934.4);
                                    result.setText("""" + output + ""  Centimeter"");

                                }
                                if (to_value == 4) {
                                    output = (xyz * 1609.344);
                                    result.setText("""" + output + ""  Meter"");
                                }
                                if (to_value == 5) {
                                    output = (xyz * 1.609344);
                                    result.setText("""" + output + ""  Kilometer"");
                                }
                            } else if (from_value == 3) {
                                if (to_value == 0) {
                                    output = (xyz * 0.393700787);
                                    result.setText("""" + output + ""  Inch"");
                                }
                                if (to_value == 1) {
                                    output = (xyz * 0.032808399);
                                    result.setText("""" + output + ""  Foot"");
                                }
                                if (to_value == 2) {
                                    output = (xyz * 0.000006214);
                                    result.setText("""" + output + ""  Mile"");
                                }
                                if (to_value == 3) {
                                    output = (xyz * 1);
                                    result.setText("""" + output + ""  Centimeter"");
                                }
                                if (to_value == 4) {
                                    output = (xyz * 0.01);
                                    result.setText("""" + output + ""  Meter"");
                                }
                                if (to_value == 5) {
                                    output = (xyz * 0.0001);
                                    result.setText("""" + output + ""  Kilometer"");
                                }
                            } else if (from_value == 4) {
                                if (to_value == 0) {
                                    output = (xyz * 39.3700787);
                                    result.setText("""" + output + ""  Inch"");
                                }
                                if (to_value == 1) {
                                    output = (xyz * 3.2808399);
                                    result.setText("""" + output + ""  Foot"");
                                }
                                if (to_value == 2) {
                                    output = (xyz * 0.0006214);
                                    result.setText("""" + output + ""  Mile"");
                                }
                                if (to_value == 3) {
                                    output = (xyz * 100);
                                    result.setText("""" + output + ""  Centimeter"");
                                }
                                if (to_value == 4) {
                                    output = (xyz * 1);
                                    result.setText("""" + output + ""  Meter"");
                                }
                                if (to_value == 5) {
                                    output = (xyz * 0.001);
                                    result.setText("""" + output + ""  Kilometer"");
                                }
                            } else if (from_value == 5) {
                                if (to_value == 0) {
                                    output = (xyz * 39370.0787);
                                    result.setText("""" + output + ""  Inch"");
                                }
                                if (to_value == 1) {
                                    output = (xyz * 3280.8399);
                                    result.setText("""" + output + ""  Foot"");
                                }
                                if (to_value == 2) {
                                    output = (xyz * 0.6214);
                                    result.setText("""" + output + ""  Mile"");
                                }
                                if (to_value == 3) {
                                    output = (xyz * 10000);
                                    result.setText("""" + output + ""  Centimeter"");
                                }
                                if (to_value == 4) {
                                    output = (xyz * 1000);
                                    result.setText("""" + output + ""  Meter"");
                                }
                                if (to_value == 5) {
                                    output = (xyz * 1);
                                    result.setText("""" + output + ""  Kilometer"");
                                }
                            }
                            result.setEditable(false);
                            result.setDisabledTextColor(Color.BLACK);
                            result.setEnabled(true);
                        } catch (Exception x) {

                            JOptionPane.showMessageDialog(null, ""your input is not valid"");
                            display.setText("""");
                            result.setText("""");
                            result.setEnabled(false);
                        }
                    }
                }
            }
        });
    }

    public boolean checkDisplay() {

        String value = display.getText();

        for (int i = 0; i < value.length(); i++) {
            char ch = value.charAt(i);
            if (Character.isLetter(ch)) {
                return true;
            }
        }
        return false;
    }

    private Container container;
    private JLabel converter;
    private JLabel from;
    private JLabel to;
    private JTextField display;
    private JTextField result;
    private JComboBox combo1;
    private JComboBox combo2;
    private JButton enter;
    private JButton home;
    private JButton clear;

    String fromcombo[] = {""Inch"", ""Foot"", ""Mile"", ""Centimeter"", ""Meter"", ""Kilometer""};
    String tocombo[] = {""Inch"", ""Foot"", ""Mile"", ""Centimeter"", ""Meter"", ""Kilometer""};
}",1
"public class BMI extends Frame_Templete {

    private JTextField weighttext, heightfoot, heightinch, bmitext, conditiontext;
    private JLabel BodyMassIndex, weight, height, Bmi, condition;
    private Font f;
    private JButton enter, clear, home;

    BMI() {
        super.frame();
        super.setTitle(""Body Mass Index"");
        super.container();
        initcomponents();
    }

    private void initcomponents() {

        Font f = new Font(""Arial"", Font.CENTER_BASELINE, 30);

        BodyMassIndex = new JLabel(""BODY MASS INDEX"");
        BodyMassIndex.setBounds(100, 15, 300, 30);
        BodyMassIndex.setFont(f);
        container.add(BodyMassIndex);

        weight = new JLabel(""Enter Weight :"");
        weight.setBounds(50, 70, 80, 30);
        container.add(weight);

        height = new JLabel(""Enter Height :"");
        height.setBounds(50, 115, 300, 30);
        container.add(height);

        Bmi = new JLabel(""BMI :"");
        Bmi.setBounds(50, 200, 300, 30);
        container.add(Bmi);

        condition = new JLabel(""Condition :"");
        condition.setBounds(50, 250, 300, 30);
        container.add(condition);

        weighttext = new JTextField(""Kg"");
        weighttext.setBounds(170, 73, 195, 30);
        container.add(weighttext);

        heightfoot = new JTextField(""Foot"");
        heightfoot.setBounds(170, 118, 90, 30);
        container.add(heightfoot);

        heightinch = new JTextField(""Inch"");
        heightinch.setBounds(275, 118, 90, 30);
        container.add(heightinch);

        bmitext = new JTextField();
        bmitext.setBounds(170, 205, 195, 30);
        bmitext.setEnabled(false);
        container.add(bmitext);

        conditiontext = new JTextField();
        conditiontext.setBounds(170, 250, 195, 30);
        conditiontext.setEnabled(false);
        container.add(conditiontext);

        enter = new JButton(""Enter"");
        enter.setBounds(280, 162, 85, 30);
        container.add(enter);

        clear = new JButton(""Clear"");
        clear.setBounds(170, 293, 85, 30);
        container.add(clear);

        home = new JButton(""Home"");
        home.setBounds(280, 293, 85, 30);
        container.add(home);

        enter.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (weighttext.getText().isEmpty() || heightfoot.getText().isEmpty() ||
                    heightinch.getText().isEmpty() || heightfoot.getText().equals(""Foot"") ||
                    heightinch.getText().equals(""Inch"") || weighttext.getText().equals(""Kg"")) {

                    JOptionPane.showMessageDialog(null, ""Enter all value"");
                } else {

                    if (checkPointWeight() == true && checkPointHeightInch() == false && checkPointHeightFoot() == false) {
                        JOptionPane.showMessageDialog(null, ""Weight input is invalid"");
                        weighttext.setText("""");
                        bmitext.setText("""");
                        conditiontext.setText("""");
                    } else if (checkPointHeightFoot() == true && checkPointHeightInch() == false && checkPointWeight() == false) {
                        JOptionPane.showMessageDialog(null, ""Height foot input is invalid"");
                        heightfoot.setText("""");
                        bmitext.setText("""");
                        conditiontext.setText("""");
                    } else if (checkPointHeightInch() == true && checkPointHeightFoot() == false && checkPointWeight() == false) {
                        JOptionPane.showMessageDialog(null, ""Height inch input is invalid"");
                        heightinch.setText("""");
                        bmitext.setText("""");
                        conditiontext.setText("""");
                    } else if (checkPointHeightInch() == true && checkPointHeightFoot() == true && checkPointWeight() == false) {
                        JOptionPane.showMessageDialog(null, ""Height foot & inch input is invalid"");
                        heightinch.setText("""");
                        heightfoot.setText("""");
                        bmitext.setText("""");
                        conditiontext.setText("""");
                    } else if (checkPointHeightInch() == true && checkPointHeightFoot() == false && checkPointWeight() == true) {
                        JOptionPane.showMessageDialog(null, ""Weight & height inch input is invalid"");
                        heightinch.setText("""");
                        weighttext.setText("""");
                        bmitext.setText("""");
                        conditiontext.setText("""");
                    } else if (checkPointHeightInch() == false && checkPointHeightFoot() == true && checkPointWeight() == true) {
                        JOptionPane.showMessageDialog(null, ""Weight & height foot input is invalid"");
                        heightfoot.setText("""");
                        weighttext.setText("""");
                        bmitext.setText("""");
                        conditiontext.setText("""");
                    } else {
                        try {

                            Double Weight = Double.parseDouble(weighttext.getText());
                            Double Height_Foot = Double.parseDouble(heightfoot.getText());
                            Double Height_Inch = Double.parseDouble(heightinch.getText());

                            Double Foot_to_meter = (Height_Foot * 0.3048);
                            Double Inch_to_meter = (Height_Inch * 0.0254);
                            Double Meter = (Foot_to_meter + Inch_to_meter);

                            Double BMI = Weight / (Meter * Meter);
                            bmitext.setText(String.valueOf(BMI));

                            if (BMI < 18.5)
                                conditiontext.setText(""UnderWeight"");
                            else if (BMI > 18.5 && BMI < 24.9)
                                conditiontext.setText(""Normal"");
                            else if (BMI > 25 && BMI < 29.9)
                                conditiontext.setText(""OverWeight"");
                            else if (BMI > 30 && BMI < 34.9)
                                conditiontext.setText(""Medical Obese"");
                            else if (BMI > 35 && BMI < 40)
                                conditiontext.setText(""Extreme Obese"");
                            else {
                                conditiontext.setText(""Input are not logical"");
                            }
                            bmitext.setEnabled(true);
                            conditiontext.setEnabled(true);
                        } catch (Exception e1) {
                            JOptionPane.showMessageDialog(null, ""Your input is not valid"");
                            weighttext.setText("""");
                            heightfoot.setText("""");
                            heightinch.setText("""");
                        }
                    }
                }
            }
        });

        clear.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                weighttext.setText("""");
                heightfoot.setText("""");
                heightinch.setText("""");
                bmitext.setText("""");
                conditiontext.setText("""");

                bmitext.setEnabled(false);
                conditiontext.setEnabled(false);
            }
        });

        home.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Layout lay = new Layout();
                lay.setVisible(true);
                dispose();
            }
        });

        weighttext.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent fe) {

                if (weighttext.getText().equals(""Kg"")) {
                    weighttext.setText("""");
                    weighttext.setForeground(new Color(0, 0, 0));

                }
            }

            @Override
            public void focusLost(FocusEvent fe) {
                if (weighttext.getText().equals("""")) {
                    weighttext.setText(""Kg"");
                    weighttext.setForeground(new Color(0, 0, 0));
                }
            }
        });

        heightfoot.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent fe) {
                if (heightfoot.getText().equals(""Foot"")) {
                    heightfoot.setText("""");
                    heightfoot.setForeground(new Color(0, 0, 0));
                }
            }

            @Override
            public void focusLost(FocusEvent fe) {
                if (heightfoot.getText().equals("""")) {
                    heightfoot.setText(""Foot"");
                    heightfoot.setForeground(new Color(0, 0, 0));
                }
            }
        });

        heightinch.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent fe) {

                if (heightinch.getText().equals(""Inch"")) {
                    heightinch.setText("""");
                    heightinch.setForeground(new Color(0, 0, 0));
                }
            }

            @Override
            public void focusLost(FocusEvent fe) {
                if (heightinch.getText().equals("""")) {
                    heightinch.setText(""Inch"");
                    heightinch.setForeground(new Color(0, 0, 0));
                }
            }
        });
    }

    boolean checkPointHeightFoot() {

        String inputString = heightfoot.getText();
        Pattern pattern = Pattern.compile(""^[0-9]+$"");
        Matcher matcher = pattern.matcher(inputString);

        boolean isStringContainsSpecialCharacter = matcher.find();

        if (isStringContainsSpecialCharacter)
            return false;
        else
            return true;
    }

    boolean checkPointHeightInch() {

        String inputString = heightinch.getText();
        Pattern pattern = Pattern.compile(""^[0-9]+$"");
        Matcher matcher = pattern.matcher(inputString);

        boolean isStringContainsSpecialCharacter = matcher.find();

        if (isStringContainsSpecialCharacter)
            return false;
        else
            return true;
    }

    boolean checkPointWeight() {

        String inputString = weighttext.getText();
        Pattern pattern = Pattern.compile(""^[0-9]+$"");
        Matcher matcher = pattern.matcher(inputString);

        boolean isStringContainsSpecialCharacter = matcher.find();

        if (isStringContainsSpecialCharacter)
            return false;
        else
            return true;
    }
}",1
"import java.applet.AudioClip;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

@SuppressWarnings(""serial"")
public class Ikpoh extends JApplet implements MouseListener, KeyListener, Runnable {
    private String openFrame = ""no"";

    // Variables for images
    private Image stripe1;
    private Image stripe2;
    private Image stripe3;
    private Image slotMachine;
    private Image spin;
    private Image payouts;
    private Image help;
    private Image maxBet;
    private Image clearBet;
    private Image mute;
    private Image soundOn;
    private Image line1;
    private Image line1On;
    private Image line2;
    private Image line2On;
    private Image line3;
    private Image line3On;
    private Image line4;
    private Image line4On;
    private Image line5;
    private Image line5On;

    private JFrame window = new JFrame(""Slot Machine Payouts"");
    private JFrame window2 = new JFrame(""Keyboard Commands"");
    private Container content = getContentPane();
    
    private int row1Y = -100;
    public int row1Mod;
    private int spin1 = 20;
    private int Stop1;
    private int row2Y = -100;
    public int row2Mod;
    private int spin2 = 20;
    private int Stop2;
    private int row3Y = -100;
    public int row3Mod;
    private int spin3 = 20;
    private int Stop3;
    
    private int row1Count = 0;
    private int row2Count = 0;
    private int row3Count = 0;
    
    private String showLine1Off = ""yes"";
    private String showLine2Off = ""yes"";
    private String showLine3Off = ""yes"";
    private String showLine4Off = ""yes"";
    private String showLine5Off = ""yes"";
    
    private int row1Bet = 0;
    private int row2Bet = 0;
    private int row3Bet = 0;
    private int row4Bet = 0;
    private int row5Bet = 0;
    
    private int row1Result = 0;
    private int row2Result = 0;
    private int row3Result = 0;
    private int row4Result = 0;
    private int row5Result = 0;
    
    private int totalBet = 0;
    private int totalCredits = 100;
    private int totalPayout = 0;
    
    // Strings for label values
    private String sLabel1 = ""0"";
    private String sLabel2 = ""100"";
    private String sLabel3 = ""0"";
    private String sLabel4 = ""0"";
    private String sLabel5 = ""0"";
    private String sLabel6 = ""0"";
    private String sLabel7 = ""0"";
    private String sLabel8 = ""0"";
    private String sLabel9 = """";
    
    // Increase font
    Font big = new Font(""SansSerif"", Font.BOLD, 20);
    
    // Variables to hold values of each reel position of 3 reels
    public int row1Top = 0;
    public int row1Mid = 0;
    public int row1Bot = 0;
    public int row2Top = 0;
    public int row2Mid = 0;
    public int row2Bot = 0;
    public int row3Top = 0;
    public int row3Mid = 0;
    public int row3Bot = 0;
    
    // Thread added for the time delay
    Thread animate;
    
    // Sound effects to be used
    AudioClip soundHandle;
    AudioClip soundSpin;
    AudioClip soundWin;
    AudioClip soundFail;
    AudioClip soundWelcome;
    AudioClip soundClick;
    
    // Mute to control sound
    public int muteFlag;
    
    public void init() {
        // Set the size and layout
        this.setSize(800, 650);
        content.setLayout(null);
        
        // Initialize all images
        stripe1 = getImage(getDocumentBase(), ""TestStripe1.png"");
        stripe2 = getImage(getDocumentBase(), ""TestStripe2.png"");
        stripe3 = getImage(getDocumentBase(), ""TestStripe3.png"");
        slotMachine = getImage(getDocumentBase(), ""slot_machine.png"");
        payouts = getImage(getDocumentBase(), ""Payouts.png"");
        help = getImage(getDocumentBase(), ""Help.png"");
        spin = getImage(getDocumentBase(), ""Spin.png"");
        maxBet = getImage(getDocumentBase(), ""maxBet.png"");
        clearBet = getImage(getDocumentBase(), ""clearBet.png"");
        mute = getImage(getDocumentBase(), ""Mute.png"");
        soundOn = getImage(getDocumentBase(), ""Sound.png"");
        line1 = getImage(getDocumentBase(), ""line1Off.png"");
        line1On = getImage(getDocumentBase(), ""line1On.png"");
        line2 = getImage(getDocumentBase(), ""line1Off.png"");
        line2On = getImage(getDocumentBase(), ""line1On.png"");
        line3 = getImage(getDocumentBase(), ""line1Off.png"");
        line3On = getImage(getDocumentBase(), ""line1On.png"");
        line4 = getImage(getDocumentBase(), ""line1Off.png"");
        line4On = getImage(getDocumentBase(), ""line1On.png"");
        line5 = getImage(getDocumentBase(), ""line1Off.png"");
        line5On = getImage(getDocumentBase(), ""line1On.png"");
        
        // Initialize sound
        soundHandle = getAudioClip(getDocumentBase(), ""handle.au"");
        soundSpin = getAudioClip(getDocumentBase(), ""slot2spin.au"");
        soundWin = getAudioClip(getDocumentBase(), ""payout.au"");
        soundFail = getAudioClip(getDocumentBase(), ""youFail.au"");
        soundWelcome = getAudioClip(getDocumentBase(), ""bellIntro.au"");
        soundClick = getAudioClip(getDocumentBase(), ""click.au"");
        
        // Add key and mouse listeners
        content.addKeyListener(this);
        content.addMouseListener(this);
        
        // Initialize Flowlayout and 3 Labels for new JFrame windows
        window.setLayout(new FlowLayout(FlowLayout.LEFT));
        window.add(new Label(""1 Cherry pays:                 1 credit""));
        window.add(new Label(""2 Cherries pays:              3 credits""));
        window.add(new Label(""3 Cherries pays:              5 credits""));
        window.add(new Label(""3 Oranges pays:            10 credits""));
        window.add(new Label(""3 Lemons pays:             15 credits""));
        window.add(new Label(""3 Plums pays:                25 credits""));
        window.add(new Label(""3 Watermelons pays:   50 credits""));
        window.add(new Label(""3 Bells pays Jackpot: 100 credits""));
        
        window2.setLayout(new FlowLayout(FlowLayout.LEFT));
        window2.add(new Label(""Hit SpaceBar to Spin Reel        ""));
        window2.add(new Label(""Hit Enter to Max Bet        ""));
        window2.add(new Label(""Hit Shift to Clear Bets        ""));
        window2.add(new Label(""Hit 1 to Bet Line 1        ""));
        window2.add(new Label(""Hit 2 to Bet Line 2        ""));
        window2.add(new Label(""Hit 3 to Bet Line 3        ""));
        window2.add(new Label(""Hit 4 to Bet Line 4        ""));
        window2.add(new Label(""Hit 5 to Bet Line 5        ""));
        
        // Welcome sound
        if (muteFlag == 0) {
            soundWelcome.play();
        }
        
        // Reset focus
        content.setFocusable(true);
    }
    
    public void paint(Graphics g) {
        // Draw all images
        g.drawImage(stripe1, 100, row1Y, this);
        g.drawImage(stripe2, 300, row2Y, this);
        g.drawImage(stripe3, 500, row3Y, this);
        g.drawImage(slotMachine, 0, 0, this);
        g.drawImage(payouts, 100, 425, this);
        g.drawImage(help, 100, 475, this);
        
        // Toggle of mute button
        if (muteFlag == 0) {
            g.drawImage(mute, 100, 525, this);
        } else {
            g.drawImage(soundOn, 100, 525, this);
        }
        
        g.drawImage(spin, 625, 425, this);
        g.drawImage(maxBet, 625, 475, this);
        g.drawImage(clearBet, 625, 525, this);
        
        // Section where user chooses lines to bet
        g.drawImage(line1On, 25, 50, this);
        if (showLine1Off.equals(""yes"")) g.drawImage(line1, 25, 50, this);
        g.drawImage(line2On, 25, 125, this);
        if (showLine2Off.equals(""yes"")) g.drawImage(line2, 25, 125, this);
        g.drawImage(line3On, 25, 225, this);
        if (showLine3Off.equals(""yes"")) g.drawImage(line3, 25, 225, this);
        g.drawImage(line4On, 25, 325, this);
        if (showLine4Off.equals(""yes"")) g.drawImage(line4, 25, 325, this);
        g.drawImage(line5On, 25, 400, this);
        if (showLine5Off.equals(""yes"")) g.drawImage(line5, 25, 400, this);
        
        g.setColor(Color.black);
        g.setFont(big);
        
        // Draw label values
        g.drawString(sLabel1, 310, 450);
        g.drawString(sLabel2, 520, 450);
        g.drawString(sLabel3, 345, 540);
        g.drawString(sLabel4, 345, 560);
        g.drawString(sLabel5, 345, 580);
        g.drawString(sLabel6, 345, 600);
        g.drawString(sLabel7, 345, 620);
        g.drawString(sLabel8, 345, 640);
        g.drawString(sLabel9, 480, 600);
    }
    
    // Mouse event section
    public void mousePressed(MouseEvent evt) {
        if (evt.getID() == MouseEvent.MOUSE_PRESSED) {
            // Check to see if button spin is pressed
            if (evt.getX() >= 625 && evt.getX() <= 700 && evt.getY() >= 425 && evt.getY() <= 450) {
                doSpin();
            }
            
            // Check to see if button payout is pressed
            if (evt.getX() >= 100 && evt.getX() <= 175 && evt.getY() >= 425 && evt.getY() <= 450) {
                showPayout();
            }
            
            // Check to see if button help is pressed
            if (evt.getX() >= 100 && evt.getX() <= 175 && evt.getY() >= 475 && evt.getY() <= 500) {
                showHelp();
            }
            
            // Check to see if button mute is pressed
            if (evt.getX() >= 100 && evt.getX() <= 175 && evt.getY() >= 525 && evt.getY() <= 550) {
                if (muteFlag == 0) {
                    muteFlag = 1;
                    soundHandle.stop();
                    soundSpin.stop();
                    soundWin.stop();
                    soundFail.stop();
                    soundWelcome.stop();
                    soundClick.stop();
                } else {
                    muteFlag = 0;
                }
            }
            
            // If Max bet is hit all lines are selected
            if (evt.getX() >= 625 && evt.getX() <= 700 && evt.getY() >= 475 && evt.getY() <= 500) {
                showMaxBet();
            }
            
            // If Clear bet is hit all lines are unselected
            if (evt.getX() >= 625 && evt.getX() <= 700 && evt.getY() >= 525 && evt.getY() <= 550) {
                clearBet();
            }
            
            // If row 1 is clicked
            if (evt.getX() >= 25 && evt.getX() <= 75 && evt.getY() >= 125 && evt.getY() <= 175) {
                row1Clicked();
            }
            
            // If row 2 is clicked
            if (evt.getX() >= 25 && evt.getX() <= 75 && evt.getY() >= 225 && evt.getY() <= 275) {
                row2Clicked();
            }
            
            // If row 3 is clicked
            if (evt.getX() >= 25 && evt.getX() <= 75 && evt.getY() >= 325 && evt.getY() <= 375) {
                row3Clicked();
            }
            
            // If row 4 is clicked
            if (evt.getX() >= 25 && evt.getX() <= 75 && evt.getY() >= 50 && evt.getY() <= 100) {
                row4Clicked();
            }
            
            // If row 5 is clicked
            if (evt.getX() >= 25 && evt.getX() <= 75 && evt.getY() >= 400 && evt.getY() <= 450) {
                row5Clicked();
            }
            
            repaint();
        }
    }

    // Implement other MouseListener methods as needed
    public void mouseClicked(MouseEvent evt) {}
    public void mouseReleased(MouseEvent evt) {}
    public void mouseEntered(MouseEvent evt) {}
    public void mouseExited(MouseEvent evt) {}

    // Implement KeyListener methods as needed
    public void keyTyped(KeyEvent e) {}
    public void keyPressed(KeyEvent e) {}
    public void keyReleased(KeyEvent e) {}

    // Implement Runnable method
    public void run() {
        // Implement the run method if needed
    }
    
    // Implement the required methods (e.g., doSpin(), showPayout(), showHelp(), showMaxBet(), clearBet(), row1Clicked(), etc.)
}",1
"import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JOptionPane;

public class Machine implements MouseListener, KeyListener, Runnable {

    private int totalCredits;
    private int totalBet;
    private int row1Bet, row2Bet, row3Bet, row4Bet, row5Bet;
    private int Stop1, Stop2, Stop3;
    private int row1Y, row2Y, row3Y;
    private int row1Count, row2Count, row3Count;
    private int row1Mod, row2Mod, row3Mod;
    private int muteFlag;
    private int spin1, spin2, spin3;
    private String showLine1Off, showLine2Off, showLine3Off, showLine4Off, showLine5Off;
    private String openFrame = ""no"";
    private SoundPlayer soundWin, soundHandle, soundSpin, soundFail, soundClick;
    private javax.swing.JFrame window, window2;
    
    private String sLabel1, sLabel2, sLabel3, sLabel4, sLabel5, sLabel6, sLabel7, sLabel8, sLabel9;

    @Override
    public void mouseClicked(MouseEvent evt) { }

    @Override
    public void mouseReleased(MouseEvent evt) { }

    @Override
    public void mouseEntered(MouseEvent evt) { }

    @Override
    public void mouseExited(MouseEvent evt) { }

    @Override
    public void run() {
        repaint();
    }

    public void start() { }

    public void stop() { }

    public void destroy() { }

    public void doSpin() {
        if (totalCredits != 0 && totalBet != 0 && Stop3 == 0) {
            sLabel3 = ""0"";
            sLabel4 = ""0"";
            sLabel5 = ""0"";
            sLabel6 = ""0"";
            sLabel7 = ""0"";
            sLabel8 = ""0"";
            
            if (totalCredits == 0) {
                sLabel9 = ""No credits left you lose"";
            } else if (totalCredits < totalBet) {
                sLabel9 = ""Must decrease bet to continue"";
            } else {
                sLabel9 = """";
            }
            
            if (totalCredits >= totalBet) {
                soundWin.stop();
                if (muteFlag == 0) {
                    soundHandle.play();
                }
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                new Thread(() -> spin()).start();
            }
        }
    }

    public void spin() {
        totalCredits -= totalBet;
        sLabel2 = Integer.toString(totalCredits);

        Stop1 = (int) ((spin1 * Math.random()) + 1);
        Stop2 = (int) ((spin2 * Math.random()) + 21);
        Stop3 = (int) ((spin3 * Math.random()) + 41);

        if (Stop3 > 1) {
            if (muteFlag == 0) {
                soundSpin.play();
            }
        }

        while (Stop1 >= 1 || Stop2 >= 1 || Stop3 >= 1) {
            if (Stop1 >= 1) {
                row1Y -= 100;
                row1Count += 1;
                if (row1Y < -1800) row1Y = 100;
                Stop1 -= 1;
            }
            if (Stop2 >= 1) {
                row2Y -= 100;
                row2Count += 1;
                if (row2Y < -1800) row2Y = 100;
                Stop2 -= 1;
            }
            if (Stop3 >= 1) {
                row3Y -= 100;
                row3Count += 1;
                if (row3Y < -1800) row3Y = 100;
                Stop3 -= 1;
            }

            new Thread(() -> repaint()).start();

            try {
                Thread.sleep(40);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        if (Stop3 == 0) {
            soundSpin.stop();
        }
        row1Mod = row1Count % 20;
        reel1Type();
        row2Mod = row2Count % 20;
        reel2Type();
        row3Mod = row3Count % 20;
        reel3Type();
        calculateWinnings();

        if (totalCredits == 0 && muteFlag == 0) {
            soundFail.play();
        }
        repaint();
    }

    public void showPayout() {
        if (openFrame.equals(""no"")) {
            window.setSize(260, 280);
            window.setVisible(true);
            openFrame = ""yes"";
        } else {
            window.setVisible(false);
            openFrame = ""no"";
        }
    }

    public void showHelp() {
        if (openFrame.equals(""no"")) {
            window2.setSize(260, 280);
            window2.setVisible(true);
            openFrame = ""yes"";
        } else {
            window2.setVisible(false);
            openFrame = ""no"";
        }
    }

    public void showMaxBet() {
        if (muteFlag == 0) {
            soundClick.play();
        }
        if (showLine1Off.equals(""yes"")) {
            showLine1Off = ""no"";
            row1Bet = 1;
            totalBet += row1Bet;
            sLabel1 = Integer.toString(totalBet);
        }
        if (showLine2Off.equals(""yes"")) {
            showLine2Off = ""no"";
            row2Bet = 1;
            totalBet += row2Bet;
            sLabel1 = Integer.toString(totalBet);
        }
        if (showLine3Off.equals(""yes"")) {
            showLine3Off = ""no"";
            row3Bet = 1;
            totalBet += row3Bet;
            sLabel1 = Integer.toString(totalBet);
        }
        if (showLine4Off.equals(""yes"")) {
            showLine4Off = ""no"";
            row4Bet = 1;
            totalBet += row4Bet;
            sLabel1 = Integer.toString(totalBet);
        }
        if (showLine5Off.equals(""yes"")) {
            showLine5Off = ""no"";
            row5Bet = 1;
            totalBet += row5Bet;
            sLabel1 = Integer.toString(totalBet);
        }
    }

    public void clearBet() {
        if (muteFlag == 0) {
            soundClick.play();
        }
        if (showLine1Off.equals(""no"")) {
            showLine1Off = ""yes"";
            row1Bet = 1;
            totalBet -= row1Bet;
            sLabel1 = Integer.toString(totalBet);
        }
        if (showLine2Off.equals(""no"")) {
            showLine2Off = ""yes"";
            row2Bet = 1;
            totalBet -= row2Bet;
            sLabel1 = Integer.toString(totalBet);
        }
        if (showLine3Off.equals(""no"")) {
            showLine3Off = ""yes"";
            row3Bet = 1;
            totalBet -= row3Bet;
            sLabel1 = Integer.toString(totalBet);
        }
        if (showLine4Off.equals(""no"")) {
            showLine4Off = ""yes"";
            row4Bet = 1;
            totalBet -= row4Bet;
            sLabel1 = Integer.toString(totalBet);
        }
        if (showLine5Off.equals(""no"")) {
            showLine5Off = ""yes"";
            row5Bet = 1;
            totalBet -= row5Bet;
            sLabel1 = Integer.toString(totalBet);
        }
    }

    public void row1Clicked() {
        if (muteFlag == 0) {
            soundClick.play();
        }
        if (showLine1Off.equals(""yes"")) {
            showLine1Off = ""no"";
            row1Bet = 1;
            totalBet += row1Bet;
            sLabel1 = Integer.toString(totalBet);
        } else {
            showLine1Off = ""yes"";
            totalBet -= row1Bet;
            sLabel1 = Integer.toString(totalBet);
            row1Bet = 0;
        }
    }

    public void row2Clicked() {
        if (muteFlag == 0) {
            soundClick.play();
        }
        if (showLine2Off.equals(""yes"")) {
            showLine2Off = ""no"";
            row2Bet = 1;
            totalBet += row2Bet;
            sLabel1 = Integer.toString(totalBet);
        } else {
            showLine2Off = ""yes"";
            totalBet -= row2Bet;
            sLabel1 = Integer.toString(totalBet);
            row2Bet = 0;
        }
    }

    public void row3Clicked() {
        if (muteFlag == 0) {
            soundClick.play();
        }
        if (showLine3Off.equals(""yes"")) {
            showLine3Off = ""no"";
            row3Bet = 1;
            totalBet += row3Bet;
            sLabel1 = Integer.toString(totalBet);
        } else {
            showLine3Off = ""yes"";
            totalBet -= row3Bet;
            sLabel1 = Integer.toString(totalBet);
            row3Bet = 0;
        }
    }

    public void row4Clicked() {
        if (muteFlag == 0) {
            soundClick.play();
        }
        if (showLine4Off.equals(""yes"")) {
            showLine4Off = ""no"";
            row4Bet = 1;
            totalBet += row4Bet;
            sLabel1 = Integer.toString(totalBet);
        } else {
            showLine4Off = ""yes"";
            totalBet -= row4Bet;
            sLabel1 = Integer.toString(totalBet);
            row4Bet = 0;
        }
    }

    public void row5Clicked() {
        if (muteFlag == 0) {
            soundClick.play();
        }
        if (showLine5Off.equals(""yes"")) {
            showLine5Off = ""no"";
            row5Bet = 1;
            totalBet += row5Bet;
            sLabel1 = Integer.toString(totalBet);
        } else {
            showLine5Off = ""yes"";
            totalBet -= row5Bet;
            sLabel1 = Integer.toString(totalBet);
            row5Bet = 0;
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_SPACE:
                doSpin();
                break;
            case KeyEvent.VK_ENTER:
                showMaxBet();
                repaint();
                break;
            case KeyEvent.VK_SHIFT:
                clearBet();
                repaint();
                break;
            case KeyEvent.VK_1:
                row1Clicked();
                repaint();
                break;
            case KeyEvent.VK_2:
                row2Clicked();
                repaint();
                break;
            case KeyEvent.VK_3:
                row3Clicked();
                repaint();
                break;
            case KeyEvent.VK_4:
                row4Clicked();
                repaint();
                break;
            case KeyEvent.VK_5:
                row5Clicked();
                repaint();
                break;
            // Uncomment the following block if you want to use 'g' key for opening payout window
            /*
            case KeyEvent.VK_G:
                showPayout();
                repaint();
                break;
            */
        }
    }

    @Override
    public void keyReleased(KeyEvent e) { }

    @Override
    public void keyTyped(KeyEvent e) { }

    // Placeholder methods for missing methods
    private void reel1Type() { }
    private void reel2Type() { }
    private void reel3Type() { }
    private void calculateWinnings() { }
    private void repaint() { }

    // Placeholder class for sound player
    private class SoundPlayer {
        public void play() { }
        public void stop() { }
    }
}
",1
"import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

public class Homes extends JFrame {

    public static int volume_icon_variable = 1;
    int value_of_text_file;
    private Container container;
    private ImageIcon duplicity_img, capitalization_img, spell_img, aboutus_img;
    ButtonSound sound_button = new ButtonSound();

    // New attribute
    private int buttonClickCount = 0;

    public Home() throws IOException {

        App_Icon();

        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setBounds(350, 25, 650, 680);
        this.setTitle(""Duplicity Checker"");
        this.setResizable(false);

        container = this.getContentPane();
        container.setLayout(null);
        container.setBackground(new Color(255, 255, 255, 255));

        JLabel image = new JLabel(new ImageIcon(getClass().getResource(""Picture//home_img.jpg"")));
        image.setBounds(135, 0, 400, 400);
        container.add(image);

        volumeON_img = new ImageIcon(getClass().getResource(""Picture//off1.png""));
        JButton volume_on_button = new JButton(volumeON_img);
        volume_on_button.setBackground(new Color(255, 255, 255, 255));
        volume_on_button.setBorder(null);
        volume_on_button.setBounds(565, 20, volumeON_img.getIconWidth(), volumeON_img.getIconHeight());
        container.add(volume_on_button);

        volumeOFF_img = new ImageIcon(getClass().getResource(""Picture//on1.png""));
        JButton volume_off_button = new JButton(volumeOFF_img);
        volume_off_button.setBackground(new Color(255, 255, 255, 255));
        volume_off_button.setBorder(null);
        volume_off_button.setBounds(585, 28, volumeOFF_img.getIconWidth(), volumeOFF_img.getIconHeight());

        Font f = new Font(""Calibri"", Font.BOLD, 20);

        duplicity_img = new ImageIcon(getClass().getResource(""Picture//Duplicity_image.png""));
        JButton duplicity_button = new JButton(duplicity_img);
        duplicity_button.setBackground(new Color(255, 255, 255, 255));
        duplicity_button.setBorder(null);
        duplicity_button.setBounds(200, 400, duplicity_img.getIconWidth(), duplicity_img.getIconHeight());
        container.add(duplicity_button);

        capitalization_img = new ImageIcon(getClass().getResource(""Picture//Capitalization_image.png""));
        JButton capitalization_button = new JButton(capitalization_img);
        capitalization_button.setBackground(new Color(255, 255, 255, 255));
        capitalization_button.setBorder(null);
        capitalization_button.setBounds(55, 465, capitalization_img.getIconWidth(), capitalization_img.getIconHeight());
        container.add(capitalization_button);

        spell_img = new ImageIcon(getClass().getResource(""Picture//spell_check_image.png""));
        JButton spell_button = new JButton(spell_img);
        spell_button.setBackground(new Color(255, 255, 255, 255));
        spell_button.setBorder(null);
        spell_button.setBounds(350, 465, spell_img.getIconWidth(), spell_img.getIconHeight());
        container.add(spell_button);

        aboutus_img = new ImageIcon(getClass().getResource(""Picture//aboutus_image.png""));
        JButton aboutus_button = new JButton(aboutus_img);
        aboutus_button.setBackground(new Color(255, 255, 255, 255));
        aboutus_button.setBorder(null);
        aboutus_button.setBounds(55, 530, aboutus_img.getIconWidth(), aboutus_img.getIconHeight());
        container.add(aboutus_button);

        guideline_img = new ImageIcon(getClass().getResource(""Picture//Guideline_image.png""));
        JButton guide_button = new JButton(guideline_img);
        guide_button.setBackground(new Color(255, 255, 255, 255));
        guide_button.setBorder(null);
        guide_button.setBounds(350, 530, guideline_img.getIconWidth(), guideline_img.getIconHeight());
        container.add(guide_button);

        try {
            // On/Off button sound
            Scanner scanner = new Scanner(new File(""value3.txt""));
            while (scanner.hasNextInt()) {
                value_of_text_file = scanner.nextInt();
                if (value_of_text_file == 0) {
                    volume_on_button.setIcon(volumeOFF_img);
                    volume_icon_variable = 0;
                    sound_button.OFFvariable = 0;
                    sound_button.ONvariable = 1;
                } else {
                    volume_on_button.setIcon(volumeON_img);
                }
            }
        } catch (FileNotFoundException fileNotFoundException) {
            fileNotFoundException.printStackTrace();
        }

        duplicity_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                buttonClickCount++; // Increment the click count
                try {
                    Object[] choices = {""Choose Randomly"", ""Select Folder"", ""Cancel""};
                    Object defaultChoice = choices[0];
                    int n = JOptionPane.showOptionDialog(null, ""How do you want to check?"", ""Confirmation"",
                            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, choices, defaultChoice);
                    if (n == JOptionPane.YES_OPTION) {
                        sound_button.playsound();
                        Duplicity_Random_File LF = new Duplicity_Random_File();
                        LF.setVisible(true);
                        dispose();
                    } else if (n == JOptionPane.NO_OPTION) {
                        sound_button.playsound();
                        Duplicity_Folder LF = new Duplicity_Folder();
                        LF.setVisible(true);
                        dispose();
                    } else {
                        sound_button.playsound();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });

        capitalization_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                Capitalization LF = null;
                try {
                    LF = new Capitalization();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                LF.setVisible(true);
                dispose();
            }
        });

        spell_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                Spell_Check LF = null;
                try {
                    LF = new Spell_Check();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                LF.setVisible(true);
                dispose();
            }
        });

        aboutus_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                Aboutus aboutus = new Aboutus();
                aboutus.setVisible(true);
                dispose();
            }
        });

        guide_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                User_GuideLines guideLines = new User_GuideLines();
                guideLines.setVisible(true);
                dispose();
            }
        });

        volume_on_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                if (volume_icon_variable == 0) {
                    sound_button.ONvariable = 1;
                    volume_on_button.setIcon(volumeON_img);
                    sound_button.ONvariable = 0;
                    sound_button.OFFvariable = 1;
                    volume_icon_variable = 1;
                } else {
                    volume_on_button.setIcon(volumeOFF_img);
                    sound_button.OFFvariable = 0;
                    sound_button.ONvariable = 1;
                    volume_icon_variable = 0;
                }

                try {
                    FileOutputStream fout = new FileOutputStream(""value3.txt"");
                    PrintStream pout = new PrintStream(fout);
                    int kk = volume_icon_variable;
                    pout.println(kk);
                    pout.close();
                    fout.close();
                } catch (FileNotFoundException fileNotFoundException) {
                    fileNotFoundException.printStackTrace();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
        });
    }

    public void App_Icon() {
        ImageIcon logo = new ImageIcon(getClass().getResource(""Picture//icon.jpg""));
        this.setIconImage(logo.getImage());
    }

    public static void main(String[] args) throws IOException {
        Home hm = new Home();
        hm.setVisible(true);
    }
}
",0
"import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

public class Homee extends JFrame {

    public static int volume_icon_variable = 1;
    int value_of_text_file;
    private Container container;
    private ImageIcon duplicity_img, capitalization_img, spell_img, aboutus_img;
    ButtonSound sound_button = new ButtonSound();

    // New attribute
    private int buttonClickCount = 0;

    public Home() throws IOException {

        App_Icon();

        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setBounds(350, 25, 650, 680);
        this.setTitle(""Duplicity Checker"");
        this.setResizable(false);

        container = this.getContentPane();
        container.setLayout(null);
        container.setBackground(new Color(255, 255, 255, 255));

        JLabel image = new JLabel(new ImageIcon(getClass().getResource(""Picture//home_img.jpg"")));
        image.setBounds(135, 0, 400, 400);
        container.add(image);

        volumeON_img = new ImageIcon(getClass().getResource(""Picture//off1.png""));
        JButton volume_on_button = new JButton(volumeON_img);
        volume_on_button.setBackground(new Color(255, 255, 255, 255));
        volume_on_button.setBorder(null);
        volume_on_button.setBounds(565, 20, volumeON_img.getIconWidth(), volumeON_img.getIconHeight());
        container.add(volume_on_button);

        volumeOFF_img = new ImageIcon(getClass().getResource(""Picture//on1.png""));
        JButton volume_off_button = new JButton(volumeOFF_img);
        volume_off_button.setBackground(new Color(255, 255, 255, 255));
        volume_off_button.setBorder(null);
        volume_off_button.setBounds(585, 28, volumeOFF_img.getIconWidth(), volumeOFF_img.getIconHeight());

        Font f = new Font(""Calibri"", Font.BOLD, 20);

        duplicity_img = new ImageIcon(getClass().getResource(""Picture//Duplicity_image.png""));
        JButton duplicity_button = new JButton(duplicity_img);
        duplicity_button.setBackground(new Color(255, 255, 255, 255));
        duplicity_button.setBorder(null);
        duplicity_button.setBounds(200, 400, duplicity_img.getIconWidth(), duplicity_img.getIconHeight());
        container.add(duplicity_button);

        capitalization_img = new ImageIcon(getClass().getResource(""Picture//Capitalization_image.png""));
        JButton capitalization_button = new JButton(capitalization_img);
        capitalization_button.setBackground(new Color(255, 255, 255, 255));
        capitalization_button.setBorder(null);
        capitalization_button.setBounds(55, 465, capitalization_img.getIconWidth(), capitalization_img.getIconHeight());
        container.add(capitalization_button);

        spell_img = new ImageIcon(getClass().getResource(""Picture//spell_check_image.png""));
        JButton spell_button = new JButton(spell_img);
        spell_button.setBackground(new Color(255, 255, 255, 255));
        spell_button.setBorder(null);
        spell_button.setBounds(350, 465, spell_img.getIconWidth(), spell_img.getIconHeight());
        container.add(spell_button);

        aboutus_img = new ImageIcon(getClass().getResource(""Picture//aboutus_image.png""));
        JButton aboutus_button = new JButton(aboutus_img);
        aboutus_button.setBackground(new Color(255, 255, 255, 255));
        aboutus_button.setBorder(null);
        aboutus_button.setBounds(55, 530, aboutus_img.getIconWidth(), aboutus_img.getIconHeight());
        container.add(aboutus_button);

        guideline_img = new ImageIcon(getClass().getResource(""Picture//Guideline_image.png""));
        JButton guide_button = new JButton(guideline_img);
        guide_button.setBackground(new Color(255, 255, 255, 255));
        guide_button.setBorder(null);
        guide_button.setBounds(350, 530, guideline_img.getIconWidth(), guideline_img.getIconHeight());
        container.add(guide_button);

        try {
            // On/Off button sound
            Scanner scanner = new Scanner(new File(""value3.txt""));
            while (scanner.hasNextInt()) {
                value_of_text_file = scanner.nextInt();
                if (value_of_text_file == 0) {
                    volume_icon_variable = 0;
                    volume_on_button.setIcon(volumeOFF_img);
                    volume_icon_variable = 0;
                    sound_button.OFFvariable = 0;
                    sound_button.ONvariable = 1;
                } else {
                    volume_on_button.setIcon(volumeON_img);
                }
            }
        } catch (FileNotFoundException fileNotFoundException) {
            fileNotFoundException.printStackTrace();
        }

        duplicity_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                buttonClickCount++; // Increment the click count
                try {
                    Object[] choices = {""Choose Randomly"", ""Select Folder"", ""Cancel""};
                    Object defaultChoice = choices[0];
                    int n = JOptionPane.showOptionDialog(null, ""How do you want to check?"", ""Confirmation"",
                            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, choices, defaultChoice);
                    if (n == JOptionPane.YES_OPTION) {
                        sound_button.playsound();
                        Duplicity_Random_File LF = new Duplicity_Random_File();
                        LF.setVisible(true);
                        dispose();
                    } else if (n == JOptionPane.NO_OPTION) {
                        sound_button.playsound();
                        Duplicity_Folder LF = new Duplicity_Folder();
                        LF.setVisible(true);
                        dispose();
                    } else {
                        sound_button.playsound();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });

        capitalization_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                Capitalization LF = null;
                try {
                    LF = new Capitalization();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                LF.setVisible(true);
                dispose();
            }
        });

        spell_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                Spell_Check LF = null;
                try {
                    LF = new Spell_Check();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                LF.setVisible(true);
                dispose();
            }
        });

        aboutus_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                Aboutus aboutus = new Aboutus();
                aboutus.setVisible(true);
                dispose();
            }
        });

        guide_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                User_GuideLines guideLines = new User_GuideLines();
                guideLines.setVisible(true);
                dispose();
            }
        });

        volume_on_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                if (volume_icon_variable == 0) {
                    sound_button.ONvariable = 1;
                    volume_on_button.setIcon(volumeON_img);
                    sound_button.ONvariable = 0;
                    sound_button.OFFvariable = 1;
                    volume_icon_variable = 1;
                } else {
                    volume_on_button.setIcon(volumeOFF_img);
                    sound_button.OFFvariable = 0;
                    sound_button.ONvariable = 1;
                    volume_icon_variable = 0;
                }

                try {
                    FileOutputStream fout = new FileOutputStream(""value3.txt"");
                    PrintStream pout = new PrintStream(fout);
                    int kk = volume_icon_variable;
                    pout.println(kk);
                    pout.close();
                    fout.close();
                } catch (FileNotFoundException fileNotFoundException) {
                    fileNotFoundException.printStackTrace();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
        });
    }

    public void App_Icon() {
        ImageIcon logo = new ImageIcon(getClass().getResource(""Picture//icon.jpg""));
        this.setIconImage(logo.getImage());
    }

    public static void main(String[] args) throws IOException {
        Home hm = new Home();
        hm.setVisible(true);
    }
}
",1
"import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

public class NewHome extends JFrame {

    public static int volume_icon_variable = 1;
    int value_of_text_file;
    private Container container;
    private ImageIcon duplicity_img, capitalization_img, spell_img, aboutus_img,guideline_img;
    ButtonSound sound_button = new ButtonSound();

    // New attribute
    private int buttonClickCount = 0;

    public Home() throws IOException {

        App_Icon();

        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setBounds(350, 25, 650, 680);
        this.setTitle(""Duplicity Checker"");
        this.setResizable(false);

        container = this.getContentPane();
        container.setLayout(null);
        container.setBackground(new Color(255, 255, 255, 255));

        JLabel image = new JLabel(new ImageIcon(getClass().getResource(""Picture//home_img.jpg"")));
        image.setBounds(135, 0, 400, 400);
        container.add(image);

        volumeON_img = new ImageIcon(getClass().getResource(""Picture//off1.png""));
        JButton volume_on_button = new JButton(volumeON_img);
        volume_on_button.setBackground(new Color(255, 255, 255, 255));
        volume_on_button.setBorder(null);
        volume_on_button.setBounds(565, 20, volumeON_img.getIconWidth(), volumeON_img.getIconHeight());
        container.add(volume_on_button);

        volumeOFF_img = new ImageIcon(getClass().getResource(""Picture//on1.png""));
        JButton volume_off_button = new JButton(volumeOFF_img);
        volume_off_button.setBackground(new Color(255, 255, 255, 255));
        volume_off_button.setBorder(null);
        volume_off_button.setBounds(585, 28, volumeOFF_img.getIconWidth(), volumeOFF_img.getIconHeight());

        Font f = new Font(""Calibri"", Font.BOLD, 20);

        duplicity_img = new ImageIcon(getClass().getResource(""Picture//Duplicity_image.png""));
        JButton duplicity_button = new JButton(duplicity_img);
        duplicity_button.setBackground(new Color(255, 255, 255, 255));
        duplicity_button.setBorder(null);
        duplicity_button.setBounds(200, 400, duplicity_img.getIconWidth(), duplicity_img.getIconHeight());
        container.add(duplicity_button);

        capitalization_img = new ImageIcon(getClass().getResource(""Picture//Capitalization_image.png""));
        JButton capitalization_button = new JButton(capitalization_img);
        capitalization_button.setBackground(new Color(255, 255, 255, 255));
        capitalization_button.setBorder(null);
        capitalization_button.setBounds(55, 465, capitalization_img.getIconWidth(), capitalization_img.getIconHeight());
        container.add(capitalization_button);

        spell_img = new ImageIcon(getClass().getResource(""Picture//spell_check_image.png""));
        JButton spell_button = new JButton(spell_img);
        spell_button.setBackground(new Color(255, 255, 255, 255));
        spell_button.setBorder(null);
        spell_button.setBounds(350, 465, spell_img.getIconWidth(), spell_img.getIconHeight());
        container.add(spell_button);

        aboutus_img = new ImageIcon(getClass().getResource(""Picture//aboutus_image.png""));
        JButton aboutus_button = new JButton(aboutus_img);
        aboutus_button.setBackground(new Color(255, 255, 255, 255));
        aboutus_button.setBorder(null);
        aboutus_button.setBounds(55, 530, aboutus_img.getIconWidth(), aboutus_img.getIconHeight());
        container.add(aboutus_button);

        guideline_img = new ImageIcon(getClass().getResource(""Picture//Guideline_image.png""));
        JButton guide_button = new JButton(guideline_img);
        guide_button.setBackground(new Color(255, 255, 255, 255));
        guide_button.setBorder(null);
        guide_button.setBounds(350, 530, guideline_img.getIconWidth(), guideline_img.getIconHeight());
        container.add(guide_button);

        try {
            // On/Off button sound
            Scanner scanner = new Scanner(new File(""value3.txt""));
            while (scanner.hasNextInt()) {
                value_of_text_file = scanner.nextInt();
                if (value_of_text_file == 0) {
                    volume_on_button.setIcon(volumeOFF_img);
                    volume_icon_variable = 0;
                    sound_button.OFFvariable = 0;
                    sound_button.ONvariable = 1;
                } else {
                    volume_on_button.setIcon(volumeON_img);
                }
            }
        } catch (FileNotFoundException fileNotFoundException) {
            fileNotFoundException.printStackTrace();
        }

        duplicity_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                buttonClickCount++; // Increment the click count
                try {
                    Object[] choices = {""Choose Randomly"", ""Select Folder"", ""Cancel""};
                    Object defaultChoice = choices[0];
                    int n = JOptionPane.showOptionDialog(null, ""How do you want to check?"", ""Confirmation"",
                            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, choices, defaultChoice);
                    if (n == JOptionPane.YES_OPTION) {
                        sound_button.playsound();
                        Duplicity_Random_File LF = new Duplicity_Random_File();
                        LF.setVisible(true);
                        dispose();
                    } else if (n == JOptionPane.NO_OPTION) {
                        sound_button.playsound();
                        Duplicity_Folder LF = new Duplicity_Folder();
                        LF.setVisible(true);
                        dispose();
                    } else {
                        sound_button.playsound();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });

        capitalization_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                Capitalization LF = null;
                try {
                    LF = new Capitalization();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                LF.setVisible(true);
                dispose();
            }
        });

        spell_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                Spell_Check LF = null;
                try {
                    LF = new Spell_Check();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                LF.setVisible(true);
                dispose();
            }
        });

        aboutus_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                Aboutus aboutus = new Aboutus();
                aboutus.setVisible(true);
                dispose();
            }
        });

        guide_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                User_GuideLines guideLines = new User_GuideLines();
                guideLines.setVisible(true);
                dispose();
            }
        });

        volume_on_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                if (volume_icon_variable == 0) {
                    sound_button.ONvariable = 1;
                    volume_on_button.setIcon(volumeON_img);
                    sound_button.ONvariable = 0;
                    sound_button.OFFvariable = 1;
                    volume_icon_variable = 1;
                } else {
                    volume_on_button.setIcon(volumeOFF_img);
                    sound_button.OFFvariable = 0;
                    sound_button.ONvariable = 1;
                    volume_icon_variable = 0;
                }

                try {
                    FileOutputStream fout = new FileOutputStream(""value3.txt"");
                    PrintStream pout = new PrintStream(fout);
                    int kk = volume_icon_variable;
                    pout.println(kk);
                    pout.close();
                    fout.close();
                } catch (FileNotFoundException fileNotFoundException) {
                    fileNotFoundException.printStackTrace();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
        });
    }

    public void App_Icon() {
        ImageIcon logo = new ImageIcon(getClass().getResource(""Picture//icon.jpg""));
        this.setIconImage(logo.getImage());
    }

    public static void main(String[] args) throws IOException {
        Home hm = new Home();
        hm.setVisible(true);
    }
}
",1
"import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

public class NewHome extends JFrame {

    public static int volume_icon_variable = 1;
    int value_of_text_file;
    private Container container;
    private ImageIcon duplicity_img, capitalization_img, spell_img, aboutus_img,guideline_img;
    ButtonSound sound_button = new ButtonSound();

    // New attribute
    private int buttonClickCount = 0;

    public Home() throws IOException {

        App_Icon();

        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setBounds(350, 25, 650, 680);
        this.setTitle(""Duplicity Checker"");
        this.setResizable(false);

        container = this.getContentPane();
        container.setLayout(null);
        container.setBackground(new Color(255, 255, 255, 255));

        JLabel image = new JLabel(new ImageIcon(getClass().getResource(""Picture//home_img.jpg"")));
        image.setBounds(135, 0, 400, 400);
        container.add(image);

        volumeON_img = new ImageIcon(getClass().getResource(""Picture//off1.png""));
        JButton volume_on_button = new JButton(volumeON_img);
        volume_on_button.setBackground(new Color(255, 255, 255, 255));
        volume_on_button.setBorder(null);
        volume_on_button.setBounds(565, 20, volumeON_img.getIconWidth(), volumeON_img.getIconHeight());
        container.add(volume_on_button);

        volumeOFF_img = new ImageIcon(getClass().getResource(""Picture//on1.png""));
        JButton volume_off_button = new JButton(volumeOFF_img);
        volume_off_button.setBackground(new Color(255, 255, 255, 255));
        volume_off_button.setBorder(null);
        volume_off_button.setBounds(585, 28, volumeOFF_img.getIconWidth(), volumeOFF_img.getIconHeight());

        Font f = new Font(""Calibri"", Font.BOLD, 20);

        duplicity_img = new ImageIcon(getClass().getResource(""Picture//Duplicity_image.png""));
        JButton duplicity_button = new JButton(duplicity_img);
        duplicity_button.setBackground(new Color(255, 255, 255, 255));
        duplicity_button.setBorder(null);
        duplicity_button.setBounds(200, 400, duplicity_img.getIconWidth(), duplicity_img.getIconHeight());
        container.add(duplicity_button);

        capitalization_img = new ImageIcon(getClass().getResource(""Picture//Capitalization_image.png""));
        JButton capitalization_button = new JButton(capitalization_img);
        capitalization_button.setBackground(new Color(255, 255, 255, 255));
        capitalization_button.setBorder(null);
        capitalization_button.setBounds(55, 465, capitalization_img.getIconWidth(), capitalization_img.getIconHeight());
        container.add(capitalization_button);

        spell_img = new ImageIcon(getClass().getResource(""Picture//spell_check_image.png""));
        JButton spell_button = new JButton(spell_img);
        spell_button.setBackground(new Color(255, 255, 255, 255));
        spell_button.setBorder(null);
        spell_button.setBounds(350, 465, spell_img.getIconWidth(), spell_img.getIconHeight());
        container.add(spell_button);

        aboutus_img = new ImageIcon(getClass().getResource(""Picture//aboutus_image.png""));
        JButton aboutus_button = new JButton(aboutus_img);
        aboutus_button.setBackground(new Color(255, 255, 255, 255));
        aboutus_button.setBorder(null);
        aboutus_button.setBounds(55, 530, aboutus_img.getIconWidth(), aboutus_img.getIconHeight());
        container.add(aboutus_button);

        guideline_img = new ImageIcon(getClass().getResource(""Picture//Guideline_image.png""));
        JButton guide_button = new JButton(guideline_img);
        guide_button.setBackground(new Color(255, 255, 255, 255));
        guide_button.setBorder(null);
        guide_button.setBounds(350, 530, guideline_img.getIconWidth(), guideline_img.getIconHeight());
        container.add(guide_button);

        try {
            // On/Off button sound
            Scanner scanner = new Scanner(new File(""value3.txt""));
            while (scanner.hasNextInt()) {
                value_of_text_file = scanner.nextInt();
                if (value_of_text_file == 0) {
                    volume_icon_variable = 1;   
                    volume_on_button.setIcon(volumeOFF_img);
                    volume_icon_variable = 0;
                    sound_button.OFFvariable = 0;
                    sound_button.ONvariable = 1;
                } else {
                    volume_on_button.setIcon(volumeON_img);
                }
            }
        } catch (FileNotFoundException fileNotFoundException) {
            fileNotFoundException.printStackTrace();
        }

        duplicity_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                buttonClickCount++; // Increment the click count
                try {
                    Object[] choices = {""Choose Randomly"", ""Select Folder"", ""Cancel""};
                    Object defaultChoice = choices[0];
                    int n = JOptionPane.showOptionDialog(null, ""How do you want to check?"", ""Confirmation"",
                            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, choices, defaultChoice);
                    if (n == JOptionPane.YES_OPTION) {
                        sound_button.playsound();
                        Duplicity_Random_File LF = new Duplicity_Random_File();
                        LF.setVisible(true);
                        dispose();
                    } else if (n == JOptionPane.NO_OPTION) {
                        sound_button.playsound();
                        Duplicity_Folder LF = new Duplicity_Folder();
                        LF.setVisible(true);
                        dispose();
                    } else {
                        sound_button.playsound();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });

        capitalization_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                Capitalization LF = null;
                try {
                    LF = new Capitalization();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                LF.setVisible(true);
                dispose();
            }
        });

        spell_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ea) {
                sound_button.playsound();
                Spell_Check LF = null;
                try {
                    LF = new Spell_Check();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                LF.setVisible(true);
                dispose();
            }
        });

        aboutus_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                Aboutus aboutus = new Aboutus();
                aboutus.setVisible(true);
                dispose();
            }
        });

        guide_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                User_GuideLines guideLines = new User_GuideLines();
                guideLines.setVisible(true);
                dispose();
            }
        });

        volume_on_button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sound_button.playsound();
                if (volume_icon_variable == 0) {
                    sound_button.ONvariable = 1;
                    volume_on_button.setIcon(volumeON_img);
                    sound_button.ONvariable = 0;
                    sound_button.OFFvariable = 1;
                    volume_icon_variable = 1;
                } else {
                    volume_on_button.setIcon(volumeOFF_img);
                    sound_button.OFFvariable = 0;
                    sound_button.ONvariable = 1;
                    volume_icon_variable = 0;
                }

                try {
                    FileOutputStream fout = new FileOutputStream(""value3.txt"");
                    PrintStream pout = new PrintStream(fout);
                    int kk = volume_icon_variable;
                    pout.println(kk);
                    pout.close();
                    fout.close();
                } catch (FileNotFoundException fileNotFoundException) {
                    fileNotFoundException.printStackTrace();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
        });
    }

    public void App_Icon() {
        ImageIcon logo = new ImageIcon(getClass().getResource(""Picture//icon.jpg""));
        this.setIconImage(logo.getImage());
    }

    public static void main(String[] args) throws IOException {
        Home hm = new Home();
        hm.setVisible(true);
    }
}
",1
"import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

public class Calculator extends Activity {

    private final String SDK_VERSION = ""1"";
    private final int MENUITEM_CLOSE = 1;
    private final int MENUITEM_ABOUT = 2;
    private static final int SWIPE_MIN_DISTANCE = 120;
    private static final int SWIPE_MAX_OFF_PATH = 250;
    private static final int SWIPE_THRESHOLD_VELOCITY = 200;
    private GestureDetector gestureDetector;

    private EditText txtCalc;
    private Button btnZero;
    private Button btnOne;
    private Button btnTwo;
    private Button btnThree;
    private Button btnFour;
    private Button btnFive;
    private Button btnSix;
    private Button btnSeven;
    private Button btnEight;
    private Button btnNine;
    private Button btnPlus;
    private Button btnMinus;
    private Button btnMultiply;
    private Button btnDivide;
    private Button btnEquals;
    private Button btnC;
    private Button btnDecimal;
    private Button btnBS;
    private Button btnPerc;
    private Button btnSqrRoot;
    private Button btnPM;
    private Button expSQ;
    private Button expEX;
    private Button nbtn1;
    private Button nbtn2;
    private Button nbtn3;
    private Button nbtn4;
    private Button nbtn5;
    private Button nbtn6;
    private Button nbtn7;

    private double num = 0;
    private double memNum = 0;
    private int operator = 1; // 0 = nothing, 1 = plus, 2 = minus, 3 = multiply, 4 = divide
    private boolean readyToClear = false;
    private boolean hasChanged = false;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.calculator);

        this.setTitle("" "");

        initControls();
        initScreenLayout();
        reset();
    }

    private void initScreenLayout() {
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);

        int height = dm.heightPixels;
        int width = dm.widthPixels;

        if (height < 400 || width < 300) {
            txtCalc.setTextSize(20);
        }

        if (width < 300) {
            setButtonTextSize(18);
        }

        txtCalc.setTextColor(Color.BLACK);
        txtCalc.setKeyListener(null);

        setButtonTextColor(Color.WHITE);
    }

    private void setButtonTextSize(int size) {
        btnBS.setTextSize(size);
        btnDivide.setTextSize(size);
        btnPlus.setTextSize(size);
        btnMinus.setTextSize(size);
        btnMultiply.setTextSize(size);
        btnEquals.setTextSize(size);
        btnPM.setTextSize(size);
        btnPerc.setTextSize(size);
        btnC.setTextSize(size);
        btnSqrRoot.setTextSize(size);
        btnNine.setTextSize(size);
        btnEight.setTextSize(size);
        btnSeven.setTextSize(size);
        btnSix.setTextSize(size);
        btnFive.setTextSize(size);
        btnFour.setTextSize(size);
        btnThree.setTextSize(size);
        btnTwo.setTextSize(size);
        btnOne.setTextSize(size);
        btnZero.setTextSize(size);
        btnDecimal.setTextSize(size);
        expSQ.setTextSize(size);
        expEX.setTextSize(size);
        nbtn1.setTextSize(size);
        nbtn2.setTextSize(size);
        nbtn3.setTextSize(size);
        nbtn4.setTextSize(size);
        nbtn5.setTextSize(size);
        nbtn6.setTextSize(size);
        nbtn7.setTextSize(size);
    }

    private void setButtonTextColor(int color) {
        btnZero.setTextColor(color);
        btnOne.setTextColor(color);
        btnTwo.setTextColor(color);
        btnThree.setTextColor(color);
        btnFour.setTextColor(color);
        btnFive.setTextColor(color);
        btnSix.setTextColor(color);
        btnSeven.setTextColor(color);
        btnEight.setTextColor(color);
        btnNine.setTextColor(color);
        btnPM.setTextColor(color);
        btnDecimal.setTextColor(color);
        btnBS.setTextColor(color);
        btnC.setTextColor(color);
        btnPerc.setTextColor(color);
        btnSqrRoot.setTextColor(color);
        btnDivide.setTextColor(color);
        btnPlus.setTextColor(color);
        btnMinus.setTextColor(color);
        btnMultiply.setTextColor(color);
        btnEquals.setTextColor(color);
        expSQ.setTextColor(color);
        expEX.setTextColor(color);
        nbtn1.setTextColor(color);
        nbtn2.setTextColor(color);
        nbtn3.setTextColor(color);
        nbtn4.setTextColor(color);
        nbtn5.setTextColor(color);
        nbtn6.setTextColor(color);
        nbtn7.setTextColor(color);
    }

    private void initControls() {
        txtCalc = findViewById(R.id.txtCalc);
        btnZero = findViewById(R.id.btnZero);
        btnOne = findViewById(R.id.btnOne);
        btnTwo = findViewById(R.id.btnTwo);
        btnThree = findViewById(R.id.btnThree);
        btnFour = findViewById(R.id.btnFour);
        btnFive = findViewById(R.id.btnFive);
        btnSix = findViewById(R.id.btnSix);
        btnSeven = findViewById(R.id.btnSeven);
        btnEight = findViewById(R.id.btnEight);
        btnNine = findViewById(R.id.btnNine);
        btnPlus = findViewById(R.id.btnPlus);
        btnMinus = findViewById(R.id.btnMinus);
        btnMultiply = findViewById(R.id.btnMultiply);
        btnDivide = findViewById(R.id.btnDivide);
        btnEquals = findViewById(R.id.btnEquals);
        btnC = findViewById(R.id.btnC);
        btnDecimal = findViewById(R.id.btnDecimal);
        btnBS = findViewById(R.id.btnBS);
        btnPerc = findViewById(R.id.btnPerc);
        btnSqrRoot = findViewById(R.id.btnSqrRoot);
        btnPM = findViewById(R.id.btnPM);
        expSQ = findViewById(R.id.expSQ);
        expEX = findViewById(R.id.expEX);
        nbtn1 = findViewById(R.id.nbtn1);
        nbtn2 = findViewById(R.id.nbtn2);
        nbtn3 = findViewById(R.id.nbtn3);
        nbtn4 = findViewById(R.id.nbtn4);
        nbtn5 = findViewById(R.id.nbtn5);
        nbtn6 = findViewById(R.id.nbtn6);
        nbtn7 = findViewById(R.id.nbtn7);

        nbtn1.setOnClickListener(v -> handleEquals(12));
        nbtn2.setOnClickListener(v -> handleEquals(7));
        nbtn3.setOnClickListener(v -> handleEquals(8));
        nbtn4.setOnClickListener(v -> handleEquals(9));
        nbtn5.setOnClickListener(v -> handleEquals(10));
        nbtn6.setOnClickListener(v -> handleEquals(11));
        nbtn7.setOnClickListener(v -> handleEquals(13));

        btnZero.setOnClickListener(v -> handleNumber(0));

        expSQ.setOnClickListener(v -> 
            setValue(Double.toString(Math.cbrt(Double.parseDouble(txtCalc.getText().toString()))))
        );

        expEX.setOnClickListener(v -> handleEquals(6));
    }

    private void handleNumber(int number) {
        // Implementation for handling number button clicks
    }

    private void handleEquals(int value) {
        // Implementation for handling equals button clicks
    }

    private void setValue(String value) {
        // Implementation for setting value to the EditText
    }

    private void reset() {
        // Implementation for resetting the calculator
    }
}
",1
"public class NewCalculator extends Activity {
    private EditText txtCalc = null;
    private Button btnZero = null;
    private Button btnOne = null;
    private Button btnTwo = null;
    private Button btnThree = null;
    private Button btnFour = null;
    private Button btnFive = null;
    private Button btnSix = null;
    private Button btnSeven = null;
    private Button btnEight = null;
    private Button btnNine = null;
    private Button btnPlus = null;
    private Button btnMinus = null;
    private Button btnMultiply = null;
    private Button btnDivide = null;
    private Button btnEquals = null;
    private Button btnC = null;
    private Button btnDecimal = null;
    private Button btnBS = null;
    private Button btnPerc = null;
    private Button btnSqrRoot = null;
    private Button btnPM = null;
    private Button expSQ = null;
    private Button expEX = null;
    private Button nbtn1 = null;
    private Button nbtn2 = null;
    private Button nbtn3 = null;
    private Button nbtn4 = null;
    private Button nbtn5 = null;
    private Button nbtn6 = null;
    private Button nbtn7 = null;

    private void initControls() {
        txtCalc = findViewById(R.id.txtCalc);
        btnZero = findViewById(R.id.btnZero);
        btnOne = findViewById(R.id.btnOne);
        btnTwo = findViewById(R.id.btnTwo);
        btnThree = findViewById(R.id.btnThree);
        btnFour = findViewById(R.id.btnFour);
        btnFive = findViewById(R.id.btnFive);
        btnSix = findViewById(R.id.btnSix);
        btnSeven = findViewById(R.id.btnSeven);
        btnEight = findViewById(R.id.btnEight);
        btnNine = findViewById(R.id.btnNine);
        btnPlus = findViewById(R.id.btnPlus);
        btnMinus = findViewById(R.id.btnMinus);
        btnMultiply = findViewById(R.id.btnMultiply);
        btnDivide = findViewById(R.id.btnDivide);
        btnEquals = findViewById(R.id.btnEquals);
        btnC = findViewById(R.id.btnC);
        btnDecimal = findViewById(R.id.btnDecimal);
        btnBS = findViewById(R.id.btnBS);
        btnPerc = findViewById(R.id.btnPerc);
        btnSqrRoot = findViewById(R.id.btnSqrRoot);
        btnPM = findViewById(R.id.btnPM);
        expSQ = findViewById(R.id.expSQ);
        expEX = findViewById(R.id.expEX);
        nbtn1 = findViewById(R.id.nbtn1);
        nbtn2 = findViewById(R.id.nbtn2);
        nbtn3 = findViewById(R.id.nbtn3);
        nbtn4 = findViewById(R.id.nbtn4);
        nbtn5 = findViewById(R.id.nbtn5);
        nbtn6 = findViewById(R.id.nbtn6);
        nbtn7 = findViewById(R.id.nbtn7);

        nbtn1.setOnClickListener(v -> handleEquals(12));
        nbtn2.setOnClickListener(v -> handleEquals(7));
        nbtn3.setOnClickListener(v -> handleEquals(8));
        nbtn4.setOnClickListener(v -> handleEquals(9));
        nbtn5.setOnClickListener(v -> handleEquals(10));
        nbtn6.setOnClickListener(v -> handleEquals(11));
        nbtn7.setOnClickListener(v -> handleEquals(13));

        btnZero.setOnClickListener(v -> handleNumber(0));
        expSQ.setOnClickListener(v -> 
            setValue(Double.toString(Math.cbrt(Double.parseDouble(txtCalc.getText().toString())))));
        expEX.setOnClickListener(v -> handleEquals(6));

        btnOne.setOnClickListener(v -> handleNumber(1));
        btnTwo.setOnClickListener(v -> handleNumber(2));
        btnThree.setOnClickListener(v -> handleNumber(3));
        btnFour.setOnClickListener(v -> handleNumber(4));
        btnFive.setOnClickListener(v -> handleNumber(5));
        btnSix.setOnClickListener(v -> handleNumber(6));
        btnSeven.setOnClickListener(v -> handleNumber(7));
        btnEight.setOnClickListener(v -> handleNumber(8));
        btnNine.setOnClickListener(v -> handleNumber(9));

        btnPlus.setOnClickListener(v -> handleEquals(1));
        btnMinus.setOnClickListener(v -> handleEquals(2));
        btnMultiply.setOnClickListener(v -> handleEquals(3));
        btnDivide.setOnClickListener(v -> handleEquals(4));
        btnEquals.setOnClickListener(v -> handleEquals(0));

        btnC.setOnClickListener(v -> reset());
        btnDecimal.setOnClickListener(v -> handleDecimal());
        btnPM.setOnClickListener(v -> handlePlusMinus());
        btnBS.setOnClickListener(v -> handleBackspace());

        btnSqrRoot.setOnClickListener(v -> 
            setValue(Double.toString(Math.sqrt(Double.parseDouble(txtCalc.getText().toString())))));

        btnPerc.setOnClickListener(v -> 
            setValue(Double.toString(num * (0.01 * Double.parseDouble(txtCalc.getText().toString())))));

        txtCalc.setOnKeyListener((v, keyCode, event) -> {
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
                switch (keyCode) {
                    case KeyEvent.KEYCODE_0:
                        handleNumber(0);
                        break;
                    case KeyEvent.KEYCODE_1:
                        handleNumber(1);
                        break;
                    case KeyEvent.KEYCODE_2:
                        handleNumber(2);
                        break;
                    case KeyEvent.KEYCODE_3:
                        handleNumber(3);
                        break;
                    case KeyEvent.KEYCODE_4:
                        handleNumber(4);
                        break;
                    case KeyEvent.KEYCODE_5:
                        handleNumber(5);
                        break;
                    case KeyEvent.KEYCODE_6:
                        handleNumber(6);
                        break;
                    case KeyEvent.KEYCODE_7:
                        handleNumber(7);
                        break;
                    case KeyEvent.KEYCODE_8:
                        handleNumber(8);
                        break;
                    case KeyEvent.KEYCODE_9:
                        handleNumber(9);
                        break;
                    case KeyEvent.KEYCODE_PLUS:
                        handleEquals(1);
                        break;
                    case KeyEvent.KEYCODE_EQUALS:
                        handleEquals(0);
                        break;
                    case KeyEvent.KEYCODE_MINUS:
                        handleEquals(2);
                        break;
                    case KeyEvent.KEYCODE_PERIOD:
                        handleDecimal();
                        break;
                    case KeyEvent.KEYCODE_C:
                        reset();
                        break;
                    case KeyEvent.KEYCODE_SLASH:
                        handleEquals(4);
                        break;
                    case KeyEvent.KEYCODE_DPAD_DOWN:
                        return false;
                }
            }
            return true;
        });
    }

    private void handleNumber(int number) {
        // Implementation for handling number button clicks
    }

    private void handleEquals(int value) {
        // Implementation for handling equals button clicks
    }

    private void setValue(String value) {
        // Implementation for setting value to the EditText
    }

    private void reset() {
        // Implementation for resetting the calculator
    }

    private void handleDecimal() {
        // Implementation for handling decimal button clicks
    }

    private void handlePlusMinus() {
        // Implementation for handling plus-minus button clicks
    }

    private void handleBackspace() {
        // Implementation for handling backspace button clicks
    }
}",1
"package CitySaver;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Timer;
import java.util.TimerTask;

public class CitySaver extends JFrame implements KeyListener{

    private GamePanel mp = null;
    private About ab ;
    private static int gameWidth = 850;
    private static int gameHeight = 800;
    private static boolean isInGame = false;
    private static String currentState = ""WelcomeScreen"" ;		
    private Thread mt = null;		
    private WelcomeScreen ws = null;	
    private Audio audio = null;	
    private GameRecorder gr ;

    public CitySaver() {

        // Welcome scene
        GameRecorder.loadRecord();						
        ws = new WelcomeScreen();					
        this.add(ws);

        audio = new Audio(""Sound/welcome.wav"");
        audio.play();

        // Menu options
        JMenuBar jmb = new JMenuBar();
        JMenu jmG = new JMenu(""Game (G)"");
        
       
       // JMenuItem jmiReturn = new JMenuItem(""Return (R)"");
        JMenuItem about = new JMenuItem(""About (A)"");	
        JMenuItem jmiExit = new JMenuItem(""Exit (E)"");	
        


        // Hot keys

        jmiExit.setMnemonic('E');
        jmG.setMnemonic('G');
        //jmiReturn.setMnemonic('R');
        about.setMnemonic('A');
        jmb.add(jmG);
        jmG.add(jmiExit);
       // jmG.add(jmiReturn);
        jmG.add(about);


        this.addKeyListener(this);

//        jmiReturn.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                gr = new GameRecorder();
//                setIsInGame(true);
//                gr.reset() ;	
//                mp = new GamePanel();
//                mt = new Thread(mp);
//                mt.start();
//                add(mp);
//                repaint();
//                revalidate();
//                addKeyListener(mp);
//            }
//        });

        // Add actions
        // Exit
        jmiExit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                GameRecorder.saveRecord();		
                System.exit(0);			
            }
        });
        
        //About
        about.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	about();
            }
        });






        this.setTitle(""City Saver"");				
        this.setResizable(false);				
        this.setJMenuBar(jmb);
        this.setVisible(true);
        this.setBounds(100, 100, gameWidth + 250, gameHeight);	 
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   
    }
    
    // About
    private void about() {
    	if(getCurrentState() == ""GamePanel"") { // from Gamepanel 
	    	setCurrentState(""About"");
	    	setIsInGame(false);								
	    	ab = new About();								
	        this.remove(mp);								
	        mp = null;											
	        this.addKeyListener(this);						
	        this.add(ab);									
	        this.setVisible(true);							
	        this.repaint();									
	        this.revalidate();}								
    	else if(getCurrentState() == ""About""){  //from About 
//    		setCurrentState(""About"");
//	    	setIsInGame(false);	
//	    	ab = new About();
//	        this.remove(this);
//	        //mp = null;
//	        this.addKeyListener(this);
//	        this.add(ab);
//	        this.setVisible(true);
//	        this.repaint();
//	        this.revalidate();
    		
    	}else {
    		setCurrentState(""About"");    // from Welcome Screen 
	    	setIsInGame(false);		
	    	ab = new About();	
	        this.remove(ws);	
	        ws = null;		
	        this.addKeyListener(this);	
	        this.add(ab);	
	        this.setVisible(true);
	        this.repaint();
	        this.revalidate();				
    		
    	}
    }

      // Back to welcome screen			
//    private void back() {
//    	if(getCurrentState() == ""GamePanel"") {  // from gamepanel 
//    		setCurrentState(""WelcomeScreen"");
//	        setIsInGame(false);		
//	        audio = new Audio(""Sound/welcome.wav"");
//	        audio.play();
//	        ws = new WelcomeScreen();
//	        this.remove(mp);
//	        mp = null;
//	        this.addKeyListener(this);
//	        this.add(ws);
//	        this.setVisible(true);
//	        this.repaint();
//	        this.revalidate();
//    	}else if(getCurrentState()== ""About"") {		 //from About 	
//
//    		setCurrentState(""WelcomeScreen"");
//    		setIsInGame(false);		
//	        audio = new Audio(""Sound/welcome.wav"");
//	        audio.play();
//	        ws = new WelcomeScreen();
//	        this.remove(ab);
//	        ab = null;
//	        this.addKeyListener(this);
//	        this.add(ws);
//	        this.setVisible(true);
//	        this.repaint();
//	        this.revalidate();
//    		
//    	}else {									//from WelcomeScreen 
////    		setIsInGame(false);		
////    		setCurrentState(""WelcomeScreen"");
////	        audio = new Audio(""Sound/welcome.wav"");
////	        audio.play();
////	        ws = new WelcomeScreen();
////	        this.remove(this);
////	        ws = null;
////	        this.addKeyListener(this);
////	        this.add(ws);
////	        this.setVisible(true);
////	        this.repaint();
////	        this.revalidate();
//    	}
//    	
//    }

    // Start the game
    public void gameStart() {
        setIsInGame(true);	
        setCurrentState(""GamePanel"");	
        WelcomeScreen.run = false; 	

        this.removeKeyListener(this);
        
        // Stage scene
        ws.stage() ;
        this.revalidate();
        this.repaint();	
        
        // Game start
        Timer t = new Timer();
        t.schedule(new TimerTask() {
            @Override
            public void run() { 
                remove(ws);
                ws = null;
            	//mp.setGameOver(false);
                mp = new GamePanel();
                mt = new Thread(mp);
                mt.start();
                add(mp);
                repaint();
                revalidate();
                addKeyListener(mp);
            }
        }, 3000);
    }

    public static int getGameWidth() {
        return gameWidth;
    }

    public static int getGameHeight() {
        return gameHeight;
    }

    public static boolean isIsInGame() {
        return isInGame;
    }

    public static void setIsInGame(boolean isInGame) {
        isInGame = isInGame;
    }

    @Override
    public void keyTyped(KeyEvent e) {
        if (ws != null) {
            if (e != null) {
                gameStart();
            }
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
    	
    }

    @Override
    public void keyReleased(KeyEvent e) {
    	
    }

    public static void main(String[] args) {
        CitySaver cs = new CitySaver();
    }

	public static String getCurrentState() {
		return currentState;
	}

	public static void setCurrentState(String currentState) {
		CitySaver.currentState = currentState;
	}
}",1
"package CitySaver;

import javax.swing.*;


import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;

public class GamePanel extends JLayeredPane implements KeyListener, Runnable {

    private static Hero hero = null;
    private Vector<EnemyTank> ets = new Vector<>();
    private Vector<Explosion> explosions = new Vector<>();
    private static Vector<Material> mat = new Vector<>();
    private Set<Integer> pressed = new HashSet<>();
    private Vector<Node> nodes = new Vector<>();
    private static boolean gameOver = false;
    private static boolean MissionCompleted = false ;
    private String startSound = ""Sound/start.wav"";
    private String fireSound = ""Sound/fire.wav"";
    private String explosionSound = ""Sound/Explosion.wav"";
    private Audio audio;
    private static boolean loadGame = false;	
    private Material eagle;		

 
    public GamePanel() {

        // Play BGM
        audio = new Audio(startSound);				
        audio.play();
      
            hero = new Hero(425, 550, 0, 5);

            GameRecorder.reset();
             
            setGameOver(false);
            setMissionCompleted(false);
            // Initialize NPC
            initializeNPC();
            
            
            // Draw map
            initializeMap1();
            initializeMap2();


        this.setBounds(0, 0, CitySaver.getGameWidth(), CitySaver.getGameHeight());
    }

    @Override 
    public void paint(Graphics g) {  
        super.paint(g);  

        // game canvas
        g.setColor(Color.BLACK);  
        g.fillRect(0, 0, CitySaver.getGameWidth(), CitySaver.getGameHeight());  
        
        g.setColor(new Color(77, 77, 77));
        g.fillRect(CitySaver.getGameWidth(), 0, CitySaver.getGameWidth()+250, CitySaver.getGameHeight());  
        
        // show game status  
        showInfo(g);  

 //        Draw material(map)
        for (Material m: mat) {
            this.drawMaterial(g, m);
        }
        
       


        // draw hero
        if (hero != null) {
            if (hero.isAlive()) {
            	drawTank(hero.getX(), hero.getY(), g, hero.getDirection(), hero.getType());
           }
            else {
                hero = null;
            }
        } else if (GameRecorder.getMyLife() > 0) {
            hero = new Hero(50, 700, 0, 5)	;
            GameRecorder.setMyLife(GameRecorder.getMyLife() - 1)	;
        } else {
            ets.removeAllElements();
            CitySaver.setIsInGame(false);
            setGameOver(true);			
        }
        
//        if(GameRecorder.getMyLife() < 0 || Eagle.isBulletThrough()) {
//        	 ets.removeAllElements();
//             CitySaver.setIsInGame(false);
//             setGameOver(true);
//        }

        
        //mision completed
        if(GameRecorder.getNumDeadNPC() == 6) {	
        	ets.removeAllElements();
        	setMissionCompleted(true);
        	CitySaver.setIsInGame(false);
        }

        // draw enemies
        for (EnemyTank el: ets) {
            this.drawTank(el.getX(), el.getY(), g, el.getDirection(), el.getType());
        }
 
        // explosion
        explode(g);

        // Game Over
        if (isGameOver()) {
            g.setFont(new Font(""BLACK"", Font.BOLD, 90));
            g.setColor(Color.white);
            g.drawString(""Game Over"", 183, 303);
            g.setColor(Color.red);
            g.drawString(""Game Over"", 180, 300);	

            for (EnemyTank el: getEts()) {			
                el = null;			
            }			

            CitySaver.setIsInGame(false);	
        }
        
        if(isMissionCompleted()) {
        	g.setFont(new Font (""BLACK"" , Font.BOLD , 90));
        	g.setColor(Color.WHITE);		
        	g.drawString(""Mission"",253,303);		
        	g.drawString(""Completed"",163,403);		
        	g.setColor(new Color(170, 0,0));		
        	g.drawString(""Mission"",250,300);		
        		
        	g.drawString(""Completed"",160,400);			
        	for(EnemyTank el : getEts()) {   		
        		el = null ;
        	}
        }
    }

    // =========== Draw map for Stage 1 ==============
    private void initializeMap1() {
        Material brick;
       for (int i = 0; i < 6; i++) {

            //vertical brick	
            //S
            brick = new Brick(200, i * 30 + 200);
            mat.add(brick);
            brick = new Brick(350, i * 30 + 410);
            mat.add(brick);
            
            
            //E
            brick = new Brick(450, i * 30 + 200);
            mat.add(brick);
            brick = new Brick(450, i * 30 + 410);
            mat.add(brick);
            

            //horizontal Brick
            //S
            brick = new Brick(i*30+200, 200);	
            mat.add(brick);
            brick = new Brick(i*30+200, 380);	
            mat.add(brick);
            brick = new Brick(i*30+200, 560);	
            mat.add(brick);
            //E
            brick = new Brick(i*30+450, 200);	
            mat.add(brick);
            brick = new Brick(i*30+450, 380);	
            mat.add(brick);
            brick = new Brick(i*30+450, 560);	
            mat.add(brick);
        }
        

        //============ Base Wall ============
        for (int i = 0; i < 4; i++) {
            brick = new Brick(i * 30 +365,  655);
            mat.add(brick);
        }

        for (int i = 0; i < 2; i++) {
            brick = new Brick(365,  685 + i * 30);  
            mat.add(brick);

            brick = new Brick(455,  685 + i * 30);	
            mat.add(brick);
        }
    }

    private void initializeMap2() {


        eagle = new Eagle(402, 750);
        mat.add(eagle);

    }

    public void drawMaterial(Graphics g, Material m) {
        g.setColor(m.getColor());
        String type = m.getClass().getSimpleName();
        switch (type) {
            case ""Water"" :
                g.fillRect(m.getX(), m.getY(), m.getWidth(), m.getHeight());
                break;
            case ""Brick"" :
                g.fill3DRect(m.getX(), m.getY(), m.getWidth(), m.getHeight(), true);
                break;
            case ""Eagle"" :	
                this.drawEagle(CitySaver.getGameWidth() / 2, CitySaver.getGameHeight() - 80, g);		
                break;		
        }
    }	

    public void initializeNPC() {	
        EnemyTank et = null;	
        // =========== new enemies and their threads ============
        for (int i = 0; i < 6; i++) {		
            if (i < 3) {
                et = new EnemyTank((i + 1) *85, 70, 1, 2);		
            } else {
                et = new EnemyTank(400 + i * 85, 70, 1, 2);	    
            }
            ets.add(et);
            et.setEts(ets);
            et.fire();
            Thread thread = new Thread(et); 	
            thread.start();

        }
    }

    private void showInfo(Graphics g) {
        // =========status Bar ==========
        this.drawTank(900, 120, g, 0, 1);
        this.drawTank(900, 190, g, 0, 0);
        this.drawTank(900, 350, g, 0, 1);
        this.drawTank(900, 540, g, 0, 1);
       // this.setBackground(Color.BLACK); 

        g.setColor(Color.BLACK);
        g.setFont(new Font(""BLACK"", Font.PLAIN, 30));
        g.drawString("" X "" + GameRecorder.getTotalNPC() + """", 940, 130);
        g.drawString("" X "" + GameRecorder.getMyLife() + """", 940, 200);
        g.drawString("" X "" + GameRecorder.getNumDeadNPC() + """", 940, 360);
        g.drawString("" X "" + GameRecorder.getRecord() + """", 940, 550);
        

        g.setColor(new Color(170, 0,0));
        g.setFont(new Font(""BLACK"", Font.BOLD, 40));
        g.drawString(""Score:"", 860, 290);
        g.drawString(""Status:"", 860, 60);
        g.drawString(""Highest"", 860, 450);
        g.drawString(""Score:"", 860, 490);
    }

    // ============= Determine if the bullet hits a tank ==============
    public void hitTank(Bullet b, Tank t) {
        switch(t.getDirection()) {
            case 0:
            case 1:
                if (b.getX() > t.getX() -23 && b.getX() < t.getX() + 23
                        && b.getY() > t.getY() - 25 && b.getY() < t.getY() + 25) {

                    b.setAlive(false);
                    makeExplosion(t);
                }
                break;
            case 2:
            case 3:
                if (b.getX() > t.getX() - 25 && b.getX() < t.getX() + 25
                        && b.getY() > t.getY() - 23 && b.getY() < t.getY() + 23) {
                    b.setAlive(false);		
                    makeExplosion(t);		
                }
                break;
        }
    }

    // ===========Hit materials ===============
    public void hitMaterial(Bullet b, Material m) {
        if (!m.isBulletThrough() && b.getX() + 1 >= m.getX() && b.getX() - 1 <= m.getX() + m.getWidth()  
                && b.getY() + 1 >= m.getY()   
                && b.getY() - 1 <= m.getY() + m.getHeight()) {  
            b.setAlive(false); 
            m.setAlive(false); 
        }
    }


    // ============Explosion happens after one tank dies =========
    private void makeExplosion(Tank t) {
        t.setAlive(false);

        Explosion exp = new Explosion(t.getX() - 26, t.getY() - 28);
        explosions.add(exp);
    }

    //===========explosion effect ===========
    private void explode(Graphics g) {
        for (int i = explosions.size() - 1; i >= 0; i--) {
            Explosion el = explosions.get(i);
            if (el.getTimer() > 6) {
                g.setColor(new Color(255, 128, 0));
                g.fillOval(el.getX(), el.getY(), 55, 55);
                try {
                    Thread.sleep(90);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else if (el.getTimer() > 3) {
                g.setColor(new Color(255, 218, 28));
                g.fillOval(el.getX() + 8, el.getY() + 8, 40, 40);
                try {
                    Thread.sleep(90);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else {
                g.setColor(new Color(255, 254, 208));
                g.fillOval(el.getX() + 15, el.getY() + 13, 20, 20);
                try {
                    Thread.sleep(90);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            audio = new Audio(explosionSound);
            audio.play();		
            el.countDown();		
            if (el.getTimer() == 0) {		
                explosions.remove(el);		
            }
        }
    }
    //==========draw Eagle==========
    public void drawEagle(int x, int y, Graphics g) {
    	
    	g.setColor(new Color(204, 51, 0));		
		int arr1[] = {x-10 , x , x+10 , x};
		int arr2[] = {y-15 , y-5 , y-15 , y+7   } ;
		
		g.fillPolygon(arr1,arr2,4);			
		//Right
		g.drawLine(x+10,y-7,x+25,y-20);
		g.drawLine(x+10,y-6,x+25,y-20);

		g.drawLine(x+7,y,x+20,y-10);

		g.drawLine(x+7,y+1,x+20,y-10);
 
		
		//left
		g.drawLine(x-10,y-7,x-23,y-20);
		g.drawLine(x-10,y-6,x-23,y-20);
		g.drawLine(x-7,y,x-20,y-10);
		g.drawLine(x-7,y+1,x-20,y-10);
		
		//lower
		g.drawLine(x,y+10,x-15,y);
		g.drawLine(x,y+11,x-15,y);
		g.drawLine(x,y+12,x-15,y);
		g.drawLine(x,y+13,x-15,y);
		g.drawLine(x,y+14,x-15,y);

		g.drawLine(x,y+10,x+15,y);
		g.drawLine(x,y+11,x+15,y);
		g.drawLine(x,y+12,x+15,y);
		g.drawLine(x,y+13,x+15,y);
		g.drawLine(x,y+14,x+15,y);
		
		

    }

    // ========== generic way to draw tanks ============
    private void drawTank(int x, int y, Graphics g, int direction, int type) {
        // 0 as hero and 1 as enemy
        switch (type) {
            case 0:
                g.setColor(Color.GREEN);
                break;
            case 1:
                g.setColor(new Color(128, 128, 255));
                break;
            case 2:
                g.setColor(Color.lightGray);
                break;
        }

        //================== draw Hero in 4 directions ===============
        if(type==0) {
	        switch (direction) {
	            case 0:
	                g.fill3DRect(x - 23, y - 25, 10, 50, false);
	                g.fill3DRect(x + 14, y - 25, 10, 50,false);
	                g.fill3DRect(x - 13, y - 15, 27, 30, false);
	
	                
	                g.fillRect(x -1, y - 25, 3, 15 );
	                for (int i = 1; i < 5; i ++) g.drawLine(x - 23, y -25 + 10 * i, x - 14, y -25 + 10 * i);
	                for (int i = 1; i < 5; i ++) g.drawLine(x + 14, y -25 + 10 * i, x + 23, y -25 + 10 * i);
	                g.setColor(Color.RED);
	                g.fillOval(x - 9, y - 10, 18, 18);
	                break;
	            case 1:
	                g.fill3DRect(x - 23, y - 25, 10, 50, false);	
	                g.fill3DRect(x + 14, y - 25, 10, 50,false);
	                g.fill3DRect(x - 13, y - 15, 27, 30, false);	
	                
	                g.fillRect(x -1, y + 10, 3, 15 );
	                for (int i = 1; i < 5; i ++) g.drawLine(x - 23, y -25 + 10 * i, x - 14, y -25 + 10 * i);
	                for (int i = 1; i < 5; i ++) g.drawLine(x + 14, y -25 + 10 * i, x + 23, y -25 + 10 * i);
	                g.setColor(Color.RED);
	                g.fillOval(x - 9, y - 9, 18, 18);
	                break;
	            case 2:
	                g.fill3DRect(x - 25, y - 23, 50, 10, false);    
	                g.fill3DRect(x -25 , y + 14, 50, 10,false);
	                g.fill3DRect(x - 15, y - 13, 30, 27, false);   
	              
	                g.fillRect(x - 25, y - 1, 15, 3 );
	                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y -23, x -25 + 10 * i, y - 14);
	                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y + 14, x -25 + 10 * i, y + 23);
	                g.setColor(Color.RED);
	                g.fillOval(x - 10, y - 9, 18, 18);
	                break;
	            case 3:
	                g.fill3DRect(x - 25, y - 23, 50, 10, false);
	                g.fill3DRect(x - 25, y + 14, 50, 10,false);
	                g.fill3DRect(x - 15, y - 13, 30, 27, false);
	               
	                g.fillRect(x + 10, y - 1, 15, 3 );
	                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y -23, x -25 + 10 * i, y - 14);
	                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y + 14, x -25 + 10 * i, y + 23);
	                g.setColor(Color.RED);
	                g.fillOval(x - 9, y - 9, 18, 18);
	                break;
	        }
        }else { //Draw Enemy Tanks in 4 Directions
        	switch (direction) {
            case 0:
                g.fill3DRect(x - 23, y - 25, 10, 50, false);
                g.fill3DRect(x + 14, y - 25, 10, 50,false);
                g.fill3DRect(x - 13, y - 15, 27, 30, false);

                
                g.fillRect(x -1, y - 25, 3, 15 );
                for (int i = 1; i < 5; i ++) g.drawLine(x - 23, y -25 + 10 * i, x - 14, y -25 + 10 * i);
                for (int i = 1; i < 5; i ++) g.drawLine(x + 14, y -25 + 10 * i, x + 23, y -25 + 10 * i);
               
                g.fillOval(x - 9, y - 10, 18, 18);
                break;
            case 1:
                g.fill3DRect(x - 23, y - 25, 10, 50, false);	
                g.fill3DRect(x + 14, y - 25, 10, 50,false);
                g.fill3DRect(x - 13, y - 15, 27, 30, false);	
                g.fillOval(x - 9, y - 9, 18, 18);
                g.fillRect(x -1, y + 10, 3, 15 );
                for (int i = 1; i < 5; i ++) g.drawLine(x - 23, y -25 + 10 * i, x - 14, y -25 + 10 * i);
                for (int i = 1; i < 5; i ++) g.drawLine(x + 14, y -25 + 10 * i, x + 23, y -25 + 10 * i);

                break;
            case 2:
                g.fill3DRect(x - 25, y - 23, 50, 10, false);    
                g.fill3DRect(x -25 , y + 14, 50, 10,false);
                g.fill3DRect(x - 15, y - 13, 30, 27, false);   
                g.fillOval(x - 10, y - 9, 18, 18);
                g.fillRect(x - 25, y - 1, 15, 3 );
                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y -23, x -25 + 10 * i, y - 14);
                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y + 14, x -25 + 10 * i, y + 23);

                break;
            case 3:
                g.fill3DRect(x - 25, y - 23, 50, 10, false);
                g.fill3DRect(x - 25, y + 14, 50, 10,false);
                g.fill3DRect(x - 15, y - 13, 30, 27, false);
                g.fillOval(x - 9, y - 9, 18, 18);
                g.fillRect(x + 10, y - 1, 15, 3 );
                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y -23, x -25 + 10 * i, y - 14);
                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y + 14, x -25 + 10 * i, y + 23);

                break;
        }
        
        }
        

        //============== hero fires ==================
        if (hero != null && hero.getBullet() != null && hero.getBullet().isAlive()) {
            g.setColor(Color.WHITE);

            for (Bullet el: hero.getBv()) {
                g.fill3DRect(el.getX() - 1, el.getY() - 1, 3, 3, true);	
            }
        }	
        
        

        //=============== enemy fires =================
        for (EnemyTank el: ets) {
            if (el.getBullet() != null && el.getBullet().isAlive()) {
                g.setColor(Color.WHITE);

                for (EnemyTank el1: ets) {
                    for (Bullet el2: el.getBv()) {
                        g.fill3DRect(el2.getX() - 1, el2.getY() - 1, 3, 3, true);
                    }
                }
            }
        }
    }

  

    public static Hero getHero() {
        return hero;
    }

    public static void setHero(Hero h) {
        hero = h;
    }

    public Vector<EnemyTank> getEts() {
        return ets;
    }

    public void setEts(Vector<EnemyTank> ets) {
        this.ets = ets;
    }

    public Vector<Node> getNodes() {
        return nodes;
    }

    public void setNodes(Vector<Node> nodes) {
        this.nodes = nodes;
    }

    public boolean isGameOver() {
        return gameOver;
    }

    public void setGameOver(boolean go) {
        gameOver = go;
    }

    public static boolean isLoadGame() {
        return loadGame;
    }

    public static void setLoadGame(boolean loadGame) {
        GamePanel.loadGame = loadGame;
    }

    public static Vector<Material> getMat() {
        return mat;  
    }

    @Override 
    public void keyTyped(KeyEvent e) {

    }

    //================= hero control
    @Override
    public void keyPressed(KeyEvent e) {
        pressed.add(e.getKeyCode());

        if (hero != null) {
            //=============== control directions ===============
            if (pressed.contains(KeyEvent.VK_DOWN)) {
                hero.setDirection(1);
                hero.moveDown();
            }
            if (pressed.contains(KeyEvent.VK_LEFT)) {
                    hero.setDirection(2);
                    hero.moveLeft();
            }
            if (pressed.contains(KeyEvent.VK_RIGHT)) {
                    hero.setDirection(3);
                    hero.moveRight();
            }
            if (pressed.contains(KeyEvent.VK_UP)) {
                    hero.setDirection(0);
                    hero.moveUp();
            }

            //============ control shot =========
            if (pressed.contains(KeyEvent.VK_SPACE)) {
                hero.fire();
                audio = new Audio(fireSound);
                audio.play();
            }

        }
        repaint();
    }

    @Override
    public void keyReleased(KeyEvent e) {
        pressed.remove(e.getKeyCode());
    }

    @Override
    public void run() {

    	setGameOver(false);
    	setMissionCompleted(false);
        while (true) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }


            //=============== judge if there's any tanks hit ==================
            for (EnemyTank el: ets) {
                if (hero != null) {
                    for (Bullet b : hero.getBv()) hitTank(b, el);
                    for (Bullet el1 : el.getBv()) hitTank(el1, hero);
                }
            }

            //================ judge if there's any materials get hit =================
            for (Material m: mat) { 
                if (hero != null) {
                    for (Bullet b : hero.getBv()) hitMaterial(b, m);	
                    for (EnemyTank e: ets) {
                        for (Bullet b: e.getBv()) hitMaterial(b, m);	
                    }
                }
            }

            // =============remove dead enemy tanks=================
            for (int i = ets.size() - 1; i >= 0; i--) {
                if (!ets.get(i).isAlive()) {
                    ets.remove(i);
                    // \====Total NPC number decreases as one NPC dies====
                    GameRecorder.setTotalNPC(GameRecorder.getTotalNPC() - 1);
                    GameRecorder.setNumDeadNPC(GameRecorder.getNumDeadNPC() + 1);
                }
            }

            //==============remove dead material=================
            for (int i = mat.size() - 1; i >= 0; i--) {
                if (!mat.get(i).isAlive()) {
                    mat.remove(i);
                }
            }

            // ==============remove hero dead bullets==============
            if (hero != null) {
                if (hero.isTouched()) {
                    makeExplosion(hero);
                }
                for (int i = hero.getBv().size() - 1; i >= 0; i--) {
                    if (!hero.getBv().get(i).isAlive()) hero.removeBullet(i);
                }
            }

            //==============remove enemy dead bullets and fire===============
            for (int j = ets.size() - 1; j >= 0; j--) {
                for (int i = ets.get(j).getBv().size() - 1; i >= 0; i--) {
                    if (!ets.get(j).getBv().get(i).isAlive()) {
                        ets.get(j).removeBullet(i);
                        ets.get(j).fire();
                    }
                }
            }

            //==============See if the commander is still alive==============
            if (!eagle.isAlive()) {
                ets.removeAllElements();
                CitySaver.setIsInGame(false);
                setGameOver(true);
            }

            repaint();
        }
    }

	public static boolean isMissionCompleted() {
		return MissionCompleted;
	}

	public static void setMissionCompleted(boolean missionCompleted) {
		MissionCompleted = missionCompleted;
	}
    


}",1
"/*=============================================
 * Project: tank
 * Author: Khair Ahammed
 * Date: 3/5/19
 ==============================================*/

package CitySaver ;

import java.util.Vector;

public class Tank {
    private int x = 0;
    private int y = 0;
    private int direction = 0;
    private int speed = 10;
    private int type = 0;
    private Bullet bullet = null;
    private Vector<Bullet> bv = new Vector<>();
    private boolean isAlive = true;

    public Tank (int x, int y, int type, int speed) {
        setX(x);
        setY(y);
        setType(type);
        setSpeed(speed);
    }

    public boolean touchMaterial() {
        Material m = null;

        switch (getDirection()) {
            case 0:
                for (int i = 0; i < GamePanel.getMat().size(); i++) {
                    m = GamePanel.getMat().get(i);
                    if (getX() - 25 < m.getX() + m.getWidth() && getX() + 25 > m.getX()
                            && getY() - 25 - getSpeed() < m.getY() + m.getHeight()
                            && getY() + 25 > m.getY()) return true;
                }
                break;
            case 1:
                for (int i = 0; i < GamePanel.getMat().size(); i++) {
                    m = GamePanel.getMat().get(i);
                    if (getX() - 25  < m.getX() + m.getWidth() && getX() + 25 > m.getX()
                            && getY() + 25 + getSpeed() > m.getY()
                            && getY() - 25 < m.getY() + m.getHeight()
                            ) return true;
                }
                break;
            case 2:
                for (int i = 0; i < GamePanel.getMat().size(); i++) {
                    m = GamePanel.getMat().get(i);
                    if (getY() - 25 < m.getY() + m.getHeight() && getY() + 25 > m.getY()
                            && getX() - 25 - getSpeed() < m.getX() + m.getWidth()
                            && getX() + 25 > m.getX()) return true;
                }
                break;
            case 3:
                for (int i = 0; i < GamePanel.getMat().size(); i++) {
                    m = GamePanel.getMat().get(i);
                    if (getY() - 25 < m.getY() + m.getHeight() && getY() + 25 > m.getY()
                            && getX() + 25 + getSpeed() > m.getX()
                            && getX() - 25 < m.getX() + m.getWidth()
                            ) return true;
                }
                break;
        }

        return false;
    }

    public void fire() {
        Thread t = null;

        for (int i = bv.size() - 1; i >= 0; i--) {
            if (!bv.get(i).isAlive()) bv.remove(i);
        }

        if (bv.size() < 5) {
            // determine the direction
            switch (getDirection()) {
                case 0:
                    bullet = new Bullet(getX(), getY() - 26, 0, 13);
                    break;
                case 1:
                    bullet = new Bullet(getX(), getY() + 26, 1, 13);
                    break;
                case 2:
                    bullet = new Bullet(getX() - 26, getY(), 2, 13);
                    break;
                case 3:
                    bullet = new Bullet(getX() + 26, getY(), 3, 13);
                    break;
            }

            bv.add(bullet);
        }
        // no more than 5 bullets each time

        t = new Thread(bullet);
        t.start();
    }

    public void moveUp() {
        // Limit the tanks inside the game screen
        if (getY() - 25 - getSpeed() >= 0 && !touchMaterial()) setY(getY() - getSpeed());
    }

    public void moveDown() {
        if (getY() + 75 + getSpeed() <= CitySaver.getGameHeight() && !touchMaterial()) setY(getY() + getSpeed());
    }

    public void moveLeft() {
        if (getX() - 23 - getSpeed() >= 0 && !touchMaterial()) setX(getX() - getSpeed());
    }

    public void moveRight() {
        if (getX() + 23 + getSpeed() <= CitySaver.getGameWidth() && !touchMaterial()) setX(getX() + getSpeed());
    }

    public void moveAhead() {
        switch(getDirection()) {
            case 0:
                moveUp();
                break;
            case 1:
                moveDown();
                break;
            case 2:
                moveLeft();
                break;
            case 3:
                moveRight();
                break;
        }
    }

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }

    public int getSpeed() {
        return speed;
    }

    public void setSpeed(int speed) {
        this.speed = speed;
    }

    public int getDirection() {
        return direction;
    }

    public void setDirection(int direction) {
        this.direction = direction;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public Vector<Bullet> getBv() {
        return bv;
    }

    public Bullet getBullet() {
        return bullet;
    }

    public void setBullet(Bullet bullet) {
        this.bullet = bullet;
    }

    public void removeBullet(int n) {
        bv.remove(n);
    }

    public boolean isAlive() {
        return isAlive;
    }

    public void setAlive(boolean alive) {
        isAlive = alive;
    }
}",0
"package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.text.DecimalFormat;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


public class AddCoursePresent extends JFrame {



     Container c;
     JLabel namelbl,rolllbl,ct1lbl,ct2lbl,assignlbl,attendencelbl,presentlbl;
     JTextField name,roll,ct1,ct2,assign,attendence,present;
      JButton back,home,add;
     final Font f;
     JFrame frame;
     private static DecimalFormat df2 = new DecimalFormat(""#.##"");


    AddCoursePresent(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));

        f=new Font(""Arial"",Font.BOLD,24);


        namelbl=new JLabel(""Roll No"");
        namelbl.setFont(f);
        namelbl.setBounds(140,100,200,50);
        c.add(namelbl);

        name=new JTextField();
        name.setFont(f);
        name.setBounds(500,100,300,40);
        c.add(name);


        rolllbl=new JLabel(""Semester"");
        rolllbl.setFont(f);
        rolllbl.setBounds(140,160,200,50);
        c.add(rolllbl);

        roll=new JTextField();
        roll.setFont(f);
        roll.setBounds(500,160,300,40);
        c.add(roll);

        ct1lbl=new JLabel(""Session "");
        ct1lbl.setFont(f);
        ct1lbl.setBounds(140,220,200,50);
        c.add(ct1lbl);

        ct1=new JTextField();
        ct1.setFont(f);
        ct1.setBounds(500,220,300,40);
        c.add(ct1);

        ct2lbl=new JLabel(""Course name"");
        ct2lbl.setFont(f);
        ct2lbl.setBounds(140,280,200,50);
        c.add(ct2lbl);

        ct2=new JTextField();
        ct2.setFont(f);
        ct2.setBounds(500,280,300,40);
        c.add(ct2);

        assignlbl=new JLabel(""Course Code"");
        assignlbl.setFont(f);
        assignlbl.setBounds(140,340,350,50);
        c.add(assignlbl);

        assign=new JTextField();
        assign.setFont(f);
        assign.setBounds(500,340,300,40);
        c.add(assign);

        attendencelbl=new JLabel(""Class Held"");
        attendencelbl.setFont(f);
        attendencelbl.setBounds(140,400,350,50);
        c.add(attendencelbl);

        attendence=new JTextField();
        attendence.setFont(f);
        attendence.setBounds(500,400,300,40);
        c.add(attendence);

       presentlbl=new JLabel(""Class present"");
        presentlbl.setFont(f);
        presentlbl.setBounds(140,460,350,50);
        c.add(presentlbl);

       present=new JTextField();
        present.setFont(f);
        present.setBounds(500,460,300,40);
        c.add(present);


        add=new JButton(""Add"");
        add.setBounds(650,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);


        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);

        home=new JButton(""Home"");
        home.setBounds(650,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);


         frame=new JFrame();

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Student Attendence"");
        frame.setVisible(true);
        frame.add(c);

        add.addActionListener(new ActionListener(){


        public void actionPerformed(ActionEvent e){


                if(e.getSource()==add){
                String sroll =name.getText();
                String semister = roll.getText();
                String session = ct1.getText();
                String cname = ct2.getText();
                String ccode =assign.getText();
                String cheld = attendence.getText();
                String cpresent = present.getText();

                String file = sroll+semister;


                 if(sroll.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert roll"");
                }
                 else if(semister.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Semister"");
                }
                 else if(session.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Session"");
                }
                 else if(cname.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Course name"");
                }
                else if(ccode.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Course Code"");
                }
                else if(cheld.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Class held No"");
                }
                 else if(cpresent.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Class Present No"");
                }
                 else{

                     double cheld1 =Double.parseDouble(cheld);
                     double cpresent1 =Double.parseDouble(cpresent);
                     double parcent1 =(cpresent1/cheld1)*100;
                     String parcent = df2.format(parcent1);

                     String parcent2 =new Double(parcent).toString();
                     filewriter(file,cname,ccode,cheld,cpresent,parcent2);
                     JOptionPane.showMessageDialog(null, ""Added Successfully"");
                     name.setText("""");
                     roll.setText("""");
                     ct1.setText("""");
                     ct2.setText("""");
                     assign.setText("""");
                     attendence.setText("""");
                     present.setText("""");

                 }



                }
        }
        private void filewriter(String file, String cname, String ccode, String cheld,String cpresent,String parcent1) {
                try{
                    FileWriter wr = new FileWriter(file,true);
                   // wr.write(sroll+"" ""+""#"");
                    //wr.write(semister+"" ""+""#"");
                    //wr.write(session+"" ""+""#"");
                    wr.write(cname+"" ""+""#"");
                    wr.write(ccode+"" ""+""#"");
                    wr.write(cheld+"" ""+""#"");
                    wr.write(cpresent+"" ""+""#"");
                    wr.write(parcent1+"" ""+""#"");




                    wr.write(System.getProperty(""line.separator""));
                    wr.close();
                }
                catch(Exception ae)
                {
                    System.out.println(ae);
                }
            }

        });
        home.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==home)
               {
                  frame.dispose();
                  Home menuFile = new Home();

               }
            }

        });
    }



}",1
"package project;


import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.util.Scanner;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;




public class AddFacultyMember extends JFrame{
    
    private Container c;
    private JLabel namelbl,motherslbl,Fatherslbl,hometownlbl,emaillbl,contactlbl,bloodlbl;
    private JTextField name,mother,father,hometown,email,contact,blood;
    private JButton add,back,home;
    private final Font f;
    
    
  
    AddFacultyMember(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        
        namelbl=new JLabel(""Name                 :"");      
        namelbl.setFont(f);
        namelbl.setBounds(180,100,200,50);
        c.add(namelbl);
        
        name=new JTextField();      
        name.setFont(f);
        name.setBounds(400,100,300,40);
        c.add(name);
        
        
        motherslbl=new JLabel(""Mother's Name  :"");      
        motherslbl.setFont(f);
        motherslbl.setBounds(180,160,200,50);
        c.add(motherslbl);
        
        mother=new JTextField();      
        mother.setFont(f);
        mother.setBounds(400,160,300,40);
        c.add(mother);
        
        Fatherslbl=new JLabel(""Father's Name   :"");      
        Fatherslbl.setFont(f);
        Fatherslbl.setBounds(180,220,200,50);
        c.add(Fatherslbl);
        
        father=new JTextField();      
        father.setFont(f);
        father.setBounds(400,220,300,40);
        c.add(father);
        
        hometownlbl=new JLabel(""Home town        :"");      
        hometownlbl.setFont(f); 
        hometownlbl.setBounds(180,280,200,50);
        c.add(hometownlbl);
        
        hometown=new JTextField();      
        hometown.setFont(f);
        hometown.setBounds(400,280,300,40);
        c.add(hometown);
        
        emaillbl=new JLabel(""Email                 :"");      
        emaillbl.setFont(f); 
        emaillbl.setBounds(180,340,200,50);
        c.add(emaillbl);
        
        email=new JTextField();      
        email.setFont(f);
        email.setBounds(400,340,300,40);
        c.add(email);
        
        contactlbl=new JLabel(""Contact             :"");      
        contactlbl.setFont(f);
        contactlbl.setBounds(180,400,200,50);
        c.add(contactlbl);
        
        contact=new JTextField();      
        contact.setFont(f);
        contact.setBounds(400,400,300,40);
        c.add(contact);
        
        bloodlbl=new JLabel(""Blood Group    :"");      
        bloodlbl.setFont(f);
        bloodlbl.setBounds(180,460,200,50);
        c.add(bloodlbl);
        
        blood=new JTextField();      
        blood.setFont(f);
        blood.setBounds(400,460,300,40);
        c.add(blood);
        
        add=new JButton(""Add"");
        add.setBounds(520,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(520,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
                
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Add a Faculty member"");
        frame.setVisible(true);
        frame.add(c);
       
          
    
         add.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if(e.getSource()==add){
                   String sntf=name.getText();
                  String mntf=mother.getText();
         String fntf=father.getText();
         String httf=hometown.getText();
         String etf=email.getText();
         String ctf=contact.getText();
         String btf=blood.getText();
       
         filewriter(sntf,mntf,fntf,httf,etf,ctf,btf); 
                }
            
         
                
           
                   
                   
                   
                
            }
             
         });
          back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
            
            name.setText("""");
            mother.setText("""");
            father.setText("""");
            hometown.setText("""");
            email.setText("""");
            contact.setText("""");
            blood.setText("""");
                

                
            }
             
         });
       
       
    } 
    public void filewriter(String sntf,String mntf,String fntf,String httf,String etf,String ctf,String btf)
        {
        File folder=new File(""C:/Users/ASUS/Desktop/myjava"");
        folder.mkdir();
        String path=folder.getAbsolutePath();
        File student=new File(path+""/student.txt"");
       // File teacher =new File(path+""/teacher.txt"");
       
       
        try{
            student.createNewFile();
            //teacher.createNewFile();
            
           // FileOutputStream fn=new FileOutputStream(path+""/student.txt"");
           // FileOutputStream fout1=new FileOutputStream(path+""/teacher.txt"");
            //FileInputStream fin=new FileInputStream(path+""/student.txt"");
            //FileInputStream fin1=new FileInputStream(path+""/teacher.txt"");
            
            FileWriter fn=new FileWriter(""student.txt"",true);
            fn.write(sntf+"" ""+"""");
            fn.write(mntf+"" ""+"""");
            fn.write(fntf+"" ""+"""");
            fn.write(httf+"" ""+"""");
            fn.write(etf+"" ""+"""");
            fn.write(ctf+"" ""+"""");
            fn.write(btf+"" ""+"""");
            fn.write(System.lineSeparator());
            
            
         // fn.append(System.lineSeparator());
           fn.close();   
            
        }
        catch(Exception e)
        {
          e.printStackTrace();
        }
         
    }  
    public static void main(String[] args) {
        
        AddFacultyMember home=new AddFacultyMember();
        
    }
        
    }",1
"package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.text.DecimalFormat;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


public class AddPresent extends JFrame{
    
     Container c;
     JLabel namelbl,rolllbl,heldlbl,presentlbl;
     JTextField name,roll,held,present;
      JButton back,home,add;
     final Font f;
     JFrame frame;
     private static DecimalFormat df2 = new DecimalFormat(""#.##"");
     
     String filename;
    
  
    AddPresent(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        
        namelbl=new JLabel(""Name"");      
        namelbl.setFont(f);
        namelbl.setBounds(140,100,200,50);
        c.add(namelbl);
        
        name=new JTextField();      
        name.setFont(f);
        name.setBounds(500,100,300,40);
        c.add(name);
        
        
        rolllbl=new JLabel(""Roll no"");      
        rolllbl.setFont(f);
        rolllbl.setBounds(140,160,200,50);
        c.add(rolllbl);
       
        roll=new JTextField();      
        roll.setFont(f);
        roll.setBounds(500,160,300,40);
        c.add(roll);
        
        heldlbl=new JLabel(""Class Held(H)"");      
        heldlbl.setFont(f);
        heldlbl.setBounds(140,220,200,50);
        c.add(heldlbl);
        
        held=new JTextField();      
        held.setFont(f);
        held.setBounds(500,220,300,40);
        c.add(held);
        
        presentlbl=new JLabel(""Present In Class(H)"");      
        presentlbl.setFont(f); 
        presentlbl.setBounds(140,280,250,50);
        c.add(presentlbl);
        
        present=new JTextField();      
        present.setFont(f);
        present.setBounds(500,280,300,40);
        c.add(present);
             
      
        add=new JButton(""Add"");
        add.setBounds(650,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(650,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
         frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Course Attendence"");
        frame.setVisible(true);
        frame.add(c);
        
        add.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==add)
            {
                String sname =name.getText();
                String sroll = roll.getText();
                String sheld = held.getText();
                String spresent = present.getText();
                
                
                
                
                
                if(sname.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert name"");
                }
                else if(sroll.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert roll"");
                }
                else if(sheld.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Held classes(H)"");
                }
                
                else{
                     double intheld =Double.parseDouble(sheld);
                     double intpresent =Double.parseDouble(spresent);
                     double percent = (intpresent/intheld)*100;
                     String percent1 = df2.format(percent);
                     
                     String parcent2 =new Double(percent1).toString();
                     filewriter(sname,sroll,sheld,spresent,parcent2);
                     JOptionPane.showMessageDialog(null, ""Added Successfully"");
                     name.setText("""");
                     roll.setText("""");
                     held.setText("""");
                     present.setText("""");
                
                   
                    
                    
                    
                } 
                
                
            }
            
            }
        private void filewriter(String sname, String sroll, String sheld, String spresent, String spercent) {
                try{
                    FileWriter wr = new FileWriter(filename,true);
                    wr.write(sname+"" ""+""#"");
                    wr.write(sroll+"" ""+""#"");
                    wr.write(sheld+"" ""+""#"");
                    wr.write(spresent+"" ""+""#"");
                    wr.write(spercent+"" ""+""#"");
                    
                    
                    
                    
                       
                    wr.write(System.getProperty(""line.separator""));
                    wr.close();
                }
                catch(Exception ae)
                {
                    System.out.println(ae);
                }
            }
        
        });
        
         home.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==home)
               {
                  frame.dispose();
                  Home menuFile = new Home();
                  
               }
            }
            
        });
    }
    
    public static void main(String[] args) {
        
        AddPresent a =  new AddPresent();
        
    }
    
    
    
}",1
"package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.util.Scanner;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
public class AddRoutine extends JFrame{
    
    public Container c;
    public JLabel daylbl,firstlbl,secondlbl,thirdlbl,fourthlbl,fifthlbl,sixthlbl;
    public JTextField daytf,firsttf,secondtf,thirdtf,fourthtf,fifthtf,sixthtf;
    public JButton add,clear,home;
    public Font f;
    
    AddRoutine()
    {
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        
        daylbl=new JLabel(""Day name      :"");      
        daylbl.setFont(f);
        daylbl.setBounds(140,100,220,50);
        c.add(daylbl);
        
        daytf=new JTextField();      
        daytf.setFont(f);
        daytf.setBounds(400,100,300,40);
        c.add(daytf);
        
        
        firstlbl=new JLabel(""09.00am-10.00am:"");      
        firstlbl.setFont(f);
       firstlbl.setBounds(140,160,220,50);
        c.add(firstlbl);
        
       firsttf=new JTextField();      
        firsttf.setFont(f);
        firsttf.setBounds(400,160,300,40);
        c.add(firsttf);
        
        secondlbl=new JLabel(""10.00am-11.00am:"");      
        secondlbl.setFont(f);
        secondlbl.setBounds(140,220,220,50);
        c.add(secondlbl);
        
        secondtf=new JTextField();      
        secondtf.setFont(f);
        secondtf.setBounds(400,220,300,40);
        c.add(secondtf);
        
        thirdlbl=new JLabel(""11.00am-12.00pm:"");      
        thirdlbl.setFont(f); 
        thirdlbl.setBounds(140,280,220,50);
        c.add(thirdlbl);
        
        thirdtf=new JTextField();      
        thirdtf.setFont(f);
        thirdtf.setBounds(400,280,300,40);
        c.add(thirdtf);
        
        fourthlbl=new JLabel(""12.00pm-01.00pm:"");      
        fourthlbl.setFont(f); 
        fourthlbl.setBounds(140,340,220,50);
        c.add(fourthlbl);
        
        fourthtf=new JTextField();      
        fourthtf.setFont(f);
        fourthtf.setBounds(400,340,300,40);
        c.add(fourthtf);
        
        fifthlbl=new JLabel(""02.00pm-03.00pm:"");      
        fifthlbl.setFont(f);
        fifthlbl.setBounds(140,400,220,50);
        c.add(fifthlbl);
        
        fifthtf=new JTextField();      
        fifthtf.setFont(f);
        fifthtf.setBounds(400,400,300,40);
        c.add(fifthtf);
        
        sixthlbl=new JLabel(""03.00pm-04.00pm:"");      
        sixthlbl.setFont(f);
        sixthlbl.setBounds(140,460,220,50);
        c.add(sixthlbl);
        
        sixthtf=new JTextField();      
        sixthtf.setFont(f);
        sixthtf.setBounds(400,460,300,40);
        c.add(sixthtf);
        
        add=new JButton(""Add"");
        add.setBounds(520,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        clear=new JButton(""Clear"");
        clear.setBounds(180,570,150,50);
        clear.setFont(f);
        clear.setBackground(Color.BLACK);
        clear.setForeground(Color.WHITE);
        c.add(clear);
        
        home=new JButton(""Home"");
        home.setBounds(520,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        clear.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
            daytf.setText("""");
            firsttf.setText("""");
            secondtf.setText("""");
            thirdtf.setText("""");
            fourthtf.setText("""");
            fifthtf.setText("""");
            sixthtf.setText("""");
            }
             });
        
        home.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==home)
            {
                dispose();
                HomeDemo home=new HomeDemo();  
            }
            }
        
        });

        add.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if(e.getSource()==add){
         String sntf=daytf.getText();
         String mntf=firsttf.getText();
         String fntf=secondtf.getText();
         String httf=thirdtf.getText();
         String etf=fourthtf.getText();
         String ctf=fifthtf.getText();
         String btf=sixthtf.getText();
       
         filewriter(sntf,mntf,fntf,httf,etf,ctf,btf); 
                }
             }
             });
               
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Add Routine data"");
        frame.setVisible(true);
        frame.add(c);
        
    }
        
        public void filewriter(String sntf,String mntf,String fntf,String httf,String etf,String ctf,String btf)
        {
        try{
            FileWriter fn=new FileWriter(""routine.txt"",true);
            fn.write(sntf+"" ""+"""");
            fn.write(mntf+"" ""+"""");
            fn.write(fntf+"" ""+"""");
            fn.write(httf+"" ""+"""");
            fn.write(etf+"" ""+"""");
            fn.write(ctf+"" ""+"""");
            fn.write(btf+"" ""+"""");
            fn.write(System.getProperty(""line.separator""));

           fn.close();   
         }
        catch(Exception e)
        {
          e.printStackTrace();
        }
         
        }
    
    
    public static void main(String[] args) {
        AddRoutine r =new AddRoutine();
    }
    
}",1
"package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.border.Border;


public class AdminstratorDemo extends JFrame{
    
    private Container c;
    private JLabel adminlabel,label1,label2,label3,label4,label5,label6,label7,label8;
    private JButton homebtn,addfacultybtn,addstubtn,updatebtn,deletestubtn,updatefacbtn,deletetfacbtn,routinebtn,addroutine;
    private final Font f;
    private final Font hf;
    private final Cursor cursor; 
    
    AdminstratorDemo(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        
        hf=new Font(""Arial"",Font.BOLD,28);
        f=new Font(""Arial"",Font.BOLD,24);
        cursor =new Cursor(Cursor.HAND_CURSOR);
        
        adminlabel=new JLabel(""Administrator"");
        adminlabel.setFont(hf);
        adminlabel.setBounds(380,60,200,70);
        c.add(adminlabel);
        
        label1=new JLabel(""1."");
        label1.setFont(f);
        label1.setBounds(180,140,20,50);
        c.add(label1);
        
        updatebtn=new JButton(""Update Student Information"");
        updatebtn.setBounds(200,140,370,50);
        updatebtn.setFont(f);
        updatebtn.setCursor(cursor);
        updatebtn.setBackground(new java.awt.Color(0,230,230));
        c.add(updatebtn);
        
        label2=new JLabel(""2."");
        label2.setFont(f);
        label2.setBounds(180,200,20,50);
        c.add(label2);
        
        addstubtn=new JButton(""Add Student"");
        addstubtn.setBounds(200,200,190,50);
        addstubtn.setFont(f);
        addstubtn.setCursor(cursor);
        addstubtn.setBackground(new java.awt.Color(0,230,230));
        c.add(addstubtn);
        
        label3=new JLabel(""3."");
        label3.setFont(f);
        label3.setBounds(180,260,20,50);
        c.add(label3);
        
        deletestubtn=new JButton(""Delete Student"");
        deletestubtn.setBounds(200,260,210,50);
        deletestubtn.setFont(f);
        deletestubtn.setCursor(cursor);
        deletestubtn.setBackground(new java.awt.Color(0,230,230));
        c.add(deletestubtn);
        
        label4=new JLabel(""4."");
        label4.setFont(f);
        label4.setBounds(180,320,20,50);
        c.add(label4);
        
        addfacultybtn=new JButton(""Add a Faculty member"");
        addfacultybtn.setBounds(200,320,300,50);
        addfacultybtn.setFont(f);
        addfacultybtn.setCursor(cursor);
        addfacultybtn.setBackground(new java.awt.Color(0,230,230));
        c.add(addfacultybtn);
        
        label5=new JLabel(""5."");
        label5.setFont(f);
        label5.setBounds(180,380,20,50);
        c.add(label5);
        
        updatefacbtn=new JButton(""Update Faculty member Information"");
        updatefacbtn.setBounds(200,380,450,50);
        updatefacbtn.setFont(f);
        updatefacbtn.setCursor(cursor);
        updatefacbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(updatefacbtn);
        
        label6=new JLabel(""6."");
        label6.setFont(f);
        label6.setBounds(180,440,20,50);
        c.add(label6);
        
        deletetfacbtn=new JButton(""Delete a Faculty member"");
        deletetfacbtn.setBounds(200,440,330,50);
        deletetfacbtn.setFont(f);
        deletetfacbtn.setCursor(cursor);
        deletetfacbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(deletetfacbtn);
        
        label7=new JLabel(""7."");
        label7.setFont(f);
        label7.setBounds(180,500,20,50);
        c.add(label7);
        
        routinebtn=new JButton(""Update Routine"");
        routinebtn.setBounds(200,500,220,50);
        routinebtn.setFont(f);
        routinebtn.setCursor(cursor);
        routinebtn.setBackground(new java.awt.Color(0,230,230));
        c.add(routinebtn);
        
        label8=new JLabel(""8."");
        label8.setFont(f);
        label8.setBounds(180,560,20,50);
        c.add(label8);
        
        addroutine=new JButton(""Add Routine"");
        addroutine.setBounds(200,560,210,50);
        addroutine.setFont(f);
        addroutine.setCursor(cursor);
        addroutine.setBackground(new java.awt.Color(0,230,230));
        c.add(addroutine);
        
        
        homebtn=new JButton(""Home"");
        homebtn.setBounds(300,620,150,50);
        homebtn.setFont(f);
        homebtn.setBackground(Color.BLACK);
        homebtn.setForeground(Color.WHITE);
        homebtn.setCursor(cursor);
        c.add(homebtn);
        
        Border emptyBorder = BorderFactory.createEmptyBorder();
        addstubtn.setBorder(emptyBorder);
        updatebtn.setBorder(emptyBorder);
       deletestubtn.setBorder(emptyBorder);
        addfacultybtn.setBorder(emptyBorder);
        updatefacbtn.setBorder(emptyBorder);
        deletetfacbtn.setBorder(emptyBorder);
        routinebtn.setBorder(emptyBorder);
        addroutine.setBorder(emptyBorder);
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Administrator"");
        frame.setVisible(true);
        frame.add(c);   
        
        
        homebtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home admin =new Home();
        }
        
        });
        
        addfacultybtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==addfacultybtn){
                 
                    frame.dispose();
                    AddfacultyMember addmember = new AddfacultyMember();
                    
                }
        }
        
        });
        
        addstubtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==addstubtn){
                 
                    frame.dispose();
                    AddStudentMember addmember = new AddStudentMember();
                    
                }
        }
        
        });
        
        updatebtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==updatebtn){
                 
                    frame.dispose();
                    try {
                        UpdateStudentInformation up = new UpdateStudentInformation();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AdminstratorDemo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        }
        
        });
        
       updatefacbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==updatefacbtn){
                 
                    frame.dispose();
                    try {
                        UpdateFacultyInformation up = new UpdateFacultyInformation();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AdminstratorDemo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        }
        
        });
        
        deletestubtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==deletestubtn){
                 
                    frame.dispose();
                    try {
                        DeleteStudent deletestu = new DeleteStudent();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AdminstratorDemo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                    
                    
                }
        }
        
        });
        
         deletetfacbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()== deletetfacbtn){
                 
                    frame.dispose();
                    try {
                        DeleteFaculty delete = new DeleteFaculty();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AdminstratorDemo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                    
                    
                }
        }
        
        });
         routinebtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()== routinebtn){
                 
                    frame.dispose();
                    try {
                        UpdateRoutine updateRoutine = new UpdateRoutine();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AdminstratorDemo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                    
                    
                }
        }
        
        });
         addroutine.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()== addroutine){
                 
                    frame.dispose();
                    AddRoutine updateRoutine = new AddRoutine();
                   
                    
                    
                }
        }
        
        });         
    }
    public static void main(String[] args) {
       AdminstratorDemo adminDemo = new AdminstratorDemo();
    }
}",1
"package project;


import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import static java.text.NumberFormat.Field.INTEGER;
import static javax.management.openmbean.SimpleType.INTEGER;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


public class GraphDemo extends JFrame{
    Container c;
    JPanel panel2;
    JButton addbtn;
    JLabel semestername,gpa;
    JTextField semestertf,gpatf;
    Font f;
    JComboBox semestercb;
    String se;
     String       gp;
     ChartPanel chartPanel;
     public String[] cb={""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8""};
    GraphDemo()
    {
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
         
          
        XYDataset dataset = createDataset();
        JFreeChart chart = createChart(dataset);
        chartPanel = new ChartPanel(chart);
        chartPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        chartPanel.setBackground(Color.white);
        chartPanel.setBounds(70,20,750,500);
        chartPanel.setVisible(false);
        c.add(chartPanel);
        pack();
        setTitle(""Line chart"");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        semestername=new JLabel(""Semester Name :"");
        semestername.setBounds(70,550,220,50);
        semestername.setFont(f);
        c.add(semestername);
        
        semestercb=new JComboBox(cb);
        semestercb.setBounds(295,550,150,45);
        semestercb.setFont(f);
        c.add(semestercb);
        
        gpa=new JLabel(""Semister Gpa :"");
        gpa.setBounds(70,600,220,50);
        gpa.setFont(f);
        
        c.add(gpa);
        
        gpatf=new JTextField();
        gpatf.setBounds(295,600,150,45);
        gpatf.setFont(f);
        c.add(gpatf);
        
        addbtn=new JButton(""Add"");
        addbtn.setBounds(1100,640,120,50);
         addbtn.setFont(f);
        c.add(addbtn);
        
       
          gp= gpatf.getText();
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Home "");
        frame.setVisible(true);
        frame.add(c);
        
        addbtn.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
            
             if(e.getSource()==addbtn){
                
                  String gp=gpatf.getText();
                
                resultshow(gp); 
                chartPanel.setVisible(true);
                }
                
        
                
            }
            
        });
        
    }
    
   //  int tf=Integer.parseInt(se);
    // double value = Double.parseDouble(gp);
    
    
     private XYDataset createDataset() {

        XYSeries series = new XYSeries(""Saifur Rahman"");
       /* if(tf==1)
        {
          series.add(tf,value);
        }
        else if(tf==2)
        {
         series.add(tf, value);   
        }
        else if(tf==3)
        {
         series.add(tf, value);   
        }
        else if(tf==4)
        {
         series.add(tf, value);   
        }
       */
      
      
        series.add(1, 3.40);
        series.add(2, 3.52);
        series.add(3, 3.90);
        series.add(4, 3.50);
        series.add(5, 3.89);
        series.add(6, 4.00);
        series.add(7, 3.98);
        series.add(8, 4.00);  
      

        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);

        return dataset;
    }

    private JFreeChart createChart(XYDataset dataset) {

        JFreeChart chart = ChartFactory.createXYLineChart(
                ""Result sheet"", 
                ""Semester"", 
                ""GPA"", 
                dataset, 
                PlotOrientation.VERTICAL,
                true, 
                true, 
                false 
        );

        XYPlot plot = chart.getXYPlot();

        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesPaint(0, Color.RED);
        renderer.setSeriesStroke(0, new BasicStroke(2.0f));

        plot.setRenderer(renderer);
        plot.setBackgroundPaint(Color.white);

        plot.setRangeGridlinesVisible(true);
        plot.setRangeGridlinePaint(Color.BLACK);

        plot.setDomainGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.BLACK);

        chart.getLegend().setFrame(BlockBorder.NONE);

        chart.setTitle(new TextTitle(""Result Sheet"",
                        new Font(""Serif"", java.awt.Font.BOLD, 18)
                )
        );

        return chart;

    }
     public void resultshow(String gp)
        {
        //File folder=new File(""C:/Users/ASUS/Desktop/ResultSheet"");
       // folder.mkdir();
       // String path=folder.getAbsolutePath();
        //File result=new File(path+""/result.txt"");
        try{
           // result.createNewFile();
            FileWriter fn=new FileWriter(""result.txt"",true);
           
            fn.write(gp+"" ""+"""");
            fn.write(System.getProperty(""line.separator""));
            
            fn.close();   
            
        }
        catch(Exception e)
        {
          e.printStackTrace();
        }
            System.out.println(""success"");  
    }  
    
    
    
    public static void main(String[] args) {
        GraphDemo graph=new GraphDemo();
    }
}",1
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JButton;
 

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.border.Border;



public class Home extends JFrame{
    private Container c;
    private JLabel homelabel,label1,label2,label3,label4,label5,label6;
    private JButton studentbtn,teacherbtn,coursebtn,routinebtn,adminbtn,facultybtn,atndbtn,graphbtn;
    private Font f,hf;
    private Cursor cursor;
    
     Home()
    {
    
        
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        hf=new Font(""Arial"",Font.BOLD,28);
        
        cursor =new Cursor(Cursor.HAND_CURSOR);
        
        
        homelabel=new JLabel(""Home"");
        homelabel.setFont(hf);
        homelabel.setBounds(380,60,100,70);
        c.add(homelabel);
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        label1=new JLabel(""1."");
        label1.setFont(f);
        label1.setBounds(180,140,20,50);
        c.add(label1);
        
        studentbtn=new JButton(""Student Information"");
        studentbtn.setBounds(200,140,260,50);
        studentbtn.setFont(f);
        studentbtn.setCursor(cursor);
        studentbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(studentbtn);
        
        label2=new JLabel(""2."");
        label2.setFont(f);
        label2.setBounds(180,200,20,50);
        c.add(label2);
        
        teacherbtn=new JButton(""Teacher Information"");
        teacherbtn.setBounds(200,200,260,50);
        teacherbtn.setFont(f);
        teacherbtn.setCursor(cursor);
        teacherbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(teacherbtn);
        
        label3=new JLabel(""3."");
        label3.setFont(f);
        label3.setBounds(180,260,20,50);
        c.add(label3);
        
        coursebtn=new JButton(""Course Plan"");
        coursebtn.setBounds(200,260,170,50);
        coursebtn.setFont(f);
        coursebtn.setCursor(cursor);
        coursebtn.setBackground(new java.awt.Color(0,230,230));
        c.add(coursebtn);
        
        label4=new JLabel(""4."");
        label4.setFont(f);
        label4.setBounds(180,320,20,50);
        c.add(label4);
        
        routinebtn=new JButton(""Routine"");
        routinebtn.setBounds(200,320,130,50);
        routinebtn.setFont(f);
        routinebtn.setCursor(cursor);
        routinebtn.setBackground(new java.awt.Color(0,230,230));
        c.add(routinebtn);
        
        label5=new JLabel(""5."");
        label5.setFont(f);
        label5.setBounds(180,380,20,50);
        c.add(label5);
        
        atndbtn=new JButton(""Attendence Percentage"");
        atndbtn.setBounds(200,380,310,50);
        atndbtn.setFont(f);
        atndbtn.setCursor(cursor);
        atndbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(atndbtn);
        
        label6=new JLabel(""6."");
        label6.setFont(f);
        label6.setBounds(180,440,20,50);
        c.add(label6);
        
        graphbtn=new JButton(""Result Graph"");
        graphbtn.setBounds(200,440,210,50);
        graphbtn.setFont(f);
        graphbtn.setCursor(cursor);
        graphbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(graphbtn);
        
        adminbtn=new JButton(""Administrator"");
        adminbtn.setBounds(100,500,200,50);
        adminbtn.setFont(f);
        adminbtn.setBackground(Color.BLACK);
        adminbtn.setForeground(Color.WHITE);
        adminbtn.setCursor(cursor);
        c.add(adminbtn);
        
        facultybtn=new JButton(""Faculty"");
        facultybtn.setBounds(500,500,150,50);
        facultybtn.setFont(f);
        facultybtn.setBackground(Color.BLACK);
        facultybtn.setForeground(Color.WHITE);
        facultybtn.setCursor(cursor);
        c.add(facultybtn);
        
        
        
        
        Border emptyBorder = BorderFactory.createEmptyBorder();
        studentbtn.setBorder(emptyBorder);
        teacherbtn.setBorder(emptyBorder);
        coursebtn.setBorder(emptyBorder);
        routinebtn.setBorder(emptyBorder);
        adminbtn.setBorder(emptyBorder);
        atndbtn.setBorder(emptyBorder);
        graphbtn.setBorder(emptyBorder);
        
        
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Home "");
        frame.setVisible(true);
        frame.add(c);
        
        
        
        graphbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
               // TeacherNameDemo teacher = new TeacherNameDemo();    
               graph1 g =new graph1();
               
        }
        
        });
        facultybtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
               TeacherNameDemo teacher = new TeacherNameDemo();    
               //graph1 g =new graph1();
               
        }
        
        });
        
        studentbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
            try {
                StudentInformation stdInfo = new StudentInformation();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        });
        
        teacherbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
            try {
                TeacherInformtion teaher = new TeacherInformtion();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        });
        adminbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                AdministratorLogin admin =new AdministratorLogin();
        }
        
        });
       atndbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                ShowA showA = new ShowA();
        }
        
        });
       
       routinebtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
            try {
                RoutineDemo routineDemo = new RoutineDemo();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        });
       
       coursebtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                sign a = new sign();
        }
        
        });
    }
 
}",1
"package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;


public class Login extends JFrame{
    
    
            Container c;
            Font F ;
            JLabel username,password;
            JTextField usernameField;
            JPasswordField passField;
            JButton submit,back,reset;
           
           String user=""Admin"";
           String pass=""1234"";
            String newpassw;
           
    Login(){
        
        
        
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        F = new Font(""Arial"",Font.BOLD,30);
        
        username = new JLabel(""Username   :"");
        username.setBounds(270, 200, 250,60);
        username.setFont(F);
        c.add(username);
        
        usernameField = new JTextField();
        usernameField.setBounds(520, 200, 400,60);
        usernameField.setFont(F);
        c.add(usernameField);
        
        password = new JLabel(""Password   :"");
        password.setBounds(270, 330, 250,60);
        password.setFont(F);
        c.add(password);
        
       
        passField = new JPasswordField();
        passField.setBounds(520, 330, 400,60);
        passField.setFont(F);
        c.add(passField);
        
        submit = new JButton(""Submit"");
        submit.setBounds(750, 440, 165, 50);
        submit.setBackground(Color.BLACK);
        submit.setForeground(Color.WHITE);
        submit.setFont(F);
        c.add(submit);
        
        back=new JButton(""Back"");
        back.setBounds(750, 520, 165, 50);
        back.setFont(F);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        reset=new JButton(""Reset"");
        reset.setBounds(450, 440, 165, 50);
        reset.setFont(F);
        reset.setBackground(Color.BLACK);
        reset.setForeground(Color.WHITE);
        c.add(reset);
        
        
        
        
       
        
        
        
        File file  = new File(""password.txt"");
        try{
        FileWriter fw = new FileWriter(file);
        fw.write(pass);
        fw.write(System.getProperty(""line.separator""));
        fw.close();
        }
        catch(Exception e){
            e.printStackTrace();
        }
         
      
 
         reset.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==reset)
            {
                String m = JOptionPane.showInputDialog(null, ""Current Password"", 
                ""Change Password"", JOptionPane.INFORMATION_MESSAGE);
                
                if(m.equals(newpassw))
                {
                     
                     File file  = new File(""password.txt"");
                     file.delete(); 
                   Changepass c = new Changepass(); 
                  // c.setVisible(true);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, ""Invalid Password"");
                }
        
            }
            }
        
        });
        
        
         back.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==back)
            {
                dispose();
                Teachers t=new Teachers();  
            }
            }
        
        });
        
        
        
        submit.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
             
       
           
      
 
            String name=usernameField.getText();
            String password= passField.getText();
             File file  = new File(""password.txt"");
            try{
           FileReader  fr = new FileReader(file);
           BufferedReader br = new BufferedReader(fr); 
          String newpassw =br.readLine();
           
          System.out.println(newpassw);
           
      }
      catch(IOException ea)
      {
          ea.printStackTrace();
      }
        
             
                if(name.equals(user) && password.equals(newpassw)){
                    JOptionPane.showMessageDialog(null,""Welcome"");
                    dispose();
                    TeacherModuleDemo te=new TeacherModuleDemo();
                }
                else{
                    JOptionPane.showMessageDialog(null,""Wrong Password"");
                    usernameField.setText("""");
                    passField.setText("""");
                }
        }
        
        });
        
        JFrame frame = new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setVisible(true);
        frame.setTitle(""Faculty"");
        frame.add(c);
        
    }
    public static void main(String[] args) {
        Login l=new Login();
    }
   
}",1
"package projectsms;



import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.text.DecimalFormat;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;


public class ShowA extends JFrame{
   Container c;
      JLabel l1,l2,l3,total,label;
      Font f;
      JTextField tf1,tf2,tf3;
      JButton b1,show,home;
      JComboBox cb1,cb2;
      private static DecimalFormat df2 = new DecimalFormat(""#.##"");
       JTable table;
     DefaultTableModel model;
      JScrollPane scroll;
      String[] coloum1 = {""Course Name"",""Course Code"",""Class Held"",""Class Attendence"",""Course Percentage""};
      
      ShowA()
      {
          
        
         c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(0,230,230));
        
        f = new Font(""Arial"",Font.BOLD,18);
        
        l1 = new JLabel(""Roll NO: "");
        l1.setBounds(10,10,80,50);
        l1.setForeground(Color.BLACK);
        l1.setFont(f);
        c.add(l1);
        
        l2 = new JLabel(""Semester  "");
        l2.setBounds(260,10,120,50);
        l2.setForeground(Color.BLACK);
        l2.setFont(f);
        c.add(l2);
        
        l3 = new JLabel(""Session  "");
        l3.setBounds(600,10,120,50);
        l3.setForeground(Color.BLACK);
        l3.setFont(f);
        c.add(l3);
        
        tf1= new JTextField();
        tf1.setBounds(90,10,150,50);
        tf1.setBackground(Color.WHITE);
        tf1.setFont(f);
        c.add(tf1);
        
         tf2= new JTextField();
        tf2.setBounds(380,10,200,50);
        tf2.setBackground(Color.WHITE);
        tf2.setFont(f);
        c.add(tf2);
        
        tf3= new JTextField();
        tf3.setBounds(725,10,200,50);
        tf3.setBackground(Color.WHITE);
        tf3.setFont(f);
        c.add(tf3);
        
        show=new JButton(""Show"");
        show.setBounds(1000,10,150,50);
        show.setFont(f);
        show.setBackground(Color.BLACK);
        show.setForeground(Color.WHITE);
        c.add(show);
        
        total = new JLabel(""Average Attendence :"");
        total.setBounds(40,640,200,50);
        total.setForeground(Color.BLACK);
        total.setFont(f);
        c.add(total);
        
        label = new JLabel(""No data"");
        label.setBounds(250,640,200,50);
        label.setForeground(Color.BLACK);
        label.setFont(f);
        c.add(label);
        
        home=new JButton(""Home"");
        home.setBounds(700,640,100,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
        
        
        JFrame frame=new JFrame();
      
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setExtendedState(MAXIMIZED_BOTH);
        frame.setVisible(true);
        frame.setTitle(""Attendence "");
        frame.add(c);
        
        home.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==home)
            {
                frame.dispose();
                Home home=new Home();  
            }
            }
        
        });
       show.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==show)
            {
                //frame.dispose();
        
        table = new JTable();
        model = new DefaultTableModel();
        
        model.setColumnIdentifiers(coloum1);
        table.setModel(model);
        table.setFont(f);
        table.setSelectionBackground(Color.BLACK);
        table.setBackground(Color.WHITE);
        table.setRowHeight(30);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(10,80,1300,450);
        c.add(scroll);
               String rollno =tf1.getText();
               String semister =tf2.getText();
               String session = tf3.getText();
               String filename = rollno+semister;
               
                if(rollno.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Roll No"");
                }
               else if(semister.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Semister"");
                }
                else if(semister.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Session"");
                }
                else{
                    File file  = new File(filename);
                    if(file.isFile()){
                        
                        
                        try{
                         FileReader  fr = new FileReader(file);
                        BufferedReader br = new BufferedReader(fr); 
           
                        Object[] lines = br.lines().toArray();
           
                       for(int i=0;i<lines.length;i++)
                      {
                           String[] row = lines[i].toString().split(""#"");
                           model.addRow(row);
                           String per = model.getValueAt(i, 4).toString();
                           double per1 =Double.parseDouble(per);
                           per1++;
                           if(i==lines.length-1){
                               double per2 =per1/i+1;
                              String parcent = df2.format(per1); 
                              String parcent2 =new Double(parcent).toString();
                              label.setText(parcent2+""%"");
                           }
                           
                          
                           
                      }
           
      }
      catch(FileNotFoundException ae)
      {
          ae.printStackTrace();
      }
                        
                    }
                    else{
                        JOptionPane.showMessageDialog(null, ""There are no file"");
                    }
                    
                }
                
               
               
                 
            }
            }
        
        });
        
      }
      public static void main(String[] args) {
        ShowA d=new ShowA();
        
    }
}",1
"
package Demo;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;


public class graph2 extends JFrame{
      Container c;
      JLabel l1,l2,l3;
      Font f;
      JTextField tf1,tf2;
      JButton b1,home;
      JComboBox cb1;
      JPanel panel;
     
    graph2()
    {
        c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(0,230,230));
        
        f = new Font(""Candara"",Font.BOLD,25);
        
         l1 = new JLabel(""Semester: "");
        l1.setBounds(100,60,200,50);
        l1.setForeground(Color.BLACK);
        l1.setFont(f);
        c.add(l1);
        
        l2 = new JLabel(""Name:  "");
        l2.setBounds(100,170,200,50);
        l2.setForeground(Color.BLACK);
        l2.setFont(f);
        c.add(l2);
        
        l3 = new JLabel(""Id:  "");
        l3.setBounds(100,260,200,50);
        l3.setForeground(Color.BLACK);
        l3.setFont(f);
        c.add(l3);
        
        tf1= new JTextField();
        tf1.setBounds(320,60,200,50);
        tf1.setBackground(Color.WHITE);
        c.add(tf1);
        
         tf2= new JTextField();
        tf2.setBounds(320, 260, 200, 50);
        tf2.setBackground(Color.WHITE);
        c.add(tf2);
        
        String student[]={""Abdullah An Noor"",""Imran Hossain"",""Mahbub Alam"",""Fazle Rabbi"",""Abrar Hossain Asif"",""Nishat Tasnim"",""Md Mynuddin"",""Al Adnan Sami"",""Shuvro Aditya"",""Gazi MoinuddinRobi"",""Tahrim Kabir"",""Azad Hossain"",""Faysal Ahammed"",""Al Shahriar Priyo"",""Rahat Uddin Azad"",""Moonmoon Das"",""Mahfuzur Rahman"",""Al Jaber Nishad"",""Saifur Rahman"",""Suvo Islam"",""Faizul Karim Pathan"",""Nadim Bhuiyan"",""Kamruzzaman Shekh"",""Akash Chandra Debnath"",""Khair Ahmad"",""Anwar Kabir"",""Nowal Binte Bashar""};
        cb1 = new JComboBox(student);
        cb1.setBounds(320, 170, 200, 50);
        cb1.setBackground(Color.WHITE);
        c.add(cb1);
        
       
          JFreeChart barChart = ChartFactory.createBarChart(
         ""Result Graph"",           
         ""Semester"",            
         ""GPA"",            
         createDataset(),          
         PlotOrientation.VERTICAL,           
         true, true, false);
         
      ChartPanel chartPanel = new ChartPanel( barChart );        
      chartPanel.setPreferredSize(new java.awt.Dimension( 400 , 300 ) ); 
      chartPanel.setBounds(600,20,500,500);
      chartPanel.setVisible(false);
      c.add(chartPanel);
       
       
        b1= new JButton(""Enter"");
        b1.setForeground(Color.WHITE);
        b1.setBackground(Color.BLACK);
        b1.setBounds(320, 330, 100, 50);
        b1.setFont(f);
        c.add(b1);
        
         home=new JButton(""Home"");
        home.setBounds(520,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        home.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==home)
            {
                dispose();
              //  HomeDemo home=new HomeDemo();  
            }
            }
        
        });
        
        
       b1.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==b1)
               {
                   chartPanel.setVisible(true);
                   
               }
            }
           
       });
       
       
        
       JFrame frame=new JFrame();
      
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setExtendedState(MAXIMIZED_BOTH);
        frame.setVisible(true);
        frame.setTitle(""CGPA graph"");
        frame.add(c);
        
    }
    
    private CategoryDataset createDataset( ) {
       String fiat = ""1st"";        
       String audi = ""2nd"";        
       String ford = ""3rd"";
       String marcity = """";
       String nissan = ""5rd"";
       String first = ""1st Semister"";        
       String second = ""2nd Semister"";        
       String third = ""3rd Semister"";        
       String fourth = ""4th Semister""; 
       String safe = ""5th Semister""; 
       DefaultCategoryDataset dataset = 
      new DefaultCategoryDataset( );  
      
       File file  = new File(""routine.txt"");
         
      try{
           FileReader  fr = new FileReader(file);
           BufferedReader br = new BufferedReader(fr); 
           
           Object[] lines = br.lines().toArray();
           
           for(int i=0;i<lines.length;i++)
           {
               String[] row = lines[i].toString().split(""#"");
               
               
           }
           
      }
      catch(Exception e)
      {
          e.printStackTrace();
      }
       
      dataset.addValue( 3.40 , marcity , first);        
      // dataset.addValue( 3.0 , fiat , userrating );        
     //  dataset.addValue( 5.0 , fiat , millage ); 
     //  dataset.addValue( 5.0 , fiat , safety );           

     // dataset.addValue( 5.0 , audi , speed );        
      //dataset.addValue( 6.0 , audi , userrating );       
      dataset.addValue( 3.52 , marcity , second );        
    //  dataset.addValue( 4.0 , audi , safety );

    //  dataset.addValue( 4.0 , ford , speed );        
    //  dataset.addValue( 3.90 , marcity , third );  //      
     // dataset.addValue( 3.0 , ford , millage );        
   //   dataset.addValue( 3.99 , marcity , fourth );    //
     // dataset.addValue( 5.0 , fiat , millage );
     
     // dataset.addValue( 5.0 , fiat , safety );     
    //  dataset.addValue( 3.99 , marcity , safe ); 

      return dataset; 
   }
   
    
    public static void main(String[] args) {
        graph2 frame = new graph2();
    }
}

",1
"
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;


public class semester1 extends JFrame{
    
     private Container c;
     private JLabel l1;
     private Font f;
     private JTable table;
     private JScrollPane scroll;
     private JButton b1,b2;
     
     private String[] cols={""Course title"",""Course Code""};
     
     private String[][] rows={
                           {""Structured Programming"",""CSE 1101""},
                           {""Structured Programming Lab"",""CSE 1102""},
                           {""Discrete Mathematics"",""CSE 1103""},
                           {""Probability and Statistics For Engineers"",""STAT 1105""},
                           {""Calculus and Analytical Geometry"",""MATH 1107""},
                           {""Soft Skill and Communications"",""GE 1109""},
                           {""Technology and Society"",""GE 1111""},
                           {""Technology and Society Lab"",""GE 1112""},
                           {""Introduction to Software Engineering"",""GE 1113""},
                           
                     
                           
     };
     
    
    semester1()
    {
        components();
    }
    
    public void components()
    {
        c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(25,45,45));
        
        f = new Font(""Candara"",Font.BOLD,18);
        
        l1 = new JLabel(""Course Details"");
        l1.setBounds(250,20,200,50);
        l1.setForeground(Color.WHITE);
        l1.setFont(f);
        c.add(l1);
        
        table = new JTable(rows,cols);
        table.setSelectionBackground(Color.YELLOW);
        table.setFont(f);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(50, 80, 700, 180);
        c.add(scroll);
        
        b1 = new JButton(""Home"");
        b1.setBounds(50, 400, 100, 50);
        b1.setBackground(new Color(25,45,45));
        b1.setForeground(Color.WHITE);
        b1.setBorderPainted(false);
        b1.setFont(f);
       
        c.add(b1);
        
        b2 = new JButton(""Back"");
        b2.setBounds(200, 400, 100, 50);
        b2.setBackground(new Color(25,45,45));
        b2.setForeground(Color.WHITE);
        b2.setFont(f);
        b2.setBorderPainted(false);
        c.add(b2);
        
        
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
        
        
        
      
        
        
        
       
        
        
    }
    public static void main(String[] args) {
        
        semester1 frame = new semester1();
       // frame.setVisible(true);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //   frame.setExtendedState(MAXIMIZED_BOTH);
    }
}",0
"
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;


public class semester2 extends JFrame {
    
    
     private Container c;
     private JLabel l1;
     private Font f;
     private JTable table;
     private JScrollPane scroll;
     private JButton b1,b2;
     
     private String[] cols={""Course title"",""Course Code""};
     
     private String[][] rows={
                           {""Data Structure"",""CSE 1201""},
                           {""Data Structure Lab"",""CSE 1102""},
                           {""Computer Organization"",""CSE 1203""},
                           {""Computer Organiztion Lab"",""CSE 1204""},
                           {""Probability and Statistics for Engineers"",""STAT 1205""},
                           {""Ordinary Differential Equations"",""MATH 1207""},
                           {""History of Emergence of Bangladesh"",""GE 1209""},
                           {""Bengali Literature"",""GE 1211""},
                           {""Object Oriented Concepts"",""SE 1213""},
                           {""Object Oriented Concepts 1 Lab"",""SE 1214""},
                           
                           
                           
     };
    semester2()
    {
        components();
    }
    
    public void components()
    {
        
         c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(25,45,45));
        
        f = new Font(""Candara"",Font.BOLD,18);
        
         l1 = new JLabel(""Course Details"");
        l1.setBounds(250,20,200,50);
        l1.setForeground(Color.WHITE);
        l1.setFont(f);
        c.add(l1);
        
        table = new JTable(rows,cols);
        table.setSelectionBackground(Color.YELLOW);
        table.setFont(f);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(50, 80, 700, 180);
        c.add(scroll);
        
        b1 = new JButton(""Home"");
        b1.setBounds(50, 400, 100, 50);
        b1.setBackground(new Color(25,45,45));
        b1.setForeground(Color.WHITE);
        b1.setBorderPainted(false);
        b1.setFont(f);
       
        c.add(b1);
        
        b2 = new JButton(""Back"");
        b2.setBounds(200, 400, 100, 50);
        b2.setBackground(new Color(25,45,45));
        b2.setForeground(Color.WHITE);
        b2.setFont(f);
        b2.setBorderPainted(false);
        c.add(b2);
         setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
    }
    public static void main(String[] args) {
        
        semester2 frame = new semester2();
       // frame.setVisible(true);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //   frame.setExtendedState(MAXIMIZED_BOTH);
    }
    
}",0
"
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;


public class semester3 extends JFrame {
    
     private Container c;
     private JLabel l1;
     private Font f;
     private JTable table;
     private JScrollPane scroll;
     private JButton b1,b2;
     
     private String[] cols={""Course title"",""Course Code""};
     
     private String[][] rows={
                           {""Algorithm Analysis"",""CSE 2101""},
                           {""Algorithm Analysis Lab"",""CSE 2102""},
                           {""Theory of Computation"",""SE 2103""},
                           {""Theory of Computation  Lab"",""SE 2104""},
                           {""Computer Networks"",""CSE 2105""},
                           {""Computer Networks Lab"",""CSE 2106""},
                           {""Numerical Analysis for Engineers"",""MATH 2107""},
                           {""Numerical Analysis for Engineers Lab"",""MATH 2108""},
                           {""Object Oriented Concepts 2"",""SE 2109""},
                           {""Object Oriented Concepts 2 Lab"",""SE 2110""},
                           {""Softwarer Project Lab"",""SE 2112""},
                           
                           
                           
     };
    
    
    semester3()
    {
        components();
    }
    
    public void components()
    {
         c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(25,45,45));
        
        f = new Font(""Candara"",Font.BOLD,18);
        
        l1 = new JLabel(""Course Details"");
        l1.setBounds(250,20,200,50);
        l1.setForeground(Color.WHITE);
        l1.setFont(f);
        c.add(l1);
        
        table = new JTable(rows,cols);
        table.setSelectionBackground(Color.YELLOW);
        table.setFont(f);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(50, 80, 700, 180);
        c.add(scroll);
        
        b1 = new JButton(""Home"");
        b1.setBounds(50, 400, 100, 50);
        b1.setBackground(new Color(25,45,45));
        b1.setForeground(Color.WHITE);
        b1.setBorderPainted(false);
        b1.setFont(f);
       
        c.add(b1);
        
        b2 = new JButton(""Back"");
        b2.setBounds(200, 400, 100, 50);
        b2.setBackground(new Color(25,45,45));
        b2.setForeground(Color.WHITE);
        b2.setFont(f);
        b2.setBorderPainted(false);
        c.add(b2);
       setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
    }
    public static void main(String[] args) {
        
        semester3 frame = new semester3();
       // frame.setVisible(true);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //   frame.setExtendedState(MAXIMIZED_BOTH);
        
    }
    
}",0
"
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;


public class semester4 extends JFrame{
    
     private Container c;
     private JLabel l1;
     private Font f;
     private JTable table;
     private JScrollPane scroll;
     private JButton b1,b2;
     
     private String[] cols={""Course title"",""Course Code""};
     
     private String[][] rows={
                           {""Operating Systems and System Programming"",""CSE 2201""},
                           {""Operating Systems and Lab"",""CSE 2202""},
                           {""Business Psychology"",""GE 2203""},
                           {""Information Security"",""CSE 2205""},
                           {""Information Security Lab"",""CSE 2206""},
                           {""Database Management System 1"",""CSE 2207""},
                           {""Database Management System 1 Lab"",""CSE 2208""},
                           {""Software Requirement  Specifications and Analysis "",""SE 2209""},
                           {""Software Requirement  Specifications and Analysis Lab"",""SE 2210""},
                           {""Object Oriented Concepts 2 Lab"",""BUS 2211""},
                          
                           
                           
                           
     };
    semester4()
    {
        
        components();
    }
    
    public void components()
    {
         c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(25,45,45));
        
        f = new Font(""Candara"",Font.BOLD,18);
        
        l1 = new JLabel(""Course Details"");
        l1.setBounds(250,20,200,50);
        l1.setForeground(Color.WHITE);
        l1.setFont(f);
        c.add(l1);
        
        table = new JTable(rows,cols);
        table.setSelectionBackground(Color.YELLOW);
        table.setFont(f);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(50, 80, 700, 180);
        c.add(scroll);
        
        b1 = new JButton(""Home"");
        b1.setBounds(50, 400, 100, 50);
        b1.setBackground(new Color(25,45,45));
        b1.setForeground(Color.WHITE);
        b1.setBorderPainted(false);
        b1.setFont(f);
       
        c.add(b1);
        
        b2 = new JButton(""Back"");
        b2.setBounds(200, 400, 100, 50);
        b2.setBackground(new Color(25,45,45));
        b2.setForeground(Color.WHITE);
        b2.setFont(f);
        b2.setBorderPainted(false);
        c.add(b2);
        
      setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
    }
    public static void main(String[] args) {
        
      semester4 frame = new semester4();
     // frame.setVisible(true);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //   frame.setExtendedState(MAXIMIZED_BOTH);
    }

    
}",0
"
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;


public class semester5 extends JFrame {
     private Container c;
     private JLabel l1;
     private Font f;
     private JTable table;
     private JScrollPane scroll;
     private JButton b1,b2;
     
     private String[] cols={""Course title"",""Course Code""};
     
     private String[][] rows={
                           {""Professional Ethics for Information System"",""SE 3101""},
                           {""Web Technology"",""CSE 3103""},
                           {""Web Technology Lab"",""GE 3104""},
                           {""Data Science and Analytics"",""CSE 3105""},
                           {""Data Science and Analytics Lab"",""CSE 3106""},
                           {""Business Communication"",""BUS 3107""},
                           {""Business Communication Lab"",""BUS 3108""},
                           {""Design Pattern "",""SE 3109""},
                           {""Design Pattern Lab"",""SE 3110""},
                           {""Software Project Lab 2"",""SE 3112""},
                          
                           
                           
                           
     };
    semester5()
    {
        components();
    }
    
    public void components()
    {
          c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(25,45,45));
        
        f = new Font(""Candara"",Font.BOLD,18);
        
        l1 = new JLabel(""Course Details"");
        l1.setBounds(250,20,200,50);
        l1.setForeground(Color.WHITE);
        l1.setFont(f);
        c.add(l1);
        
        table = new JTable(rows,cols);
        table.setSelectionBackground(Color.YELLOW);
        table.setFont(f);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(50, 80, 700, 180);
        c.add(scroll);
        
        b1 = new JButton(""Home"");
        b1.setBounds(50, 400, 100, 50);
        b1.setBackground(new Color(25,45,45));
        b1.setForeground(Color.WHITE);
        b1.setBorderPainted(false);
        b1.setFont(f);
       
        c.add(b1);
        
        b2 = new JButton(""Back"");
        b2.setBounds(200, 400, 100, 50);
        b2.setBackground(new Color(25,45,45));
        b2.setForeground(Color.WHITE);
        b2.setFont(f);
        b2.setBorderPainted(false);
        c.add(b2);
        
      setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
    }
    public static void main(String[] args) {
        
        semester5 frame = new semester5();
       // frame.setVisible(true);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //   frame.setExtendedState(MAXIMIZED_BOTH);
    }
    
}",0
"
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;


public class semester6  extends JFrame{
      private Container c;
     private JLabel l1;
     private Font f;
     private JTable table;
     private JScrollPane scroll;
     private JButton b1,b2;
     
     private String[] cols={""Course title"",""Course Code""};
     
     private String[][] rows={
                           {""Distributed Systems "",""CSE 3201""},
                           {""Distributed Systems Lab"",""CSE 3202""},
                           {""Software Metrics"",""SE 3203""},
                           {""Software Metrics Lab"",""SE 3204""},
                           {""Software Security"",""CSE 3205""},
                           {""Software Security Lab"",""CSE 3206""},
                           {""Artificial Intelligence"",""CSE 3207""},
                           {""Artificial Intelligence Lab "",""CSE 3208""},
                           {""Software Testing and Quality Assurance"",""SE3209""},
                           {""Software Testing and Quality Assurance Lab"",""SE 3210""},
                           {""Software Design and Architecture"",""SE3211""},
                           {""Software Design and Architecture Lab"",""SE3212""},
                           
                          
                           
                           
                           
     };
     
     semester6()
     {
         components();
     }
     
     public void components()
     {
        c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(25,45,45));
        
        f = new Font(""Candara"",Font.BOLD,18);
        
         l1 = new JLabel(""Course Details"");
        l1.setBounds(250,20,200,50);
        l1.setForeground(Color.WHITE);
        l1.setFont(f);
        c.add(l1);
        
        table = new JTable(rows,cols);
        table.setSelectionBackground(Color.YELLOW);
        table.setFont(f);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(50, 80, 700, 180);
        c.add(scroll);
        
        b1 = new JButton(""Home"");
        b1.setBounds(50, 400, 100, 50);
        b1.setBackground(new Color(25,45,45));
        b1.setForeground(Color.WHITE);
        b1.setBorderPainted(false);
        b1.setFont(f);
       
        c.add(b1);
        
        b2 = new JButton(""Back"");
        b2.setBounds(200, 400, 100, 50);
        b2.setBackground(new Color(25,45,45));
        b2.setForeground(Color.WHITE);
        b2.setFont(f);
        b2.setBorderPainted(false);
        c.add(b2);
        
         setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
    }
    public static void main(String[] args) {
        
        semester1 frame = new semester1();
       // frame.setVisible(true);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //   frame.setExtendedState(MAXIMIZED_BOTH);
    }
    
}",0
"
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;


public class semester7 extends JFrame {
    
     private Container c;
     private JLabel l1;
     private Font f;
     private JTable table;
     private JScrollPane scroll;
     private JButton b1,b2;
     
     private String[] cols={""Course title"",""Course Code""};
     
     private String[][] rows={
                           {""Internship"",""CSE 4100""},
                         
                           
                           
                           
     };
    
    semester7()
    {
        components();
    }
    public void components()
    {
         c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(25,45,45));
        
        f = new Font(""Candara"",Font.BOLD,18);
        
        l1 = new JLabel(""Course Details"");
        l1.setBounds(250,20,200,50);
        l1.setForeground(Color.WHITE);
        l1.setFont(f);
        c.add(l1);
        
        table = new JTable(rows,cols);
        table.setSelectionBackground(Color.YELLOW);
        table.setFont(f);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(50, 80, 700, 180);
        c.add(scroll);
        
        b1 = new JButton(""Home"");
        b1.setBounds(50, 400, 100, 50);
        b1.setBackground(new Color(25,45,45));
        b1.setForeground(Color.WHITE);
        b1.setBorderPainted(false);
        b1.setFont(f);
       
        c.add(b1);
        
        b2 = new JButton(""Back"");
        b2.setBounds(200, 400, 100, 50);
        b2.setBackground(new Color(25,45,45));
        b2.setForeground(Color.WHITE);
        b2.setFont(f);
        b2.setBorderPainted(false);
        c.add(b2);
       setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
      setExtendedState(MAXIMIZED_BOTH);
    }
    public static void main(String[] args) {
        
        semester7 frame = new semester7();
       // frame.setVisible(true);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //   frame.setExtendedState(MAXIMIZED_BOTH);
        
    }
    
}",0
"
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;


public class semester8 extends JFrame{
    
     private Container c;
     private JLabel l1;
     private Font f;
     private JTable table;
     private JScrollPane scroll;
     private JButton b1,b2;
     
     private String[] cols={""Course title"",""Course Code""};
     
     private String[][] rows={
                           {""Project"",""SE 4202""},
                           {""Software Maintainance"",""SE 4203""},
                           {""Software Maintainance Lab"",""SE 4204""},
                           {""Software Project Management"",""SE 4205""},
                           {""Software Project Management Lab"",""SE 4206""},
                           {""Elective"",""SE/CSE 42XX""},                         
                           {""Elective"",""SE/CSE 42XX""},
                          
                          
                           
                           
                           
     };
    semester8()
    {
        components();
        
    }
    
    public void components()
    {
          c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(25,45,45));
        
        f = new Font(""Candara"",Font.BOLD,18);
        
        l1 = new JLabel(""Course Details"");
        l1.setBounds(250,20,200,50);
        l1.setForeground(Color.WHITE);
        l1.setFont(f);
        c.add(l1);
        
        
        table = new JTable(rows,cols);
        table.setSelectionBackground(Color.YELLOW);
        table.setFont(f);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(50, 80, 700, 180);
        c.add(scroll);
        
        b1 = new JButton(""Home"");
        b1.setBounds(50, 400, 100, 50);
        b1.setBackground(new Color(25,45,45));
        b1.setForeground(Color.WHITE);
        b1.setBorderPainted(false);
        b1.setFont(f);
        
        
       
        c.add(b1);
        
        b2 = new JButton(""Back"");
        b2.setBounds(200, 400, 100, 50);
        b2.setBackground(new Color(25,45,45));
        b2.setForeground(Color.WHITE);
        b2.setFont(f);
        b2.setBorderPainted(false);
        c.add(b2);
        
       setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
    }
    public static void main(String[] args) {
        
        semester8 frame = new semester8();
       // frame.setVisible(true);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //   frame.setExtendedState(MAXIMIZED_BOTH);
    }
    
}",0
"
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;


public class sign extends JFrame implements ActionListener{
    
    private Container c;
    private Font f;
    private JLabel l1;
    private JButton b1,b2,b3,b4,b5,b6,b7,b8;
    
    sign()
    {
        components();
    }
    
    public void components()
    {
          c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(25,45,45));
        
        f = new Font(""Candara"",Font.BOLD,18);
        
        l1 = new JLabel(""Course Plan"");
        l1.setBounds(250,20,200,50);
        l1.setForeground(Color.WHITE);
        l1.setFont(f);
        c.add(l1);
        
        
        b1 = new JButton(""1st Semester"");
        b1.setBounds(220,70, 150, 50);
        b1.setBackground(new Color(25,45,45));
        b1.setForeground(Color.WHITE);
        b1.setBorderPainted(false);
        b1.setFont(f);
        c.add(b1);
        b1.addActionListener(this);
        
        
        b2 = new JButton(""2nd Semester"");
        b2.setBounds(220,120, 150, 50);
        b2.setBackground(new Color(25,45,45));
        b2.setForeground(Color.WHITE);
        b2.setBorderPainted(false);
        b2.setFont(f);
        c.add(b2);
        b2.addActionListener(this);
        
        b3 = new JButton(""3rd Semester"");
        b3.setBounds(220,170, 150, 50);
        b3.setBackground(new Color(25,45,45));
        b3.setForeground(Color.WHITE);
        b3.setBorderPainted(false);
        b3.setFont(f);
        c.add(b3);
        b3.addActionListener(this);
        
        b4 = new JButton(""4th Semester"");
        b4.setBounds(220,220, 150, 50);
        b4.setBackground(new Color(25,45,45));
        b4.setForeground(Color.WHITE);
        b4.setBorderPainted(false);
        b4.setFont(f);
        c.add(b4);
        b4.addActionListener(this);
        
        b5 = new JButton(""5th Semester"");
        b5.setBounds(220,270, 150, 50);
        b5.setBackground(new Color(25,45,45));
        b5.setForeground(Color.WHITE);
        b5.setBorderPainted(false);
        b5.setFont(f);
        c.add(b5);
        b5.addActionListener(this);
        
        b6 = new JButton(""6th Semester"");
        b6.setBounds(220,320, 150, 50);
        b6.setBackground(new Color(25,45,45));
        b6.setForeground(Color.WHITE);
        b6.setBorderPainted(false);
        b6.setFont(f);
        c.add(b6);
        b6.addActionListener(this);
        
        
        b7 = new JButton(""7th Semester"");
        b7.setBounds(220,370, 150, 50);
        b7.setBackground(new Color(25,45,45));
        b7.setForeground(Color.WHITE);
        b7.setBorderPainted(false);
        b7.setFont(f);
        c.add(b7);
        b7.addActionListener(this);
        
        b8 = new JButton(""8th Semester"");
        b8.setBounds(220,420, 150, 50);
        b8.setBackground(new Color(25,45,45));
        b8.setForeground(Color.WHITE);
        b8.setBorderPainted(false);
        b8.setFont(f);
        c.add(b8);
        b8.addActionListener(this);
        
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource()==b1)
        {
            semester1 s1=new semester1();
            s1.setVisible(true);
            this.dispose();
        }      
             if(e.getSource()==b2)
        {
            semester2 s2=new semester2();
            s2.setVisible(true);
            this.dispose();
            
        }
              if(e.getSource()==b3)
        {
            semester3 s3=new semester3();
            s3.setVisible(true);
            this.dispose();
        }   
           if(e.getSource()==b4)
        {
            semester4 s4=new semester4();
            s4.setVisible(true);
            this.dispose();
        }       
           
            if(e.getSource()==b5)
        {
            semester5 s5=new semester5();
            s5.setVisible(true);
            this.dispose();
        }   
            
             if(e.getSource()==b6)
        {
            semester6 s6=new semester6();
            s6.setVisible(true);
            this.dispose();
        }   
             
              if(e.getSource()==b7)
        {
            semester7 s7=new semester7();
            s7.setVisible(true);
            this.dispose();
        }   
              
               if(e.getSource()==b8)
        {
            semester8 s8=new semester8();
            s8.setVisible(true);
            this.dispose();
        }   
               
                if(e.getSource()==b3)
        {
            semester3 s3=new semester3();
            s3.setVisible(true);
            this.dispose();
        }   
    
 }
    public static void main(String[] args) {
       sign frame = new sign();
       frame.setVisible(true);
       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      
       frame.setExtendedState(MAXIMIZED_BOTH);
        
    }

 
}",1
"import java.util.List;
import java.util.Scanner;

public class BusSimulation {
    int row = 20;
    int col = 100;
    char[][] board_box = new char[row][col];
    int stopage_size, distance_size;

    public static void main(String[] args) {
        Scanner get_input = new Scanner(System.in);
        BusSimulation bus_obj = new BusSimulation();
        Board b_obj = new Board();
        Stopage s_obj = new Stopage();
        Distance dist_obj = new Distance();
        b_obj.initialize_board(bus_obj);
        b_obj.print_board(bus_obj);
        Stopage[] stopageArray = s_obj.getStopage(bus_obj);
        System.out.print(""\nAll stopage symbol:"");
        for (Stopage stopage : stopageArray) {
            System.out.print("" "" + stopage.pos_symbol);
        }
        System.out.print(""\n\n"");
        b_obj.print_board(bus_obj);
        Distance[] dist_arr = dist_obj.get_dist(bus_obj);
        BellmanFord graph = new BellmanFord(bus_obj.stopage_size, bus_obj.distance_size);
        for (Distance distance : dist_arr) {
            graph.addEdge(distance.Start, distance.End, distance.Weight);
        }
        char source, destination;
        System.out.print(""Enter Source Node:"");
        source = get_input.nextLine().charAt(0);
        System.out.print(""Enter Destination Node: "");
        destination = get_input.nextLine().charAt(0);
        List<Character> shortestPath = graph.shortestPath(source, destination);
        System.out.println(""\nShortest path from "" + source + "" to "" + destination + "": "");

        for (int i = 0; i < shortestPath.size(); i++) {
            System.out.print(shortestPath.get(i));
            if (i < shortestPath.size() - 1) {
                System.out.print("" -> "");
            }
        }        
        
        System.out.println();

        markPath(bus_obj, shortestPath, source, destination);
        b_obj.print_board(bus_obj);
    }

    public static void markPath(BusSimulation busSimulation, List<Character> path, char source, char destination) {
        char[][] board = busSimulation.board_box;
        int[] sourceLoc = busSimulation.getLoc(source);
        for (int i = 1; i < path.size(); i++) {
            int[] mid = busSimulation.getLoc(path.get(i));
            if (!is_stopage(board[sourceLoc[0]][sourceLoc[1]])) {
                board[sourceLoc[0]][sourceLoc[1]] = '*';
            }
            
            if (sourceLoc[0] > mid[0]) {
                while (sourceLoc[0] != mid[0]) {
                    if (!is_stopage(board[sourceLoc[0]][sourceLoc[1]])) {
                        board[sourceLoc[0]][sourceLoc[1]] = '*';
                    }
                    sourceLoc[0]--;
                }
                if (sourceLoc[1] > mid[1]) {
                    while (sourceLoc[1] != mid[1]) {
                        if (!is_stopage(board[sourceLoc[0]][sourceLoc[1]])) {
                            board[sourceLoc[0]][sourceLoc[1]] = '*';
                        }
                        sourceLoc[1]--;
                    }
                } else {
                    while (sourceLoc[1] != mid[1]) {
                        if (!is_stopage(board[sourceLoc[0]][sourceLoc[1]])) {
                            board[sourceLoc[0]][sourceLoc[1]] = '*';
                        }
                        sourceLoc[1]++;
                    }
                }
            }
            else if (sourceLoc[0] < mid[0]) {
                while (sourceLoc[0] != mid[0]) {
                    if (!is_stopage(board[sourceLoc[0]][sourceLoc[1]])) {
                        board[sourceLoc[0]][sourceLoc[1]] = '*';
                    }
                    sourceLoc[0]++;
                }
                if (sourceLoc[1] > mid[1]) {
                    while (sourceLoc[1] != mid[1]) {
                        if (!is_stopage(board[sourceLoc[0]][sourceLoc[1]])) {
                            board[sourceLoc[0]][sourceLoc[1]] = '*';
                        }
                        sourceLoc[1]--;
                    }
                } else {
                    while (sourceLoc[1] != mid[1]) {
                        if (!is_stopage(board[sourceLoc[0]][sourceLoc[1]])) {
                            board[sourceLoc[0]][sourceLoc[1]] = '*';
                        }
                        sourceLoc[1]++;
                    }
                }
            }
            else{
                while (sourceLoc[0] != mid[0]) {
                    if (!is_stopage(board[sourceLoc[0]][sourceLoc[1]])) {
                        board[sourceLoc[0]][sourceLoc[1]] = '*';
                    }
                    sourceLoc[0]++;
                }
                if (sourceLoc[1] > mid[1]) {
                    while (sourceLoc[1] != mid[1]) {
                        if (!is_stopage(board[sourceLoc[0]][sourceLoc[1]])) {
                            board[sourceLoc[0]][sourceLoc[1]] = '*';
                        }
                        sourceLoc[1]--;
                    }
                } else {
                    while (sourceLoc[1] != mid[1]) {
                        if (!is_stopage(board[sourceLoc[0]][sourceLoc[1]])) {
                            board[sourceLoc[0]][sourceLoc[1]] = '*';
                        }
                        sourceLoc[1]++;
                    }
                }
            }
        }
    }
    
    public int[] getLoc(char ch){
        int[] loc = new int[2];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board_box[i][j] == ch) {
                    loc[0]=i;
                    loc[1]=j;
                    break;
                }
            }
        }
        return loc;
    }
    public static boolean is_stopage(char c) {
        return c != ' ';
    }
}",0
"
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Scanner;

public class AESDecrypt {
    static int[][] state=new int[4][4];

     int[] w;
     AESDecrypt(int[] w){
       this.w=w;
     }

     int[] rsBox = new int[] {
            0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
            0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
            0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
            0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
            0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
    

    public byte[] dec(byte[] text) {
        byte[] out = new byte[text.length];
        
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[j][i] = text[i * 4 + j] & 0xff;
            }
        }

        state = decipher(state);
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                out[i * 4 + j] = (byte) (state[j][i] & 0xff);
            }
        }
        return out;

    }
    public int[][] decipher(int[][] s) {
        s = addRoundKey(s, 10);
        for (int i = 9; i > 0; i--) {
            s = invShiftRows(s);
            s = invSubBytes(s);
            s = addRoundKey(s, i);
            s = invMixColumnas(s);
        }
        s = invShiftRows(s);
        s = invSubBytes(s);
        s = addRoundKey(s, 0);
        return s;
    }
    
    public int[][] addRoundKey(int[][] s, int r) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                s[j][i] = s[j][i] ^ ((w[r * 4 + i] << (r * 8)) >>> 24);
            }
        }
        return s;
    }
    
    public int invSubWord(int word) {
        int subWord = 0;
        for (int i = 24; i >= 0; i -= 8) {
            int in = word << i >>> 24;
            subWord |= rsBox[in] << (24 - i);
        }
        return subWord;
    }
    
    public int[][] invSubBytes(int[][] state) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[i][j] = invSubWord(state[i][j]) & 0xFF;
            }
        }
        return state;
    }

    public int[][] invMixColumnas(int[][] state) {
        int temp0, temp1, temp2, temp3;
        for (int c = 0; c < 4; c++) {
            temp0 = mult(0x0e, state[0][c]) ^ mult(0x0b, state[1][c]) ^ mult(0x0d, state[2][c])
                    ^ mult(0x09, state[3][c]);
            temp1 = mult(0x09, state[0][c]) ^ mult(0x0e, state[1][c]) ^ mult(0x0b, state[2][c])
                    ^ mult(0x0d, state[3][c]);
            temp2 = mult(0x0d, state[0][c]) ^ mult(0x09, state[1][c]) ^ mult(0x0e, state[2][c])
                    ^ mult(0x0b, state[3][c]);
            temp3 = mult(0x0b, state[0][c]) ^ mult(0x0d, state[1][c]) ^ mult(0x09, state[2][c])
                    ^ mult(0x0e, state[3][c]);

            state[0][c] = temp0;
            state[1][c] = temp1;
            state[2][c] = temp2;
            state[3][c] = temp3;
        }
        return state;
    }
    
    public static int mult(int a, int b) {
        int sum =AESEncrypt.mult(a, b);
        return sum;
    }
    
    public static int[][] invShiftRows(int[][] state) {
        int temp1, temp2, temp3, i;

        temp1 = state[1][3];
        for (i = 3; i > 0; i--) {
            state[1][i] = state[1][(i - 1) % 4];
        }
        state[1][0] = temp1;

        temp1 = state[2][3];
        temp2 = state[2][2];
        for (i = 3; i > 1; i--) {
            state[2][i] = state[2][(i - 2) % 4];
        }
        state[2][1] = temp1;
        state[2][0] = temp2;

        temp1 = state[3][1];
        temp2 = state[3][2];
        temp3 = state[3][3];
        state[3][3] = state[3][0];

        state[3][0] = temp1;
        state[3][1] = temp2;
        state[3][2] = temp3;

        return state;
    }

    public  void decrypt() {
        try {
            Scanner sc = new Scanner(System.in);
            System.out.print(""Enter the file path to read encrypted data: "");
            String filePath = sc.nextLine();

            InputStream in = new FileInputStream(filePath);
            System.out.print(""Enter the file path to write decrypted data: "");
            filePath = sc.nextLine();

            OutputStream out = new FileOutputStream(filePath);

            byte[] plain;
            byte[] cipher = new byte[16];
            while (in.read(cipher) != -1) {
                plain = dec(cipher);
                out.write(plain);
            }

            plain = dec(cipher);
            out.write(plain, 0, 16 - plain[15]);
            in.close();
            out.close();
            System.out.println(""\nDecryption Successful\n"");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.out.println(""File Not Found"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}",0
"
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Scanner;

public class AESEncrypt {

     int[][] state =new int[4][4];
     int[] w;
    AESEncrypt(int[] w){
        this.w=w;
    }

     int[] sBox = new int[] {
          
          0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
          0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
          0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
          0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
          0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
          0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
          0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
          0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
          0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
          0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
          0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
          0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
          0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
          0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
          0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
          0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
    
     int[][] cipher(int[][] s) {
        s = addRoundKey(s, 0);
        for (int i = 1; i < 10; i++) {
            s = subBytes(s);
            s = shiftRows(s);
            s = mixColumns(s);
            s = addRoundKey(s, i);
        }
        s = subBytes(s);
        s = shiftRows(s);
        s = addRoundKey(s, 10);
        return s;
    }

      int[][] addRoundKey(int[][] s, int r) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                s[j][i] = s[j][i] ^ ((w[r * 4 + i] << (r * 8)) >>> 24);
            }

        }
        return s;
    }
    
     int[][] subBytes(int[][] state) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[i][j] = subWord(state[i][j]) & 0xFF;
            }
        }
        return state;
    }
    
     int subWord(int word) {
        int subWord = 0;
        for (int i = 24; i >= 0; i -= 8) {
            int in = word << i >>> 24;
            subWord |= sBox[in] << (24 - i);
        }
        return subWord;
    }
     int[][] shiftRows(int[][] state) {
        int temp1, temp2, temp3, i;

        temp1 = state[1][0];
        for (i = 0; i < 3; i++) {
            state[1][i] = state[1][(i + 1) % 4];
        }
        state[1][3] = temp1;

        temp1 = state[2][0];
        temp2 = state[2][1];
        for (i = 0; i < 2; i++) {
            state[2][i] = state[2][(i + 2) % 4];
        }
        state[2][2] = temp1;
        state[2][3] = temp2;

        temp1 = state[3][0];
        temp2 = state[3][1];
        temp3 = state[3][2];

        state[3][0] = state[3][3];
        state[3][1] = temp1;
        state[3][2] = temp2;
        state[3][3] = temp3;

        return state;
    }
     int[][] mixColumns(int[][] state) {
        int temp0, temp1, temp2, temp3;
        for (int c = 0; c < 4; c++) {

            temp0 = mult(0x02, state[0][c]) ^ mult(0x03, state[1][c]) ^ state[2][c] ^ state[3][c];
            temp1 = state[0][c] ^ mult(0x02, state[1][c]) ^ mult(0x03, state[2][c]) ^ state[3][c];
            temp2 = state[0][c] ^ state[1][c] ^ mult(0x02, state[2][c]) ^ mult(0x03, state[3][c]);
            temp3 = mult(0x03, state[0][c]) ^ state[1][c] ^ state[2][c] ^ mult(0x02, state[3][c]);

            state[0][c] = temp0;
            state[1][c] = temp1;
            state[2][c] = temp2;
            state[3][c] = temp3;
        }

        return state;
    }
    
    static int mult(int a, int b) {
        int sum = 0;
        while (a != 0) {
            if ((a & 1) != 0) {
                sum = sum ^ b;
            }
            b = xtime(b);
            a = a >>> 1;
        }
        return sum;

    }
    
    static int xtime(int b) {
        if ((b & 0x80) == 0) {
            return b << 1;
        }
        return (b << 1) ^ 0x11b;
    }
     byte[] enc(byte[] text) {

        byte[] out = new byte[text.length];
        
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[j][i] = text[i * 4 + j] & 0xff;
            }
        }

        state = cipher(state);
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                out[i * 4 + j] = (byte) (state[j][i] & 0xff);
            }
        }
        return out;
    }
    public  void encrypt() {
        try {
            Scanner sc = new Scanner(System.in);
            System.out.print(""Enter the file path to read data: "");
            String filePath = sc.nextLine();

            InputStream in = new FileInputStream(filePath);
            System.out.print(""Enter the file path to write encrypted data: "");
            filePath = sc.nextLine();

            OutputStream out = new FileOutputStream(filePath + "".enc"");

            int length;

            byte[] plain = new byte[16];
            byte[] cipher;
            state =new int[4][4];

            while ((length = in.read(plain)) == 16) {
                cipher = enc(plain);
                out.write(cipher);
            }
            if (length == -1)
                length = 0;

            for (int i = length; i < 16; i++)
                plain[i] = (byte) (16 - length);
            cipher = enc(plain);
            out.write(cipher);
            in.close();
            out.close();
            System.out.println(""\nEncryption Successful\n"");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.out.println(""File Not Found"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",1
"import java.io.*;
import java.math.BigInteger;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;
public class Client {
    RSAKeyGen keyGenerator = new RSAKeyGen(1024);
    BigInteger publicKey = keyGenerator.getPublicKey();
    BigInteger privateKey = keyGenerator.getPrivateKey();
    BigInteger modulus = keyGenerator.getModulus();
    private Socket socket;
    private BufferedReader bufferedReader;
    private BufferedWriter bufferedWriter;
    private String username;

    private String filename1 = ""encryptedMessages.txt"";

    public Client(Socket socket, String  username) {
        try {
            this.socket = socket;
            this.bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            this.bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            this.username = username;
        } catch (IOException e) {
            closeEverything(socket, bufferedReader, bufferedWriter);
        }
    }
    public void sendMessage() {
        try {
            bufferedWriter.write(username);
            bufferedWriter.newLine();
            bufferedWriter.flush();

            Scanner scanner = new Scanner(System.in);
            while (socket.isConnected()) {
                String messageToSend = scanner.nextLine();
                if (messageToSend.startsWith(""@file"")) {
                    int spaceIndex = messageToSend.indexOf("" "");
                    String recipientUsername = messageToSend.substring(spaceIndex + 1);
                    System.out.print(""Enter file path: "");
                    String filePath = scanner.nextLine();
                    sendFile(recipientUsername, filePath);
                }
                else if (messageToSend.startsWith(""@"")) {
                    // Private message
                    BigInteger message = new BigInteger(messageToSend.getBytes());
                    BigInteger encryptedMessage = EncryptionDecryption.encrypt(message, publicKey, modulus);
                    BigInteger decryptedMessage = EncryptionDecryption.decrypt(encryptedMessage, privateKey, modulus);
                    bufferedWriter.write(new String(decryptedMessage.toByteArray())); //send message to the server
                    try {
                        FileWriter writer = new FileWriter(filename1, true);
                        writer.write(""encryptedMessage:""+encryptedMessage.toString());
                        writer.write(System.lineSeparator());
                        writer.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                else {
                    // Normal message
                    BigInteger message = new BigInteger(messageToSend.getBytes());
                    BigInteger encryptedMessage = EncryptionDecryption.encrypt(message, publicKey, modulus);
                    BigInteger decryptedMessage = EncryptionDecryption.decrypt(encryptedMessage, privateKey, modulus);
                    bufferedWriter.write(username + "": "" + new String(decryptedMessage.toByteArray()));

                    try {
                        FileWriter writer = new FileWriter(filename1, true);
                        writer.write(""encryptedMessage:""+encryptedMessage.toString());
                        writer.write(System.lineSeparator());
                        writer.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                bufferedWriter.newLine();
                bufferedWriter.flush();
            }
        } catch (IOException e) {
            closeEverything(socket, bufferedReader, bufferedWriter);
        }
    }
    public void listenMessage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                String msgFromgrpchat;

                while(socket.isConnected()) {
                    try {
                        msgFromgrpchat = bufferedReader.readLine();
                        System.out.println(msgFromgrpchat);
                    } catch (IOException e) {
                        closeEverything(socket, bufferedReader, bufferedWriter);
                    }
                }
            }
        }).start();
    }
    public void sendFile(String recipientUsername, String filePath) {
        try {
            Path path = Paths.get(filePath);
            byte[] fileBytes = Files.readAllBytes(path);
            String fileName = path.getFileName().toString();


            bufferedWriter.write(""@file "" + recipientUsername + "" "" + fileName);
            bufferedWriter.newLine();
            bufferedWriter.flush();


            bufferedWriter.write(new String(fileBytes));
            bufferedWriter.newLine();
            bufferedWriter.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void closeEverything(Socket socket, BufferedReader bufferedReader, BufferedWriter bufferedWriter) {
        try {
            if(bufferedReader != null) {
                bufferedReader.close();
            }
            if(bufferedWriter != null) {
                bufferedWriter.close();
            }
            if(socket != null) {
                socket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static void main(String[] args) throws IOException {
        Authentication auth = new Authentication();

        Scanner scanner = new Scanner(System.in);

        System.out.println(""1. Registration"");
        System.out.println(""2. Login\n"");

        System.out.print(""Enter Your Choice: "");
        int choice = scanner.nextInt();
        String username, password,tmp;

        boolean token = false;

        switch(choice) {
            case 1: {
                System.out.print(""Enter Your Username: "");
                username = scanner.next();

                System.out.print(""Enter Your Password: "");
                password = scanner.next();

                if (password.indexOf(' ') == -1) {
                    token = auth.handleRegistration(username, password);
                } else {
                    System.out.println(""Password Should Not Contain Any Space"");
                    token = false;
                }

                break;
            }
            case 2: {
                System.out.print(""Enter Your Username: "");
                username = scanner.next();

                System.out.print(""Enter Your Password: "");
                password = scanner.next();

                if (password.indexOf(' ') == -1) {
                    token = auth.handleLogin(username, password);
                } else {
                    System.out.println(""Password Should Not Contain Any Space"");
                    token = false;
                }

                break;
            }
            default: {
                username = """";
                System.out.println(""Invalid Choice"");
            }
        }

        if (token) {
            Socket socket = new Socket(""192.168.132.28"", 1234);
            Client client = new Client(socket, username);
            client.listenMessage();
            client.sendMessage();
        }
    }


}",1
"import java.util.ArrayList;

import java.util.HashMap;

import java.util.LinkedList;

import java.util.Queue;

import java.util.Scanner;

public class AdventureModel 
{

    public Room rooms[];

    public Thing things[];

    public Wall walls[];
    
    public Water waters[];
    int treasureVaultIndex;

    

    public void initGame() {
        things = new Thing[8];
        walls = new Wall[4];
        waters = new Water[10];
        rooms = new Room[16];

        for (int i =0;i<4;i++)

            walls[i] = new Wall();

        for (int i=0;i<10;i++)
            waters[i]=new Water();

        things[0]=new Thing(""Treasure"", ""Treasure is hidden "");

        things[1]=new Thing(""Zombie"", ""A Zombie is in the room...."");

        things[2] = new Thing(""Zombie"", ""Zombie is comming..."");

        things[3]=new Thing(""Body armour"", ""Body armour is placed"");

        things[4]=new Thing(""Pistol"", ""A pistol is placed"");

        things[5]=new Thing(""Coins"", ""Coin is placed !!!"");

        things[6]=new Thing(""Meds"", ""Meds for protection !!"");


        rooms[0]=new Room(0, ""Living room"", ""A big empty living room"", ""Rainy"");

        rooms[0].addObject(things[6]);

        rooms[0].addObject(things[1]);

        rooms[0].addObject(things[5]);

        rooms[1]=new Room(1, ""Abandoned Office"",

                "" A dilapidated office space with crumbling walls and broken furniture :"", ""Sunny"");

        rooms[1].addObject(things[5]);

        rooms[0].addObject(things[4]);

        rooms[2] = new Room(2, ""Garage Workshop"", "" A cluttered workspace with tools and machinery."", ""Rainy"");
        rooms[2].addObject(things[6]);
         rooms[2].addObject(things[1]);
          rooms[2].addObject(things[4]);


        rooms[3] = new Room(3, ""Abandon bedroom "", "" A dusty bedroom with a worn-out bed and tattered curtains !!!!"",
                ""Cloudy"");
        rooms[3].addObject(things[5]);
        rooms[3].addObject(things[6]);


        rooms[4] = new Room(4, ""Armory"", ""A secure room filled with weapons and ammunition  "", ""Rainy"");
        rooms[4].addObject(things[5]);
        rooms[4].addObject(things[3]);

        rooms[5] = new Room(5, ""Library"", ""A quiet room with rows of bookshelves and reading tables >>>>"", ""Sunny"");
        rooms[5].addObject(things[1]);
        rooms[5].addObject(things[4]);

        rooms[6] = new Room(6, ""Hall Room"", ""A big room filled with lots of broken chairs and tables!!"", ""Sunny"");
        rooms[6].addObject(things[5]);
        rooms[6].addObject(things[1]);

        rooms[7] = new Room(7, ""Gymnasium"", ""A spacious room with exercise equipment and gym mats!!"", ""Windy"");
        rooms[7].addObject(things[5]);
        rooms[7].addObject(things[2]);

        rooms[8] = new Room(8, ""Kitchen Pantry"", ""A small storage room filled with shelves and various food items !!!"",
                ""Rainy"");
        rooms[8].addObject(things[3]);
        rooms[8].addObject(things[2]);

        rooms[9] = new Room(9, ""Medical Clinic"", ""A sterile medical facility with examination tables and cabinets"",
                ""Cloudy"");
        rooms[9].addObject(things[6]);
        rooms[9].addObject(things[5]);
        rooms[9].addObject(things[1]);

        rooms[10] = new Room(10, ""Garden"", ""A garden with dead flowers and tress |||"", ""Cloudy"");
        rooms[10].addObject(things[1]);

        rooms[11] = new Room(11, ""Panic Room"", ""A fortified chamber designed for emergency situations. "", ""Sunny"");
        rooms[11].addObject(things[1]);
        rooms[11].addObject(things[2]);

        rooms[12] = new Room(12, ""Abandoned bathroom"", ""A bathroom with broken toilet seat :P"", ""Windy"");
        rooms[12].addObject(things[1]);

        rooms[13] = new Room(13, ""IIT Lab"",
                ""A room filled with broken Computers "", ""Cloudy"");
        rooms[13].addObject(things[6]);

        rooms[14] = new Room(14, ""Greenhouse"", ""A glass-enclosed space with plants and gardening equipment ****"",
                ""Sunny"");
        rooms[14].addObject(things[2]);
        rooms[14].addObject(things[4]);

        rooms[15] = new Room(15, ""Escape room"", ""A door to escape from the city"", ""Rainy"");
        rooms[15].addObject(things[1]);
        rooms[15].addObject(things[3]);
        rooms[15].addObject(things[4]);
        
        treasureVaultIndex = (int) (Math.random() * rooms.length);
        rooms[treasureVaultIndex].addObject(things[0]);

        walls[0].addDirection(""north"", walls[1]);
        walls[0].addDirection(""east"", rooms[0]);

        walls[1].addDirection(""south"", walls[2]);
        walls[1].addDirection(""south"", rooms[1]);
        walls[1].addDirection(""west"", walls[0]);

        walls[2].addDirection(""east"", walls[3]);
        walls[2].addDirection(""north"", waters[2]);
        walls[2].addDirection(""east"", walls[1]);

        walls[3].addDirection(""east"", waters[4]);
        walls[3].addDirection(""south"", waters[3]);
        walls[3].addDirection(""west"", walls[2]);

        waters[0].addDirection(""east"", waters[1]);
        waters[0].addDirection(""north"", waters[4]);
        waters[0].addDirection(""west"", walls[3]);

        waters[1].addDirection(""south"", rooms[2]);
        waters[1].addDirection(""east"", waters[0]);

        waters[2].addDirection(""east"", waters[3]);
        waters[2].addDirection(""west"", rooms[1]);
        waters[2].addDirection(""north"", walls[2]);
        waters[2].addDirection(""south"", rooms[5]);

        waters[3].addDirection(""north"", waters[4]);
        waters[3].addDirection(""east"", waters[2]);
        waters[3].addDirection(""north"", walls[3]);
        waters[3].addDirection(""south"", waters[5]);

        waters[4].addDirection(""east"", rooms[2]);
        waters[4].addDirection(""west"", waters[3]);
        waters[4].addDirection(""north"", waters[0]);
        waters[4].addDirection(""south"", rooms[6]);

        waters[5].addDirection(""east"", rooms[6]);
        waters[5].addDirection(""west"", rooms[5]);
        waters[5].addDirection(""north"", waters[3]);
        waters[5].addDirection(""south"", rooms[10]);

        waters[6].addDirection(""east"", rooms[10]);
        waters[6].addDirection(""west"", rooms[9]);
        waters[6].addDirection(""north"", rooms[5]);
        waters[6].addDirection(""south"", waters[7]);

        waters[7].addDirection(""east"", rooms[15]);
        waters[7].addDirection(""west"", rooms[14]);
        waters[7].addDirection(""north"", waters[6]);

        waters[8].addDirection(""east"", waters[9]);
        waters[8].addDirection(""west"", rooms[15]);
        waters[8].addDirection(""north"", rooms[11]);

        waters[9].addDirection(""west"", waters[8]);
        waters[9].addDirection(""north"", rooms[12]);

        rooms[0].addDirection(""east"", rooms[1]);
        rooms[0].addDirection(""north"", walls[0]);
        rooms[0].addDirection(""south"", rooms[3]);

        rooms[1].addDirection(""east"", waters[2]);
        rooms[1].addDirection(""west"", rooms[0]);
        rooms[1].addDirection(""north"", walls[1]);
        rooms[1].addDirection(""south"", rooms[4]);

        rooms[2].addDirection(""west"", waters[4]);
        rooms[2].addDirection(""north"", waters[1]);
        rooms[2].addDirection(""south"", rooms[7]);

        rooms[3].addDirection(""east"", rooms[4]);
        rooms[3].addDirection(""north"", rooms[0]);
        rooms[3].addDirection(""south"", rooms[8]);

        rooms[4].addDirection(""east"", rooms[5]);
        rooms[4].addDirection(""west"", rooms[3]);
        rooms[4].addDirection(""north"", rooms[1]);
        rooms[4].addDirection(""south"", rooms[9]);

        rooms[5].addDirection(""east"", waters[5]);
        rooms[5].addDirection(""west"", rooms[4]);
        rooms[5].addDirection(""north"", rooms[2]);
        rooms[5].addDirection(""south"", waters[6]);

        rooms[6].addDirection(""east"", rooms[7]);
        rooms[6].addDirection(""west"", waters[5]);
        rooms[6].addDirection(""north"", waters[4]);
        rooms[6].addDirection(""south"", rooms[11]);

        rooms[7].addDirection(""west"", rooms[6]);
        rooms[7].addDirection(""north"", rooms[2]);
        rooms[7].addDirection(""south"", rooms[12]);

        rooms[8].addDirection(""east"", rooms[9]);
        rooms[8].addDirection(""north"", rooms[3]);
        rooms[8].addDirection(""south"", rooms[13]);

        rooms[9].addDirection(""east"", waters[6]);
        rooms[9].addDirection(""west"", rooms[8]);
        rooms[9].addDirection(""north"", rooms[4]);
        rooms[9].addDirection(""south"", rooms[14]);

        rooms[10].addDirection(""east"", rooms[11]);
        rooms[10].addDirection(""west"", waters[5]);
        rooms[10].addDirection(""north"", waters[6]);
        rooms[10].addDirection(""south"", rooms[15]);

        rooms[11].addDirection(""east"", rooms[12]);
        rooms[11].addDirection(""west"", rooms[10]);
        rooms[11].addDirection(""north"", rooms[6]);
        rooms[11].addDirection(""south"", waters[8]);

        rooms[12].addDirection(""west"", rooms[11]);
        rooms[12].addDirection(""north"", rooms[7]);
        rooms[12].addDirection(""south"", waters[9]);

        rooms[13].addDirection(""east"", rooms[14]);
        rooms[13].addDirection(""north"", rooms[8]);

        rooms[14].addDirection(""east"", waters[7]);
        rooms[14].addDirection(""west"", rooms[13]);
        rooms[14].addDirection(""north"", rooms[9]);

        rooms[15].addDirection(""east"", waters[8]);
        rooms[15].addDirection(""west"", waters[7]);
        rooms[15].addDirection(""north"", rooms[10]);

    }

    public void startGame() {

        initGame();

        Player P = new Player(rooms[0], null, 0);


        Scanner input = new Scanner(System.in);
        
        String cmd;

        Location currentLoc, newLoc = null;
        int takeThing;

        boolean b = false;
        do {
            currentLoc = P.getLocation();

            System.out.println(""You have "" + P.getCoins() + "" Coins"");

  System.out.println(""You have: "" + P.getHealth() + "" Healths"");

     if (currentLoc.equals(rooms[treasureVaultIndex]))
             {

                System.out.println(""Congratulations!!! You found the treasure room .....!!! :) "");

                System.exit(0);
            }
            if (P.getHealth() <= 0)
             {

                System.out.println(""You lost!Good luck next time  :( "");
                System.exit(0);
            }

            showHelpMenu();

            cmd = input.nextLine();

  if (cmd.equalsIgnoreCase(""G""))
             {

                System.out.println(""Current Location : "" + currentLoc);

                if (((Room) currentLoc).hasZombie()) 
                {
                    if (P.hasItem(""Pistol""))
                     {
                        System.out.println(""There's a zombie in the room! You have a pistol, so you can shoot it."");

                        P.viewPlayerInventory();

                        System.out.println(""Use the thing 0/1/2/3 .. from the Inventory : "");

                        int useThingIndex = Integer.parseInt(input.nextLine());

                        Thing usedThing = P.getInventoryItem(useThingIndex);

                        System.out.println(""You shoot a bullet!"");

                        int damage = (int) (Math.random() * 11) + 20;

                        P.decreaseHealth(damage);

                        System.out.println(""You successfully shot the zombie!"");
                        Thing zombie = ((Room) currentLoc).getThingByName(""Zombie"");
                        ((Room) currentLoc).removeThing(zombie);
                        
                        if (P.getHealth() <= 0) 
                        {
                            System.out.println(""You lost!Good luck next time."");
                            System.exit(0);
                        }
                    } 
                    
                    else
                    
                    {
                        System.out
                                .println(""There's a zombie in the room! You don't have a pistol, so you take damage."");
                        int damage = (int) (Math.random() * 11) + 30;

                        P.decreaseHealth(damage);
                        
                        System.out.println(""You took "" + damage + "" damage. Remaining health: "" + P.getHealth());

                        if (P.getHealth() <= 0) {

                            System.out.println(""Game Over"");

                            System.exit(0);
                        }
                    }
                }
                System.out.println(""Choose direction:"");

                System.out.println(""one of north, south, east, west"");

                String direc = input.nextLine();

                b = checkPathExist(direc, currentLoc);
                if (b) {
                    newLoc = LocationPNextLocation(direc, currentLoc);
                    P.setLocation((Room) newLoc);
                } else {
                    System.out.println(""Here is Water or Wall"");
                    System.out.println(""You can't Move to this direction"");
                }
            }

             else if (cmd.equalsIgnoreCase(""L"")) {
                if (currentLoc instanceof Room)
                    ((Room) currentLoc).viewRoomContent();
                P.viewPlayerInventory();
                // System.out.println(""You have "" + P.getCoins() + "" Coins"");
            }
            
 else if (cmd.equalsIgnoreCase(""T"")) {
                if (currentLoc instanceof Room) {
                    Room currentRoom = (Room) currentLoc;
                    currentRoom.viewRoomContent();

                    ArrayList<Thing> roomContents = currentRoom.getContents();

                    if (roomContents.isEmpty()) {
                        System.out.println(""There are no items left in this room."");
                    } else {
                        System.out.println(""Take the thing 0/1/2.... from the room except the zombie: "");
                        takeThing = Integer.parseInt(input.nextLine());
            

                        if (takeThing >= 0 && takeThing < roomContents.size()) {
                            Thing t = roomContents.get(takeThing);

                            if (t.getName().equals(""Coins"")) {
                                P.collectCoin();

                            } else if (!t.getName().equals(""Zombie"")) {

                                P.take(t);
                            }

                            P.viewPlayerInventory();

                            if(t.getName()!=""Zombie"") currentRoom.removeThing(t);
                        } else {
                            System.out.println(""Invalid item selection."");
                        }
                    }
                }
            } else if (cmd.equalsIgnoreCase(""D"")) {
                P.viewPlayerInventory();
                System.out.println(""Drop the thing 0/1/2/3 .. from the Inventory to room : "");
                takeThing = input.nextInt();
                if (currentLoc instanceof Room) {
                    Thing t = P.getInventoryItem(takeThing);
                    ((Room) currentLoc).addObject(t);
                    ((Room) currentLoc).viewRoomContent();
                }

            } 
            
            else if (cmd.equalsIgnoreCase(""U"")) {
                P.viewPlayerInventory();
                System.out.println(""Use the thing 0/1/2/3 .. from the Inventory : "");
                int useThingIndex = Integer.parseInt(input.nextLine());
                
                if (useThingIndex >= 0 && useThingIndex < P.getInventory().size()) {
                    Thing usedThing = P.getInventoryItem(useThingIndex);
                    System.out.println(""Using "" + usedThing.getName() + ""..."");
                    handleItemUsage(usedThing, P);
                } else {
                    System.out.println(""Invalid item selection."");
                }
            } else if (cmd.equalsIgnoreCase(""Exit"")) {
                System.exit(0);
            } else if (cmd.equalsIgnoreCase(""See"")) {
                System.out.println(""Current Location : "" + currentLoc);
            } else if (cmd.equalsIgnoreCase(""Search"")) {
                if (P.getCoins() >= 3) {
                    Room startRoom = P.getLocation();
                    Room targetRoom = rooms[treasureVaultIndex];
                    System.out.println(treasureVaultIndex);
                    searchRoomsBFS(startRoom, targetRoom);
                } else
                    System.out.println(""You dont have enough coins."");
            } else {
                System.out.println(""Invalid command"");
            }



        } while (true);
    }

    private void handleItemUsage(Thing item, Player player) {
        String itemName = item.getName();

        if (itemName.equalsIgnoreCase(""Meds"")) {
            int health = (int) (Math.random() * 11) + 10;
            System.out.println(""Ypur health increased by: "" + health);
            player.increaseHealth(health);
            System.out.println(""Current health: "" + player.getHealth());
            System.out.println(""You feel healthier!"");
        } else if (itemName.equalsIgnoreCase(""Pistol"")) {
            System.out.println(""You shoot a bullet!"");
            Room currentRoom = (Room) player.getLocation();
            Thing zombie = currentRoom.getThingByName(""Zombie"");
            
            if (player.getHealth() <=0 ) {
                System.out.println(""Game Over"");
                System.exit(0);
            }
            if (zombie != null) {
                int damage = (int) (Math.random() * 11) + 20;
            player.decreaseHealth(damage);
                 System.out.println(""You successfully shot the zombie!"");
                currentRoom.removeThing(zombie);
                System.out.println(""Remaining health: "" + player.getHealth());
            } else {
                System.out.println(""There is no zombie to shoot."");
            }
        } else if (itemName.equalsIgnoreCase(""Body armour"")) {
            player.increaseHealth(30);
            System.out.println(""Your health increased by 30"");

            System.out.println(""Remaining health: "" + player.getHealth());
        } else {
            System.out.println(""You can't use this item."");
        }

        player.drop(item);
    }

    public void showHelpMenu() {
        System.out.println(""Choose command: "");
        System.out.println(""Type G for Go"");
        System.out.println(""Type L to Look inventory"");
        System.out.println(""Type T to take from inventory"");
        System.out.println(""Type D to Drop"");
        System.out.println(""Type U to Use"");
        System.out.println(""Type See to see the current location"");
        System.out.println(""Type Search to search"");
        System.out.println(""Exit "");
        System.out.println();
    }

    public boolean checkPathExist(String path, Location loc) {

        HashMap<String, Location> hm = loc.getRoomDir();
        if (hm.containsKey(path)) {
            if (hm.get(path) instanceof Room)
                return true;
        }
        return false;
    }

    public Location LocationPNextLocation(String path, Location loc) {
        HashMap<String, Location> hm = loc.getRoomDir();
        if (hm.containsKey(path) && hm.get(path) instanceof Room) {
            return hm.get(path);
        } else {
            System.out.println(""Invalid direction or path not found."");
            return loc;
        }
    }

    private String getDirection(Room fromRoom, Room toRoom) {
        for (String direction : fromRoom.getRoomDir().keySet()) {
            if (fromRoom.getRoomDir().get(direction).equals(toRoom)) {
                return direction;
            }
        }
        return """";
    }

    public void searchRoomsBFS(Room startRoom, Room targetRoom) {
        Queue<Room> queue = new LinkedList<>();
        HashMap<Room, Room> parentMap = new HashMap<>();
        queue.add(startRoom);
        parentMap.put(startRoom, null);

        while (!queue.isEmpty()) {
            Room currentRoom = queue.poll();

            if (currentRoom.equals(targetRoom)) {
                System.out.println(""Path found using BFS:"");
                printPathUsingParentMap(parentMap, targetRoom);
                return;
            }

            for (String direction : currentRoom.getRoomDir().keySet()) {
                Location nextLocation = currentRoom.getRoomDir().get(direction);

                if (nextLocation instanceof Room && !parentMap.containsKey(nextLocation)) {
                    queue.add((Room) nextLocation);
                    parentMap.put((Room) nextLocation, currentRoom); 
                }
            }
        }

        System.out.println(""No path found using BFS."");
    }

    private void printPathUsingParentMap(HashMap<Room, Room> parentMap, Room targetRoom) {
        LinkedList<String> path = new LinkedList<>();
        Room currentRoom = targetRoom;
        Room parentRoom;

        while (currentRoom != null) {
            parentRoom = parentMap.get(currentRoom);
            if (parentRoom != null) {
                String direction = getDirection(parentRoom, currentRoom);
                path.addFirst(direction);
            }
            currentRoom = parentRoom;
        }

        for (String dir : path) {
            System.out.print(dir + "" "");
        }
        System.out.println();
    }

}
",1
"import java.util.ArrayList;

public class LudoBoard {

	//INITIALIZE THE BOARD USING SQUARE AND BORDER
	LudoBoard(String[][] square, String[][] border) {
		square[0][0] = ""|\u001B[32mGreen\u001B[0m"";
		square[0][1] = ""      "";
		square[0][2] = ""      "";
		square[0][3] = ""      "";
		square[0][4] = ""      "";
		square[0][5] = ""     |"";
		square[0][6] = ""|    |"";
		square[0][7] = ""|    |"";
		square[0][8] = ""|    |"";
		square[0][9] = ""|     "";
		square[0][10] = ""      "";
		square[0][11] = ""      "";
		square[0][12] = ""      "";
		square[0][13] = ""     \033[33mY"";
		square[0][14] = ""ellow|\u001B[0m"";
		square[1][0] = ""|    |"";
		square[1][1] = ""|     "";
		square[1][2] = ""      "";
		square[1][3] = ""      "";
		square[1][4] = ""     |"";
		square[1][5] = ""|    |"";
		square[1][6] = ""|    |"";
		square[1][7] = ""\033[33m|    |\u001B[0m"";
		square[1][8] = ""\033[35m|    |\u001B[0m"";
		square[1][9] = ""|    |"";
		square[1][10] = ""|     "";
		square[1][11] = ""      "";
		square[1][12] = ""      "";
		square[1][13] = ""     |"";
		square[1][14] = ""|    |"";
		square[2][0] = ""|    |"";
		square[2][1] = ""|    |"";
		square[2][2] = ""|    |"";
		square[2][3] = ""|    |"";
		square[2][4] = ""|    |"";
		square[2][5] = ""|    |"";
		square[2][6] = ""\033[35m|    |\u001B[0m"";
		square[2][7] = ""\033[33m|    |\u001B[0m"";
		square[2][8] = ""|    |"";
		square[2][9] = ""|    |"";
		square[2][10] = ""|    |"";
		square[2][11] = ""|    |"";
		square[2][12] = ""|    |"";
		square[2][13] = ""|    |"";
		square[2][14] = ""|    |"";
		square[3][0] = ""|    |"";
		square[3][1] = ""|    |"";
		square[3][2] = ""|    |"";
		square[3][3] = ""|    |"";
		square[3][4] = ""|    |"";
		square[3][5] = ""|    |"";
		square[3][6] = ""|    |"";
		square[3][7] = ""\033[33m|    |\u001B[0m"";
		square[3][8] = ""|    |"";
		square[3][9] = ""|    |"";
		square[3][10] = ""|    |"";
		square[3][11] = ""|    |"";
		square[3][12] = ""|    |"";
		square[3][13] = ""|    |"";
		square[3][14] = ""|    |"";
		square[4][0] = ""|    |"";
		square[4][1] = ""|     "";
		square[4][2] = ""      "";
		square[4][3] = ""      "";
		square[4][4] = ""     |"";
		square[4][5] = ""|    |"";
		square[4][6] = ""|    |"";
		square[4][7] = ""\033[33m|    |\u001B[0m"";
		square[4][8] = ""|    |"";
		square[4][9] = ""|    |"";
		square[4][10] = ""|     "";
		square[4][11] = ""      "";
		square[4][12] = ""      "";
		square[4][13] = ""     |"";
		square[4][14] = ""|    |"";
		square[5][0] = ""|     "";
		square[5][1] = ""      "";
		square[5][2] = ""      "";
		square[5][3] = ""      "";
		square[5][4] = ""      "";
		square[5][5] = ""     |"";
		square[5][6] = ""|    |"";
		square[5][7] = ""\033[33m|    |\u001B[0m"";
		square[5][8] = ""|    |"";
		square[5][9] = ""|     "";
		square[5][10] = ""      "";
		square[5][11] = ""      "";
		square[5][12] = ""      "";
		square[5][13] = ""      "";
		square[5][14] = ""     |"";
		square[6][0] = ""|    |"";
		square[6][1] = ""\033[35m|    |\u001B[0m"";
		square[6][2] = ""|    |"";
		square[6][3] = ""|    |"";
		square[6][4] = ""|    |"";
		square[6][5] = ""|    |"";
		square[6][6] = ""|     "";
		square[6][7] = ""      "";
		square[6][8] = ""     |"";
		square[6][9] = ""|    |"";
		square[6][10] = ""|    |"";
		square[6][11] = ""|    |"";
		square[6][12] = ""\033[35m|    |\u001B[0m"";
		square[6][13] = ""|    |"";
		square[6][14] = ""|    |"";
		square[7][0] = ""|    |"";
		square[7][1] = ""\u001B[32m|    |"";
		square[7][2] = ""|    |"";
		square[7][3] = ""|    |"";
		square[7][4] = ""|    |"";
		square[7][5] = ""|    |"";
		square[7][6] = ""|\u001B[0m     "";
		square[7][7] = ""      "";
		square[7][8] = ""     \033[34m|"";
		square[7][9] = ""|    |"";
		square[7][10] = ""|    |"";
		square[7][11] = ""|    |"";
		square[7][12] = ""|    |"";
		square[7][13] = ""|    |\u001B[0m"";
		square[7][14] = ""|    |"";
		square[8][0] = ""|    |"";
		square[8][1] = ""|    |"";
		square[8][2] = ""\033[35m|    |\u001B[0m"";
		square[8][3] = ""|    |"";
		square[8][4] = ""|    |"";
		square[8][5] = ""|    |"";
		square[8][6] = ""|     "";
		square[8][7] = ""      "";
		square[8][8] = ""     |"";
		square[8][9] = ""|    |"";
		square[8][10] = ""|    |"";
		square[8][11] = ""|    |"";
		square[8][12] = ""|    |"";
		square[8][13] = ""\033[35m|    |\u001B[0m"";
		square[8][14] = ""|    |"";
		square[9][0] = ""|     "";
		square[9][1] = ""      "";
		square[9][2] = ""      "";
		square[9][3] = ""      "";
		square[9][4] = ""      "";
		square[9][5] = ""     |"";
		square[9][6] = ""|    |"";
		square[9][7] = ""\033[31m|    |\u001B[0m"";
		square[9][8] = ""|    |"";
		square[9][9] = ""|     "";
		square[9][10] = ""      "";
		square[9][11] = ""      "";
		square[9][12] = ""      "";
		square[9][13] = ""      "";
		square[9][14] = ""     |"";
		square[10][0] = ""|    |"";
		square[10][1] = ""|     "";
		square[10][2] = ""      "";
		square[10][3] = ""      "";
		square[10][4] = ""     |"";
		square[10][5] = ""|    |"";
		square[10][6] = ""|    |"";
		square[10][7] = ""\033[31m|    |\u001B[0m"";
		square[10][8] = ""|    |"";
		square[10][9] = ""|    |"";
		square[10][10] = ""|     "";
		square[10][11] = ""      "";
		square[10][12] = ""      "";
		square[10][13] = ""     |"";
		square[10][14] = ""|    |"";
		square[11][0] = ""|    |"";
		square[11][1] = ""|    |"";
		square[11][2] = ""|    |"";
		square[11][3] = ""|    |"";
		square[11][4] = ""|    |"";
		square[11][5] = ""|    |"";
		square[11][6] = ""|    |"";
		square[11][7] = ""\033[31m|    |\u001B[0m"";
		square[11][8] = ""|    |"";
		square[11][9] = ""|    |"";
		square[11][10] = ""|    |"";
		square[11][11] = ""|    |"";
		square[11][12] = ""|    |"";
		square[11][13] = ""|    |"";
		square[11][14] = ""|    |"";
		square[12][0] = ""|    |"";
		square[12][1] = ""|    |"";
		square[12][2] = ""|    |"";
		square[12][3] = ""|    |"";
		square[12][4] = ""|    |"";
		square[12][5] = ""|    |"";
		square[12][6] = ""|    |"";
		square[12][7] = ""\033[31m|    |\u001B[0m"";
		square[12][8] = ""\033[35m|    |\u001B[0m"";
		square[12][9] = ""|    |"";
		square[12][10] = ""|    |"";
		square[12][11] = ""|    |"";
		square[12][12] = ""|    |"";
		square[12][13] = ""|    |"";
		square[12][14] = ""|    |"";
		square[13][0] = ""|    |"";
		square[13][1] = ""|     "";
		square[13][2] = ""      "";
		square[13][3] = ""      "";
		square[13][4] = ""     |"";
		square[13][5] = ""|    |"";
		square[13][6] = ""\033[35m|    |\u001B[0m"";
		square[13][7] = ""\033[31m|    |\u001B[0m"";
		square[13][8] = ""|    |"";
		square[13][9] = ""|    |"";
		square[13][10] = ""|     "";
		square[13][11] = ""      "";
		square[13][12] = ""      "";
		square[13][13] = ""     |"";
		square[13][14] = ""|    |"";
		square[14][0] = ""|\033[31mRed\u001B[0m  "";
		square[14][1] = ""      "";
		square[14][2] = ""      "";
		square[14][3] = ""      "";
		square[14][4] = ""      "";
		square[14][5] = ""     |"";
		square[14][6] = ""|    |"";
		square[14][7] = ""|    |"";
		square[14][8] = ""|    |"";
		square[14][9] = ""|     "";
		square[14][10] = ""      "";
		square[14][11] = ""      "";
		square[14][12] = ""      "";
		square[14][13] = ""      "";
		square[14][14] = "" \033[34mBlue\u001B[0m|"";
		border[0][0] = ""------"";
		border[0][1] = ""------"";
		border[0][2] = ""------"";
		border[0][3] = ""------"";
		border[0][4] = ""------"";
		border[0][5] = ""------"";
		border[0][6] = ""------"";
		border[0][7] = ""------"";
		border[0][8] = ""------"";
		border[0][9] = ""------"";
		border[0][10] = ""------"";
		border[0][11] = ""------"";
		border[0][12] = ""------"";
		border[0][13] = ""------"";
		border[0][14] = ""------"";
		border[1][0] = ""      "";
		border[1][1] = ""------"";
		border[1][2] = ""------"";
		border[1][3] = ""------"";
		border[1][4] = ""------"";
		border[1][5] = ""      "";
		border[1][6] = ""------"";
		border[1][7] = ""------"";
		border[1][8] = ""------"";
		border[1][9] = ""      "";
		border[1][10] = ""------"";
		border[1][11] = ""------"";
		border[1][12] = ""------"";
		border[1][13] = ""------"";
		border[1][14] = ""      "";
		border[2][0] = ""      "";
		border[2][1] = ""      "";
		border[2][2] = ""------"";
		border[2][3] = ""------"";
		border[2][4] = ""      "";
		border[2][5] = ""      "";
		border[2][6] = ""------"";
		border[2][7] = ""------"";
		border[2][8] = ""------"";
		border[2][9] = ""      "";
		border[2][10] = ""      "";
		border[2][11] = ""------"";
		border[2][12] = ""------"";
		border[2][13] = ""      "";
		border[2][14] = ""      "";
		border[3][0] = ""      "";
		border[3][1] = ""      "";
		border[3][2] = ""------"";
		border[3][3] = ""------"";
		border[3][4] = ""      "";
		border[3][5] = ""      "";
		border[3][6] = ""------"";
		border[3][7] = ""------"";
		border[3][8] = ""------"";
		border[3][9] = ""      "";
		border[3][10] = ""      "";
		border[3][11] = ""------"";
		border[3][12] = ""------"";
		border[3][13] = ""      "";
		border[3][14] = ""      "";
		border[4][0] = ""      "";
		border[4][1] = ""      "";
		border[4][2] = ""------"";
		border[4][3] = ""------"";
		border[4][4] = ""      "";
		border[4][5] = ""      "";
		border[4][6] = ""------"";
		border[4][7] = ""------"";
		border[4][8] = ""------"";
		border[4][9] = ""      "";
		border[4][10] = ""      "";
		border[4][11] = ""------"";
		border[4][12] = ""------"";
		border[4][13] = ""      "";
		border[4][14] = ""      "";
		border[5][0] = ""      "";
		border[5][1] = ""------"";
		border[5][2] = ""------"";
		border[5][3] = ""------"";
		border[5][4] = ""------"";
		border[5][5] = ""      "";
		border[5][6] = ""------"";
		border[5][7] = ""------"";
		border[5][8] = ""------"";
		border[5][9] = ""      "";
		border[5][10] = ""------"";
		border[5][11] = ""------"";
		border[5][12] = ""------"";
		border[5][13] = ""------"";
		border[5][14] = ""      "";
		border[6][0] = ""------"";
		border[6][1] = ""------"";
		border[6][2] = ""------"";
		border[6][3] = ""------"";
		border[6][4] = ""------"";
		border[6][5] = ""------"";
		border[6][6] = ""------"";
		border[6][7] = ""------"";
		border[6][8] = ""------"";
		border[6][9] = ""------"";
		border[6][10] = ""------"";
		border[6][11] = ""------"";
		border[6][12] = ""------"";
		border[6][13] = ""------"";
		border[6][14] = ""------"";
		border[7][0] = ""------"";
		border[7][1] = ""------"";
		border[7][2] = ""------"";
		border[7][3] = ""------"";
		border[7][4] = ""------"";
		border[7][5] = ""------"";
		border[7][6] = ""      "";
		border[7][7] = ""      "";
		border[7][8] = ""      "";
		border[7][9] = ""------"";
		border[7][10] = ""------"";
		border[7][11] = ""------"";
		border[7][12] = ""------"";
		border[7][13] = ""------"";
		border[7][14] = ""------"";
		border[8][0] = ""------"";
		border[8][1] = ""------"";
		border[8][2] = ""------"";
		border[8][3] = ""------"";
		border[8][4] = ""------"";
		border[8][5] = ""------"";
		border[8][6] = ""      "";
		border[8][7] = ""      "";
		border[8][8] = ""      "";
		border[8][9] = ""------"";
		border[8][10] = ""------"";
		border[8][11] = ""------"";
		border[8][12] = ""------"";
		border[8][13] = ""------"";
		border[8][14] = ""------"";
		border[9][0] = ""------"";
		border[9][1] = ""------"";
		border[9][2] = ""------"";
		border[9][3] = ""------"";
		border[9][4] = ""------"";
		border[9][5] = ""------"";
		border[9][6] = ""------"";
		border[9][7] = ""------"";
		border[9][8] = ""------"";
		border[9][9] = ""------"";
		border[9][10] = ""------"";
		border[9][11] = ""------"";
		border[9][12] = ""------"";
		border[9][13] = ""------"";
		border[9][14] = ""------"";
		border[10][0] = ""      "";
		border[10][1] = ""------"";
		border[10][2] = ""------"";
		border[10][3] = ""------"";
		border[10][4] = ""------"";
		border[10][5] = ""      "";
		border[10][6] = ""------"";
		border[10][7] = ""------"";
		border[10][8] = ""------"";
		border[10][9] = ""      "";
		border[10][10] = ""------"";
		border[10][11] = ""------"";
		border[10][12] = ""------"";
		border[10][13] = ""------"";
		border[10][14] = ""      "";
		border[11][0] = ""      "";
		border[11][1] = ""      "";
		border[11][2] = ""------"";
		border[11][3] = ""------"";
		border[11][4] = ""      "";
		border[11][5] = ""      "";
		border[11][6] = ""------"";
		border[11][7] = ""------"";
		border[11][8] = ""------"";
		border[11][9] = ""      "";
		border[11][10] = ""      "";
		border[11][11] = ""------"";
		border[11][12] = ""------"";
		border[11][13] = ""      "";
		border[11][14] = ""      "";
		border[12][0] = ""      "";
		border[12][1] = ""      "";
		border[12][2] = ""------"";
		border[12][3] = ""------"";
		border[12][4] = ""      "";
		border[12][5] = ""      "";
		border[12][6] = ""------"";
		border[12][7] = ""------"";
		border[12][8] = ""------"";
		border[12][9] = ""      "";
		border[12][10] = ""      "";
		border[12][11] = ""------"";
		border[12][12] = ""------"";
		border[12][13] = ""      "";
		border[12][14] = ""      "";
		border[13][0] = ""      "";
		border[13][1] = ""      "";
		border[13][2] = ""------"";
		border[13][3] = ""------"";
		border[13][4] = ""      "";
		border[13][5] = ""      "";
		border[13][6] = ""------"";
		border[13][7] = ""------"";
		border[13][8] = ""------"";
		border[13][9] = ""      "";
		border[13][10] = ""      "";
		border[13][11] = ""------"";
		border[13][12] = ""------"";
		border[13][13] = ""      "";
		border[13][14] = ""      "";
		border[14][0] = ""      "";
		border[14][1] = ""------"";
		border[14][2] = ""------"";
		border[14][3] = ""------"";
		border[14][4] = ""------"";
		border[14][5] = ""      "";
		border[14][6] = ""------"";
		border[14][7] = ""------"";
		border[14][8] = ""------"";
		border[14][9] = ""      "";
		border[14][10] = ""------"";
		border[14][11] = ""------"";
		border[14][12] = ""------"";
		border[14][13] = ""------"";
		border[14][14] = ""      "";
		border[15][0] = ""------"";
		border[15][1] = ""------"";
		border[15][2] = ""------"";
		border[15][3] = ""------"";
		border[15][4] = ""------"";
		border[15][5] = ""------"";
		border[15][6] = ""------"";
		border[15][7] = ""------"";
		border[15][8] = ""------"";
		border[15][9] = ""------"";
		border[15][10] = ""------"";
		border[15][11] = ""------"";
		border[15][12] = ""------"";
		border[15][13] = ""------"";
		border[15][14] = ""------"";
	}

	//FOR PRINT BOARD
	void printBoard(String[][] border, String[][] square) {
		for (int i = 0; i < 16; i++) {
			for (int j = 0; j < 15; j++) {
				System.out.print(border[i][j]);
			}
			System.out.println();
			if (i == 15)
				break;
			for (int j = 0; j < 15; j++) {
				System.out.print(square[i][j]);
			}
			System.out.println();
		}
	}

	//FOR UPDATING BOARD
	void initializeHome(ArrayList<Player> playerList, String[][] square) {
		for (int i = 0; i < playerList.size(); i++) {
			for (int j = 0; j < 4; j++) {
				square[playerList.get(i).token_list[j].X][playerList.get(i).token_list[j].Y] = ""| ""
						+ playerList.get(i).token_list[j].token_name + "" |"";
			}

		}
	}

	//METHOD FOR REMOVE TOKEN
	void removeToken(int X, int Y, String[][] square) {
		square[X][Y] = ""|    |"";
	}
}",1
"import java.util.Scanner;
import java.util.ArrayList;
import java.util.Random;

class LudoGame {
    static int player_number;
    static int sixCounter = 0;
    static boolean equalPosition = false;
    static String[][] square = new String[15][15];
    static String[][] border = new String[16][16];
    static String[] colorList = { ""Green"", ""Blue"", ""Red"", ""Yellow"" };
    static int[] endCounter = { 0, 0, 0, 0 };
    static ArrayList<Player> playerList = new ArrayList<Player>();

    //HOME POSITION FOR ALL TOKEN
    static int[][] greenHomePos = { { 2, 2 }, { 2, 3 }, { 3, 2 }, { 3, 3 } };
    static int[][] yellowHomePos = { { 2, 11 }, { 2, 12 }, { 3, 11 }, { 3, 12 } };
    static int[][] redHomePos = { { 11, 2 }, { 11, 3 }, { 12, 2 }, { 12, 3 } };
    static int[][] blueHomePos = { { 11, 11 }, { 11, 12 }, { 12, 11 }, { 12, 12 } };

    //SELECT TOKEN NAME
    static String[] greenToken = { ""G1"", ""G2"", ""G3"", ""G4"" };
    static String[] redToken = { ""R1"", ""R2"", ""R3"", ""R4"" };
    static String[] blueToken = { ""B1"", ""B2"", ""B3"", ""B4"" };
    static String[] yellowToken = { ""Y1"", ""Y2"", ""Y3"", ""Y4"" };

    //INITIALIZE TOKEN MOVEMENT PATH FOR ALL TOKEN
    static int[][] greenPath = { { 6, 1 }, { 6, 2 }, { 6, 3 }, { 6, 4 }, { 6, 5 },
            { 5, 6 }, { 4, 6 }, { 3, 6 }, { 2, 6 }, { 1, 6 }, { 0, 6 },
            { 0, 7 }, { 0, 8 }, { 1, 8 }, { 2, 8 }, { 3, 8 }, { 4, 8 }, { 5, 8 },
            { 6, 9 }, { 6, 10 }, { 6, 11 }, { 6, 12 }, { 6, 13 }, { 6, 14 },
            { 7, 14 }, { 8, 14 }, { 8, 13 }, { 8, 12 }, { 8, 11 }, { 8, 10 }, { 8, 9 },
            { 9, 8 }, { 10, 8 }, { 11, 8 }, { 12, 8 }, { 13, 8 }, { 14, 8 },
            { 14, 7 }, { 14, 6 }, { 13, 6 }, { 12, 6 }, { 11, 6 }, { 10, 6 }, { 9, 6 },
            { 8, 5 }, { 8, 4 }, { 8, 3 }, { 8, 2 }, { 8, 1 }, { 8, 0 },
            { 7, 0 }, { 7, 1 }, { 7, 2 }, { 7, 3 }, { 7, 4 }, { 7, 5 }, { 7, 6 } };

    static int[][] yellowPath = { { 1, 8 }, { 2, 8 }, { 3, 8 }, { 4, 8 }, { 5, 8 },
            { 6, 9 }, { 6, 10 }, { 6, 11 }, { 6, 12 }, { 6, 13 }, { 6, 14 },
            { 7, 14 }, { 8, 14 }, { 8, 13 }, { 8, 12 }, { 8, 11 }, { 8, 10 }, { 8, 9 },
            { 9, 8 }, { 10, 8 }, { 11, 8 }, { 12, 8 }, { 13, 8 }, { 14, 8 },
            { 14, 7 }, { 14, 6 }, { 13, 6 }, { 12, 6 }, { 11, 6 }, { 10, 6 }, { 9, 6 },
            { 8, 5 }, { 8, 4 }, { 8, 3 }, { 8, 2 }, { 8, 1 }, { 8, 0 },
            { 7, 0 }, { 6, 0 }, { 6, 1 }, { 6, 2 }, { 6, 3 }, { 6, 4 }, { 6, 5 },
            { 5, 6 }, { 4, 6 }, { 3, 6 }, { 2, 6 }, { 1, 6 }, { 0, 6 },
            { 0, 7 }, { 1, 7 }, { 2, 7 }, { 3, 7 }, { 4, 7 }, { 5, 7 }, { 6, 7 } };

    static int[][] redPath = { { 13, 6 }, { 12, 6 }, { 11, 6 }, { 10, 6 }, { 9, 6 },
            { 8, 5 }, { 8, 4 }, { 8, 3 }, { 8, 2 }, { 8, 1 }, { 8, 0 },
            { 7, 0 }, { 6, 0 }, { 6, 1 }, { 6, 2 }, { 6, 3 }, { 6, 4 }, { 6, 5 },
            { 5, 6 }, { 4, 6 }, { 3, 6 }, { 2, 6 }, { 1, 6 }, { 0, 6 },
            { 0, 7 }, { 0, 8 }, { 1, 8 }, { 2, 8 }, { 3, 8 }, { 4, 8 }, { 5, 8 },
            { 6, 9 }, { 6, 10 }, { 6, 11 }, { 6, 12 }, { 6, 13 }, { 6, 14 },
            { 7, 14 }, { 8, 14 }, { 8, 13 }, { 8, 12 }, { 8, 11 }, { 8, 10 }, { 8, 9 },
            { 9, 8 }, { 10, 8 }, { 11, 8 }, { 12, 8 }, { 13, 8 }, { 14, 8 },
            { 14, 7 }, { 13, 7 }, { 12, 7 }, { 11, 7 }, { 10, 7 }, { 9, 7 }, { 8, 7 } };

    static int[][] bluePath = { { 8, 13 }, { 8, 12 }, { 8, 11 }, { 8, 10 }, { 8, 9 },
            { 9, 8 }, { 10, 8 }, { 11, 8 }, { 12, 8 }, { 13, 8 }, { 14, 8 },
            { 14, 7 }, { 14, 6 }, { 13, 6 }, { 12, 6 }, { 11, 6 }, { 10, 6 }, { 9, 6 },
            { 8, 5 }, { 8, 4 }, { 8, 3 }, { 8, 2 }, { 8, 1 }, { 8, 0 },
            { 7, 0 }, { 6, 0 }, { 6, 1 }, { 6, 2 }, { 6, 3 }, { 6, 4 }, { 6, 5 },
            { 5, 6 }, { 4, 6 }, { 3, 6 }, { 2, 6 }, { 1, 6 }, { 0, 6 },
            { 0, 7 }, { 0, 8 }, { 1, 8 }, { 2, 8 }, { 3, 8 }, { 4, 8 }, { 5, 8 },
            { 6, 9 }, { 6, 10 }, { 6, 11 }, { 6, 12 }, { 6, 13 }, { 6, 14 },
            { 7, 14 }, { 7, 13 }, { 7, 12 }, { 7, 11 }, { 7, 10 }, { 7, 9 }, { 7, 8 } };

    public static void main(String[] args) {
        Scanner get_input = new Scanner(System.in);
        LudoBoard board = new LudoBoard(square, border);
        Random random = new Random();
        LudoGame myLudo = new LudoGame();

        System.out.print(""How many player: "");
        player_number = get_input.nextInt();


        // INITIALIZING DATA TO TOKEN
        for (int i = 0; i < player_number; i++) {
            Player player = new Player();

            Token[] token_list = new Token[4];
            if (colorList[i] == ""Green"") {
                for (int j = 0; j < 4; j++) {
                    Token token = new Token();
                    token.token_name = greenToken[j];
                    token.X = greenHomePos[j][0];
                    token.Y = greenHomePos[j][1];
                    token_list[j] = token;
                }
            }

            if (colorList[i] == ""Blue"") {
                for (int j = 0; j < 4; j++) {
                    Token token = new Token();
                    token.token_name = blueToken[j];
                    token.X = blueHomePos[j][0];
                    token.Y = blueHomePos[j][1];
                    token_list[j] = token;
                }
            }

            if (colorList[i] == ""Red"") {
                for (int j = 0; j < 4; j++) {
                    Token token = new Token();
                    token.token_name = redToken[j];
                    token.X = redHomePos[j][0];
                    token.Y = redHomePos[j][1];
                    token_list[j] = token;
                }
            }

            if (colorList[i] == ""Yellow"") {
                for (int j = 0; j < 4; j++) {
                    Token token = new Token();
                    token.token_name = yellowToken[j];
                    token.X = yellowHomePos[j][0];
                    token.Y = yellowHomePos[j][1];
                    token_list[j] = token;
                }
            }

            player.player_name = colorList[i];
            player.token_list = token_list;

            playerList.add(player);
        }
        board.initializeHome(playerList, square);
        board.printBoard(border, square);

        Token token = new Token();
        boolean gameOver = true;
        while (gameOver) {

            for (int i = 0; i < player_number && gameOver; i++) {

                //FOR GIVING ANOTHER CHANCE FOR ROLLING DICE
                if (sixCounter > 0 || equalPosition) {
                    i--;
                    if (i == -1) {
                        i = player_number - 1;
                    }
                    equalPosition = false;
                }

                String choice;

                int randomNumber = random.nextInt(6) + 1;

                System.out.println(""Player "" + playerList.get(i).player_name + ""'s Turn: "" + randomNumber);

                if (randomNumber == 6) {

                    // SKIP FOR IMMEDIATE THIRD SIX
                    if (sixCounter == 2) {
                        sixCounter = 0;
                        continue;
                    }

                    while (true) {

                        //COMMAND FOR MOVING TOKEN IN HOME POSITION OR NOT
                        if (i == 0) {
                            System.out.print(""Enter Your Choice (H1/H2/H3/H4 or G1/G2/G3/G4): "");
                        } else if (i == 1) {
                            System.out.print(""Enter Your Choice (H1/H2/H3/H4 or B1/B2/B3/B4): "");
                        } else if (i == 2) {
                            System.out.print(""Enter Your Choice (H1/H2/H3/H4 or R1/R2/R3/R4): "");
                        } else if (i == 3) {
                            System.out.print(""Enter Your Choice (H1/H2/H3/H4 or Y1/Y2/Y3/Y4): "");
                        }
                        choice = get_input.next();
                        if (choice.length() == 2) {
                            if ((choice.charAt(0) == 'H' || ((i == 0 && choice.charAt(0) == 'G')
                                    || ((i == 1 && choice.charAt(0) == 'B') || (i == 2 && choice.charAt(0) == 'R')
                                            || (i == 3 && choice.charAt(0) == 'Y'))))
                                    &&
                                    (Character.getNumericValue(choice.charAt(1)) >= 1
                                            && Character.getNumericValue(choice.charAt(1)) <= 4)) {
                                break;
                            }
                        }
                    }

                    //WHEN DICE ROLLING FOR SIX AND CHANCE TO MOVE TOKEN FROM HOME
                    if (choice.charAt(0) == 'H') {

                        if ((playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                - 1].X == greenHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                        - 1].Y == greenHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                && playerList.get(i).player_name == ""Green"") {
                            token.takeFromHome(i, playerList, board, choice, greenPath, border, square);
                        } else if ((playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                - 1].X == yellowHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                        - 1].Y == yellowHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                && playerList.get(i).player_name == ""Yellow"") {
                            token.takeFromHome(i, playerList, board, choice, yellowPath, border, square);
                        } else if ((playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                - 1].X == blueHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                        - 1].Y == blueHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                && playerList.get(i).player_name == ""Blue"") {
                            token.takeFromHome(i, playerList, board, choice, bluePath, border, square);
                        } else if ((playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                - 1].X == redHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                        - 1].Y == redHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                && playerList.get(i).player_name == ""Red"") {
                            token.takeFromHome(i, playerList, board, choice, redPath, border, square);
                        }
                    } else if (((i == 0 && choice.charAt(0) == 'G') || ((i == 1 && choice.charAt(0) == 'B')
                            || (i == 2 && choice.charAt(0) == 'R') || (i == 3 && choice.charAt(0) == 'Y')))
                            && Character.getNumericValue(choice.charAt(1)) >= 1
                            && Character.getNumericValue(choice.charAt(1)) <= 4) {

                        // IF TOKEN IS NOT AT HOME, MOVE IT
                        if (!(playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                - 1].X == greenHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                        - 1].Y == greenHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                && playerList.get(i).player_name == ""Green"") {
                            token.moveToken(i, playerList, board, choice, greenPath, randomNumber, player_number,
                                    border, square, greenHomePos, blueHomePos, yellowHomePos, redHomePos, myLudo);
                        } else if (!(playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                - 1].X == yellowHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                        - 1].Y == yellowHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                && playerList.get(i).player_name == ""Yellow"") {
                            token.moveToken(i, playerList, board, choice, yellowPath, randomNumber, player_number,
                                    border, square, greenHomePos, blueHomePos, yellowHomePos, redHomePos, myLudo);
                        } else if (!(playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                - 1].X == blueHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                        - 1].Y == blueHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                && playerList.get(i).player_name == ""Blue"") {
                            token.moveToken(i, playerList, board, choice, bluePath, randomNumber, player_number, border,
                                    square, greenHomePos, blueHomePos, yellowHomePos, redHomePos, myLudo);
                        } else if (!(playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                - 1].X == redHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                        - 1].Y == redHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                && playerList.get(i).player_name == ""Red"") {
                            token.moveToken(i, playerList, board, choice, redPath, randomNumber, player_number, border,
                                    square, greenHomePos, blueHomePos, yellowHomePos, redHomePos, myLudo);
                        }
                    }

                    sixCounter++;

                } else {
                    sixCounter = 0;
                    boolean atleastOneOutOfHome = token.isOutOfHome(playerList, i, greenHomePos, redHomePos,
                            blueHomePos, yellowHomePos);

                    //WHEN ONE TOKEN AT LEAST OUT OF HOME, MOVE IT  
                    if (atleastOneOutOfHome) {
                        while (true) {
                            if (i == 0) {
                                System.out.print(""Enter Your Choice(G1/G2/G3/G4): "");
                            } else if (i == 1) {
                                System.out.print(""Enter Your Choice(B1/B2/B3/B4): "");
                            } else if (i == 2) {
                                System.out.print(""Enter Your Choice(R1/R2/R3/R4): "");
                            } else if (i == 3) {
                                System.out.print(""Enter Your Choice(Y1/Y2/Y3/Y4): "");
                            }

                            choice = get_input.next();
                            if (choice.length() == 2) {
                                if (((i == 0 && choice.charAt(0) == 'G') || ((i == 1 && choice.charAt(0) == 'B')
                                        || (i == 2 && choice.charAt(0) == 'R') || (i == 3 && choice.charAt(0) == 'Y')))
                                        && Character.getNumericValue(choice.charAt(1)) >= 1
                                        && Character.getNumericValue(choice.charAt(1)) <= 4) {
                                    break;
                                }
                            }
                        }
                        if (((i == 0 && choice.charAt(0) == 'G') || ((i == 1 && choice.charAt(0) == 'B')
                                || (i == 2 && choice.charAt(0) == 'R') || (i == 3 && choice.charAt(0) == 'Y')))
                                && Character.getNumericValue(choice.charAt(1)) >= 1
                                && Character.getNumericValue(choice.charAt(1)) <= 4) {
                            if (!(playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                    - 1].X == greenHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                    playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                            - 1].Y == greenHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                    && playerList.get(i).player_name == ""Green"") {
                                token.moveToken(i, playerList, board, choice, greenPath, randomNumber, player_number,
                                        border, square, greenHomePos, blueHomePos, yellowHomePos, redHomePos, myLudo);
                            } else if (!(playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                    - 1].X == yellowHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                    playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                            - 1].Y == yellowHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                    && playerList.get(i).player_name == ""Yellow"") {
                                token.moveToken(i, playerList, board, choice, yellowPath, randomNumber, player_number,
                                        border, square, greenHomePos, blueHomePos, yellowHomePos, redHomePos, myLudo);
                            } else if (!(playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                    - 1].X == blueHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                    playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                            - 1].Y == blueHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                    && playerList.get(i).player_name == ""Blue"") {
                                token.moveToken(i, playerList, board, choice, bluePath, randomNumber, player_number,
                                        border, square, greenHomePos, blueHomePos, yellowHomePos, redHomePos, myLudo);
                            } else if (!(playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                    - 1].X == redHomePos[Character.getNumericValue(choice.charAt(1)) - 1][0] &&
                                    playerList.get(i).token_list[Character.getNumericValue(choice.charAt(1))
                                            - 1].Y == redHomePos[Character.getNumericValue(choice.charAt(1)) - 1][1])
                                    && playerList.get(i).player_name == ""Red"") {
                                token.moveToken(i, playerList, board, choice, redPath, randomNumber, player_number,
                                        border, square, greenHomePos, blueHomePos, yellowHomePos, redHomePos, myLudo);
                            }
                        }
                    }

                }

                //TOKEN FOR LAST DESTINATION GOING ON 
                for (int l = 0; l < player_number; l++) {
                    for (int m = 0; m < 4; m++) {
                        if ((playerList.get(l).token_list[m].X == 7 && playerList.get(l).token_list[m].Y == 6) ||
                                (playerList.get(l).token_list[m].X == 7 && playerList.get(l).token_list[m].Y == 8) ||
                                (playerList.get(l).token_list[m].X == 6 && playerList.get(l).token_list[m].Y == 7) ||
                                (playerList.get(l).token_list[m].X == 8 && playerList.get(l).token_list[m].Y == 7)) {
                            endCounter[l]++;
                        }
                    }
                }

                for (int j = 0; j < player_number; j++) {
                    System.out.println((j + 1) + "". "" + playerList.get(j).player_name + ""\'s Destination Counter: ""
                            + endCounter[j]);
                }

                System.out.print(""Type \'n\' To Move Next: "");
                get_input.next();

                //UPDATE AND PRINT BOARD
                board.initializeHome(playerList, square);
                board.printBoard(border, square);

                for (int l = 0; l < player_number; l++) {
                    if (endCounter[l] == 4) {
                        System.out.println(""Winner: "" + playerList.get(l).player_name);
                        gameOver = false;
                        break;
                    }
                }

                //COUNTING LEADERBOARD FOR SELECTING WINNER
                endCounter[0] = 0;
                endCounter[1] = 0;
                endCounter[2] = 0;
                endCounter[3] = 0;

            }

        }
    }
}",1
"import java.io.File;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;
public class DiskSpaceAnalyzer {
    public static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {

        boolean running = true;

        while (running) {
            System.out.println(""Select an option:"");
            System.out.println(""1. Visualize Files"");
            System.out.println(""2. Search Files"");
            System.out.println(""3. Show Duplicate Files"");
            System.out.println(""4. Backup Files"");
            System.out.println(""5. Quit"");
            System.out.print(""Enter your choice: "");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print(""Enter path to visualize: "");
                    String visualizePath = scanner.nextLine();
                    visualizeDiskInfo(new File(visualizePath), 0);
                    break;
                case 2:
                    System.out.print(""Enter path to search: "");
                    String searchPath = scanner.nextLine();
                    System.out.print(""Enter search keyword: "");
                    String keyword = scanner.nextLine();
                    searchFiles(new File(searchPath), keyword, true);
                    break;
                case 3:
                    System.out.print(""Enter path to detect duplicate files: "");
                    String duplicatePath = scanner.nextLine();
                    DuplicateFileDetector.detectDuplicates(new File(duplicatePath));
                    DuplicateFileDetector.printDuplicateFile();
                    break;
                case 4:
                    System.out.print(""Enter source directory path: "");
                    String sourceFolderPath = scanner.nextLine();
                    System.out.print(""Enter backup directory path: "");
                    String backupFolderPath = scanner.nextLine();
                    FileBackup.createBackup(new File(sourceFolderPath), backupFolderPath);{
                    if (!FileBackup.createBackup(new File(sourceFolderPath), backupFolderPath)) {
                        System.out.println(""Backup process failed."");
                    } else {
                        System.out.println(""Backup process completed successfully."");
                    }
                    }
                    break;
                case 5:
                    running = false;
                    System.out.println(""Exiting the program."");
                    break;
                default:
                    System.out.println(""Invalid choice. Please enter a valid option."");
                    break;
            }
        }
    }

    public static void getFileInformation(File file) {
        if (file.exists()) {
            System.out.println(""File Name: "" + file.getName());
            System.out.println(""Total File Size: "" + formatFileSize(calculateFileSize(file)));
        } else {
            System.out.println(""File does not exist."");
        }
    }

    public static long calculateFileSize(File file) {
        long totalSize = 0;

        if (file.isDirectory()) {
            File[] files = file.listFiles();
            if (files != null) {
                for (File subFile : files) {
                    totalSize += calculateFileSize(subFile);
                }
            }
        } else {
            totalSize += file.length();
        }

        return totalSize;
    }

    public static String formatFileSize(long size) {
        if (size < 1024) {
            return size + "" bytes"";
        } else if (size < 1024 * 1024) {
            double sizeInKB = (double) size / 1024;
            return new DecimalFormat(""#0.00"").format(sizeInKB) + "" KB"";
        } else if (size < 1024 * 1024 * 1024) {
            double sizeInMB = (double) size / (1024 * 1024);
            return new DecimalFormat(""#0.00"").format(sizeInMB) + "" MB"";
        } else {
            double sizeInGB = (double) size / (1024 * 1024 * 1024);
            return new DecimalFormat(""#0.00"").format(sizeInGB) + "" GB"";
        }
    }

    public static void visualizeDiskInfo(File directory, int level) {
        File[] files = directory.listFiles();

        if (files != null) {
            getFileInformation(directory);
            Arrays.sort(files, new Comparator<File>() {
                        public int compare(File file1, File file2) {
                            if (file1.isDirectory() && file2.isFile()) {
                                return -1;
                            } else if (file1.isFile() && file2.isDirectory()) {
                                return 1;
                            } else {
                                long size1 = file1.length();
                                long size2 = file2.length();
                                return Long.compare(size1, size2);
                            }
                        }
                    }
            )
            ;

            for (File file : files) {
                if (file.isDirectory()) {
                    printFileIndention(file.getName(), formatFileSize(calculateFileSize(file)), level);
                    visualizeDiskInfo(file, level + 1);
                } else {
                    printFileIndention(file.getName(), formatFileSize(file.length()), level);
                }
            }
        }
    }

    public static void printFileIndention(String fileName, String fileSize, int level) {
        StringBuilder indentation = new StringBuilder();
        for (int i = 0; i < level; i++) {
            indentation.append(""   "");
        }
        System.out.println(indentation + ""└── "" + fileName + "" ("" + fileSize + "")"");
    }

    public static void sortFiles(File directory) {
        File[] files = directory.listFiles();

        if (files != null && files.length > 1) {
            mergeSort(files, 0, files.length - 1);

            for (File file : files) {
                System.out.println(file.getName() + "" ("" + formatFileSize(file.length()) + "")"");
            }
        }
    }

    public static void mergeSort(File[] files, int start, int end) {
        if (start < end) {
            int mid = (start + end) / 2;
            mergeSort(files, start, mid);
            mergeSort(files, mid + 1, end);
            merge(files, start, mid, end);
        }
    }

    public static void merge(File[] files, int start, int mid, int end) {
        int leftSize = mid - start + 1;
        int rightSize = end - mid;

        File[] leftArray = new File[leftSize];
        File[] rightArray = new File[rightSize];

        System.arraycopy(files, start, leftArray, 0, leftSize);
        System.arraycopy(files, mid + 1, rightArray, 0, rightSize);

        int leftIndex = 0;
        int rightIndex = 0;
        int mergeIndex = start;

        while (leftIndex < leftSize && rightIndex < rightSize) {
            if (leftArray[leftIndex].length() <= rightArray[rightIndex].length()) {
                files[mergeIndex] = leftArray[leftIndex];
                leftIndex++;
            } else {
                files[mergeIndex] = rightArray[rightIndex];
                rightIndex++;
            }
            mergeIndex++;
        }

        while (leftIndex < leftSize) {
            files[mergeIndex] = leftArray[leftIndex];
            leftIndex++;
            mergeIndex++;
        }

        while (rightIndex < rightSize) {
            files[mergeIndex] = rightArray[rightIndex];
            rightIndex++;
            mergeIndex++;
        }
    }

    public static void searchFiles(File directory, String keyword, boolean performSearch) {
        if (!performSearch) {
            return;
        }

        File[] files = directory.listFiles();

        if (files != null) {
            Arrays.sort(files, Comparator.comparing(File::getName));

            for (File file : files) {
                if (file.getName().toLowerCase().contains(keyword)) {
                    System.out.println(""   "" + file.getPath());
                }

                if (file.isDirectory()) {
                    searchFiles(file, keyword, true);
                }
            }
        }
    }
}",1
"import java.io.File;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;
public class Project {
    public static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        boolean running = true;

        while (running) {
            System.out.print(""Enter path: "");
            String path = scanner.nextLine();
            System.out.println();

            File file = new File(path);

            if (file.exists()) {
                getFileInformation(file);
                System.out.println();
                visualizeDiskInfo(file, 0);

                boolean searching = true;
                while (searching) {
                    System.out.print(""Do you want to search for files (yes/no)? "");
                    String searchChoice = scanner.nextLine();

                    if (searchChoice.equalsIgnoreCase(""yes"")) {
                        System.out.print(""Enter search keyword: "");
                        String keyword = scanner.nextLine();
                        searchFiles(file, keyword,true);
                    } else if (searchChoice.equalsIgnoreCase(""no"")) {
                        searching = false;
                    }
                }
            } else {
                System.out.println(""Invalid path."");
            }

            if (running) {
                System.out.print(""Do you want to run the program again (yes/no)? "");
                String againChoice = scanner.nextLine();
                if (!againChoice.equalsIgnoreCase(""yes"")) {
                    running = false;
                }
            }

        }
    }


    public static void getFileInformation(File file) {
        if (file.exists()) {
            System.out.println(""File Name: "" + file.getName());
            System.out.println(""Total File Size: "" + formatFileSize(calculateFileSize(file)));
        } else {
            System.out.println(""File does not exist."");
        }
    }

    public static long calculateFileSize(File file) {
        long totalSize = 0;

        if (file.isDirectory()) {
            File[] files = file.listFiles();
            if (files != null) {
                for (File subFile : files) {
                    totalSize += calculateFileSize(subFile);
                }
            }
        } else {
            totalSize += file.length();
        }

        return totalSize;
    }

    public static String formatFileSize(long size) {
        if (size < 1024) {
            return size + "" bytes"";
        } else if (size < 1024 * 1024) {
            double sizeInKB = (double) size / 1024;
            return new DecimalFormat(""#0.00"").format(sizeInKB) + "" KB"";
        } else if (size < 1024 * 1024 * 1024) {
            double sizeInMB = (double) size / (1024 * 1024);
            return new DecimalFormat(""#0.00"").format(sizeInMB) + "" MB"";
        } else {
            double sizeInGB = (double) size / (1024 * 1024 * 1024);
            return new DecimalFormat(""#0.00"").format(sizeInGB) + "" GB"";
        }
    }

    public static void visualizeDiskInfo(File directory, int level) {
        File[] files = directory.listFiles();

        if (files != null) {
            Arrays.sort(files, new Comparator<File>() {
                        public int compare(File file1, File file2) {
                            if (file1.isDirectory() && file2.isFile()) {
                                return -1;
                            } else if (file1.isFile() && file2.isDirectory()) {
                                return 1;
                            } else {
                                long size1 = file1.length();
                                long size2 = file2.length();
                                return Long.compare(size1, size2);
                            }
                        }
                    }
            )
            ;

            for (File file : files) {
                if (file.isDirectory()) {
                    printFileIndention(file.getName(), formatFileSize(calculateFileSize(file)), level);
                    visualizeDiskInfo(file, level + 1);
                } else {
                    printFileIndention(file.getName(), formatFileSize(file.length()), level);
                }
            }
        }
    }

    public static void printFileIndention(String fileName, String fileSize, int level) {
        StringBuilder indentation = new StringBuilder();
        for (int i = 0; i < level; i++) {
            indentation.append(""   "");
        }
        System.out.println(indentation + ""└── "" + fileName + "" ("" + fileSize + "")"");
    }

    public static void sortFiles(File directory) {
        File[] files = directory.listFiles();

        if (files != null && files.length > 1) {
            mergeSort(files, 0, files.length - 1);

            for (File file : files) {
                System.out.println(file.getName() + "" ("" + formatFileSize(file.length()) + "")"");
            }
        }
    }

    public static void mergeSort(File[] files, int start, int end) {
        if (start < end) {
            int mid = (start + end) / 2;
            mergeSort(files, start, mid);
            mergeSort(files, mid + 1, end);
            merge(files, start, mid, end);
        }
    }

    public static void merge(File[] files, int start, int mid, int end) {
        int leftSize = mid - start + 1;
        int rightSize = end - mid;

        File[] leftArray = new File[leftSize];
        File[] rightArray = new File[rightSize];

        System.arraycopy(files, start, leftArray, 0, leftSize);
        System.arraycopy(files, mid + 1, rightArray, 0, rightSize);

        int leftIndex = 0;
        int rightIndex = 0;
        int mergeIndex = start;

        while (leftIndex < leftSize && rightIndex < rightSize) {
            if (leftArray[leftIndex].length() <= rightArray[rightIndex].length()) {
                files[mergeIndex] = leftArray[leftIndex];
                leftIndex++;
            } else {
                files[mergeIndex] = rightArray[rightIndex];
                rightIndex++;
            }
            mergeIndex++;
        }

        while (leftIndex < leftSize) {
            files[mergeIndex] = leftArray[leftIndex];
            leftIndex++;
            mergeIndex++;
        }

        while (rightIndex < rightSize) {
            files[mergeIndex] = rightArray[rightIndex];
            rightIndex++;
            mergeIndex++;
        }
    }

    public static void searchFiles(File directory, String keyword, boolean performSearch) {
        if (!performSearch) {
            return;
        }

        File[] files = directory.listFiles();

        if (files != null) {
            Arrays.sort(files, Comparator.comparing(File::getName));

            for (File file : files) {
                if (file.getName().toLowerCase().contains(keyword)) {
                    System.out.println(""   "" + file.getPath());
                }

                if (file.isDirectory()) {
                    searchFiles(file, keyword, true);
                }
            }
        }
    }
}",1
"import java.util.*;
import java.time.Duration;
import java.time.Instant;

public class Puzzle2 {
    int [][]  puzzle1 = new int [][] {
        {0, 1, 1, 0, 1},
        {1, 0, 0, 1, 1},
        {1, 0, 0, 1, 1},
        {0, 1, 1, 0, 0},
        {1, 1, 1, 0, 0}
    };

    int [][]  puzzle2 = new int [][] {
        {0, 1, 1, 0, 0, 1},
        {1, 0, 0, 0, 1, 1},
        {1, 0, 0, 1, 1, 0},
        {0, 0, 1, 0, 1, 0},
        {0, 1, 1, 1, 0, 0},
        {1, 1, 0, 0, 0, 0},
    };

    int [][]  puzzle3 = new int [][] {
        {0, 3, 2, 0, 0, 4},
        {3, 0, 1, 4, 0, 6},
        {2, 1, 0, 5, 2, 0},
        {0, 4, 5, 0, 1, 1},
        {0, 0, 2, 1, 1, 0},
        {4, 6, 0, 1, 0, 0},
    };

    private Graph puzzleGraph;

    public Puzzle2() {
        puzzleGraph = new Graph();
        int size = puzzle3.length;

        for (int i = 0; i < size; i++) {
            for (int j = i + 1; j < size; j++) {
                int weight = puzzle3[i][j];
                if (weight > 0) {
                    puzzleGraph.addEdge(i, j, weight);
                    puzzleGraph.addEdge(j, i, weight);
                }
             }
          }
       }

      public void playLevel1() {
         Scanner scanner = new Scanner(System.in);
        int round = 1;
        int tries = 10;
        int matchesNeeded = 1;
        Instant startTime = Instant.now();
        Duration timeLimit = Duration.ofSeconds(120);

        while (round <= 3 && tries > 0 && Duration.between(startTime, Instant.now()).compareTo(timeLimit) <= 0) {
            int start, end;
            int[] validOptions = getValidOptions(round);

            System.out.println(""Remaining time: "" + (timeLimit.toMillis() - Duration.between(startTime, Instant.now()).toMillis()) / 1000 + "" seconds"");
            System.out.println(""Remaining tries: "" + tries);
            System.out.println();

            do {
                System.out.println(""Round "" + round + "" - Choose a start point ("" + Arrays.toString(validOptions) + "") for Level 1: "");
                start = scanner.nextInt();
            } while (!isValidOption(start, validOptions));

            do {
                System.out.println(""Round "" + round + "" - Choose an end point ("" + Arrays.toString(validOptions) + "") for Level 1: "");
                end = scanner.nextInt();
            } while (!isValidOption(end, validOptions));

            if (puzzle1[start - 1][end - 1] == 1 ) {
                System.out.println(""Round "" + round + "" - It's a match!"");
                matchesNeeded--;

                if (matchesNeeded == 0) {
                    round++;
                    matchesNeeded = round;
                }
            } else {
                System.out.println(""Round "" + round + "" - Invalid choice. No match."");
                tries--;
            }
        }

        if (round > 3) {
            System.out.println(""Congratulations! You passed Level 1."");
        } else {
            System.out.println(""Sorry, you didn't pass Level 1. Better luck next time."");
        }
    }

    private int[] getValidOptions(int round) {
        int[] validOptions = new int[round + 2];
        for (int i = 0; i < validOptions.length; i++) {
            validOptions[i] = i + 3 - round;
            if (validOptions[i] == 0){
                validOptions[i] = 5;
            }
        }
        return validOptions;
    }

    private boolean isValidOption(int option, int[] validOptions) {
        for (int validOption : validOptions) {
            if (option == validOption) {
                return true;
            }
        }
        return false;
    }
    private int[] getValidOptions3(int round) {
                int[] validOptions3 = new int[round + 2];
                for (int i = 0; i < validOptions3.length; i++) {
                    validOptions3[i] = i + 3 - round;
                    if (validOptions3[i] == 0){
                        validOptions3[i] = 6;
                    }
                }
                return validOptions3;
    }

    private boolean isValidOption3(int option, int[] validOptions3) {
                for (int validOption3 : validOptions3) {
                    if (option == validOption3) {
                        return true;
                    }
                }
                return false;
    }
    public void playLevel2() {
      Scanner scanner = new Scanner(System.in);
            int round = 1;
            int tries = 9;  
            int matchesNeeded = 1;
            Instant startTime = Instant.now();
            Duration timeLimit = Duration.ofSeconds(90);
        
            while (round <= 3 && tries > 0 && Duration.between(startTime, Instant.now()).compareTo(timeLimit) <= 0) {
                int start, end;
                int[] validOptions = getValidOptions(round);
        
                System.out.println(""Remaining time: "" + (timeLimit.toMillis() - Duration.between(startTime, Instant.now()).toMillis()) / 1000 + "" seconds"");
                System.out.println(""Remaining tries: "" + tries);
                System.out.println();
                
                do {
                    System.out.println(""Round "" + round + "" - Choose a start point ("" + Arrays.toString(validOptions) + "") for Level 2: "");
                    start = scanner.nextInt();
                } while (!isValidOption(start, validOptions));
        
                do {
                    System.out.println(""Round "" + round + "" - Choose an end point ("" + Arrays.toString(validOptions) + "") for Level 2: "");
                    end = scanner.nextInt();
                } while (!isValidOption(end, validOptions));
        
                if (puzzle2[start - 1][end - 1] == 1) {
                    System.out.println(""Round "" + round + "" - It's a match!"");
                    matchesNeeded--;
        
                    if (matchesNeeded == 0) {
                        round++;
                        matchesNeeded = round;
                    }
                } else {
                    System.out.println(""Round "" + round + "" - Invalid choice. No match."");
                    tries--;
                }
            }
        
            if (round > 3) {
                System.out.println(""Congratulations! You passed Level 2."");
            } else {
                System.out.println(""Sorry, you didn't pass Level 2. Better luck next time."");
            }
    }

    public void playLevel3() {
         Scanner scanner = new Scanner(System.in);
        int round = 1;
        int tries = 11;
        int matchesNeeded = 1; 
        Instant startTime = Instant.now();
        Duration timeLimit = Duration.ofSeconds(60);

        while (round <= 3 && tries > 0 && Duration.between(startTime, Instant.now()).compareTo(timeLimit) <= 0) {
            int start, end;
            int[] validOptions3 = getValidOptions3(round);

            System.out.println(""Remaining time: "" + (timeLimit.toMillis() - Duration.between(startTime, Instant.now()).toMillis()) / 1000 + "" seconds"");
            System.out.println(""Remaining tries: "" + tries);
            System.out.println();

            do {
                System.out.println(""Round "" + round + "" - Choose a start point ("" + Arrays.toString(validOptions3) + "") for Level 3: "");
                start = scanner.nextInt();
            } while (!isValidOption3(start, validOptions3));

            do {
                System.out.println(""Round "" + round + "" - Choose an end point ("" + Arrays.toString(validOptions3) + "") for Level 3: "");
                end = scanner.nextInt();
            } while (!isValidOption3(end, validOptions3));

            List<Integer> shortestPath = puzzleGraph.shortestPath(start - 1, end - 1);

            if (shortestPath.contains(start - 1) && shortestPath.contains(end - 1)) {
                boolean connected = false;
                for (int i = 0; i < shortestPath.size() - 1; i++) {
                    if ((shortestPath.get(i) == start - 1 && shortestPath.get(i + 1) == end - 1) ||
                        (shortestPath.get(i) == end - 1 && shortestPath.get(i + 1) == start - 1)) {
                        connected = true;
                        break;
                    }
                }
                if (connected) {
                    System.out.println(""Round "" + round + "" - Connected in shortest path!"");
                    matchesNeeded--;
            
                    if (matchesNeeded == 0) {
                        round++;
                        matchesNeeded = round;
                    }
                } else {
                    System.out.println(""Round "" + round + "" - Not connected in shortest path."");
                    tries--;
                }
            } else {
                System.out.println(""Round "" + round + "" - Not in shortest path."");
                tries--;
            }
            
        }

        if (round > 3) {
            System.out.println(""Congratulations! You passed Level 3."");
        } else {
            System.out.println(""Sorry, you didn't pass Level 3. Better luck next time."");
        }
    }

    public static void main(String[] args) {
        System.out.println(""\t\t\t\t!!!   Welcome to Art Of Trio  !!!"");
          System.out.println(""Manual : "");

        System.out.println(""Every level has a stored puzzle. In each level and each round user has to connect two points from the given available points."");
        System.out.println(""They have to try to connect the points same as they are connected in the fixed puzzle."");
        System.out.println(""Good luck on your experience with this game & try to get help from your luck to finish this trio successfully."");

        System.out.println("""");
        System.out.println("""");

        System.out.println(""Select a level: "");
        System.out.println(""1. Level 1"");
        System.out.println(""2. Level 2"");
        System.out.println(""3. Level 3"");

        Puzzle2 puzzleGame = new Puzzle2();

        Scanner scanner = new Scanner(System.in);
        int selectedLevel = scanner.nextInt();

        switch (selectedLevel) {
            case 1:
                puzzleGame.playLevel1();
                break;
            case 2:
                puzzleGame.playLevel2();
                break;
            case 3:
                puzzleGame.playLevel3();
                break;
            default:
                System.out.println(""Invalid level selection."");
                break;
        }
    }
    

    private class Graph {
        private Map<Integer, List<Edge>> adjacencyList = new HashMap<>();
        
        public Graph() {
            adjacencyList = new HashMap<>();
        }

         public void addEdge(int source, int destination, int weight) {
            adjacencyList.putIfAbsent(source, new ArrayList<>());
            adjacencyList.get(source).add(new Edge(destination, weight));
        }

        public List<Integer> shortestPath(int start, int end) {
            PriorityQueue<Node> minHeap = new PriorityQueue<>(Comparator.comparingInt(node -> node.distance));
            int[] distances = new int[puzzle3.length];
            Arrays.fill(distances, Integer.MAX_VALUE);
            distances[start] = 0;
            boolean[] visited = new boolean[puzzle3.length];

            minHeap.offer(new Node(start, 0));

            while (!minHeap.isEmpty()) {
                Node currentNode = minHeap.poll();
                if (visited[currentNode.vertex]) {
                    continue;
                }
                visited[currentNode.vertex] = true;

                for (Edge neighbor : adjacencyList.getOrDefault(currentNode.vertex, new ArrayList<>())) {
                    if (!visited[neighbor.destination]) {
                        int newDistance = distances[currentNode.vertex] + neighbor.weight;
                        if (newDistance < distances[neighbor.destination]) {
                            distances[neighbor.destination] = newDistance;
                            minHeap.offer(new Node(neighbor.destination, newDistance));
                        }
                    }
                }
            }

            List<Integer> shortestPath = new ArrayList<>();
            int current = end;
            while (current != start) {
                shortestPath.add(current);
                for (Edge edge : adjacencyList.get(current)) {
                    if (distances[current] == distances[edge.destination] + edge.weight) {
                        current = edge.destination;
                        break;
                    }
                }
            }
            shortestPath.add(start);
            Collections.reverse(shortestPath);
            return shortestPath;
        }
    
    }
}
    class Node {
        int vertex;
        int distance;

        public Node(int vertex, int distance) {
            this.vertex = vertex;
            this.distance = distance;
        }
    }

    class Edge {
        int destination;
        int weight;

        public Edge(int destination, int weight) {
            this.destination = destination;
            this.weight = weight;
        }
    }",1
"
import java.util.*;

class MoonBuggyGame {
    Scanner scanner = new Scanner(System.in);

    boolean game_over;
    int distance;
    int energy;
    int grid_size = 10;
    Vehicle[] players = new Vehicle[2];
    List<Enemy> enemies = new ArrayList<>();
    Moon_surface moonSurface;

    int min_distance_to_win = 16;       // Minimum distance to win
    int min_energy_to_continue = 10;   // Minimum energy to continue

    void playGame() {
        System.out.println(""Welcome to Moon Buggy "");
        System.out.println(""Choose a game mode:"");
        System.out.println(""1. Single Player"");
        System.out.println(""2. Player vs Player"");
        int game_mode = scanner.nextInt();

        if (game_mode == 1) {
            init_players(1);
        } else if (game_mode == 2) {
            init_players(2);
        } else {
            System.out.println(""Invalid game mode selection. Exiting the game."");
            return;
        }

        energy = 50;

        init_enemies();

        moonSurface = new Moon_surface(grid_size);

        while (!game_over) {
            for (Vehicle player : players) {
                if (player != null) {
                    playTurn(player, game_mode);
                    if (game_over) {
                        break;
                    }
                }
            }
        }

        System.out.println(""Game Over. Thanks for playing!"");
        if (game_mode == 1) {  // Single Player
            if (players[0].is_eliminated()) {
                System.out.println(players[0].getName() + "", you lose the game environment!"");
                System.out.print(""Press enter to quit..."");
                scanner.nextLine(); // Wait for user to press enter before quitting
            } else if (players[0].get_posX() >= min_distance_to_win && players[0].getEnergy() > 0) {
                System.out.println(players[0].getName() + "" wins!"");
            }           else {
                System.out.println(players[0].getName() + "" couldn't meet the winning conditions."");
            }
        }

        else if (game_mode == 2) {  // Player vs Player
            if (players[0] != null && players[1] != null) {
                if (players[0].is_eliminated() && players[1].is_eliminated()) {
                    System.out.println(""Both players are out of energy. It's a draw!"");
                } else if (players[0].is_eliminated()) {
                    System.out.println(players[1].getName() + "" wins!"");
                } else if (players[1].is_eliminated()) {
                    System.out.println(players[0].getName() + "" wins!"");
                } else {
                    System.out.println(""Both players have reached the goal!"");
                }
            } else if (players[0] != null) {
                System.out.println(players[0].getName() + "" wins!"");
            } else if (players[1] != null) {
                System.out.println(players[1].getName() + "" wins!"");
            } else {
                System.out.println(""No valid players to determine a winner."");
            }
        }
    }


    void init_players(int num_players) {
        for (int i = 0; i < num_players; i++) {
            System.out.print(""Enter name for Player "" + (i + 1) + "": "");
            String player_name = scanner.next();
            players[i] = new Vehicle(player_name);
        }
    }

    void playTurn(Vehicle player, int game_mode) {
        clear_console(); // Clear the console before displaying game state
        display_game_state(player);
        moonSurface.display(player.get_posX(), player.get_posY(), get_enemy_pos());

        if (game_mode == 1) {  // Single Player
            if (Math.random() < 0.5) {  // 50% chance of enemy attack
                if (enemyAttack(player)) {
                    System.out.println(player.getName() + "", you lose the game!"");
                    System.out.print(""Press enter to quit..."");
                    scanner.nextLine(); // Wait for user to press enter before quitting
                    game_over = true;
                    return; // Player is eliminated, exit the turn
                }
            }
            if (player.get_posX() >= 16 && player.getEnergy() > 0) {
                System.out.println(player.getName() + "" wins!"");
                game_over = true;
                return;
            }
        } else if (game_mode == 2) {  // Player vs Player
            for (Vehicle p : players) {
                if (p != null) {
                    if (Math.random() < 0.5) {  // 50% chance of enemy attack
                        if (enemyAttack(p)) {
                            System.out.println(p.getName() + "" loses the game environment!"");
                            System.out.print(""Press enter to quit..."");
                            scanner.nextLine(); // Wait for user to press enter before quitting
                            p.eliminate();
                        }
                    }
                    if (p.get_posX() >= min_distance_to_win && p.getEnergy() > 0) {
                        System.out.println(p.getName() + "" wins!"");
                        game_over = true;
                        return;
                    }
                }
            }
        }




        System.out.print(player.getName() + "", enter 'F' to move forward, 'B' to move backward, 'U' to move up, 'D' to move down, 'E' to make enemies escape, 'Q' to quit: "");
        String input = scanner.next();
        switch (input.toUpperCase()) {
            case ""F"":
                movePlayer(player, 1, 0);
                break;
            case ""B"":
                movePlayer(player, -1, 0);
                break;
            case ""U"":
                movePlayer(player, 0, -1);
                break;
            case ""D"":
                movePlayer(player, 0, 1);
                break;
            case ""E"":
                escape_enemies();
                break;
            case ""Q"":
                game_over = true;
                break;
            default:
                System.out.println(""Invalid input."");
        }
        energy--;

        updateGame(player);
        check_collis(player);
        if (game_mode == 1 && player.get_posX() >= min_distance_to_win && player.getEnergy() > 0) {
            System.out.println(""Congratulations! "" + player.getName() + "" wins!"");
            game_over = true;
        }
        if (game_mode == 2) {  // Player vs Player
            if (player.get_posX() >= min_distance_to_win && player.getEnergy() > 0) {
                System.out.println(""Congratulations! "" + player.getName() + "" wins!"");
                game_over = true;
            }
        }
    }

    // ... (existing code)

    boolean check_collis(Vehicle player) {
        for (Enemy enemy : enemies) {
            if (enemy.get_posX() == player.get_posX() && enemy.get_posY() == player.get_posY()) {
                System.out.println(""Collision! "" + enemy.getName() + "" attacked "" + player.getName() + ""!"");
                energy -= 10;
                moonSurface.mark_collis(player.get_posX(), player.get_posY());
                player.eliminate(); // Eliminate the player
                System.out.println(enemy.getName() + "" loses the game  due to collision!"");
                return true; // Return true if collision occurs
            }
        }
        return false; // Return false if no collision occurs
    }

    void init_enemies() {
        Random random = new Random();
        int num_enemies = random.nextInt(3) + 2;

        for (int i = 0; i < num_enemies; i++) {
            int enemy_posX = random.nextInt(grid_size);
            int enemy_posY = random.nextInt(grid_size);
            enemies.add(new Enemy(enemy_posX, enemy_posY));
        }
    }

    int[] get_enemy_pos() {
        int[] enemy_pos = new int[enemies.size() * 2];
        for (int i = 0; i < enemies.size(); i++) {
            enemy_pos[i * 2] = enemies.get(i).get_posX();
            enemy_pos[i * 2 + 1] = enemies.get(i).get_posY();
        }
        return enemy_pos;
    }
    void movePlayer(Vehicle player, int directionX, int directionY) {
        int new_posX = player.get_posX() + directionX;
        int new_posY = player.get_posY() + directionY;

        if (new_posX < 0) {
            new_posX = grid_size - 1; // Wrap around to the last column
        } else if (new_posX >= grid_size) {
            new_posX = 0; // Wrap around to the first column
        }

        if (new_posY < 0) {
            new_posY = grid_size - 1; // Wrap around to the bottom row
        } else if (new_posY >= grid_size) {
            new_posY = 0; // Wrap around to the top row
        }

        player.set_pos(new_posX, new_posY);
        distance++;
    }

    void updateGame(Vehicle player) {
        if (distance >= min_distance_to_win) {  // Adjust the condition here
            if (energy > 0) {
                System.out.println(""Congratulations! "" + player.getName() + "" wins!"");
            } else {
                System.out.println(player.getName() + "" has reached the goal, but they are out of energy."");
            }
            game_over = true;
        }
        if (energy <= 0) {
            System.out.println(player.getName() + "" is out of energy."");
            game_over = true;
        }
    }


    void escape_enemies() {
        for (Enemy enemy : enemies) {
            enemy.escape();
        }
        System.out.println(""Enemies have escaped!"");
    }
    boolean enemyAttack(Vehicle player) {
        for (Enemy enemy : enemies) {
            enemy.attack(player);
            try {
                Thread.sleep(1000); // Delay for 1 second
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            clear_console(); // Clear the console before displaying updated game state
            display_game_state(player);
            moonSurface.display(player.get_posX(), player.get_posY(), get_enemy_pos());

            if (player.is_eliminated()) {
                System.out.println(player.getName() + "" has been eliminated!"");
                return true; // Player is eliminated by enemy attack
            }
        }
        return false; // Player is not eliminated by enemy attack
    }


    void display_game_state(Vehicle player) {
        System.out.println(""Distance: "" + distance);
        System.out.println(""Energy: "" + energy);
        System.out.println(player.getName() + "" position: ("" + player.get_posX() + "", "" + player.get_posY() + "")"");
    }

    void clear_console() {
        for (int i = 0; i < 50; i++) {
            System.out.println();
        }
    }
}







",1
"import java.util.Map;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        String filePath1 = null;
        String filePath2 = null;
        String textFilePath1 = null;
        String textFilePath2 = null;

        while (running) {
            System.out.println(""Choose an option:"");
            System.out.println(""1. Work with text files"");
            System.out.println(""2. Work with java files"");
            System.out.println(""3. Stop the program"");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline

            switch (choice) {
                case 1:
                    //    if (textFilePath1 == null || textFilePath2 == null) {
                    System.out.println(""Enter the path to the first text file:"");
                    textFilePath1 = scanner.nextLine();

                    System.out.println(""Enter the path to the second text file:"");
                    textFilePath2 = scanner.nextLine();
                    //     }
                    if (!textFilePath1.endsWith("".txt"") || !textFilePath2.endsWith("".txt""))
                    {
                        System.out.println(""Invalid file format...."");
                        break;
                    }

                    while (true) {
                        System.out.println(""Choose an option:"");
                        System.out.println(""1. Check similarities and dissimilarities"");
                        System.out.println(""2. Count words in both files"");
                        System.out.println(""3. Back to main menu"");
                        int textOption = scanner.nextInt();
                        scanner.nextLine(); // Consume the newline

                        switch (textOption) {
                            case 1:
                                System.out.println(""Choose the comparison algorithm:"");
                                System.out.println(""1. Cosine Similarity"");
                                System.out.println(""2. LCS Similarity"");
                                System.out.println(""3. Levenshtein Similarity"");
                                System.out.println(""4. Cancel and go back to the main menu"");
                                int algoChoice = scanner.nextInt();
                                scanner.nextLine(); // Consume the newline

                                if (algoChoice == 5) {
                                    break;
                                }

                                double similarity = 0.0;

                                switch (algoChoice) {
                                    case 1:
                                        CosineSimilarity cosineSimilarity = new CosineSimilarity();
                                        similarity = cosineSimilarity.calculateSimilarity(textFilePath1, textFilePath2);
                                        break;

                                    case 2:
                                        LCSSimilarity lcsSimilarity = new LCSSimilarity();
                                        similarity = lcsSimilarity.calculateSimilarity(textFilePath1, textFilePath2);
                                        break;
                                    case 3:
                                        LevenshteinDistance levenshteinDistance = new LevenshteinDistance();
                                        similarity = levenshteinDistance.calculateSimilarity(textFilePath1,textFilePath2);
                                        break;
                                    default:
                                        System.out.println(""Invalid algorithm choice"");
                                        continue;
                                }

                                double dissimilarity = 1 - similarity;
                                double sim=similarity*100;
                                double dis=dissimilarity*100;
                                System.out.println(""Chosen Similarity: "" +String.format(""%.2f"",sim) +""%"");
                                System.out.println(""Chosen Similarity: "" +String.format(""%.2f"",dis) +""%"");
                                break;

                            case 2:
                                Map<String, Integer> wordCountMap1 = WordCounter.countWords(textFilePath1);
                                Map<String, Integer> wordCountMap2 = WordCounter.countWords(textFilePath2);

                                System.out.println(""Word counts in the first file:"");
                                for (Map.Entry<String, Integer> entry : wordCountMap1.entrySet()) {
                                    System.out.println(entry.getKey() + "": "" + entry.getValue());
                                }

                                System.out.println(""Word counts in the second file:"");
                                for (Map.Entry<String, Integer> entry : wordCountMap2.entrySet()) {
                                    System.out.println(entry.getKey() + "": "" + entry.getValue());
                                }
                                break;

                            case 3:
                                break;

                            default:
                                System.out.println(""Invalid choice"");
                                break;
                        }

                        System.out.println(""Do you want to continue working with text files? (yes/no):"");
                        String continueChoice = scanner.nextLine();
                        if (!continueChoice.equalsIgnoreCase(""yes"")) {
                            break;
                        }
                    }
                    break;


                case 2:
                    //    if (filePath1 == null || filePath2 == null) {
                    System.out.println(""Enter the path to the first Java file:"");
                    filePath1 = scanner.nextLine();

                    System.out.println(""Enter the path to the second Java file:"");
                    filePath2 = scanner.nextLine();
                    //     }
                    if (!filePath1.endsWith("".java"") || !filePath2.endsWith("".java""))
                    {
                        System.out.println(""Invalid file format....."");
                        break;
                    }

                    while (true) {
                        System.out.println(""Choose an option:"");
                        System.out.println(""1. Compare class count"");
                        System.out.println(""2. Compare method count"");
                        System.out.println(""3. Compare line count"");
                        System.out.println(""4. Similarity and Dissimilarity checking"");
                        System.out.println(""5. Back to main menu"");
                        int javaOption = scanner.nextInt();
                        scanner.nextLine(); // Consume the newline

                        switch (javaOption) {
                            case 1:
                                int classCount1 = JavaClassCounter.countClasses(filePath1);
                                int classCount2 = JavaClassCounter.countClasses(filePath2);

                                System.out.println(""Class count in the first Java file: "" + classCount1);
                                System.out.println(""Class count in the second Java file: "" + classCount2);
                                break;
                            case 2:
                                int methodCount1 = JavaMethodCounter.countMethods(filePath1);
                                int methodCount2 = JavaMethodCounter.countMethods(filePath2);

                                System.out.println(""Method count in the first Java file: "" + methodCount1);
                                System.out.println(""Method count in the second Java file: "" + methodCount2);
                                break;
                            case 3:
                                int lineCount1 = JavaLineCounter.countLines(filePath1);
                                int lineCount2 = JavaLineCounter.countLines(filePath2);

                                System.out.println(""Line count in the first Java file: "" + lineCount1);
                                System.out.println(""Line count in the second Java file: "" + lineCount2);
                                break;
                            case 4:
                                System.out.println(""Choose the comparison algorithm:"");
                                System.out.println(""1. Cosine Similarity"");
                                System.out.println(""2. LCS Similarity"");
                                System.out.println(""3. Levenshtein Similarity"");
                                System.out.println(""4. Cancel and go back to the main menu"");
                                int algoChoice = scanner.nextInt();
                                scanner.nextLine();

                                if (algoChoice == 5) {
                                    break;
                                }

                                double similarity = 0.0;

                                switch (algoChoice) {
                                    case 1:
                                        CosineSimilarity cosineSimilarity = new CosineSimilarity();
                                        similarity = cosineSimilarity.calculateSimilarity(filePath1, filePath2);
                                        break;

                                    case 2:
                                        LCSSimilarity lcsSimilarity = new LCSSimilarity();
                                        similarity = lcsSimilarity.calculateSimilarity(filePath1, filePath2);
                                        break;
                                    case 3:
                                        LevenshteinDistance levenshteinDistance = new LevenshteinDistance();
                                        similarity = levenshteinDistance.calculateSimilarity(filePath1, filePath2);
                                        break;
                                    default:
                                        System.out.println(""Invalid algorithm choice"");
                                        continue;
                                }

                                double dissimilarity = 1 - similarity;
                                double sim=similarity*100;
                                double dis=dissimilarity*100;

                                System.out.println(""Chosen Similarity: ""+ String.format(""%.2f"",sim)+""%"");
                                //System.out.print(""%.2f"",sim);
                                System.out.println(""Chosen Similarity: ""+ String.format(""%.2f"",sim)+""%"");
                                break;
                            case 5:
                                break;
                            default:
                                System.out.println(""Invalid choice"");
                                break;
                        }

                        System.out.println(""Do you want to continue working with Java files? (yes/no):"");
                        String continueChoice = scanner.nextLine();
                        if (!continueChoice.equalsIgnoreCase(""yes"")) {
                            break;
                        }
                    }
                    break;
                case 3:
                    running = false;
                    break;

                default:
                    System.out.println(""Invalid choice"");
                    break;
            }
        }

        System.out.println(""Program stopped."");
        scanner.close();
    }
}",1
"
package sub_class;
// A class to manipulate txt file
//we can save record ,search record,read record
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;



public class File_Basic {
    
    private static Scanner x;
    public static String[] Item=new String[20];
    public static String[] price=new String[20];
    public static String filepath;
    
   
   public static void saveRecord(String filename,String bookpath,String filepath){
        try {
            FileWriter fw=new FileWriter(filepath,true);
            BufferedWriter bw=new BufferedWriter(fw);
            PrintWriter pw=new PrintWriter(bw);
            
            pw.println(bookpath+"",""+filename);
            pw.flush();
            pw.close();
            fw.close();
            
           // JOptionPane.showMessageDialog(null, ""Record saved"");
        } catch (IOException ex) {
           //JOptionPane.showMessageDialog(null, ""Record not saved"");
        }
       
   }
 
   
   public static int ReadRecord(String filepath){
       int i=0;
        try {
            x=new Scanner(new File(filepath));
            x.useDelimiter(""[,\n]"");
            while(x.hasNext()){
                Item[i]=x.next();
                price[i]=x.next();
                i++;
            }
            x.close();
            System.out.println(i);
        } catch (FileNotFoundException ex) {
            
        }
        return i;
       
   }
   
      public static Boolean SearchRecord(String filepath,String item){
    int i=0;
    String name;
        try {
            x=new Scanner(new File(filepath));
            x.useDelimiter(""[,\n]"");
            while(x.hasNext()){
                name= x.next().trim();
                if(name.equalsIgnoreCase(item)){
                    Pdf_books.pdffilepath = x.next().trim();
                    i++;
                }
            }
            x.close();
            System.out.println(i);
            
        } catch (FileNotFoundException ex) {
            
        }
        if(i==0){
                return false;
            }
            else{
                return true;
            }
}
      
}",0
"
package sub_class;
//Comes after successfully login,from here user can access all the features of the application
import frames.main_frame;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;


public class Home_frame extends main_frame{
    public JPanel main_panel,toppanel,leftpanel;
    public JButton search,teacherinfo,syllabus,offlinepdf;
    public JLabel teacherlabel,syllabuslabel,offlinepdflabel,elibrary;
    public JTextArea searcharea;
    public ImageIcon teacherImage,syllabusImage,offlinepdfImage;
    Font font=new Font(""Arial"",Font.BOLD,20);
    FlowLayout layout = new FlowLayout();
    JButton[] Semester=new JButton[10];
    public static String[] item=new String[20];
    public static String[] link=new String[20];
    public static int length;
    public Home_frame(String frame_title) {
        super(frame_title);
        setContainer();
        setMainPanel();
        setImage();
        setlabel();
        setbutton();
        setTextarea();
        actionlistener();
    }
    
     public void setContainer()
    {
        super.setContainer();
        container.setBackground(Color.WHITE);
    }
       
       public void setMainPanel()
    {
        //the middle part ,contains syllabus teacherinfo and offlinepdf option
        main_panel = new JPanel();
        main_panel.setBackground(Color.WHITE);
        main_panel.setLayout(null);  
        container.add(main_panel);
        //shows the application name and contains search part
         toppanel=new JPanel();
         toppanel.setBackground(Color.decode(""#4da6ff""));
         toppanel.setBounds(0,0,900,100);
         toppanel.setLayout(null);
         layout.setHgap(20);
         main_panel.add(toppanel);
         //contains semester button and in the left part
         leftpanel=new JPanel();
         leftpanel.setBackground(Color.decode(""#2471A3""));
         leftpanel.setBounds(0,100,300,500);
         leftpanel.setLayout(layout);
         layout.setVgap(10);
         main_panel.add(leftpanel);
    }
     public void setbutton(){
           for(int i=1;i<=8;i++){
             
             Semester[i]=new JButton(""Semester-""+i);
             Semester[i].setFont(font);
             Semester[i].setForeground(Color.decode(""#2471A3""));
             Semester[i].setPreferredSize(new Dimension(200,45));
             leftpanel.add( Semester[i]);
             
         }
           
        search=new JButton(""Search"");
        search.setBounds(740, 20, 125, 50);
        search.setBackground(Color.decode(""#2471A3""));
        search.setForeground(Color.WHITE);
        search.setFont(font);
        toppanel.add(search);
        
        syllabus=new JButton(syllabusImage);
        syllabus.setBounds(350,130,205,180);
        main_panel.add( syllabus);
        teacherinfo=new JButton(teacherImage);
        teacherinfo .setBounds(660,130,205,180);
        main_panel.add(teacherinfo);
        offlinepdf=new JButton(offlinepdfImage);
        offlinepdf .setBounds(500,350,205,180);
        main_panel.add( offlinepdf);
         
     }
     
     public void setlabel(){
         elibrary=new JLabel(""IIT-Library"");
         elibrary.setFont(new Font(""Arial"",Font.BOLD,40));
         elibrary.setForeground(Color.WHITE);
         elibrary.setBounds(50, 15, 400, 70);
          toppanel.add(elibrary);
          syllabuslabel=new JLabel(""Syllabus"");
          syllabuslabel.setFont(font);
          syllabuslabel.setBounds(400, 320, 205, 20);
          main_panel.add(syllabuslabel);
           teacherlabel=new JLabel(""Teacher's Info"");
      teacherlabel.setFont(font);
      teacherlabel.setBounds(680, 320, 205, 20);
      main_panel.add(teacherlabel);
       offlinepdflabel=new JLabel(""Offline Pdf"");
      offlinepdflabel.setFont(font);
      offlinepdflabel.setBounds(550, 540, 205, 20);
      main_panel.add(offlinepdflabel);
     }
     
      public void setTextarea(){
         searcharea=new JTextArea();
        searcharea.setBounds(350, 20, 350, 50);
         searcharea.setBorder(new LineBorder(Color.decode(""#2471A3""),3));
      searcharea.setFont(font);
      toppanel.add(searcharea);
     }
      
       public void setImage(){
          teacherImage=new ImageIcon(getClass().getResource(""/icons/teacher.png""));
         syllabusImage=new ImageIcon(getClass().getResource(""/icons/Syllabus.png""));
         offlinepdfImage=new ImageIcon(getClass().getResource(""/icons/offlinePdf.jpg""));
     }
    
       public void actionlistener(){
         
          for(int i=1;i<=8;i++){
            int ivalue=i;
            Semester[i].addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent ae) { 
                    Semester_details.semesternumber=ivalue;
                    if(ivalue<=3){
                    dispose();    
                    Semester_details frame =new Semester_details(""Semester"");
                    frame.setVisible(true);
                }
                    else{
                        
                        if(ivalue==7) JOptionPane.showMessageDialog(null,""Intership"");
                        else JOptionPane.showMessageDialog(null,""Content not added yet"");
                    }
                }
            });
        }
          
          syllabus.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent ae) {
                  dispose();
                  SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Download_Without_saving.go(""Syllabus.pdf"",""https://drive.google.com/uc?export=download&id=12QNwepr_oyOQUPPQ-Lvs8iRX_pNl-x4n"");
            }
        });
              }
          });
          search.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent ae) {
                  String s = searcharea.getText().trim();
                  System.out.println(""""+noSpaceStr);
                  int i = search_item.searchitem(noSpaceStr);
                  if(i>0){
                 
                 search_item frame = new search_item(""Search"");
                 frame.setVisible(true);
                 dispose();
                  }
                  else{
                      JOptionPane.showMessageDialog(null,""No such item"");
                      searcharea.setText("""");
                  } 
              }
          });
          offlinepdf.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent ae) {
                  Offlinepdf frame=new Offlinepdf();
                  //System.out.println(length);
                   if(length==0){
                        JOptionPane.showMessageDialog(null,""No Downloaded book yet"");
                    }
                   else{
                   dispose();
                   frame.setBounds(100, 100, 600, 500);
                   frame.setTitle(""IIT-Library"");
                   frame.setLocationRelativeTo(null);
                   frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                   frame.setVisible(true);
                   frame.setResizable(false);
                   
                }
                }
          });
          teacherinfo.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent ae) {
                   Teacher_info frame = new Teacher_info();
                     dispose();
                     frame.setVisible(true);
                     frame.setTitle(""IIT-Library"");
                     frame.setResizable(false);
                     frame.setBounds(0, 0, 825, 700);
                     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                     frame.setLocationRelativeTo(null);
              }
          });
          
     }
       
        public static void main(String[] args) {
       Home_frame frame = new Home_frame(""IIT-Library"");
       frame.setVisible(true);
       }
    
    
}",1
"
package sub_class;

//Shows all the pdf that user already downloaded and open if clicked
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;


public class Offlinepdf extends JFrame{
    private Container c;
    private static Scanner x;
    public static String[] pdfpath=new String[100];
    public static String[] pdfname=new String[100];
    Font font=new Font(""Arial"",Font.BOLD,20);
    FlowLayout fl=new FlowLayout(FlowLayout.CENTER);
    JButton[] book;
    public JButton back;
        Offlinepdf(){
            initcomponent();
        }
        public void initcomponent(){
             c=this.getContentPane();
             c.setLayout(fl);
            fl.setVgap(20);
            c.setBackground(Color.decode(""#2471A3""));
        
            
           JPanel panel1=new JPanel();
           panel1.setLayout(fl);
         //  panel1.setPreferredSize(new Dimension(600, 800));
           panel1.setBackground(Color.decode(""#2471A3""));
           c.add(panel1);
            
            int len=ReadRecord(""Data.txt"");
            //System.out.println(len);
            Home_frame.length=len;
            book=new JButton[len];
            for(int i=0;i<len;i++){
            book[i]=new JButton();
            book[i].setText(pdfname[i]);
            book[i].setFont(font);
            book[i].setPreferredSize(new Dimension(450,50));
            panel1.add(book[i]);
            }
            back = new JButton(""Back"");
            back.setFont(font);
            back.setPreferredSize(new Dimension(450,30));
            panel1.add(back);
            panel1.setPreferredSize(new Dimension(600, len*100));
            JScrollPane scrollPane = new JScrollPane(panel1);
                scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);//if necessary scrollbar will be visible
                scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
                scrollPane.setPreferredSize(new Dimension(575,440));
                c.add(scrollPane);
            for(int i=0;i<len;i++){
                 int ivalue=i;
            book[i].addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent ae) { 
                    PdfViewer.setPdfDocument(pdfpath[ivalue]);
                     PdfViewer.Showframe();
                }
            });
        }
            back.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                dispose();
                Home_frame frame = new Home_frame(""IIT-Library"");
                frame.setVisible(true);
                
            } });
           }
        //Reads the length of data.txt file and returns integer value
        public static int ReadRecord(String filepath){
       int i=0;
        try {
            x=new Scanner(new File(filepath));
            x.useDelimiter(""[,\n]"");
            while(x.hasNext()){
                pdfname[i]=x.next().trim();
                pdfpath[i]=x.next().trim();
                i++;
            }
            x.close();
        } catch (FileNotFoundException ex) {
            
        }
       return i;
}
        /*public static void main(String[] args) {
        Offlinepdf frame=new Offlinepdf();
        frame.setBounds(100, 100, 600, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        }*/
}",0
"package sub_class;

//Our own simple pdfviewer,used to show pdf in the application
//we have used pdfbox-app-2.0.2.2 jar to manupulate pdf files
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;


public class PdfViewer extends JFrame{
     public static  Container c;
     public static Dimension screenSize;
     public static int frame_height,frame_width,totalpage,pagenumber=0,pagenumber2=1,viewtypecounter=1,zoomcounter=0;
     public static JPanel title_panel, pdf_panel;
     public static JButton  back,one_view,two_view,next_page,previous_page,zoom_in,zoom_out;
      public static JLabel label1,label2,pdflabel,pdflabel2;
     public static  JTextArea textarea;
     public static BufferedImage bim;
     public static String pdfDocument;
    
    PdfViewer (){
        initcomponents();
    }
    
    public void initcomponents(){
         c=this.getContentPane();
         c.setLayout(null);
         pagenumber=0;
    }
    
    public static void showpdf(){
         one_page_view();
         title_panel = new JPanel();
         title_panel.setLayout(null);
         title_panel.setBackground(Color.yellow);
         title_panel.setSize(frame_width,50);
         c.add(title_panel);
         
         one_view= new JButton(""One page View"");
         one_view.setBounds(0, 0, 150, 25);
         title_panel.add(one_view);
         two_view= new JButton(""Two page View"");
         two_view.setBounds(0, 25, 150, 25);
         title_panel.add(two_view);
         previous_page= new JButton(""Previous Page"");
         previous_page.setBounds(150, 0, 150, 50);
         title_panel.add( previous_page);
         next_page= new JButton(""Next Page"");
         next_page.setBounds(300, 0, 150, 50);
         title_panel.add(next_page);
         zoom_in= new JButton(""Zoom in"");
         zoom_in.setBounds(450, 0, 150, 50);
         title_panel.add( zoom_in);
         zoom_out= new JButton(""Zoom out"");
         zoom_out.setBounds(600, 0, 150, 50);
         title_panel.add(zoom_out);
         
         label1= new JLabel(""Go to page "");
         label1.setBounds(760,0,100,50);
         title_panel.add(label1);
         
         textarea= new JTextArea();
         textarea.setBounds(860,10,80,30);
         title_panel.add(textarea);
         
         label2= new JLabel(""of ""+(totalpage-1));
         label2.setBounds(960,0,100,50);
         title_panel.add(label2);
         back= new JButton(""back "");
         back.setBounds(1060,0,100,50);
         title_panel.add(back);
         
         keyControl();
         
         one_view.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent ae) {
                 if(pagenumber>0 && pagenumber<totalpage){
                   viewtypecounter=1;
                     pdf_panel.removeAll();
                     one_page_view();
                     pdf_panel.revalidate();
                     pdf_panel.repaint();
                     button();}
                 else{
                     JOptionPane.showMessageDialog(null,""Not possible"");
                 }
             }
         });
         
          two_view.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent ae) {
                 if(pagenumber>0 && pagenumber<totalpage-1){
                    viewtypecounter=2;
                     pdf_panel.removeAll();
                     two_page_view();
                     pdf_panel.revalidate();
                     pdf_panel.repaint();
                     button();}
                 else{
                     JOptionPane.showMessageDialog(null,""Not possible"");
                 }
             }
         });
          
          next_page.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent ae) {
                  if(pagenumber >=0 && pagenumber <totalpage && viewtypecounter==1){
                       pdf_panel.removeAll();
                        pagenumber++;
                        openpdf(pdfDocument,pagenumber,frame_width,frame_height-50);
                        pdf_panel.revalidate();
                        pdf_panel.repaint();
                        textarea.setText(""""+pagenumber);
                  }
 
             if(pagenumber >=0 && pagenumber <totalpage-2 && viewtypecounter==2){
                        pdf_panel.removeAll();
                        pagenumber++;
                        pagenumber2= pagenumber+1;
                        openpdf2(pdfDocument,pagenumber,frame_width/2,(frame_height-50),pagenumber2,frame_width/2,(frame_height-50));
                        pdf_panel.revalidate();
                        pdf_panel.repaint();}
          }
         });
          
          previous_page.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent ae) {
                  if(pagenumber >0 && pagenumber <totalpage && viewtypecounter==1){
                       pdf_panel.removeAll();
                        pagenumber=pagenumber-1;
                        openpdf(pdfDocument,pagenumber,frame_width,frame_height-50);
                        pdf_panel.revalidate();
                        pdf_panel.repaint();
                        textarea.setText(""""+pagenumber);
                  }
 
             if(pagenumber >2 && pagenumber2 <totalpage-1 && viewtypecounter==2){
                        pdf_panel.removeAll();
                        pagenumber2=pagenumber;
                        pagenumber=pagenumber-1;
                        openpdf2(pdfDocument,pagenumber,frame_width/2,(frame_height-50),pagenumber2,frame_width/2,(frame_height-50));
                        pdf_panel.revalidate();
                        pdf_panel.repaint();}
          }
         });
          
          zoom_in.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent ae) {
                 if(zoomcounter>= 0 && zoomcounter< 10 ){
                  zoomcounter++;
                 frame_width=frame_width+50;
                 frame_height=frame_height+50;
                 pdf_panel.removeAll();
                 pdf_panel.setPreferredSize(new Dimension(frame_width, frame_height));
                 openpdf(pdfDocument,pagenumber,frame_width-20, frame_height-100);
                 pdf_panel.revalidate();
                pdf_panel.repaint();
                
                 }
                
             }
         });
          
          zoom_out.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent ae) {
                 if(zoomcounter>0 && zoomcounter<= 10 ){
                 zoomcounter--;
                  frame_width=frame_width-50;
                 frame_height=frame_height-50;
                 pdf_panel.removeAll();
                 pdf_panel.setPreferredSize(new Dimension(frame_width,frame_height));
                 openpdf(pdfDocument,pagenumber,frame_width-20,frame_height-100);
                 pdf_panel.revalidate();
                pdf_panel.repaint();
                 }
                
             }
         });    

    }
    
    public static void button(){
        if(viewtypecounter==1){
            zoom_in.setEnabled(true);
            zoom_out.setEnabled(true);
            textarea.setEnabled(true);
        }
        if(viewtypecounter==2){
            zoom_in.setEnabled(false);
            zoom_out.setEnabled(false);
            textarea.setEnabled(false);
        }
    }
      //Format the pdf_panel to show a single page at a time
    public static  void one_page_view(){
        pdf_panel = new JPanel();
        pdf_panel.setLayout(null);
        pdf_panel.setBackground(Color.DARK_GRAY);
        //pdf_panel.setBounds(0,50,frame_width,frame_height-50);
        // c.add(pdf_panel);
         
         JScrollPane scrollPane = new JScrollPane(pdf_panel);
         scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
         scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
         scrollPane.setBounds(0,50,frame_width-20,frame_height-100);
         c.add(scrollPane);
         
        openpdf(pdfDocument,pagenumber,frame_width-20,frame_height-100);
        
    }
    //Format the pdf_panel to show two page at a time
    public static  void two_page_view(){
        pdf_panel = new JPanel();
        pdf_panel.setLayout(null);
        pdf_panel.setBackground(Color.DARK_GRAY);
        pdf_panel.setBounds(0,50,frame_width,frame_height-50);
         c.add(pdf_panel);
         
        openpdf2(pdfDocument,pagenumber,frame_width/2,(frame_height-50),pagenumber+1,frame_width/2,(frame_height-50));
        
    }
    //method to display pdfviewer frame
   public static void Showframe(){
       PdfViewer  frame=new  PdfViewer ();
        makeFrameFullSize(frame);
        showpdf();
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        back.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                frame.dispose();
                Home_frame frame = new Home_frame(""IIT-Library"");
                frame.setVisible(true);
            } });
   }
    
     public static void main(String[] args) {
   PdfViewer  frame=new  PdfViewer ();
   PdfViewer.setPdfDocument(""F:\\Cprogramming.pdf"");
   PdfViewer.Showframe();
   
   }
    //method to get the device screen size to make the frame more flexible
     private static  void makeFrameFullSize(JFrame aFrame) {
    screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    frame_width=(screenSize.width)-300;
    frame_height=(screenSize.height)-100;
    aFrame.setSize( frame_width,frame_height);
}
    //takes pdf document and pagenumber , then render the page into a image and shows as a label on the frame
     public static void openpdf(String pdfdocument,int pagenumber,int labelwidth,int labelheight) {
        try {
            PDDocument document = null;
            document = PDDocument.load(new File(pdfDocument));
            totalpage= document.getNumberOfPages();
            PDFRenderer pdfRenderer = new PDFRenderer(document);
            bim = pdfRenderer.renderImageWithDPI(pagenumber,300,ImageType.RGB);
            ImageIcon pageimg =new ImageIcon(bim);
            Image pageimg2= pageimg.getImage();
            Image pageimg3 = pageimg2.getScaledInstance(labelwidth,labelheight,Image.SCALE_SMOOTH);
            ImageIcon finalimage=new ImageIcon(pageimg3);
            pdflabel =new JLabel( finalimage);
            pdflabel.setBounds(0,0, finalimage.getIconWidth(), finalimage.getIconHeight());
            pdf_panel.add(pdflabel);
            document.close();
        } catch (IOException ex) { 
             Logger.getLogger(PdfViewer.class.getName()).log(Level.SEVERE, null, ex);
         } 
     }
     //takes pdf document and pagenumber , then renders two page into  image and shows as  label on the frame
      public static void openpdf2(String pdfdocument,int pagenumber,int labelwidth,int labelheight,int pagenumber2,int labelwidth2,int labelheight2) {
        try {
            PDDocument document = null;
            document = PDDocument.load(new File(pdfdocument));
            totalpage= document.getNumberOfPages();
            PDFRenderer pdfRenderer = new PDFRenderer(document);
            bim = pdfRenderer.renderImageWithDPI(pagenumber,300,ImageType.RGB);
            ImageIcon pageimg =new ImageIcon(bim);
            Image pageimg2= pageimg.getImage();
            Image pageimg3 = pageimg2.getScaledInstance(labelwidth,labelheight,Image.SCALE_SMOOTH);
            ImageIcon finalimage=new ImageIcon(pageimg3);
            pdflabel =new JLabel( finalimage);
            pdflabel.setBounds(0,0, finalimage.getIconWidth(), finalimage.getIconHeight());
            pdf_panel.add(pdflabel);
            bim = pdfRenderer.renderImageWithDPI(pagenumber2,300,ImageType.RGB);
            ImageIcon newpageimg =new ImageIcon(bim);
            Image newpageimg2= newpageimg.getImage();
            Image newpageimg3 = newpageimg2.getScaledInstance(labelwidth,labelheight,Image.SCALE_SMOOTH);
            ImageIcon newfinalimage=new ImageIcon(newpageimg3);
            pdflabel2 =new JLabel( newfinalimage);
            pdflabel2.setBounds(frame_width/2,0, newfinalimage.getIconWidth(), newfinalimage.getIconHeight());
            pdf_panel.add(pdflabel2);
            document.close();
        } catch (IOException ex) { 
             Logger.getLogger(PdfViewer.class.getName()).log(Level.SEVERE, null, ex);
         } 
     }
      //method to make the textarea only integer number and press enter for action
    public static void keyControl(){
        textarea.addKeyListener(new KeyAdapter() {
           public void keyPressed(KeyEvent ke) {
               if (ke.getKeyChar() >= '0' && ke.getKeyChar() <= '9') {
               textarea.setEditable(true);
            } else {
               textarea.setEditable(false);
            }
            if (ke.getKeyChar() ==KeyEvent.VK_ENTER ){
              String s = textarea.getText().trim();
              int i=Integer.parseInt(s);
              if(i< totalpage){
              System.out.println(i);
              pagenumber=i;
              one_page_view();}
            }
             if (ke.getKeyChar() ==KeyEvent.VK_BACK_SPACE ){
                if(textarea.getText().isEmpty()){
                    
                }
                else{
                textarea.setText("""");
                }
           }
           }
        });
        
        
    }
    //method to set the functionality of back button
    public void back_action(){
        back.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 dispose();
                Home_frame frame = new Home_frame(""IIT-Library"");
                frame.setVisible(true);
            } });
    }
     
      //sets given document name as a pdf document variable
      public static void setPdfDocument(String document){
          pdfDocument =document;
      }
     
}",1
"
package sub_class;
//shows available pdf books according to semester
import frames.book_pdf_frame;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import static sub_class.Download.go;
import static sub_class.Semester_details.semesternumber;


public class Pdf_books extends book_pdf_frame{
    
    public JPanel main_panel;
    Font font=new Font(""Arial"",Font.BOLD,20);
    FlowLayout layout=new FlowLayout(FlowLayout.CENTER);
    public JButton back,cprogramming,discrete,it_and_society,OOP1,ComputerOrganization,AlgorithmAnalysis,NumericalAnalysis,OOP2,ComputerNetworks,TheoryofComputation;
    public static String pdffilepath,dirName=null,bookname;
    public Pdf_books(String frame_title) {
        super(frame_title);
        setContainer();
        setMainPanel();
        setButton();
        buttonaction();
    }
    
     public void setContainer()
    {
        super.setContainer();
        container.setBackground(Color.WHITE);
    }
    
     public void setMainPanel()
    {
        main_panel = new JPanel();
        main_panel.setBackground(Color.decode(""#4da6ff""));
        main_panel.setLayout(layout); 
        layout.setVgap(20);
        container.add(main_panel);
    }
     
     public void setButton(){
         
         if(semesternumber==1){
          cprogramming=new JButton(""C programming"");
         cprogramming.setFont(font);
         cprogramming.setPreferredSize(new Dimension(300,50));
         main_panel.add(cprogramming);
         discrete=new JButton(""Discrete Mathematics"");
         discrete.setFont(font);
         discrete.setPreferredSize(new Dimension(300,50));
         main_panel.add(discrete);
         it_and_society=new JButton(""IT and Society"");
         it_and_society.setFont(font);
         it_and_society.setPreferredSize(new Dimension(300,50));
         main_panel.add(it_and_society);
         }
          if(semesternumber==2){
            OOP1=new JButton(""Object Oriented Concepts I"");
            OOP1.setFont(font);
            OOP1.setPreferredSize(new Dimension(300,50));
            main_panel.add(OOP1);
            ComputerOrganization=new JButton(""Computer Organization"");
            ComputerOrganization.setFont(font);
            ComputerOrganization.setPreferredSize(new Dimension(300,50));
            main_panel.add(ComputerOrganization);
          }
          if(semesternumber==3){
               AlgorithmAnalysis=new JButton(""Algorithm Analysis"");
            AlgorithmAnalysis.setFont(font);
            AlgorithmAnalysis.setPreferredSize(new Dimension(400,50));
            main_panel.add(AlgorithmAnalysis);
            OOP2=new JButton(""Object Oriented Concepts II"");
           OOP2.setFont(font);
            OOP2.setPreferredSize(new Dimension(400,50));
            main_panel.add(OOP2);
           ComputerNetworks=new JButton(""Computer Networks"");
           ComputerNetworks.setFont(font);
           ComputerNetworks.setPreferredSize(new Dimension(400,50));
            main_panel.add(ComputerNetworks);
           TheoryofComputation=new JButton(""Theory of Computation"");
           TheoryofComputation.setFont(font);
           TheoryofComputation.setPreferredSize(new Dimension(400,50));
            main_panel.add(TheoryofComputation);
          }
          back=new JButton(""Back"");
         back.setFont(font);
         back.setPreferredSize(new Dimension(400,50));
         main_panel.add(back);
         
     } 
     
     
     public void buttonaction(){
         String[] options = {""View"",""Download""};
         back.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 dispose();
                Home_frame frame = new Home_frame(""IIT-Library"");
                frame.setVisible(true);
            } });
         if(semesternumber==1){
         cprogramming.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 bookname=""CProgramming.pdf"";
                 dispose();
                 File_Basic file=new File_Basic();
                 boolean result =file.SearchRecord(""Data.txt"",bookname);
                 System.out.println(result);
                 if (result == true){
                 System.out.println(""""+pdffilepath);
                 PdfViewer.setPdfDocument(pdffilepath);
                 PdfViewer.Showframe();
                 dispose();
                 }
                 else{
                 int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_e9a0f814efa149b58c30db425fc1b822.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(bookname,""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_e9a0f814efa149b58c30db425fc1b822.pdf"");
                }}
                }  });
         
         
         discrete.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 bookname=""Discrete.pdf"";
                 dispose();
                 File_Basic file=new File_Basic();
                 boolean result =file.SearchRecord(""Data.txt"",bookname);
                 System.out.println(result);
                 if (result == true){
                 System.out.println(""""+pdffilepath);
                 PdfViewer.setPdfDocument(pdffilepath);
                 PdfViewer.Showframe();
                 dispose();
                 }
                 else{
                 int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_93798fc7343d44909a8e5c4f2ecf2357.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(bookname,""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_93798fc7343d44909a8e5c4f2ecf2357.pdf"");
                }} } });
         
         it_and_society.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 bookname=""ITandsoceity.pdf"";
                 dispose();
                 File_Basic file=new File_Basic();
                 boolean result =file.SearchRecord(""Data.txt"",bookname);
                 System.out.println(result);
                 if (result == true){
                 System.out.println(""""+pdffilepath);
                 PdfViewer.setPdfDocument(pdffilepath);
                 PdfViewer.Showframe();
                 dispose();
                 }
                 else{
                 int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_7101712b85fa4486a56d80d9241961a4.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(bookname,""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_7101712b85fa4486a56d80d9241961a4.pdf"");
                }} } });}
         if(semesternumber==2){      
        OOP1.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
             bookname=""ObjectOrientedProgrammingI.pdf"";
                 dispose();
                 File_Basic file=new File_Basic();
                 boolean result =file.SearchRecord(""Data.txt"",bookname);
                 System.out.println(result);
                 if (result == true){
                 System.out.println(""""+pdffilepath);
                 PdfViewer.setPdfDocument(pdffilepath);
                 PdfViewer.Showframe();
                 dispose();
                 }
                 else{
                 int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_ca34df6d699146c9af64c5e591dd1043.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(bookname,""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_ca34df6d699146c9af64c5e591dd1043.pdf"");
                }} } });
        
         ComputerOrganization.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
             bookname=""ComputerOrganization.pdf"";
                 dispose();
                 File_Basic file=new File_Basic();
                 boolean result =file.SearchRecord(""Data.txt"",bookname);
                 System.out.println(result);
                 if (result == true){
                 System.out.println(""""+pdffilepath);
                 PdfViewer.setPdfDocument(pdffilepath);
                 PdfViewer.Showframe();
                 dispose();
                 }
                 else{
                 int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_35ff52e3a4ae43858b8a439c4877dfa7.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(bookname,""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_35ff52e3a4ae43858b8a439c4877dfa7.pdf"");
                }} } });}
         if(semesternumber==3){
         AlgorithmAnalysis.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 bookname=""AlgorithmAnalysis.pdf"";
                 dispose();
                 File_Basic file=new File_Basic();
                 boolean result =file.SearchRecord(""Data.txt"",bookname);
                 System.out.println(result);
                 if (result == true){
                 System.out.println(""""+pdffilepath);
                 PdfViewer.setPdfDocument(pdffilepath);
                 PdfViewer.Showframe();
                 dispose();
                 }
                 else{
                 int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_aea6bd98f06e42bea54563b4b9b83c97.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(bookname,""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_aea6bd98f06e42bea54563b4b9b83c97.pdf"");
                }} } });
         
         OOP2.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 bookname=""ObjectOrientedConceptsII.pdf"";
                 dispose();
                 File_Basic file=new File_Basic();
                 boolean result =file.SearchRecord(""Data.txt"",bookname);
                 System.out.println(result);
                 if (result == true){
                 System.out.println(""""+pdffilepath);
                 PdfViewer.setPdfDocument(pdffilepath);
                 PdfViewer.Showframe();
                 dispose();
                 }
                 else{
                 int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_ca34df6d699146c9af64c5e591dd1043.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(bookname,""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_ca34df6d699146c9af64c5e591dd1043.pdf"");
                }} } });
         
         ComputerNetworks.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 bookname=""ComputerNetwork.pdf"";
                 dispose();
                 File_Basic file=new File_Basic();
                 boolean result =file.SearchRecord(""Data.txt"",bookname);
                 System.out.println(result);
                 if (result == true){
                 System.out.println(""""+pdffilepath);
                 PdfViewer.setPdfDocument(pdffilepath);
                 PdfViewer.Showframe();
                 dispose();
                 }
                 else{
                 int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_ed6c3b1719be42a697b16d2141fe4752.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(bookname,""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_ed6c3b1719be42a697b16d2141fe4752.pdf"");
                }}
             }    
         });
         
         TheoryofComputation.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
               bookname=""TheoryofComputation.pdf"";
                 dispose();
                 File_Basic file=new File_Basic();
                 boolean result =file.SearchRecord(""Data.txt"",bookname);
                 System.out.println(result);
                 if (result == true){
                 System.out.println(""""+pdffilepath);
                 PdfViewer.setPdfDocument(pdffilepath);
                 PdfViewer.Showframe();
                 dispose();
                 }
                 else{
                 int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_f40f0bc6dedd41e58c213e031abfa56c.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(bookname,""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_f40f0bc6dedd41e58c213e031abfa56c.pdf"");
                }}
             }    
         });}
     }
     
     //this method allows user to choose a location to download and then calls go method in download class
     public void download(String Bookname, String booklink){
                     dispose();
                     dirName=null;
                     JFileChooser fileChooser = new JFileChooser();
                     fileChooser.setCurrentDirectory(new java.io.File("".""));
                     fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                     File fileToSave = null;
                     int choice = fileChooser.showOpenDialog(Pdf_books.this);
                     if( choice == JFileChooser.CANCEL_OPTION){
                        JOptionPane.showMessageDialog(null, ""Download was cancelled"");
                        Home_frame frame = new Home_frame(""IIT-Library"");
                         frame.setVisible(true);
                     }
                     else{
                     if( choice == JFileChooser.APPROVE_OPTION){
                        // fileChooser.getCurrentDirectory();
                         fileToSave = fileChooser.getSelectedFile();
                     }
                     
                     dirName =fileToSave.toString();
                    
                     SwingUtilities.invokeLater(new Runnable() {
                         @Override
                         public void run() {
                             go(dirName+Bookname,booklink);
                             dispose();
                         }
                     }); }  
             }    
     
     
     /*   public static void main(String[] args) {
     Pdf_books frame = new Pdf_books(""IIT-Library"");
     frame.setVisible(true);
     }*/
    
}",1
"
package sub_class;
//This gives user option to select pdf/slide/classroutine/examroutine of a semester
import frames.book_pdf_frame;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import static sub_class.Download_Without_saving.go;


public class Semester_details extends book_pdf_frame{
    public JPanel main_panel,toppanel,panel1;
    public JButton  update,pdf,slide,classroutine,examroutine,back;
    public JLabel title,pdflabel,slidelabel,classroutinelabel,examroutinelabel;
    ImageIcon pdfImage,slideImage,classroutineImage,examroutineImage;
    Font font=new Font(""Arial"",Font.BOLD,20);
    FlowLayout layout=new FlowLayout(FlowLayout.CENTER);
    public static int semesternumber=1;
    public static int usertype=0;
    
    public Semester_details(String frame_title) {
        super(frame_title);
        setContainer();
        setMainPanel();
        setImage();
        setLabel();
         setButton();
         actionlistener();
    }
    
    public void setContainer()
    {
        super.setContainer();
        container.setBackground(Color.WHITE);
    }
    
     public void setMainPanel()
    {
        main_panel = new JPanel();
        main_panel.setBackground(Color.WHITE);
        main_panel.setLayout(null);  
        container.add(main_panel);
        
        if(usertype==0){
         toppanel=new JPanel();
         toppanel.setBackground(Color.decode(""#2471A3""));
         toppanel.setBounds(0,0,500,80);
         toppanel.setLayout(null);
         main_panel.add(toppanel);
        }
         if(usertype==1){
         panel1=new JPanel();
         panel1.setBackground(Color.decode(""#2471A3""));
         panel1.setBounds(0,0,500,80);
         panel1.setLayout(layout);
         layout.setVgap(0);
         main_panel.add(panel1);
          }
   
    }
     
     public void setImage(){
          pdfImage=new ImageIcon(getClass().getResource(""/icons/pdf.png""));
          slideImage=new ImageIcon(getClass().getResource(""/icons/slide.png""));
          classroutineImage=new ImageIcon(getClass().getResource(""/icons/ClassRoutine .png""));
          examroutineImage=new ImageIcon(getClass().getResource(""/icons/ExamRoutine .png""));
     }
     
     public void setButton(){
         /*if(usertype==0){
         update=new JButton(""Update"");
         update.setFont(font);
         update.setForeground(Color.decode(""#2471A3""));
         update.setBounds(300, 20, 150, 50);
         toppanel.add(update);
         }*/
         
        pdf=new JButton(pdfImage);
       pdf.setBounds(20,90,190,120);
      main_panel.add(pdf);
      
      slide=new JButton(slideImage);
      slide .setBounds(250,90,190,120);
      main_panel.add(slide);
      
      classroutine=new JButton(classroutineImage);
      classroutine .setBounds(20,270,190,120);
      main_panel.add( classroutine);
      
      examroutine=new JButton(examroutineImage);
      examroutine.setBounds(250,270,190,120);
      main_panel.add(examroutine);
      
      back=new JButton(""Back"");
      back.setBounds(0,513,500,50);
      main_panel.add(back);
      
          
     }
     
     public void setLabel(){
          if(usertype==0){
         title=new JLabel(""Semester-""+semesternumber);
         title.setSize(300, 80);
         title.setHorizontalAlignment(JLabel.CENTER);
         title.setVerticalAlignment(JLabel.CENTER);
         title.setFont(new Font(""Arial"",Font.BOLD,30));
         title.setForeground(Color.WHITE);
         toppanel.add(title);
          }
          if(usertype==1){
         title=new JLabel(""Semester-""+semesternumber);
         title.setFont(new Font(""Arial"",Font.BOLD,30));
         title.setHorizontalAlignment(JLabel.CENTER);
         title.setVerticalAlignment(JLabel.CENTER);
         title.setForeground(Color.WHITE);
         title.setPreferredSize(new Dimension(300,80));
         panel1.add(title);
          }
          
          pdflabel=new JLabel(""PDF"");
          pdflabel.setFont(font);
          pdflabel.setBounds(80, 220, 205, 20);
          main_panel.add(pdflabel);
          
          slidelabel=new JLabel(""Slide"");
          slidelabel.setFont(font);
          slidelabel.setBounds(320, 220, 205, 20);
          main_panel.add(slidelabel);
          
          classroutinelabel=new JLabel(""ClassRoutine"");
          classroutinelabel.setFont(font);
          classroutinelabel.setBounds(60, 410, 205, 20);
          main_panel.add(classroutinelabel);
          
          examroutinelabel=new JLabel(""ExamRoutine"");
          examroutinelabel.setFont(font);
          examroutinelabel.setBounds(290, 410, 205, 20);
          main_panel.add(examroutinelabel);
     }
     
     public void actionlistener(){
            pdf.addActionListener(new ActionListener() {
              
                public void actionPerformed(ActionEvent ae) {
                    dispose();
                    Pdf_books frame =new Pdf_books(""Semester - ""+semesternumber+"" Pdf Books"");
                    frame.setVisible(true);
                }
            });
            
             slide.addActionListener(new ActionListener() {
              
                public void actionPerformed(ActionEvent ae) {
                    dispose();
                    Slides frame =new Slides(""Semester - ""+semesternumber+"" Slides"");
                    frame.setVisible(true);
                }
            });
             
             back.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 dispose();
                Home_frame frame = new Home_frame(""IIT-Library"");
                frame.setVisible(true);
            } });
             /*if(usertype==0){ update.addActionListener(new ActionListener() {
             
             public void actionPerformed(ActionEvent ae) {
             if(semesternumber==1){
             String URL=""https://sites.google.com/site/iitlibrary121/home/pdf"";
             try {
             java.awt.Desktop.getDesktop().browse(java.net.URI.create(URL));
             } catch (IOException ex) {
             Logger.getLogger(Semester_details.class.getName()).log(Level.SEVERE, null, ex);
             }
             }
             if(semesternumber==2){
             String URL=""https://sites.google.com/site/iitsemester2/semester2"";
             try {
             java.awt.Desktop.getDesktop().browse(java.net.URI.create(URL));
             } catch (IOException ex) {
             Logger.getLogger(Semester_details.class.getName()).log(Level.SEVERE, null, ex);
             }
             }
             if(semesternumber==3){
             String URL=""https://sites.google.com/site/iitsemester3/semester3"";
             try {
             java.awt.Desktop.getDesktop().browse(java.net.URI.create(URL));
             } catch (IOException ex) {
             Logger.getLogger(Semester_details.class.getName()).log(Level.SEVERE, null, ex);
             }
             }
             if(semesternumber==4){
             
             }
             if(semesternumber==5){
             
             }
             if(semesternumber==6){
             
             }
             if(semesternumber==8){
             
             }
             }
             });}*/
            
             classroutine.addActionListener(new ActionListener() {
              
                public void actionPerformed(ActionEvent ae) {
                    if(semesternumber==1){
                        JOptionPane.showMessageDialog(null,""Content not added yet"");
                    }
               
       
                 
                 if(semesternumber==2){
                    JOptionPane.showMessageDialog(null,""Content not added yet"");
                 
                 }
                 if(semesternumber==3){
                     JOptionPane.showMessageDialog(null,""Content not added yet"");
                 
                 }
                 if(semesternumber==4){
                 
                 }
                 if(semesternumber==5){
                 
                 }
                 if(semesternumber==6){
                 
                 }
                 if(semesternumber==8){
                 
                 }
                }
            });
             examroutine.addActionListener(new ActionListener() {
              
                public void actionPerformed(ActionEvent ae) {
                    if(semesternumber==1){
                 dispose();
                  SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                go(""Semester 1 Examroutine.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_33459a3c5c97479fb4ff5f80c8b7b84e.pdf"");
            }
        });
                 }
                 if(semesternumber==2){
                 JOptionPane.showMessageDialog(null,""Content not added yet"");
                 }
                 if(semesternumber==3){
                 dispose();
                  SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                go(""Semester 3 Examroutine.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_fdc949002a44400885974b538851250c.pdf"");
            }
        });
                 }
                 if(semesternumber==4){
                 JOptionPane.showMessageDialog(null,""Content not added yet"");
                 }
                 if(semesternumber==5){
                     dispose();
                  SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                go(""Semester 5 Examroutine.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_a06728392e61437ea5204a7974484f1b.pdf"");
            }
        });
                 
                 }
                 if(semesternumber==6){
                 
                 }
                 if(semesternumber==8){
                 
                 }
                }
            });
     }
    
     /*    public static void main(String[] args) {
     Semester_details frame = new Semester_details(""Books"");
     frame.setVisible(true);
     }*/
    
}",1
"
package sub_class;
//Shows available slides of each semester
import frames.book_pdf_frame;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JPanel;
import static sub_class.Semester_details.semesternumber;
import static sub_class.Slides_details.slide_subject;


public class Slides extends book_pdf_frame{
    
    public JPanel main_panel;
    public String bookname;
    Font font=new Font(""Arial"",Font.BOLD,20);
    FlowLayout layout=new FlowLayout(FlowLayout.CENTER);
    public JButton back,cprogramming,discrete,it_and_society,DataStructure,OOP1,ComputerOrganization,AlgorithmAnalysis,NumericalAnalysis,OOP2,ComputerNetworks,TheoryofComputation;
    
    public Slides(String frame_title) {
        super(frame_title);
        setContainer();
        setMainPanel();
        setButton();
        buttonaction();
    }
    
    public void setContainer()
    {
        super.setContainer();
        container.setBackground(Color.WHITE);
    }
    
     public void setMainPanel()
    {
        main_panel = new JPanel();
        main_panel.setBackground(Color.decode(""#4da6ff""));
        main_panel.setLayout(layout); 
        layout.setVgap(20);
        container.add(main_panel);
    }
     
     public void setButton(){
         
         if(semesternumber==1){
           cprogramming=new JButton(""C programming"");
         cprogramming.setFont(font);
         cprogramming.setPreferredSize(new Dimension(300,50));
         main_panel.add(cprogramming);
         discrete=new JButton(""Discrete Mathematics"");
         discrete.setFont(font);
         discrete.setPreferredSize(new Dimension(300,50));
         main_panel.add(discrete);
         }
          if(semesternumber==2){
             OOP1=new JButton(""Object Oriented Concepts I"");
            OOP1.setFont(font);
            OOP1.setPreferredSize(new Dimension(300,50));
            main_panel.add(OOP1);
           ComputerOrganization=new JButton(""Computer Organization"");
           ComputerOrganization.setFont(font);
           ComputerOrganization.setPreferredSize(new Dimension(300,50));
           main_panel.add(ComputerOrganization);
          }
          if(semesternumber==3){
              /*AlgorithmAnalysis=new JButton(""Algorithm Analysis"");
              AlgorithmAnalysis.setFont(font);
              AlgorithmAnalysis.setPreferredSize(new Dimension(400,50));*/
            main_panel.add(AlgorithmAnalysis);
            OOP2=new JButton(""Object Oriented Concepts II"");
           OOP2.setFont(font);
            OOP2.setPreferredSize(new Dimension(400,50));
            main_panel.add(OOP2);
           ComputerNetworks=new JButton(""Computer Networks"");
           ComputerNetworks.setFont(font);
           ComputerNetworks.setPreferredSize(new Dimension(400,50));
            main_panel.add(ComputerNetworks);
            /*TheoryofComputation=new JButton(""Theory of Computation"");
            TheoryofComputation.setFont(font);
            TheoryofComputation.setPreferredSize(new Dimension(400,50));
            main_panel.add(TheoryofComputation);*/
          }
        back=new JButton(""back"");
        back.setPreferredSize(new Dimension(300,50));
        main_panel.add(back);
     } 
     
     private void buttonaction() {
         back.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 dispose();
                Semester_details frame = new Semester_details(""IIT-Library"");
                frame.setVisible(true);
            } });
        if(semesternumber==1){
         cprogramming.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 slide_subject = ""CProgramming"";
                 Slides_details frame = new Slides_details(""C programming slides"");
                 dispose();
                 frame.setVisible(true);
             }  });
         
         
         discrete.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 slide_subject = ""Discrete"";
                 Slides_details frame = new Slides_details(""Discrete slides"");
                 dispose();
                 frame.setVisible(true);
             } });}
        
         if(semesternumber==2){      
        OOP1.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 slide_subject = ""OOP1"";
                 Slides_details frame = new Slides_details(""OOP1 slides"");
                 dispose();
                 frame.setVisible(true); } });
        
         ComputerOrganization.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 slide_subject = ""ComputerOrganizations"";
                 Slides_details frame = new Slides_details(""ComputerOrganizations slides"");
                 dispose();
                 frame.setVisible(true); } });}
         if(semesternumber==3){
         
         OOP2.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                slide_subject = ""OOP2"";
                 Slides_details frame = new Slides_details(""OOP2 slides"");
                 dispose();
                 frame.setVisible(true); } });
         
         ComputerNetworks.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
            slide_subject = ""ComputerNetworking"";
                 Slides_details frame = new Slides_details(""ComputerNetworking slides"");
                 dispose();
                 frame.setVisible(true);
             }    
         });
         
         }
    }
       
    
     /*    public static void main(String[] args) {
     Slides frame = new Slides(""IIT-Library"");
     frame.setVisible(true);
     }*/

    
    
}",1
"
package sub_class;
//shows available slides of each subject
import frames.book_pdf_frame;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import static sub_class.Pdf_books.dirName;
import static sub_class.Pdf_books.pdffilepath;
import static sub_class.Semester_details.semesternumber;
import static sub_class.Download_Without_saving.go;


public class Slides_details extends book_pdf_frame{
    
    public JPanel main_panel;
    public String bookname;
    Font font=new Font(""Arial"",Font.BOLD,15);
    FlowLayout layout=new FlowLayout(FlowLayout.CENTER);
    public JButton c_array,c_introduction,c_looping,c_expressions,Dis_chapter1,Dis_chapter2,Dis_chapter3,Dis_chapter8,Dis_chapter9;
    public JButton co_intro,co_top_level_view,co_cache_memory,co_internal_memory,co_input_output,co_instruction_sets,co_instruction_sets_addressing;
    public JButton oop1_intro,oop1_data_types,oop1_control_statement,oop1_array,oop1_Class,oop1_modifire,oop1_overloading_inheriting,oop1_polymorphism_abstraction,oop1_uml,oop1_exception_handle,oop1_association;
    public JButton back,oop2_intro,oop2_swing,oop2_swing_event,oop2_thread,oop2_generics;
    public JButton cn_chapter1,cn_chapter2,cn_network_layer,cn_ip_address,cn_application_layer,cn_transport_layer,cn_network_layer2,cn_routing;
    public  static String slide_subject;
    public Slides_details(String frame_title) {
        super(frame_title);
        setContainer();
        setMainPanel();
        setButton();
        buttonaction();
    }
    
    public void setContainer()
    {
        super.setContainer();
        container.setBackground(Color.WHITE);
    }
    
     public void setMainPanel()
    {
        main_panel = new JPanel();
        main_panel.setBackground(Color.decode(""#4da6ff""));
        main_panel.setLayout(layout); 
        layout.setVgap(15);
        container.add(main_panel);
    }
     
     public void setButton(){
         
           
         
         if(semesternumber==1){
                if(slide_subject.equals(""CProgramming"")){
            c_introduction=new JButton(""Introduction"");
            c_introduction.setFont(font);
            c_introduction.setPreferredSize(new Dimension(300,50));
            main_panel.add(c_introduction); 
            c_array=new JButton(""Arrays"");
            c_array.setFont(font);
            c_array.setPreferredSize(new Dimension(300,50));
            main_panel.add(c_array);
            c_expressions=new JButton(""Expressions"");
            c_expressions.setFont(font);
            c_expressions.setPreferredSize(new Dimension(300,50));
            main_panel.add(c_expressions); 
            c_looping=new JButton(""Decisions making and looping"");
            c_looping.setFont(font);
            c_looping.setPreferredSize(new Dimension(300,50));
            main_panel.add(c_looping);
                }
                if(slide_subject.equals(""Discrete"")){
            Dis_chapter1=new JButton(""Chapter 1"");
            Dis_chapter1.setFont(font);
            Dis_chapter1.setPreferredSize(new Dimension(300,50));
            main_panel.add(Dis_chapter1); 
            Dis_chapter2=new JButton(""Chapter 2"");
            Dis_chapter2.setFont(font);
            Dis_chapter2.setPreferredSize(new Dimension(300,50));
            main_panel.add(Dis_chapter2); 
            Dis_chapter3=new JButton(""Chapter 3"");
            Dis_chapter3.setFont(font);
            Dis_chapter3.setPreferredSize(new Dimension(300,50));
            main_panel.add(Dis_chapter3); 
            Dis_chapter8=new JButton(""Chapter 8"");
            Dis_chapter8.setFont(font);
            Dis_chapter8.setPreferredSize(new Dimension(300,50));
            main_panel.add(Dis_chapter8); 
            Dis_chapter9=new JButton(""Chapter 9"");
            Dis_chapter9.setFont(font);
            Dis_chapter9.setPreferredSize(new Dimension(300,50));
            main_panel.add(Dis_chapter9); 
                }
         }
          if(semesternumber==2){
             if(slide_subject.equals(""ComputerOrganizations"")){
            co_intro=new JButton(""Introduction"");
            co_intro.setFont(font);
            co_intro.setPreferredSize(new Dimension(300,40));
            main_panel.add(co_intro); 
            co_top_level_view=new JButton(""Top Level View"");
            co_top_level_view.setFont(font);
            co_top_level_view.setPreferredSize(new Dimension(300,40));
            main_panel.add(co_top_level_view);
            co_cache_memory=new JButton(""Cache Memory"");
            co_cache_memory.setFont(font);
            co_cache_memory.setPreferredSize(new Dimension(300,40));
            main_panel.add(co_cache_memory); 
            co_internal_memory=new JButton(""Internal Memory"");
            co_internal_memory.setFont(font);
            co_internal_memory.setPreferredSize(new Dimension(300,40));
            main_panel.add(co_internal_memory);
            co_input_output=new JButton(""Input Output"");
            co_input_output.setFont(font);
            co_input_output.setPreferredSize(new Dimension(300,40));
            main_panel.add(co_input_output);
            co_instruction_sets=new JButton(""Instructions sets"");
            co_instruction_sets.setFont(font);
            co_instruction_sets.setPreferredSize(new Dimension(300,40));
            main_panel.add(co_instruction_sets); 
            co_instruction_sets_addressing=new JButton(""Instruction Sets Addressing"");
            co_instruction_sets_addressing.setFont(font);
            co_instruction_sets_addressing.setPreferredSize(new Dimension(300,40));
            main_panel.add(co_instruction_sets_addressing);
                }
                if(slide_subject.equals(""OOP1"")){
            oop1_intro=new JButton(""Introduction"");
            oop1_intro.setFont(font);
            oop1_intro.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_intro); 
            oop1_data_types=new JButton(""Data type & Expressions"");
            oop1_data_types.setFont(font);
            oop1_data_types.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_data_types); 
            oop1_control_statement=new JButton(""Control Statement"");
            oop1_control_statement.setFont(font);
            oop1_control_statement.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_control_statement); 
            oop1_array=new JButton(""Java Array"");
            oop1_array.setFont(font);
            oop1_array.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_array); 
            oop1_Class=new JButton(""Java Class"");
            oop1_Class.setFont(font);
            oop1_Class.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_Class); 
            oop1_modifire=new JButton(""Modifire & Encapsulation"");
            oop1_modifire.setFont(font);
            oop1_modifire.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_modifire); 
            oop1_overloading_inheriting=new JButton(""Overloading and inheritance"");
            oop1_overloading_inheriting.setFont(font);
            oop1_overloading_inheriting.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_overloading_inheriting); 
            oop1_polymorphism_abstraction=new JButton(""Polymorphism & Abstraction"");
            oop1_polymorphism_abstraction.setFont(font);
            oop1_polymorphism_abstraction.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_polymorphism_abstraction); 
            oop1_uml=new JButton(""UML details"");
            oop1_uml.setFont(font);
            oop1_uml.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_uml); 
            oop1_exception_handle=new JButton(""Exception Handling"");
            oop1_exception_handle.setFont(font);
            oop1_exception_handle.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_exception_handle); 
            oop1_association=new JButton(""Association"");
            oop1_association.setFont(font);
            oop1_association.setPreferredSize(new Dimension(300,30));
            main_panel.add(oop1_association); 
                }
          }
          if(semesternumber==3){
                if(slide_subject.equals(""OOP2"")){
            oop2_intro=new JButton(""Introduction"");
            oop2_intro.setFont(font);
            oop2_intro.setPreferredSize(new Dimension(300,50));
            main_panel.add(oop2_intro); 
            oop2_swing=new JButton(""Swing"");
            oop2_swing.setFont(font);
            oop2_swing.setPreferredSize(new Dimension(300,50));
            main_panel.add(oop2_swing);
            oop2_swing_event=new JButton(""Swing Event"");
            oop2_swing_event.setFont(font);
            oop2_swing_event.setPreferredSize(new Dimension(300,50));
            main_panel.add(oop2_swing_event); 
            oop2_thread=new JButton(""Thread"");
            oop2_thread.setFont(font);
            oop2_thread.setPreferredSize(new Dimension(300,50));
            main_panel.add(oop2_thread);
            oop2_generics=new JButton(""Generics"");
            oop2_generics.setFont(font);
            oop2_generics.setPreferredSize(new Dimension(300,50));
            main_panel.add(oop2_generics);
                }
                if(slide_subject.equals(""ComputerNetworking"")){
            cn_chapter1=new JButton(""Chapter 1"");
            cn_chapter1.setFont(font);
            cn_chapter1.setPreferredSize(new Dimension(300,50));
            main_panel.add(cn_chapter1); 
            cn_chapter2=new JButton(""Chapter 2"");
            cn_chapter2.setFont(font);
            cn_chapter2.setPreferredSize(new Dimension(300,50));
            main_panel.add(cn_chapter2); 
            cn_network_layer=new JButton(""Network Layer"");
            cn_network_layer.setFont(font);
            cn_network_layer.setPreferredSize(new Dimension(300,50));
            main_panel.add(cn_network_layer); 
            cn_ip_address=new JButton(""Ip Address"");
            cn_ip_address.setFont(font);
            cn_ip_address.setPreferredSize(new Dimension(300,50));
            main_panel.add(cn_ip_address); 
            cn_transport_layer=new JButton(""Transport Layer"");
            cn_transport_layer.setFont(font);
            cn_transport_layer.setPreferredSize(new Dimension(300,50));
            main_panel.add(cn_transport_layer); 
            cn_network_layer2=new JButton(""Network Layer-2"");
            cn_network_layer2.setFont(font);
            cn_network_layer2.setPreferredSize(new Dimension(300,50));
            main_panel.add(cn_network_layer2); 
                }
          }
        back=new JButton(""back"");
        back.setPreferredSize(new Dimension(300,30));
        main_panel.add(back);
     } 
     
     private void buttonaction() {
       String[] options = {""View"",""Download""};
       back.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 dispose();
                Slides frame = new Slides(""IIT-Library"");
                frame.setVisible(true);
            } });
        if(semesternumber==1){
            if(slide_subject.equals(""CProgramming"")){
               //buttons are = c_array,c_introduction,c_looping,c_expressions
                c_introduction.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                   dispose();
                 int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_1398a77215bc429c981565cbf31df8f3.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""C_introduction.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_f5ab75b553ff4229acccb3129cabf18a.pptx?dn=C_Introduction.pptx"");
                }
                }  });
                c_array.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                     dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_88baa8675e604a268be555ee19e0a7ef.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""C_Array.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_45d2caaebbba449797f0876837c3bc9d.pptx?dn=Arrays.pptx"");
                }
                }  });
                c_expressions.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent ae) {
                 dispose();
                        int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_cc166f3f60434954b629b9ebbbbca281.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""C_Expressions.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_8687d146477346399dfd4692a54840ac.pptx?dn=Expressions.pptx"");
                }
                }  });
                c_looping.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_7e99a5739d0244548ed26c0cce674194.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""C_Decision making and looping.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_58a39a509bcd4fc7ae8621003a668a34.pptx?dn=Decision_making_and_looping.pptx"");
                }
                }  });
            }
            if(slide_subject.equals(""Discrete"")){
               //Dis_chapter1,Dis_chapter2,Dis_chapter3,Dis_chapter8,Dis_chapter9
                Dis_chapter1.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_e707ba6e54af483ab66659e4e48dbeb5.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""Discrete Chapter 1.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_303eb49c2b824a2c94b6a153fd185754.pptx?dn=Dis_Chapter1.pptx"");
                }
                }  });
                Dis_chapter2.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_a784f440aa4b4498aca834e2f1e98851.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""Discrete chapter 2.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_3c9d8b1ece79498caab4be87a2172016.pptx?dn=Dis_chapter2.pptx"");
                }
                }  });
                Dis_chapter3.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_b0e815ca418d4ae7a26f7fa33b201cbe.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""Discrete chapter 3.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_b0e815ca418d4ae7a26f7fa33b201cbe.pdf"");
                }
                }  });
                Dis_chapter8.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_6f0fc9d9e1054adaba57cdedb30cab63.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""Discrete chapter 8.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_0533cfd459da494e8e3a55f554082d6f.ppt?dn=Dis_chapter8_Graphs.ppt"");
                }
                }  });
                Dis_chapter9.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_0652a9095d0c4ae0bccdfe3755806eac.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""Discrete chapter 9.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_0652a9095d0c4ae0bccdfe3755806eac.pdf"");
                }
                }  });
            }
         }
        
         if(semesternumber==2){      
             if(slide_subject.equals(""OOP1"")){
               //oop1_intro,oop1_data_types,oop1_control_statement,oop1_array,oop1_Class,oop1_modifire,oop1_overloading_inheriting,oop1_polymorphism_abstraction,oop1_uml,oop1_exception_handle,oop1_association
                oop1_intro.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_2c3aeff0e681411088dcb7f609799459.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP1 Introduction.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_0cc28a4b3f6c403987d3e9e7eb73a50c.pptx?dn=1.%20OOP_Introduction.pptx"");
                }
                }  });
                oop1_data_types.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_b1e217c326794b27bf97af9be32e4653.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""oop1 data types and expressions.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_8f6d65d2e3bd4dda906f4cbdf2743f57.ppt?dn=2.Data%20types.ppt"");
                }
                }  });
                oop1_control_statement.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_54a60366f6574ad680e3b2e95fbb305c.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP1 control statement.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_26d9dd6972704108acdc77ed809fe7dc.ppt?dn=3.%20Java_Control_Statements.ppt"");
                }
                }  });
                oop1_array.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_7462eddff2b04601b1ec59e563032d29.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP1 Array.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_181b6e4994864381acc0d05f9888dfbc.pptx?dn=4.%20Jave%20array.pptx"");
                }
                }  });
                oop1_Class.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_7a49416c5a494e27b1d0e55ed05a958c.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP1 class.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_ef83e26200624b33be53498b04a62176.pptx?dn=5.%20Jave%20Class.pptx"");
                }
                }  });
                oop1_modifire.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_fd3b5c59c7224760a7984fac3fe2c01f.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP1 class modifire.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_ceb883750bf042a3aafec76521b30b65.pptx?dn=7.%20Access%20Modifire%20%26%20Encapsulation.pptx"");
                }
                }  });
                oop1_overloading_inheriting.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_5ce62cca0b6740c2b927e7e466cca344.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""oop1 Overloading and inheritance.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_3c6800b366984d26b1d621a4bbb47fe3.pptx?dn=8.%20Constuctor%20Overloading%20%26%20Class%20Inheritance.pptx"");
                }
                }  });
                oop1_polymorphism_abstraction.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_7397da38fcdd4b72b1c325152b35efbd.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP1 polymorphism and abstraction.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_6117b654fa664f53a96c0b978ae4e50f.pptx?dn=9.%20Polymorphism%20%26%20Abstraction.pptx"");
                }
                }  });
                oop1_uml.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_8b5911fff0c44c77a2d0badf1e4a431f.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP1 UML details.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_3d8c7536a5394bacadd26d2c4b5a4377.pptx?dn=10.UML%20details.pptx"");
                }
                }  });
                oop1_exception_handle.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_182f466c5d6749cca473ff8849952f9d.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP1 Exception Handle.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_a88cc805d330492d8857bbb10a01a0f0.pptx?dn=11.%20Exception%20Handling%20(1)%5B308%5D.pptx"");
                }
                }  });
                oop1_association.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_05f47dde3777469e9f8a03135e9357f1.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP1 Association.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_add2b2fbfda44b7faaa5bc6b608624d0.pptx?dn=12.%20Association.pptx"");
                }
                }  });
            }
             if(slide_subject.equals(""ComputerOrganizations"")){
                 //co_intro,co_top_level_view,co_cache_memory,co_internal_memory,co_input_output,co_instruction_sets,co_instruction_sets_addressing
                 co_intro.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_c61660de8ae94ee7a50343e9c7d53800.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CO introduction.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_69f94539dff64151a97c28ca3464d70d.pptx?dn=CO_01_Introduction%20.pptx"");
                }
                }  });
               co_top_level_view.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_bccb9d2ce12e47569aa1ede99d2306e7.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CO introduction.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_db4428b1a3e64c3bbf50bc9b43956004.pptx?dn=CO_03_Top%20Level%20View%20of%20Computer%20Function%20and%20Interconnection.pptx"");
                }
                }  });
               
               co_cache_memory.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_73f13f2816fc4a529958473dbf5efd85.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CO Cache Memory.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_e88108f9d5bd4a4ca58db408394b925d.pptx?dn=CO_4_Cache%20memory.pptx"");
                }
                }  });
               co_internal_memory.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_4dc788068e344a65b99da39ea890c110.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CO internal memory.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_88f64ceddf1947c58c45b3e3c1bc519c.pptx?dn=CO_05_internal%20memory.pptx"");
                }
                }  });
               co_input_output.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();
                     int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_948d3ef4ad844f47bb1a0c966991087d.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CO input output.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_611e9886184e4e79bf4ac5a499791135.pptx?dn=CO_7_input%2Coutput.pptx"");
                }
                }  });
               co_instruction_sets.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                dispose(); int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_d7997e6a86b7438d91558f0bc99c5756.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CO instruction sets.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_0e8949ba98364018a70e1d6aba5d4813.pptx?dn=CO_10_Instructions%20sets.pptx"");
                }
                }  });
               co_instruction_sets_addressing.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_77c10c1455eb478e9f69583ee9213054.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CO instruction set addressing.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_e76b8fc59efd4024bf6b70adbc6b8c72.ppt?dn=CO_11_Instructions%20sets%20addressing.ppt"");
                }
                }  });
             }
        }
         if(semesternumber==3){
             if(slide_subject.equals(""OOP2"")){
                 //oop2_intro,oop2_swing,oop2_swing_event,oop2_thread,oop2_generics;
                 oop2_intro.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_b31b6b8bfee64c5db680e44a014973df.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP2 introduction.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_4524375721a9490da173e50f89f3401d.pptx?dn=01.%20oop2_Intro.pptx"");
                }
                }  });
                 oop2_swing.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_b823ece6b42f448295aa52a25abbc932.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP2 Swing.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_bc659c3c152c4c51aeaefa8330a81195.pptx?dn=02.%20Swing.pptx"");
                }
                }  });
                oop2_swing_event.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_68164f93ac6a4f50aca5eb18d4680083.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP2 Swing Event.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_f3650524ce93445a8ff27c2e7c96f1d1.pptx?dn=03.%20Swing%20Event.pptx"");
                }
                }  });
                 oop2_thread.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_f3590292cf7f4a8f85844bd5ced7bfa4.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP2 Thread.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_59083bf2eed84dc2a48087a056e36531.ppt?dn=04.%20Thread.ppt"");
                }
                }  });
                oop2_generics.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_a05e7d87cd524aa48e17fe0f1f701d23.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""OOP2 Generics.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_445c9b0465374d06962d2d09e58543c3.pptx?dn=05.%20Generics.pptx"");
                }
                }  });
             }
             if(slide_subject.equals(""ComputerNetworking"")){
                 //cn_chapter1,cn_chapter2,cn_network_layer,cn_ip_address,cn_application_layer,cn_transport_layer,cn_network_layer2,cn_routing;
                 cn_chapter1.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_a556cd2e9ab048f39e14e27f69351567.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CN Chapter 1.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_9123ea588373444e8ceba1895784d693.ppt?dn=ch01.ppt"");
                }
                }  });
                 cn_chapter2.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_8dbdd5ae961b4cff82ec0032827fccf9.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CN Chapter 2.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_02b3cd6be0664682ad66ac82f5c78b18.ppt?dn=ch02.ppt"");
                }
                }  });
                 cn_network_layer.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_8cc5c31aea8f462d8f87a7d42af3a3dc.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CN Network Layer.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_6a041bf9d6294c33be14aec0c5afa51e.ppt?dn=03.Network%20Layer.ppt"");
                }
                }  });
                 cn_ip_address.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                dispose(); int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_0548932c536e40809d49b2e1f4bed9ce.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CN IP Addressing.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_5923c0f6a4b7408c9dcaecda256ca18c.ppt?dn=04.IP%20Address.ppt"");
                }
                }  });
                 cn_application_layer.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_0ace755028c74ca486cc7b4da3b8fc56.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CN Application Layer.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_4c2b62b73467420c86210476a80dc8a5.ppt?dn=05.Application%20Layer.ppt"");
                }
                }  });
                 cn_transport_layer.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_fe39f364608f42ef96e3e00ec76e47fa.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CN Transport Layer.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_84d3e39414224916a518db59934ed387.ppt?dn=06.Transport%20Layer.ppt"");
                }
                }  });
                cn_network_layer2.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_1e373c10b51d4f708c94b36d4408bece.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CN Network Layer-2.ppt"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_27cc5ddf931349a9a0b12b7cc0588aa0.ppt?dn=07.Network-layer2.ppt"");
                }
                }  });
                 cn_routing.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent ae) {
                 dispose();int option_result=JOptionPane.showOptionDialog(null,""what would like to do?"","""", 0,JOptionPane.INFORMATION_MESSAGE,null,options,null);
                  if(option_result==JOptionPane.YES_OPTION){
                    View.go(""view.pdf"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_ccee2888569543e28532e233cbbc05af.pdf"");
                }
                if(option_result==JOptionPane.NO_OPTION){
                    download(""CN Routing Protocol.pptx"",""https://1ba04568-93c7-428d-bafc-b6a5efb6c80c.filesusr.com/ugd/18e846_2a3a73303df14eb4bcd709255528e2be.pptx?dn=08.routingprotocol.pptx"");
                }
                }  });
             }
         }
    }
     //used to get user location and download slides
     public void download(String Bookname, String booklink){
            File_Basic file=new File_Basic();
                 boolean result =file.SearchRecord(""Data.txt"",Bookname);
                 System.out.println(result);
                 if (result == true){
                 System.out.println(""""+pdffilepath);
                 PdfViewer.setPdfDocument(pdffilepath);
                 PdfViewer.Showframe();
                 dispose();
                 }
                 else{
                     dispose();
                     dirName=null;
                     JFileChooser fileChooser = new JFileChooser();
                     fileChooser.setCurrentDirectory(new java.io.File("".""));
                     fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                     File fileToSave = null;
                      int choice = fileChooser.showOpenDialog(Slides_details.this);
                     if( choice == JFileChooser.CANCEL_OPTION){
                        JOptionPane.showMessageDialog(null, ""Download was cancelled"");
                        Home_frame frame = new Home_frame(""IIT-Library"");
                        frame.setVisible(true);
                     }
                     else{
                     if( choice == JFileChooser.APPROVE_OPTION){
                         fileToSave = fileChooser.getSelectedFile();
                     }
                     dirName =fileToSave.toString();
                     SwingUtilities.invokeLater(new Runnable() {
                         @Override
                         public void run() {
                             go(dirName+Bookname,booklink);
                             dispose();
                         }
                     }); }
                 }      
             }
     
     
    
     /*    public static void main(String[] args) {
     Slides_details frame = new Slides_details(""IIT-Library"");
     frame.setVisible(true);
     }*/
    
    
}",1
"
package sub_class;
//this class shows all the teacher information and we used card layout to show each teacher info
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;


public class Teacher_info extends JFrame implements ActionListener{
    
    private Container c;
    private JPanel panel;
    private JButton pbtn,nbtn,back;
    private CardLayout card;
    Font f=new Font(""Arial"",Font.BOLD,20);
    FlowLayout fl=new FlowLayout(FlowLayout.CENTER);
    
Teacher_info(){
        
       initcomponents();
       teacher_info();
      
    }
    
        
    
  public void initcomponents(){
    
        
        c = this.getContentPane();
        c.setLayout(null);
        c.setBounds(0, 0, 825, 700);
        c.setBackground(Color.decode(""#2471A3""));
        
        card = new CardLayout();
        panel = new JPanel(card);
        panel.setBounds(0,0,820,580);
    
      
        c.add(panel);
        pbtn = new JButton(""Previous"");
        pbtn.setBounds(10,590,160,50);
        pbtn.setFont(f);
        c.add(pbtn);
        
        nbtn = new JButton(""Next"");
        nbtn.setBounds(630,590,160,50);
        nbtn.setFont(f);
        c.add(nbtn);
        back = new JButton(""Back"");
        back.setBounds(330,610,160,50);
        back.setFont(f);
        c.add(back);
        pbtn.addActionListener(this);
        nbtn.addActionListener(this);
        back.addActionListener(this);
    }
    @Override
  public void actionPerformed(ActionEvent e) {
        
    if(e.getSource()==pbtn){
        card.previous(panel);
    }
    else if(e.getSource()==back){
               dispose();
                Home_frame frame = new Home_frame(""IIT-Library"");
                frame.setVisible(true);
    }
    else
        card.next(panel);
}
   //the method sets all the teachers information in card
     private void teacher_info() {
        
      ImageIcon pic1=new ImageIcon(getClass().getResource(""/icons/sumon_sir_pic.jpg""));
      ImageIcon pic2=new ImageIcon(getClass().getResource(""/icons/bhuiyan_sir_pic.jpg""));
      ImageIcon pic3=new ImageIcon(getClass().getResource(""/icons/dipanita_mem_pic.jpg""));
      ImageIcon pic4=new ImageIcon(getClass().getResource(""/icons/falguni_mem_pic.jpg""));
      ImageIcon pic5 = new ImageIcon(getClass().getResource(""/icons/dipok_sir_pic.jpg""));
      ImageIcon pic6=new ImageIcon(getClass().getResource(""/icons/tasniya_mem_pic.jpg""));
      ImageIcon pic7= new ImageIcon(getClass().getResource(""/icons/ifte_sir_pic.jpg""));
      
      
            JPanel sumon_sir_panel=new JPanel();
           sumon_sir_panel.setBounds(0,0,900,580);
            sumon_sir_panel.setLayout(null);
           sumon_sir_panel.setBackground(Color.decode(""#D6EAF8"" ));
            panel.add(sumon_sir_panel);
           
     
             
            JLabel sumonsirpic=new JLabel();
           sumonsirpic.setBounds(10,20, 400,540);
            Image image=pic1.getImage();
            Image newImage = image.getScaledInstance(sumonsirpic.getWidth(),sumonsirpic.getHeight(),Image.SCALE_SMOOTH);
            ImageIcon img3=new ImageIcon(newImage);
            sumonsirpic.setIcon(img3);
            sumon_sir_panel.add(sumonsirpic);
            
 
            JLabel sumon_sir_name = new JLabel(""Md.Auhidur Rahman"");
            sumon_sir_name.setBounds(430,50,200,100);
            sumon_sir_name.setFont(f);
            sumon_sir_name.setForeground(Color.decode(""#2471A3""));
            sumon_sir_panel.add(sumon_sir_name);
            JLabel sumon_sir_designation= new JLabel(""Assistant Professor & Director"");
           sumon_sir_designation.setBounds(430,90,400,100);
            sumon_sir_designation.setForeground(Color.decode(""#2471A3""));
            sumon_sir_designation.setFont(f);
            sumon_sir_panel.add(sumon_sir_designation);
           JLabel sumon_sir_Mblnum = new JLabel(""Mobile:+8801815662160"");
           sumon_sir_Mblnum.setBounds(430,130,270,100);
           sumon_sir_Mblnum.setFont(f);
          sumon_sir_Mblnum.setForeground(Color.decode(""#2471A3""));
           sumon_sir_panel.add(sumon_sir_Mblnum);
        
           JLabel sumon_sir_Mailid = new JLabel(""Email:auhidsumon@nstu.edu.bd"");
          sumon_sir_Mailid.setBounds(430,170,380,100);
           sumon_sir_Mailid.setFont(f);
          sumon_sir_Mailid.setForeground(Color.decode(""#2471A3""));
           sumon_sir_panel.add(sumon_sir_Mailid);
           JLabel dept= new JLabel(""IIT,NSTU"");
           dept.setBounds(430,210,290,100);
           dept.setFont(f);
          dept.setForeground(Color.decode(""#2471A3""));
           sumon_sir_panel.add(dept);
            
        
        
           JPanel bhuiyan_sir_panel=new JPanel();
           bhuiyan_sir_panel.setBounds(0,0,900,580);
           bhuiyan_sir_panel.setLayout(null);
           bhuiyan_sir_panel.setBackground(Color.decode(""#D6EAF8""));
           panel.add(bhuiyan_sir_panel);
             
    
             
           JLabel bhuiyansirpic=new JLabel();
           bhuiyansirpic.setBounds(10,20, 400,540);
           Image image2=pic2.getImage();
           Image newImage2 = image2.getScaledInstance(bhuiyansirpic.getWidth(),bhuiyansirpic.getHeight(),Image.SCALE_SMOOTH);
           ImageIcon img4=new ImageIcon(newImage2);
           bhuiyansirpic.setIcon(img4);
           bhuiyan_sir_panel.add(bhuiyansirpic);
            
           
               
           JLabel bhuiyan_sir_name = new JLabel(""Md.Nuruzzaman Bhuiyan"");
           bhuiyan_sir_name.setBounds(430,50,280,100);
           bhuiyan_sir_name.setFont(f);
           bhuiyan_sir_name.setForeground(Color.decode(""#2471A3""));
           bhuiyan_sir_panel.add(bhuiyan_sir_name);
           JLabel bhuiyan_sir_designation= new JLabel(""Assistant Professor"");
           bhuiyan_sir_designation.setBounds(430,90,270,100);
           bhuiyan_sir_designation.setFont(f);
           bhuiyan_sir_designation.setForeground(Color.decode(""#2471A3""));
           bhuiyan_sir_panel.add(bhuiyan_sir_designation);
           JLabel bhuiyan_sir_Mblnum = new JLabel(""Mobile:+8801612032781"");
           bhuiyan_sir_Mblnum.setBounds(430,130,270,100);
           bhuiyan_sir_Mblnum.setFont(f);
           bhuiyan_sir_Mblnum.setForeground(Color.decode(""#2471A3""));
           bhuiyan_sir_panel.add(bhuiyan_sir_Mblnum);
        
           JLabel bhuiyan_sir_Mailid = new JLabel(""Email:nuruzzaman.iit@nstu.edu.bd"");
           bhuiyan_sir_Mailid.setBounds(430,170,390,100);
           bhuiyan_sir_Mailid.setFont(f);
           bhuiyan_sir_Mailid.setForeground(Color.decode(""#2471A3""));
           bhuiyan_sir_panel.add(bhuiyan_sir_Mailid);
           JLabel dept1= new JLabel(""IIT,NSTU"");
           dept1.setBounds(430,210,290,100);
           dept1.setFont(f);
           dept1.setForeground(Color.decode(""#2471A3""));
           bhuiyan_sir_panel.add(dept1);
        
           JPanel dipa_mem_panel=new JPanel();
           dipa_mem_panel.setBounds(0,0,900,580);
           dipa_mem_panel.setLayout(null);
           dipa_mem_panel.setBackground(Color.decode(""#D6EAF8""));
           panel.add(dipa_mem_panel);
           
      
             
          JLabel dipamempic=new JLabel();
          dipamempic.setBounds(10,20, 400,540);
          Image image3=pic3.getImage();
          Image newImage3 = image3.getScaledInstance(dipamempic.getWidth(),dipamempic.getHeight(),Image.SCALE_SMOOTH);
          ImageIcon img5=new ImageIcon(newImage3);
          dipamempic.setIcon(img5);
          dipa_mem_panel.add(dipamempic);
            
           
          JLabel dipa_mem_name = new JLabel(""Dipanita Saha"");
          dipa_mem_name.setBounds(430,50,200,100);
          dipa_mem_name.setFont(f);
          dipa_mem_name.setForeground(Color.decode(""#2471A3""));
          dipa_mem_panel.add(dipa_mem_name);
          JLabel dipa_mem_designation= new JLabel(""Assistant Professor"");
          dipa_mem_designation.setBounds(430,90,270,100);
          dipa_mem_designation.setFont(f);
          dipa_mem_designation.setForeground(Color.decode(""#2471A3""));
          dipa_mem_panel.add(dipa_mem_designation);
          JLabel dipa_mem_Mblnum = new JLabel(""Mobile:+8801534373338"");
          dipa_mem_Mblnum.setBounds(430,130,270,100);
          dipa_mem_Mblnum.setFont(f);
          dipa_mem_Mblnum.setForeground(Color.decode(""#2471A3""));
          dipa_mem_panel.add(dipa_mem_Mblnum);
        
          JLabel dipa_mem_Mailid = new JLabel(""Email:dipanita.iit@nstu.edu.bd"");
          dipa_mem_Mailid.setBounds(430,170,290,100);
          dipa_mem_Mailid.setFont(f);
          dipa_mem_Mailid.setForeground(Color.decode(""#2471A3""));
          dipa_mem_panel.add(dipa_mem_Mailid);
          JLabel dept3= new JLabel(""IIT,NSTU"");
          dept3.setBounds(430,210,290,100);
          dept3.setFont(f);
          dept3.setForeground(Color.decode(""#2471A3""));
          dipa_mem_panel.add(dept3);
             
        
           JPanel falguni_mem_panel=new JPanel();
           falguni_mem_panel.setBounds(0,0,900,580);
           falguni_mem_panel.setLayout(null);
           falguni_mem_panel.setBackground(Color.decode(""#D6EAF8""));
           panel.add(falguni_mem_panel);
           
      
             
             
             
             
           JLabel falgunimempic=new JLabel();
           falgunimempic.setBounds(10,20, 400,540);
           Image image4=pic4.getImage();
           Image newImage4 = image4.getScaledInstance(falgunimempic.getWidth(),falgunimempic.getHeight(),Image.SCALE_SMOOTH);
           ImageIcon img6=new ImageIcon(newImage4);
           falgunimempic.setIcon(img6);
           falguni_mem_panel.add(falgunimempic);
            
 
           JLabel falguni_mem_name = new JLabel(""Falguni Roy"");
           falguni_mem_name.setBounds(430,50,200,100);
           falguni_mem_name.setFont(f);
           falguni_mem_name.setForeground(Color.decode(""#2471A3""));
           falguni_mem_panel.add(falguni_mem_name);
           JLabel falguni_mem_designation= new JLabel(""Assistant Professor"");
           falguni_mem_designation.setBounds(430,90,270,100);
           falguni_mem_designation.setFont(f);
           falguni_mem_designation.setForeground(Color.decode(""#2471A3""));
           falguni_mem_panel.add(falguni_mem_designation);
           JLabel falguni_mem_Mblnum = new JLabel(""Mobile:+8801680446978"");
           falguni_mem_Mblnum.setBounds(430,130,270,100);
           falguni_mem_Mblnum.setFont(f);
           falguni_mem_Mblnum.setForeground(Color.decode(""#2471A3""));
           falguni_mem_panel.add(falguni_mem_Mblnum);
        
           JLabel falguni_mem_Mailid = new JLabel(""Email:falguniroy.iit@nstu.edu.bd"");
           falguni_mem_Mailid.setBounds(430,170,320,100);
           falguni_mem_Mailid.setFont(f);
           falguni_mem_Mailid.setForeground(Color.decode(""#2471A3""));
           falguni_mem_panel.add(falguni_mem_Mailid);
           JLabel dept5= new JLabel(""IIT,NSTU"");
           dept5.setBounds(430,210,290,100);
           dept5.setFont(f);
           dept5.setForeground(Color.decode(""#2471A3""));
           falguni_mem_panel.add(dept5); 
        
        
            JPanel dipok_sir_panel=new JPanel();
            dipok_sir_panel.setBounds(0,0,900,580);
            dipok_sir_panel.setLayout(null);
            dipok_sir_panel.setBackground(Color.decode(""#D6EAF8""));
            panel.add(dipok_sir_panel);
           
          
            JLabel dipoksirpic=new JLabel();
            dipoksirpic.setBounds(10,20, 400,540);
            Image image5=pic5.getImage();
            Image newImage5 = image5.getScaledInstance(dipoksirpic.getWidth(),dipoksirpic.getHeight(),Image.SCALE_SMOOTH);
            ImageIcon img7=new ImageIcon(newImage5);
            dipoksirpic.setIcon(img7);
            dipok_sir_panel.add(dipoksirpic);
            
 
            JLabel dipok_sir_name = new JLabel(""Dipok Chandra Das"");
            dipok_sir_name.setBounds(430,50,200,100);
            dipok_sir_name.setFont(f);
            dipok_sir_name.setForeground(Color.decode(""#2471A3""));
            dipok_sir_panel.add(dipok_sir_name);
            JLabel dipok_sir_designation= new JLabel(""Assistant Professor"");
            dipok_sir_designation.setBounds(430,90,270,100);
            dipok_sir_designation.setFont(f);
            dipok_sir_designation.setForeground(Color.decode(""#2471A3""));
            dipok_sir_panel.add(dipok_sir_designation);
            JLabel dipok_sir_Mblnum = new JLabel(""Mobile:+8801743972128"");
            dipok_sir_Mblnum.setBounds(430,130,270,100);
            dipok_sir_Mblnum.setFont(f);
            dipok_sir_Mblnum.setForeground(Color.decode(""#2471A3""));
            dipok_sir_panel.add(dipok_sir_Mblnum);
        
            
            JLabel dipok_sir_Mailid = new JLabel(""Email:dipok.iit@nstu.edu.bd"");
            dipok_sir_Mailid.setBounds(430,170,380,100);
            dipok_sir_Mailid.setFont(f);
            dipok_sir_Mailid.setForeground(Color.decode(""#2471A3""));
            dipok_sir_panel.add(dipok_sir_Mailid);
            JLabel dept6= new JLabel(""IIT,NSTU"");
            dept6.setBounds(430,210,290,100);
            dept6.setFont(f);
            dept6.setForeground(Color.decode(""#2471A3""));
            dipok_sir_panel.add(dept6);
            
       
            
            JPanel tasniya_mem_panel=new JPanel();
            tasniya_mem_panel.setBounds(0,0,900,580);
            tasniya_mem_panel.setLayout(null);
            tasniya_mem_panel.setBackground(Color.decode(""#D6EAF8""));
            panel.add(tasniya_mem_panel);
           
      
             
             
            JLabel tasniyamempic=new JLabel();
            tasniyamempic.setBounds(10,20, 400,540);
            Image image6=pic6.getImage();
            Image newImage6 = image6.getScaledInstance(tasniyamempic.getWidth(),tasniyamempic.getHeight(),Image.SCALE_SMOOTH);
            ImageIcon img8=new ImageIcon(newImage6);
            tasniyamempic.setIcon(img8);
            tasniya_mem_panel.add(tasniyamempic);
            
 
           JLabel tasniya_mem_name = new JLabel(""Tasniya Ahmed"");
           tasniya_mem_name.setBounds(430,50,200,100);
           tasniya_mem_name.setFont(f);
           tasniya_mem_name.setForeground(Color.decode(""#2471A3""));
           tasniya_mem_panel.add(tasniya_mem_name);
           JLabel tasniya_mem_designation= new JLabel(""Lecturer"");
           tasniya_mem_designation.setBounds(430,90,270,100);
           tasniya_mem_designation.setFont(f);
            tasniya_mem_designation.setForeground(Color.decode(""#2471A3""));
           tasniya_mem_panel.add(tasniya_mem_designation);
           JLabel tasniya_mem_Mblnum = new JLabel(""Mobile:+8801936543596"");
           tasniya_mem_Mblnum.setBounds(430,130,270,100);
           tasniya_mem_Mblnum.setFont(f);
            tasniya_mem_Mblnum.setForeground(Color.decode(""#2471A3""));
           tasniya_mem_panel.add(tasniya_mem_Mblnum);
        
           JLabel tasniya_mem_Mailid = new JLabel(""Email:tasniya.iit@nstu.edu.bd"");
           tasniya_mem_Mailid.setBounds(430,170,350,100);
           tasniya_mem_Mailid.setFont(f);
            tasniya_mem_Mailid.setForeground(Color.decode(""#2471A3""));
           tasniya_mem_panel.add(tasniya_mem_Mailid);
           JLabel dept7= new JLabel(""IIT,NSTU"");
           dept7.setBounds(430,210,290,100);
           dept7.setFont(f);
           dept7.setForeground(Color.decode(""#2471A3""));
           tasniya_mem_panel.add(dept7);
       
           JPanel ifte_sir_panel=new JPanel();
           ifte_sir_panel.setBounds(0,0,900,580);
           ifte_sir_panel.setLayout(null);
           ifte_sir_panel.setBackground(Color.decode(""#D6EAF8""));
           panel.add(ifte_sir_panel);
           
             
 
           JLabel iftesirpic=new JLabel();
           iftesirpic.setBounds(10,20, 400,540);
           Image image7=pic7.getImage();
           Image newImage7 = image7.getScaledInstance(iftesirpic.getWidth(),iftesirpic.getHeight(),Image.SCALE_SMOOTH);
           ImageIcon img9=new ImageIcon(newImage7);
           iftesirpic.setIcon(img9);
           ifte_sir_panel.add(iftesirpic);
            
 
           JLabel ifte_sir_name = new JLabel(""Md.Iftekharul Alam Efat"");
           ifte_sir_name.setBounds(430,50,240,100);
           ifte_sir_name.setFont(f);
          ifte_sir_name.setForeground(Color.decode(""#2471A3""));
          ifte_sir_panel.add(ifte_sir_name);
          JLabel ifte_sir_designation= new JLabel(""Assistant Professor"");
          ifte_sir_designation.setBounds(430,90,270,100);
          ifte_sir_designation.setFont(f);
          ifte_sir_designation.setForeground(Color.decode(""#2471A3""));
          ifte_sir_panel.add(ifte_sir_designation);
          JLabel ifte_sir_Mblnum = new JLabel(""Mobile:+8801727208714"");
          ifte_sir_Mblnum.setBounds(430,130,270,100);
          ifte_sir_Mblnum.setFont(f);
          ifte_sir_Mblnum.setForeground(Color.decode(""#2471A3""));
          ifte_sir_panel.add(ifte_sir_Mblnum);
        
          JLabel ifte_sir_Mailid = new JLabel(""Email:iftekhar.iit@nstu.edu.bd"");
          ifte_sir_Mailid.setBounds(430,170,350,100);
          ifte_sir_Mailid.setFont(f);
          ifte_sir_Mailid.setForeground(Color.decode(""#2471A3""));
          ifte_sir_panel.add(ifte_sir_Mailid);
          JLabel dept9= new JLabel(""IIT,NSTU"");
          dept9.setBounds(430,210,290,100);
          dept9.setFont(f);
          dept9.setForeground(Color.decode(""#2471A3""));
          ifte_sir_panel.add(dept9);

        
    }
    
     /*    public static void main(String[] args) {
     Teacher_info frame = new Teacher_info();
     frame.setVisible(true);
     frame.setTitle(""IIT-Library"");
     frame.setBounds(0, 0, 825, 700);
     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
     frame.setLocationRelativeTo(null);
     }*/
    
}",1
"
package sub_class;
//shows the dowloaded file without saving its information into data.txt file
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;



public class View {
    public static JProgressBar progressbar;
    public JLabel label1;
    public static JButton downloaded;
    public static Font font=new Font(""Arial"",Font.BOLD,20);
    FlowLayout layout = new FlowLayout(FlowLayout.CENTER);
    public static String fileName, fileUrl;
    public static JFrame frame;
    /* public static void main(String args[]) {
    SwingUtilities.invokeLater(new Runnable() {
    @Override
    public void run() {
    go(""java.pdf"",""https://drive.google.com/uc?export=download&id=1PTJVzywVw1piIARQy7wZ6lnqpAdEWETp"");
    }
    });
    }*/
        
        public static void go(String fileName , String fileUrl) {
            View.fileName= fileName;
            View.fileUrl= fileUrl;
            
         frame = new JFrame();
        JPanel panel = new JPanel();
        JLabel label = new JLabel(""Loading file..."");
        label.setPreferredSize(new Dimension(300,50));
        label.setFont(font);
        progressbar = new JProgressBar();
        progressbar.setStringPainted(true);
        progressbar.setPreferredSize(new Dimension(300,50));
     //  progressbar.setIndeterminate(true);
       progressbar.setValue(0);
        panel.add(label);
        panel.add(progressbar);
        frame.add(panel);
        frame.pack();
        frame.setSize(500,400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        new Task_StringUpdate(label).execute();
    }
        
        static class Task_StringUpdate extends SwingWorker<Void, String> {

        JLabel jlabel;
        public Task_StringUpdate(JLabel jlabel) {
            this.jlabel = jlabel;
        }

        @Override
        protected Void doInBackground() throws Exception {
            downloadFile(fileName,fileUrl);
            return null;
        }
        @Override
        protected void done() {
                     frame.dispose();
                     PdfViewer.setPdfDocument(fileName);
                     PdfViewer.Showframe();
        }
}
        
        public static void downloadFile(String fileName, String fileUrl)  
            throws MalformedURLException, IOException {

        BufferedInputStream in = null;
        FileOutputStream fout = null;
        float totalDataRead=0;
        URL url = new URL(fileUrl);
        URLConnection conn = url.openConnection();
        int filesize = conn.getContentLength();
        
            
        
        try {
            in = new BufferedInputStream(new URL(fileUrl).openStream());
            fout = new FileOutputStream(fileName);
            byte data[] = new byte[1024];
            int count;
            int i=0;
            while ((count = in .read(data, 0, 1024)) != -1) {
                fout.write(data, 0, count);
                
               totalDataRead=totalDataRead+count;
              float Percent=(totalDataRead*100)/filesize;
              progressbar.setValue((int)Percent);
            }
        } finally {
            if ( in != null)
                in .close();
            if (fout != null)
                fout.close();
        }
   }
}",0
"
package sub_class;
//The very first frame and used for login of users
import frames.main_frame;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


public class Welcome_frame extends main_frame {
    public JButton loginbutton,teacherlogin;
    public JLabel label;
    public JPanel main_panel;
    Font font=new Font(""Arial"",Font.BOLD,20);
    public String username,password;
     public static Scanner scanner;
     public int usertype; //0 means students and 1 means teachers
    
     public Welcome_frame(String frame_title) {
        super(frame_title);
        setContainer();
        setMainPanel();
        setlabel();
        setbutton();
        actionlistener();
    }
    
       public void setContainer()
    {
        super.setContainer();
        container.setBackground(Color.WHITE);
    }
       
       public void setMainPanel()
    {
        main_panel = new JPanel();
        main_panel.setBackground(Color.WHITE);
        main_panel.setLayout(null);  
        container.add(main_panel);
    }
     public void setbutton(){
           loginbutton=new JButton(""Student Login"");
           loginbutton.setBounds(440, 450, 180, 50);
           loginbutton.setFont(font);
           main_panel.add(loginbutton);
           
           teacherlogin=new JButton(""Teacher Login"");
           teacherlogin.setBounds(240, 450, 180, 50);
           teacherlogin.setFont(font);
           main_panel.add(teacherlogin);
         
     }
     
     public void setlabel(){
           label=new JLabel(""Welcome to IIT-Library"");
           label.setBounds(0,0,900, 100);
           label.setHorizontalAlignment(JLabel.CENTER);
           label.setVerticalAlignment(JLabel.CENTER);
           label.setFont(new Font(""Arial"",Font.BOLD,40));
           label.setOpaque(true);
           label.setForeground(Color.WHITE);
           label.setBackground(Color.decode(""#2471A3""));
           main_panel.add(label);
           
           ImageIcon LogoImage=new ImageIcon(getClass().getResource(""/icons/iit-logo.jpg""));
           JLabel image=new JLabel();
           image.setIcon(LogoImage);
           image.setBounds(280,20, 400, 500);
           main_panel.add(image);
     }
     
     public void actionlistener(){
         loginbutton.addActionListener(new ActionListener() {
            
             public void actionPerformed(ActionEvent ae) {
                 username=JOptionPane.showInputDialog(null,""Enter Your Name"",""Login"", JOptionPane.INFORMATION_MESSAGE);
                 password=JOptionPane.showInputDialog(null,""Enter Your ID"",""Login"", JOptionPane.INFORMATION_MESSAGE);
                  if(username== null || password ==null){
                     JOptionPane.showMessageDialog(null, ""You can not cancel input"");
                 }
                  else{
                 username=username.trim();
                  username=username.replaceAll(""\\s"","""");
                  password=password.trim();
                  if(username.isEmpty()) JOptionPane.showMessageDialog(null, ""Please Enter User Name"");
                  else if(password.isEmpty()) JOptionPane.showMessageDialog(null, ""Please Enter Your ID"");
                  else{
                   int i=SearchStudent(username,password);
                     if(i==0){
                     JOptionPane.showMessageDialog(null, ""Wrong name or password"");
                     }
                     else{
                      Semester_details.usertype=1;
                      JOptionPane.showMessageDialog(null, ""sucessfully log in"");
                      Home_frame frame = new Home_frame(""IIT-Library"");
                      frame.setVisible(true);
                      dispose();
                     }}}
             }
         });
         
         teacherlogin.addActionListener(new ActionListener() {
            
             public void actionPerformed(ActionEvent ae) {
                 username=JOptionPane.showInputDialog(null,""Enter Your Name"",""Login"", JOptionPane.INFORMATION_MESSAGE);
                 password=JOptionPane.showInputDialog(null,""Enter Your ID"",""Login"", JOptionPane.INFORMATION_MESSAGE);
                 if(username== null || password ==null){
                     JOptionPane.showMessageDialog(null, ""You can not cancel input"");
                 }
                 else{
                  username=username.trim();
                  username=username.replaceAll("" "","""");
                  password=password.trim();
                  
                  if(username.equals(""IIT"") && password.equals(""1234"")){
                      Semester_details.usertype=0;
                      JOptionPane.showMessageDialog(null, ""sucessfully log in"");
                      Home_frame frame = new Home_frame(""IIT-Library"");
                      frame.setVisible(true);
                      dispose();
                  }
                  else{
                      if(username.isEmpty()){
                      JOptionPane.showMessageDialog(null, ""Please Enter user name"");
                  }
                      else if(password.isEmpty()){
                      JOptionPane.showMessageDialog(null, ""Please Enter password"");
                  }
                      else JOptionPane.showMessageDialog(null, ""Wrong User name or password"");
                  }}
             }
         });
     }
     
     //this section checks a student name and id and if valid return i>0 
     public  int SearchStudent(String username,String roll){
                 String studentname,studentroll;
                 File f=new File(""StudentInfo.txt"");       
                   int i=0;
                   try {
                 scanner=new Scanner(new File(f.getAbsolutePath()));
                  scanner.useDelimiter(""[,\n]"");
                  while(scanner.hasNext()){
                      studentname=scanner.next();
                      studentroll=scanner.next().trim();
                  if(studentname.equalsIgnoreCase(username)&&studentroll.equalsIgnoreCase(roll)){
                         i++;
                }
            }
           scanner.close();
        } catch (FileNotFoundException ex) {
            
        }
                   return i;
    }
     
     
     
     
     /*    public static void main(String[] args) {
     Welcome_frame frame= new Welcome_frame(""IIT-Library"");
     frame.setVisible(true);
     
     }*/
}",1
"
package sub_class;
//frame to know what exactly user looking for and allow them to view it
import frames.book_pdf_frame;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;


public class search_item extends book_pdf_frame{
    public JPanel main_panel;
    Font font=new Font(""Arial"",Font.BOLD,20);
    FlowLayout layout=new FlowLayout(FlowLayout.CENTER);
    public JButton view,back;
    public JLabel label;
    public JComboBox box1;
    public static String pdffilepath,dirName=null,bookname;
     public static String[] item=new String[20];
    public static String[] link=new String[20];
    public search_item(String frame_title) {
        super(frame_title);
        setContainer();
        setMainPanel();
        setLabel();
        setButton();
        buttonaction();
    }
    
     public void setContainer()
    {
        super.setContainer();
        container.setBackground(Color.WHITE);
    }
     
     public void setMainPanel()
    {
        main_panel = new JPanel();
        main_panel.setBackground(Color.WHITE);
        main_panel.setLayout(layout); 
        layout.setVgap(20);
        container.add(main_panel);
    }
     public void setLabel()
     {
         label=new JLabel(""             You are looking for?"");
         label.setFont(font);
         label.setPreferredSize(new Dimension(300,50));
         main_panel.add(label);
     }
     public void setButton()
     {
         box1=new JComboBox(item);
         box1.setBounds(20, 20, 500, 50);
         box1.setFont(font);
         main_panel.add(box1);
         view=new JButton(""View"");
         view.setFont(font);
        view.setPreferredSize(new Dimension(300,50));
         main_panel.add(view);
         back=new JButton(""Back"");
         back.setFont(font);
        back.setPreferredSize(new Dimension(300,50));
         main_panel.add(back);
         
     }
     public void buttonaction()
     {
         view.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                 dispose();
                int i= box1.getSelectedIndex();
               View.go(""view.pdf"",link[i]);
            } });
         back.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent ae) {
                dispose();
                Home_frame frame = new Home_frame(""IIT-Library"");
                frame.setVisible(true);
            } });
     }
     
     public static void main(String[] args) {
        int i = searchitem(""c"");
        System.out.println(i);
        if(i>0){
            search_item frame = new search_item(""Search"");
            frame.setVisible(true);
        }
    }
     //using regex to get user searched file name 
     public static int searchitem(String pattern){
        int i=0;
        try {
            
            Pattern p =Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);
            Scanner x=new Scanner(new File(""link.txt""));
            x.useDelimiter(""[,\n]"");
            while(x.hasNext()){
                String item_name=x.next();
                Matcher m = p.matcher(item_name);
                if(m.find()){
                item[i]=item_name;
                link[i]=x.next();
                i++;}
               else {String s= x.next();}
            }
            x.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(search_item.class.getName()).log(Level.SEVERE, null, ex);
        }
        return i;
     }
}",1
"package backend;

import javax.swing.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class Helper {
    private static final String CUSTOMER_FILE_NAME = ""customer.txt"";
    private static final String TOOL_FILE_NAME = ""tool.txt"";
    private List<Customer> customerList;
    private List<Tool> toolList;

    public Helper(){
        setCustomerList();
        setToolList();
    }

    public void setCustomerList() {
        customerList = new ArrayList<>();

        try{
            BufferedReader bufferedReader = new BufferedReader(new FileReader(CUSTOMER_FILE_NAME));
            String line;
            while ((line = bufferedReader.readLine()) !=null) {
                String[] data = line.split("","");
                customerList.add(new Customer(data[0], data[1], data[2], data[3], data[4], data[5], data[6]));
            }
            bufferedReader.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ""Customer File Not Found"");
        }
    }

    public void setToolList() {
        toolList = new ArrayList<>();
        try{
            BufferedReader bufferedReader = new BufferedReader(new FileReader(TOOL_FILE_NAME));
            String line;
            while ((line = bufferedReader.readLine()) !=null) {
                String[] data = line.split("","");
                toolList.add(new Tool(data[0], data[1], data[2], data[3], data[4]));
            }
            bufferedReader.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ""Tool File Not Found"");
        }
    }

    public void addTool(String name, int quantity) {
        for (int i = 0; i < quantity; i++) {
            toolList.add(new Tool(""T""+ getRandomNumber(), name, ""none"", ""none"", ""none""));
        }
        writeToolToFile();
        JOptionPane.showMessageDialog(null, quantity + "" piece "" + name + "" added successfully."");
    }

    public void rentTool(String customerID, String rentDate) {
        for (Tool tool : toolList) {
            if ((tool.getRentDate().equals(""none"") && tool.getReturnDate().equals(""none"")) || (!tool.getRentDate().equals(""none"") && !tool.getReturnDate().equals(""none""))) {
                tool.setCustomerID(customerID);
                tool.setRentDate(rentDate);
                break;
            }
        }
        writeToolToFile();
        JOptionPane.showMessageDialog(null, ""Tool Rented Successfully."");
    }

    public void returnTool(String toolID, String returnDate) {
        for (Tool tool : toolList) {
            if (tool.getId().equals(toolID)) {
                tool.setReturnDate(returnDate);
                break;
            }
        }
        writeToolToFile();
        JOptionPane.showMessageDialog(null, ""Tool Returned Successfully."");
    }


    public void addCustomer(String customerName, String fatherName, String motherName, String mobileNumber, String address) {
        for (Customer customer : customerList) {
            if (customer.getName().equals(customerName) && customer.getMobileNumber().equals(mobileNumber)) {
                JOptionPane.showMessageDialog(null, ""Customer name "" + customerName + "" with mobile number "" + mobileNumber + "" already exits."");
                return;
            }
        }

        customerList.add(new Customer(""C""+ getRandomNumber(), customerName, fatherName, motherName, mobileNumber, address, ""no""));
        writeCustomerToFile();
        JOptionPane.showMessageDialog(null, ""Customer name "" + customerName + "" added successfully."");
    }

    public void deleteCustomer(String id) {
        for (Customer customer : customerList) {
            if (customer.getId().equals(id)) {
                customer.setDeleted(""yes"");
            }
        }
        writeCustomerToFile();
        JOptionPane.showMessageDialog(null, ""Customer deleted successfully."");
    }

    public int getCustomerIndex(String id) {
        for(int i = 0; i < customerList.size(); i++) {
            if (customerList.get(i).getId().equals(id)) {
                return i;
            }
        }
        return -1;
    }

    public void writeCustomerToFile() {
        StringBuilder stringBuilder = new StringBuilder();
        for(Customer customer : customerList) {
            stringBuilder.append(customer.getId()).append("","")
                    .append(customer.getName()).append("","")
                    .append(customer.getFatherName()).append("","")
                    .append(customer.getMotherName()).append("","")
                    .append(customer.getMobileNumber()).append("","")
                    .append(customer.getAddress()).append("","")
                    .append(customer.getDeleted()).append(""\n"");
        }

        try {
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(CUSTOMER_FILE_NAME));
            bufferedWriter.write(stringBuilder.toString());
            bufferedWriter.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ""Customer File Not Found"");
        }
    }

    public void writeToolToFile() {
        StringBuilder stringBuilder = new StringBuilder();
        for(Tool tool : toolList) {
            stringBuilder.append(tool.getId()).append("","")
                    .append(tool.getName()).append("","")
                    .append(tool.getCustomerID()).append("","")
                    .append(tool.getRentDate()).append("","")
                    .append(tool.getReturnDate()).append(""\n"");
        }

        try {
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(TOOL_FILE_NAME));
            bufferedWriter.write(stringBuilder.toString());
            bufferedWriter.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ""Tool File Not Found"");
        }
    }

    public Object[] getCustomerIDWithName() {
        List<String> list = new ArrayList<>();

        for(Customer customer : customerList) {
            if (customer.getDeleted().equals(""no"")) {
                list.add(customer.getId() + "" "" + customer.getName());
            }
        }

        return list.toArray();
    }

    public String getCustomerDetails(String id) {
        for(Customer customer : customerList) {
            if (customer.getId().equals(id)) {
                return ""ID = "" + customer.getId() + ""\n""
                        + ""Name = "" + customer.getName() + ""\n""
                        + ""Father's Name = "" + customer.getFatherName() + ""\n""
                        + ""Mother's Name = "" + customer.getMotherName() + ""\n""
                        + ""Mobile Number = "" + customer.getMobileNumber() + ""\n""
                        + ""Address = "" + customer.getAddress() + ""\n"";
            }
        }
        return """";
    }

    public Object[] getToolNames() {
        List<String> list = new ArrayList<>();

        for(Tool tool : toolList) {
            if (!list.contains(tool.getName())) {
                list.add(tool.getName());
            }
        }

        return list.toArray();
    }

    public Object[] getRentedToolNames() {
        List<String> list = new ArrayList<>();

        for(Tool tool : toolList) {
            if (!tool.getRentDate().equals(""none"") && tool.getReturnDate().equals(""none"")) {
                list.add(tool.getId() + "" "" + tool.getName());
            }
        }

        return list.toArray();
    }

    public int getTotalTool(String name) {
        int quantity = 0;

        for(Tool tool : toolList) {
            if (tool.getName().equals(name) && (tool.getRentDate().equals(""none"") || !tool.getReturnDate().equals(""none""))) {
                quantity++;
            }
        }

        return quantity;
    }

    public String getToolDetails(String id) {
        for(Tool tool : toolList) {
            if (tool.getId().equals(id)) {
                return ""ID = "" + tool.getId() + ""\n""
                        + ""Name = "" + tool.getName() + ""\n""
                        + ""Customer ID = "" + tool.getCustomerID() + ""\n""
                        + ""Rent Date = "" + tool.getRentDate() + ""\n"";
            }
        }
        return """";
    }

    public String getSearchByLastName(String name) {
        StringBuilder output = new StringBuilder().append(""\n"");
        for(Customer customer : customerList) {
            String[] customerName = customer.getName().split("" "");
            try{
                if (customerName[customerName.length - 1].contains(name)) {
                    output.append(""ID = "").append(customer.getId()).append(""\n"")
                            .append(""Name = "").append(customer.getName()).append(""\n"")
                            .append(""Father's Name = "").append(customer.getFatherName()).append(""\n"")
                            .append(""Mother's Name = "").append(customer.getMotherName()).append(""\n"")
                            .append(""Mobile Number = "").append(customer.getMobileNumber()).append(""\n"")
                            .append(""Address = "").append(customer.getAddress()).append(""\n"");
                }
            } catch (Exception ex) {

            }
        }
        return output.toString();
    }

    public String getSearchByFirstName(String name) {
        StringBuilder output = new StringBuilder().append(""\n"");
        for(Customer customer : customerList) {
            String[] customerName = customer.getName().split("" "");
            try{
                if (customerName[0].contains(name)) {
                    output.append(""ID = "").append(customer.getId()).append(""\n"")
                            .append(""Name = "").append(customer.getName()).append(""\n"")
                            .append(""Father's Name = "").append(customer.getFatherName()).append(""\n"")
                            .append(""Mother's Name = "").append(customer.getMotherName()).append(""\n"")
                            .append(""Mobile Number = "").append(customer.getMobileNumber()).append(""\n"")
                            .append(""Address = "").append(customer.getAddress()).append(""\n"");
                }
            } catch (Exception ex) {

            }
        }
        return output.toString();
    }

    public String getSearchByBothName(String name) {
        StringBuilder output = new StringBuilder().append(""\n"");
        for(Customer customer : customerList) {
            String[] customerName = customer.getName().split("" "");
            try{
                if (customerName[0].contains(name) || customerName[customerName.length - 1].contains(name)) {
                    output.append(""ID = "").append(customer.getId()).append(""\n"")
                            .append(""Name = "").append(customer.getName()).append(""\n"")
                            .append(""Father's Name = "").append(customer.getFatherName()).append(""\n"")
                            .append(""Mother's Name = "").append(customer.getMotherName()).append(""\n"")
                            .append(""Mobile Number = "").append(customer.getMobileNumber()).append(""\n"")
                            .append(""Address = "").append(customer.getAddress()).append(""\n"");
                }
            } catch (Exception ex) {

            }
        }
        return output.toString();
    }

    public String showActiveCustomer() {
        StringBuilder output = new StringBuilder().append(""\n"");
        for(Customer customer : customerList) {
                if (customer.getDeleted().equals(""no"")) {
                    output.append(""ID = "").append(customer.getId()).append(""\n"")
                            .append(""Name = "").append(customer.getName()).append(""\n"")
                            .append(""Father's Name = "").append(customer.getFatherName()).append(""\n"")
                            .append(""Mother's Name = "").append(customer.getMotherName()).append(""\n"")
                            .append(""Mobile Number = "").append(customer.getMobileNumber()).append(""\n"")
                            .append(""Address = "").append(customer.getAddress()).append(""\n"");
                }

        }
        return output.toString();
    }

    public String showDeletedCustomer() {
        StringBuilder output = new StringBuilder().append(""\n"");
        for(Customer customer : customerList) {
            if (customer.getDeleted().equals(""yes"")) {
                output.append(""ID = "").append(customer.getId()).append(""\n"")
                        .append(""Name = "").append(customer.getName()).append(""\n"")
                        .append(""Father's Name = "").append(customer.getFatherName()).append(""\n"")
                        .append(""Mother's Name = "").append(customer.getMotherName()).append(""\n"")
                        .append(""Mobile Number = "").append(customer.getMobileNumber()).append(""\n"")
                        .append(""Address = "").append(customer.getAddress()).append(""\n"");
            }

        }
        return output.toString();
    }

    public String showRentedToolCustomer() {
        StringBuilder output = new StringBuilder().append(""\n"");
        for(Tool tool : toolList) {
            if (!tool.getRentDate().equals(""none"") && tool.getReturnDate().equals(""none"")) {
                output.append(""ID = "").append(tool.getId()).append(""\n"")
                        .append(""Name = "").append(tool.getName()).append(""\n"")
                        .append(""Customer ID = "").append(tool.getCustomerID()).append(""\n"")
                        .append(""Rent Date = "").append(tool.getRentDate()).append(""\n"");
            }

        }
        return output.toString();
    }

    public static int getRandomNumber() {
        return (int) ((Math.random() * (200000 - 100000)) + 100000);
    }

    public List<Customer> getCustomerList() {
        return customerList;
    }

    public List<Tool> getToolList() {
        return toolList;
    }
}",1
"package view;

import javax.swing.*;
import java.awt.*;

public class HomePage extends FrameSetter{
    private static final Font FONT = new Font(""Arial"", Font.BOLD, 20);
    private JButton registerCustomerButton, deleteCustomerButton, registerNewToolButton, addExistingToolButton, toolRentalButton, moreOptionsButton;

    public HomePage(){
        setMainPanel();
        setButtons();
        setActionListeners();
    }


    @Override
    void setSize() {
        setSize(400, 500);
    }

    void setMainPanel(){
        getMainPanel().setLayout(new GridLayout(0, 1, 0, 2));
    }

    public void setButtons() {
        registerCustomerButton = new JButton(""Register Customer"");
        registerCustomerButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        registerCustomerButton.setFocusPainted(false);
        registerCustomerButton.setFont(FONT);
        registerCustomerButton.setBackground(Color.DARK_GRAY);
        registerCustomerButton.setForeground(Color.WHITE);
        getMainPanel().add(registerCustomerButton);

        deleteCustomerButton = new JButton(""Delete Customer"");
        deleteCustomerButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        deleteCustomerButton.setFocusPainted(false);
        deleteCustomerButton.setFont(FONT);
        deleteCustomerButton.setBackground(Color.DARK_GRAY);
        deleteCustomerButton.setForeground(Color.WHITE);
        getMainPanel().add(deleteCustomerButton);

        registerNewToolButton = new JButton(""Register New Tool"");
        registerNewToolButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        registerNewToolButton.setFocusPainted(false);
        registerNewToolButton.setFont(FONT);
        registerNewToolButton.setBackground(Color.DARK_GRAY);
        registerNewToolButton.setForeground(Color.WHITE);
        getMainPanel().add(registerNewToolButton);

        addExistingToolButton = new JButton(""Add Existing Tool"");
        addExistingToolButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        addExistingToolButton.setFocusPainted(false);
        addExistingToolButton.setFont(FONT);
        addExistingToolButton.setBackground(Color.DARK_GRAY);
        addExistingToolButton.setForeground(Color.WHITE);
        getMainPanel().add(addExistingToolButton);

        toolRentalButton = new JButton(""Tool Rental"");
        toolRentalButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        toolRentalButton.setFocusPainted(false);
        toolRentalButton.setFont(FONT);
        toolRentalButton.setBackground(Color.DARK_GRAY);
        toolRentalButton.setForeground(Color.WHITE);
        getMainPanel().add(toolRentalButton);

        moreOptionsButton = new JButton(""More Options"");
        moreOptionsButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        moreOptionsButton.setFocusPainted(false);
        moreOptionsButton.setFont(FONT);
        moreOptionsButton.setBackground(Color.DARK_GRAY);
        moreOptionsButton.setForeground(Color.WHITE);
        getMainPanel().add(moreOptionsButton);
    }

    public void setActionListeners() {
        registerCustomerButton.addActionListener(e-> {
            this.dispose();
            new RegisterPage().setVisible(true);
        });

        registerNewToolButton.addActionListener(e-> {
            this.dispose();
            new RegisterToolPage().setVisible(true);
        });

        deleteCustomerButton.addActionListener(e-> {
            this.dispose();
            new DeleteCustomerPage().setVisible(true);
        });

        addExistingToolButton.addActionListener(e-> {
            this.dispose();
            new AddExistingTool().setVisible(true);
        });

        toolRentalButton.addActionListener(e-> {
            this.dispose();
            new ToolRentalPage().setVisible(true);
        });

        moreOptionsButton.addActionListener(e-> {
            this.dispose();
            new MoreOptionsPage().setVisible(true);
        });
    }

    public static void main(String[] args) {
        new HomePage().setVisible(true);
    }
}",0
"package view;

import backend.Helper;

import javax.swing.*;
import java.awt.*;

public class MoreOptionsPage extends FrameSetter{
    private static final Font FONT = new Font(""Arial"", Font.BOLD, 20);
    private JButton searchCustomerButton, showAllActiveCustomerButton, showAllDeletedCustomerButton, showRentedToolButton, backButton;
    private JRadioButton customerSearchByLastNameRadioButton, customerSearchByFirstNameRadioButton, customerSearchByBothNameRadioButton;
    private JTextField customerSearchTextField;
    private Helper helper;

    public MoreOptionsPage(){
        helper = new Helper();
        setMainPanel();
        setButtons();
        setActionListeners();
    }


    @Override
    void setSize() {
        setSize(400, 700);
    }

    void setMainPanel(){
        getMainPanel().setLayout(new GridLayout(0, 1, 0, 2));
    }

    public void setButtons() {
        ButtonGroup buttonGroup = new ButtonGroup();
        JLabel selectLabel = new JLabel(""Select Search Option"");
        selectLabel.setForeground(Color.GRAY);
        selectLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        getMainPanel().add(selectLabel);

        customerSearchByLastNameRadioButton = new JRadioButton("" Search By Last Name"");
        customerSearchByLastNameRadioButton.setBackground(Color.WHITE);
        customerSearchByLastNameRadioButton.setForeground(Color.GRAY);
        customerSearchByLastNameRadioButton.setFocusPainted(false);
        customerSearchByLastNameRadioButton.setFont(new Font(""Arial"", Font.BOLD, 18));
        buttonGroup.add(customerSearchByLastNameRadioButton);

        customerSearchByFirstNameRadioButton = new JRadioButton("" Search By First Name"");
        customerSearchByFirstNameRadioButton.setBackground(Color.WHITE);
        customerSearchByFirstNameRadioButton.setForeground(Color.GRAY);
        customerSearchByFirstNameRadioButton.setFocusPainted(false);
        customerSearchByFirstNameRadioButton.setFont(new Font(""Arial"", Font.BOLD, 18));
        buttonGroup.add(customerSearchByFirstNameRadioButton);

        customerSearchByBothNameRadioButton = new JRadioButton("" Search By Both"");
        customerSearchByBothNameRadioButton.setBackground(Color.WHITE);
        customerSearchByBothNameRadioButton.setForeground(Color.GRAY);
        customerSearchByBothNameRadioButton.setFocusPainted(false);
        customerSearchByBothNameRadioButton.setFont(new Font(""Arial"", Font.BOLD, 18));
        buttonGroup.add(customerSearchByBothNameRadioButton);

        getMainPanel().add(customerSearchByLastNameRadioButton);
        getMainPanel().add(customerSearchByFirstNameRadioButton);
        getMainPanel().add(customerSearchByBothNameRadioButton);

        customerSearchTextField = new JTextField();
        customerSearchTextField.setFont(new Font(""Arial"", Font.BOLD, 16));
        customerSearchTextField.setForeground(Color.black);
        getMainPanel().add(customerSearchTextField);

        searchCustomerButton = new JButton(""Search Customer"");
        searchCustomerButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        searchCustomerButton.setFocusPainted(false);
        searchCustomerButton.setFont(FONT);
        searchCustomerButton.setBackground(Color.DARK_GRAY);
        searchCustomerButton.setForeground(Color.WHITE);
        getMainPanel().add(searchCustomerButton);

        getMainPanel().add(new JLabel());

        showAllActiveCustomerButton = new JButton(""Show All Active Customer"");
        showAllActiveCustomerButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        showAllActiveCustomerButton.setFocusPainted(false);
        showAllActiveCustomerButton.setFont(FONT);
        showAllActiveCustomerButton.setBackground(Color.DARK_GRAY);
        showAllActiveCustomerButton.setForeground(Color.WHITE);
        getMainPanel().add(showAllActiveCustomerButton);

        showAllDeletedCustomerButton = new JButton(""Show All Deleted Customer"");
        showAllDeletedCustomerButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        showAllDeletedCustomerButton.setFocusPainted(false);
        showAllDeletedCustomerButton.setFont(FONT);
        showAllDeletedCustomerButton.setBackground(Color.DARK_GRAY);
        showAllDeletedCustomerButton.setForeground(Color.WHITE);
        getMainPanel().add(showAllDeletedCustomerButton);

        showRentedToolButton = new JButton(""Show Rented Tools"");
        showRentedToolButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        showRentedToolButton.setFocusPainted(false);
        showRentedToolButton.setFont(FONT);
        showRentedToolButton.setBackground(Color.DARK_GRAY);
        showRentedToolButton.setForeground(Color.WHITE);
        getMainPanel().add(showRentedToolButton);

        getMainPanel().add(new JLabel());

        backButton = new JButton(""Back"");
        backButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        backButton.setFocusPainted(false);
        backButton.setFont(FONT);
        backButton.setBackground(Color.DARK_GRAY);
        backButton.setForeground(Color.WHITE);
        getMainPanel().add(backButton);
    }

    public void setActionListeners() {
        searchCustomerButton.addActionListener(e->{
            String name = customerSearchTextField.getText();

            if (customerSearchByLastNameRadioButton.isSelected()) {
                String info = helper.getSearchByLastName(name);
                if (info.equals("""")) {
                    JOptionPane.showMessageDialog(null, ""No Data Found"");
                } else {
                    JOptionPane.showMessageDialog(null, ""Customer Information\n"" + helper.getSearchByLastName(name));
                }
            }

            if (customerSearchByFirstNameRadioButton.isSelected()) {
                String info = helper.getSearchByFirstName(name);
                if (info.equals("""")) {
                    JOptionPane.showMessageDialog(null, ""No Data Found"");
                } else {
                    JOptionPane.showMessageDialog(null, ""Customer Information\n"" + helper.getSearchByFirstName(name));
                }
            }

            if (customerSearchByBothNameRadioButton.isSelected()) {
                String info = helper.getSearchByBothName(name);
                if (info.equals("""")) {
                    JOptionPane.showMessageDialog(null, ""No Data Found"");
                } else {
                    JOptionPane.showMessageDialog(null, ""Customer Information\n"" + helper.getSearchByBothName(name));
                }
            }
        });

        showAllActiveCustomerButton.addActionListener(e-> {
            JOptionPane.showMessageDialog(null, ""Customer Information\n"" + helper.showActiveCustomer());
        });

        showAllDeletedCustomerButton.addActionListener(e-> {
            JOptionPane.showMessageDialog(null, ""Customer Information\n"" + helper.showDeletedCustomer());
        });

        showRentedToolButton.addActionListener(e-> {
            JOptionPane.showMessageDialog(null, ""All Tool Information\n"" + helper.showRentedToolCustomer());
        });

        backButton.addActionListener(e-> {
            this.dispose();
            new HomePage().setVisible(true);
        });
    }

    public static void main(String[] args) {
        new MoreOptionsPage().setVisible(true);
    }
}",1
"package view;

import backend.Helper;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class RegisterPage extends FrameSetter{
    private static final Font FONT = new Font(""Arial"", Font.BOLD, 20);
    private JTextField nameTextField, fatherNameTextField, motherNameTextField, mobileNumberTextField, addressTextField;
    private JButton registerButton, backButton;
    private Helper helper;

    public RegisterPage() {
        helper = new Helper();
        setMainPanel();
        setButtons();
        setActionListeners();
    }

    @Override
    void setSize() {
        setSize(400, 600);
    }

    void setMainPanel(){
        getMainPanel().setLayout(new GridLayout(0, 1, 0, 2));
    }

    public void setButtons() {
        JLabel label = new JLabel(""Enter customer's name"");
        label.setFont(FONT);
        getMainPanel().add(label);

        nameTextField = new JTextField();
        nameTextField.setFont(FONT);
        getMainPanel().add(nameTextField);

        label = new JLabel(""Enter customer's father's name"");
        label.setFont(FONT);
        getMainPanel().add(label);

        fatherNameTextField = new JTextField();
        fatherNameTextField.setFont(FONT);
        getMainPanel().add(fatherNameTextField);

        label = new JLabel(""Enter customer's mother's name"");
        label.setFont(FONT);
        getMainPanel().add(label);

        motherNameTextField = new JTextField();
        motherNameTextField.setFont(FONT);
        getMainPanel().add(motherNameTextField);

        label = new JLabel(""Enter customer's mobile number"");
        label.setFont(FONT);
        getMainPanel().add(label);

        mobileNumberTextField = new JTextField();
        mobileNumberTextField.setFont(FONT);
        getMainPanel().add(mobileNumberTextField);

        label = new JLabel(""Enter customer's address"");
        label.setFont(FONT);
        getMainPanel().add(label);

        addressTextField = new JTextField();
        addressTextField.setFont(FONT);
        getMainPanel().add(addressTextField);

        registerButton = new JButton(""Register"");
        registerButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        registerButton.setFocusPainted(false);
        registerButton.setFont(FONT);
        registerButton.setBackground(Color.DARK_GRAY);
        registerButton.setForeground(Color.WHITE);
        getMainPanel().add(registerButton);

        backButton = new JButton(""Back"");
        backButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        backButton.setFocusPainted(false);
        backButton.setFont(FONT);
        backButton.setBackground(Color.DARK_GRAY);
        backButton.setForeground(Color.WHITE);
        getMainPanel().add(backButton);
    }

    public void setActionListeners() {
        mobileNumberTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent keyEvent) {
                if (keyEvent.getKeyChar() < (char)48 || keyEvent.getKeyChar() > (char)57) {
                    JOptionPane.showMessageDialog(null, ""Please enter valid digit"");
                    mobileNumberTextField.setText("""");
                }

                if (mobileNumberTextField.getText().length() > 11) {
                    JOptionPane.showMessageDialog(null, ""Mobile number can be maximum 11 digits"");
                    mobileNumberTextField.setText("""");
                }
            }
        });

        registerButton.addActionListener(e-> {
            String customerName = nameTextField.getText();
            String fatherName = fatherNameTextField.getText();
            String motherName = motherNameTextField.getText();
            String mobileNumber = mobileNumberTextField.getText();
            String address = addressTextField.getText();

            if (customerName.equals("""") || fatherName.equals("""") || motherName.equals("""") || mobileNumber.equals("""") || address.equals("""")) {
                JOptionPane.showMessageDialog(null, ""Please Enter All Information"");
                return;
            }

            helper.addCustomer(customerName, fatherName, motherName, mobileNumber, address);
        });

        backButton.addActionListener(e-> {
            this.dispose();
            new HomePage().setVisible(true);
        });


    }

    public static void main(String[] args) {
        new RegisterPage().setVisible(true);
    }
}",0
"package view;

import backend.Helper;

import javax.swing.*;
import java.awt.*;

public class ToolRentalPage extends FrameSetter{
    private static final Font FONT = new Font(""Arial"", Font.BOLD, 20);
    private JTextField dateTextField;
    private JComboBox customerNameComboBox, itemNameComboBox, itemReturnComboBox;
    private JButton rentToolButton, returnToolButton, backButton;
    private Helper helper;

    public ToolRentalPage() {
        helper = new Helper();
        setMainPanel();
        setButtons();
        setActionListeners();
    }

    @Override
    void setSize() {
        setSize(400, 700);
    }

    void setMainPanel(){
        getMainPanel().setLayout(new GridLayout(0, 1, 0, 2));
    }

    public void setButtons() {
        JLabel label = new JLabel(""Date & Time"");
        label.setFont(FONT);
        getMainPanel().add(label);

        dateTextField = new JTextField(getDate());
        dateTextField.setFont(FONT);
        dateTextField.setEditable(false);
        getMainPanel().add(dateTextField);

        label = new JLabel(""Select Customer"");
        label.setFont(FONT);
        getMainPanel().add(label);

        customerNameComboBox = new JComboBox(helper.getCustomerIDWithName());
        customerNameComboBox.setFont(FONT);
        getMainPanel().add(customerNameComboBox);

        label = new JLabel(""Select Tool"");
        label.setFont(FONT);
        getMainPanel().add(label);

        itemNameComboBox = new JComboBox(helper.getToolNames());
        itemNameComboBox.setFont(FONT);
        getMainPanel().add(itemNameComboBox);

        rentToolButton = new JButton(""Rent Tool"");
        rentToolButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        rentToolButton.setFocusPainted(false);
        rentToolButton.setFont(FONT);
        rentToolButton.setBackground(Color.DARK_GRAY);
        rentToolButton.setForeground(Color.WHITE);
        getMainPanel().add(rentToolButton);

        getMainPanel().add(new JLabel());

        label = new JLabel(""Select Tool"");
        label.setFont(FONT);
        getMainPanel().add(label);

        itemReturnComboBox = new JComboBox(helper.getRentedToolNames());
        itemReturnComboBox.setFont(FONT);
        getMainPanel().add(itemReturnComboBox);

        returnToolButton = new JButton(""Return Tool"");
        returnToolButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        returnToolButton.setFocusPainted(false);
        returnToolButton.setFont(FONT);
        returnToolButton.setBackground(Color.DARK_GRAY);
        returnToolButton.setForeground(Color.WHITE);
        getMainPanel().add(returnToolButton);

        getMainPanel().add(new JLabel());

        backButton = new JButton(""Back"");
        backButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        backButton.setFocusPainted(false);
        backButton.setFont(FONT);
        backButton.setBackground(Color.DARK_GRAY);
        backButton.setForeground(Color.WHITE);
        getMainPanel().add(backButton);
    }

    public void setActionListeners() {
        customerNameComboBox.addActionListener(e-> {
            JOptionPane.showMessageDialog(null, ""Customer Details\n "" + helper.getCustomerDetails(customerNameComboBox.getSelectedItem().toString().substring(0, 7)));
        });

        itemNameComboBox.addActionListener(e-> {
            String name = itemNameComboBox.getSelectedItem().toString();
            JOptionPane.showMessageDialog(null, ""Total "" + name + "" "" + helper.getTotalTool(name));
        });

        itemReturnComboBox.addActionListener(e-> {
            String id = itemReturnComboBox.getSelectedItem().toString().substring(0, 7);
            JOptionPane.showMessageDialog(null, ""Details\n"" + helper.getToolDetails(id));
        });

        rentToolButton.addActionListener(e-> {
            if (helper.getCustomerList().isEmpty() || helper.getToolList().isEmpty()) {
                JOptionPane.showMessageDialog(null, ""Invalid Operation!"");
            } else {
                helper.rentTool(customerNameComboBox.getSelectedItem().toString().substring(0, 7), dateTextField.getText());
                this.dispose();
                new ToolRentalPage().setVisible(true);
            }
        });

        returnToolButton.addActionListener(e-> {
            if (itemReturnComboBox.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(null, ""Invalid Operation!"");
            } else {
                helper.returnTool(itemReturnComboBox.getSelectedItem().toString().substring(0, 7), dateTextField.getText());
                this.dispose();
                new ToolRentalPage().setVisible(true);
            }
        });

        backButton.addActionListener(e-> {
            this.dispose();
            new HomePage().setVisible(true);
        });

    }

    public static void main(String[] args) {
        new ToolRentalPage().setVisible(true);
    }
}",0
"package controller;

import model.GymCenterModel;
import model.User;
import view.*;

import javax.swing.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;

public class GymCenterController {

    GymCenterModel model;
    GymCentreView view;

    public GymCenterController(GymCenterModel model, GymCentreView view) {
        this.model = model;
        this.view = view;

        setLoginPageButtons();
        setManagerPageButton();
        setTrainerPageButton();
        setRegisterPageButtons();
    }

    /**
     * This Method Sets All Registration Data of Manager or Trainer to File and
     * Checks the data is valid or not. After Registration According to role Manager Page or Trainer
     * Page Opens.
     */
    public void clickAdminRegisterButton() {
        view.getRegisterPage().getRegisterButton().addActionListener(e-> {
            String userName = view.getRegisterPage().getUsernameTextField().getText();
            String password = view.getRegisterPage().getPasswordField().getText();
            String confirmPassword = view.getRegisterPage().getConfirmPasswordField().getText();
            String name = view.getRegisterPage().getNameTextField().getText();
            String phoneNumber = view.getRegisterPage().getPhoneNumberTextField().getText();
            String role = """";

            if (view.getRegisterPage().getManagerRadioButton().isSelected()) {
                role = ""Manager"";
            } else if (view.getRegisterPage().getTrainerRadioButton().isSelected()){
                role = ""Trainer"";
            }

            if (password.length() < 6) {
                JOptionPane.showMessageDialog(null,""Please enter a password of minimum 6 characters."");
                return;
            }
            if (phoneNumber.length() != 11) {
                JOptionPane.showMessageDialog(null,""Please enter a valid number"");
                return;
            }

            if (!password.equals(confirmPassword)) {
                System.out.println(password + "" "" + confirmPassword);
                JOptionPane.showMessageDialog(null,""Password Does Not Match"");
                return;
            }

            if (userName.charAt(0) >= (char)48 && userName.charAt(0) <= (char)57) {
                JOptionPane.showMessageDialog(null,""Username can not contain number only."");
                return;
            }

            if (model.writeAdminRegistrationData(userName, password, name, phoneNumber, role)) {
                JOptionPane.showMessageDialog(null,""Trainer added successful."");
                    view.getRegisterPage().dispose();
                    view.setManagerPage(new ManagerPage(0));
                    view.getManagerPage().setVisible(true);
                    setManagerPageButton();
            }
        });
    }

    /**
     * This Method Checks the Login Data is Valid or Not. After Login According to role Manager Page or Trainer
     * Page Opens.
     */
    public void clickLoginButton() {
        view.getLoginPage().getLoginButton().addActionListener(e-> {
            String userName = view.getLoginPage().getUsernameTextField().getText();
            String password = view.getLoginPage().getPasswordField().getText();
            String role = """";

            if (view.getLoginPage().getManagerRadioButton().isSelected()) {
                role = ""Manager"";
            } else if (view.getLoginPage().getTrainerRadioButton().isSelected()){
                role = ""Trainer"";
            }

            if(model.canLogin(userName,password,role)) {
                if (role.equals(""Manager"")) {
                    view.getLoginPage().dispose();
                    view.setManagerPage(new ManagerPage(0));
                    view.getManagerPage().setVisible(true);
                    setManagerPageButton();

                } else if (role.equals(""Trainer"")) {
                    view.getLoginPage().dispose();
                    view.setTrainerPage(new TrainerPage(model.getTrainerIDByNamePasswordRole(userName,password,role),0));
                    view.getTrainerPage().setVisible(true);
                    setTrainerPageButton();
                }
            } else {
                JOptionPane.showMessageDialog(null,""Invalid Information\nPlease Register or Give Valid Information"");
            }
        });
    }


    /**
     * This Method Sets All Customer Registration Data to File and
     * Checks the data is valid or not.
     */
    public void clickUserRegisterButton() {
        view.getManagerPage().getUserRegistrationButton().addActionListener(e-> {
            String name = view.getManagerPage().getNameTextField().getText();
            String phoneNumber = view.getManagerPage().getPhoneNumberTextField().getText();

            if (model.writeUserRegistrationData(name, phoneNumber)) {
                JOptionPane.showMessageDialog(null,""User ""+name+"" is Successfully Registered"");
                view.getManagerPage().dispose();
                view.setManagerPage(new ManagerPage(1));
                view.getManagerPage().setVisible(true);
                setManagerPageButton();
            }
        });
    }

    /**
     * This Method Sets All Session Booking Data to File and
     * Checks the data is valid or not.
     */
    public void setSessionBookingData() {
        view.getManagerPage().getSubmitBookingButton().addActionListener(e-> {
            try {
                String userID = view.getManagerPage().getUserComboBox().getSelectedItem().toString().substring(0, 9);
                String trainerID = view.getManagerPage().getTrainerComboBox().getSelectedItem().toString().substring(0, 9);
                String session = view.getManagerPage().getSessionComboBox().getSelectedItem().toString();
                String time=view.getManagerPage().getTimeComboBox().getSelectedItem().toString();
                String amount = view.getManagerPage().getAmountTextField().getText();

                if (model.writeSessionBookingData(userID,trainerID,session,time,amount)) {
                    JOptionPane.showMessageDialog(null,""Session Booked Successfully"");
                }
            }
            catch (NullPointerException ex) {ex.getMessage();}
        });
    }

    /**
     * This Method Saves The Report of Trainer Page in Pdf Format
     */
    public void clickReportGenerateByTrainerButton() {
        view.getTrainerPage().getReportGenerateButton().addActionListener(e->{
            try {
                view.getTrainerPage().getEditorPane().print();
            }
            catch (PrinterException ex) {

            }
        });
    }

    /**
     * This Method Saves The Report of Manager Page in Pdf Format
     */
    public void clickReportGenerateByManagerButton() {
        view.getManagerPage().getReportGenerateButton().addActionListener(e->{
            try {
                view.getManagerPage().getManagerReportTextArea().print();
            }
            catch (PrinterException ex) {

            }
        });
    }

    /**
     * This Method Logs out from Manager Page and Opens Login Page
     */
    public void clickManagerPageLogoutButton(){
        view.getManagerPage().getLogoutButton().addActionListener(e->{
            view.getManagerPage().dispose();
            view.setLoginPage(new LoginPage());
            view.getLoginPage().setVisible(true);
            setLoginPageButtons();
        });
    }

    /**
     * This Method Checks Manager Page Phone Number and Amount is Valid Digit or Not. If Not then Shows Warning
     */
    public void clickManagerPageDigitCheck() {
        view.getManagerPage().getPhoneNumberTextField().addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent keyEvent) {
                super.keyPressed(keyEvent);
                if(!model.isDigit(keyEvent.getKeyChar())) {
                    JOptionPane.showMessageDialog(null,""Invalid Digit"");
                    view.getManagerPage().getPhoneNumberTextField().setText("""");
                }
            }
        });

        view.getManagerPage().getAmountTextField().addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent keyEvent) {
                super.keyPressed(keyEvent);
                if(!model.isDigit(keyEvent.getKeyChar())) {
                    JOptionPane.showMessageDialog(null,""Invalid Digit"");
                    view.getManagerPage().getAmountTextField().setText("""");
                }
            }
        });

    }

    /**
     * This Method Logs out from Trainer Page and Opens Login Page
     */
    public void clickTrainerLogoutButton() {
        view.getTrainerPage().getLogoutButton().addActionListener(e->{
            view.getTrainerPage().dispose();
            view.setLoginPage(new LoginPage());
            view.getLoginPage().setVisible(true);
            setLoginPageButtons();
        });
    }

    /**
     * This Method Logs out from Register Page and Opens Login Page
     */
    public void clickRegisterPageBackButton() {
        view.getRegisterPage().getBackButton().addActionListener(e->{
            view.getRegisterPage().dispose();
            view.setManagerPage(new ManagerPage(0));
            view.getManagerPage().setVisible(true);
            setManagerPageButton();
        });
    }

    /**
     * This Method Checks Register Page Phone Number is Valid Digit or Not. If Not then Shows Warning
     */
    public void clickRegisterPagePhoneNumber(){
        view.getRegisterPage().getPhoneNumberTextField().addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent keyEvent) {
                super.keyPressed(keyEvent);
                if(!model.isDigit(keyEvent.getKeyChar())) {
                    JOptionPane.showMessageDialog(null,""Invalid Digit"");
                    view.getRegisterPage().getPhoneNumberTextField().setText("""");
                }
            }
        });
    }

    /**
     * This Method Adds Session to File and also Validate it.
     */
    public void clickAddSessionButton() {
        view.getManagerPage().getAddSessionButton().addActionListener(e->{
            String session = view.getManagerPage().getSessionTextField().getText();

            if(session.equals("""")) {
                JOptionPane.showMessageDialog(null, ""Please Enter Session"");
            } else {
                if (model.addSession(session)) {
                    JOptionPane.showMessageDialog(null, ""Session Added ""+session+"" Successfully"");
                    view.getManagerPage().dispose();
                    view.setManagerPage(new ManagerPage(3));
                    view.getManagerPage().setVisible(true);
                    setManagerPageButton();
                }
                else {
                    JOptionPane.showMessageDialog(null, ""Session Already Exists"");
                }
            }
        });
    }

    /**
     * This Method Deletes Session to File and also checks If no session remains to delete.
     */
    public void clickDeleteSessionButton() {
        view.getManagerPage().getDeleteSessionButton().addActionListener(e->{
            String session="""";
            try {
                session = view.getManagerPage().getDeleteSessionComboBox().getSelectedItem().toString();
            }
            catch (NullPointerException ex) {}

            if(model.deleteSession(session)) {
                JOptionPane.showMessageDialog(null,""Session Deleted ""+session+"" Successfully"");
                view.getManagerPage().dispose();
                view.setManagerPage(new ManagerPage(3));
                view.getManagerPage().setVisible(true);
                setManagerPageButton();
            }
            else {
                JOptionPane.showMessageDialog(null,""No Sessions to Delete"");
            }
        });
    }

    /**
     * This Method Performs the Operations of TrainerPageShowInfo Button
     */
    public void clickTrainerPageShowInfoButton() {
        view.getTrainerPage().getShowInfoButton().addActionListener(e->{
            try {
                view.getTrainerPage().getUpdateButton().setEnabled(true);
                String trainID = view.getTrainerPage().getTrainComboBox().getSelectedItem().toString().substring(0, 9);
                String trainerID = view.getTrainerPage().getTrainerID();
                User user = model.getUserByTrainID(trainID, trainerID);

                view.getTrainerPage().getShowSingleUserInfoTextArea().setText(model.getContentForSpecificUser(user));
                view.getTrainerPage().setTrainID(trainID);

                if (user.isCollected()) {
                    view.getTrainerPage().getPaymentCollectedCheckBox().setSelected(true);
                    view.getTrainerPage().getPaymentCollectedCheckBox().setEnabled(false);
                }
                else {
                    view.getTrainerPage().getPaymentCollectedCheckBox().setEnabled(true);
                }

                if (user.isCompleted()) {
                    view.getTrainerPage().getSessionCompletedCheckBox().setSelected(true);
                    view.getTrainerPage().getSessionCompletedCheckBox().setEnabled(false);
                }
                else {
                    view.getTrainerPage().getSessionCompletedCheckBox().setEnabled(true);
                }

                view.getTrainerPage().getFeedbackTextField().setEnabled(true);

                clickTrainerPageShowInfoButton();
            }
            catch (NullPointerException exception) {
                JOptionPane.showMessageDialog(null,""Invalid Selection"");
            }
        });
    }

    /**
     * This Method Performs the Operations of TrainerPageUpdate Button
     */
    public void clickTrainerPageUpdateButton() {
        view.getTrainerPage().getUpdateButton().addActionListener(e->{
            try{
                String trainID = view.getTrainerPage().getTrainID();
                String trainerID = view.getTrainerPage().getTrainerID();
                boolean isCompleted = view.getTrainerPage().getSessionCompletedCheckBox().isSelected();
                boolean isCollected= view.getTrainerPage().getPaymentCollectedCheckBox().isSelected();
                String feedback = view.getTrainerPage().getFeedbackTextField().getText();

                if(feedback.equals("""")) {
                    feedback = ""feedback"";
                }

                User user = model.getUserByTrainID(trainID,trainerID);

                user.setCompleted(isCompleted);
                user.setCollected(isCollected);
                user.setFeedback(feedback);

                if(model.updateUserInfoToSpecificTrainerFile(view.getTrainerPage().getTrainerID(),user)) {
                    JOptionPane.showMessageDialog(null,""User Data Updated Successfully"");
                    view.getTrainerPage().dispose();
                    view.setTrainerPage(new TrainerPage(trainerID,1));
                    view.getTrainerPage().setVisible(true);
                    setTrainerPageButton();
                }
            }
            catch (Exception ex) {

            }
        });
    }

    public void clickRegisterPageButton() {
        view.getManagerPage().getAdminRegistrationButton().addActionListener(e->{
            view.getManagerPage().dispose();
            view.setRegisterPage(new RegisterPage());
            view.getRegisterPage().setVisible(true);
            setRegisterPageButtons();
        });
    }

    /**
     * Combines All Features of Login Page for ReCreated Objects to work properly.
     */
    public void setLoginPageButtons() {
        clickLoginButton();
    }

    /**
     * Combines All Features of Manager Page for ReCreated Objects to work properly.
     */
    public void setManagerPageButton() {
        clickRegisterPageButton();
        clickUserRegisterButton();
        setSessionBookingData();
        clickAddSessionButton();
        clickDeleteSessionButton();
        clickReportGenerateByManagerButton();
        clickManagerPageLogoutButton();
        clickManagerPageDigitCheck();
    }

    /**
     * Combines All Features of Trainer Page for ReCreated Objects to work properly.
     */
    public void setTrainerPageButton() {
        clickReportGenerateByTrainerButton();
        clickTrainerPageShowInfoButton();
        clickTrainerPageUpdateButton();
        clickTrainerLogoutButton();
    }

    /**
     * Combines All Features of Register Page for ReCreated Objects to work properly.
     */
    public void setRegisterPageButtons() {
        clickAdminRegisterButton();
        clickRegisterPageBackButton();
        clickRegisterPagePhoneNumber();
    }
}",1
"package model;

/**
 * This is User Class that contains all the characteristics or properties that a User means Customer Must Have
 */
public class User {
    private String trainID;
    private String ID;
    private String name;
    private String phoneNumber;
    private String trainerID;
    private String session;
    private String time;
    private boolean completed;
    private int amount;
    private boolean collected;
    private String feedback;

    /**
     * Constructor OverLoading used by Black Constructor
     */
    public User () {}

    /**
     * Constructor OverLoading used by Parameterised Constructor
     */
    public User (String trainID,String ID, String name, String phoneNumber, String trainerID, String session, String time, boolean completed, int amount,boolean collected,String feedback) {
        this.trainID = trainID;
        this.ID = ID;
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.trainerID = trainerID;
        this.session = session;
        this.time = time;
        this.completed = completed;
        this.amount = amount;
        this.collected = collected;
        this.feedback = feedback;
    }

    public String toString() {
        return trainID+"" ""+ID+"" ""+name+"" ""+phoneNumber+"" ""+trainerID+"" ""+session+"" ""+time+"" ""+isCompleted()+"" ""+amount+"" ""+isCollected()+"" ""+feedback;
    }

    public String getTrainID() {
        return trainID;
    }

    public String getID() {
        return ID;
    }

    public String getName() {
        return name;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public String getTrainerID() {
        return trainerID;
    }

    public void setTrainerID(String trainerID) {
        this.trainerID = trainerID;
    }

    public void setSession(String session) {
        this.session = session;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public String getSession() {
        return session;
    }

    public int getAmount() {
        return amount;
    }

    public boolean isCollected() {
        return collected;
    }

    public boolean isCompleted() {
        return completed;
    }

    public String getFeedback() {
        return feedback;
    }

    public String getTime() {
        return time;
    }

    public void setCompleted(boolean completed) {
        this.completed = completed;
    }

    public void setCollected(boolean collected) {
        this.collected = collected;
    }

    public void setFeedback(String feedback) {
        this.feedback = feedback;
    }
}",0
"package model;

import javax.swing.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

public class GymCenterModel {

    private List<AdminUser> adminUserList;
    private List<User> userList;
    private List<Trainer> trainerList;
    private List<String> sessionList;

    public GymCenterModel() {
        setAdminUserList();
        setTrainerList();
        setSessionList();
    }

    /**
     * This Method Sets All Admin User Registration Data to File and
     * Checks the data is valid or not. After Registration According to role Manager Page or Trainer
     */
    public boolean writeAdminRegistrationData(String userName, String password,
                                      String name, String phoneNumber, String role) {

        if(userName.equals("""") || password.equals("""") || name.equals("""") || phoneNumber.equals("""") || role.equals("""")) {
            JOptionPane.showMessageDialog(null,""Please Enter All Information"");
            return false;
        }
        else if (adminAlreadyExists(userName,password,name,phoneNumber,role)) {
            JOptionPane.showMessageDialog(null,""These Data Already Exists"");
            return false;
        }
        else {
            try {
                BufferedWriter bufferedWriter =
                        new BufferedWriter(new FileWriter(""AdminUserData.txt"", true));

                String ID = role.charAt(0) +""""+ getRandomNumber();
                bufferedWriter.append(ID + "",""
                        + userName + "","" + password + "","" + name + "",""
                        + phoneNumber + "","" + role + ""\n"");
                bufferedWriter.close();

                if (role.equals(""Trainer"")) {
                    BufferedWriter bufferedWriterTrainer = new BufferedWriter(new FileWriter(ID+"".txt"",true));
                    bufferedWriterTrainer.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            return true;
        }
    }

    /**
     * This method Sets the Admin User Means Manager or Trainer Data to adminUserList From AdminUserData.txt File
     */
    public void setAdminUserList() {
        adminUserList = new ArrayList<>();

        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(""AdminUserData.txt""));
            String s;
            while((s=bufferedReader.readLine())!=null) {
                String[] inputArray = s.split("","");
                adminUserList.add(new AdminUser(inputArray[0],inputArray[1],inputArray[2],inputArray[3],inputArray[4],inputArray[5]));
            }
            bufferedReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method Sets the User Means Customer Data to userList From Specific trainerID.txt File Because trainerID.txt File contains all Training Data
     */
    public void setUserListForSpecificTrainer(String trainerID) {
        userList = new ArrayList<>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(trainerID+"".txt""));
            String s;
            while((s=bufferedReader.readLine())!=null) {
                String[] inputArray = s.split("","");
                userList.add(new User(inputArray[0],inputArray[1],inputArray[2],inputArray[3],inputArray[4],
                        inputArray[5],inputArray[6],Boolean.parseBoolean(inputArray[7]),Integer.parseInt(inputArray[8]),
                        Boolean.parseBoolean(inputArray[9]),inputArray[10]));
            }
            bufferedReader.close();
        } catch (IOException e) {}
    }

    /**
     * This method Sets the Trainer Data to trainerList From AdminUserData.txt File
     */
    public void setTrainerList() {
        trainerList = new ArrayList<>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(""AdminUserData.txt""));
            String s;
            while((s=bufferedReader.readLine())!=null) {
                String[] inputArray = s.split("","");
                if (inputArray[5].equals(""Trainer"")) {
                    trainerList.add(new Trainer(inputArray[0],inputArray[3],inputArray[4]));
                }
            }
            bufferedReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This Method Returns Random Number Between 10000000 and 20000000
     */
    public int getRandomNumber() {
        return (int) ((Math.random() * (20000000 - 10000000)) + 10000000);
    }

    /**
     * This Method Checks Admin Means Manager or Trainer Is Already in the adminUserList or Not
     */
    public boolean adminAlreadyExists(String userName, String password,
                                 String name, String phoneNumber, String role) {
        setAdminUserList();
        for(AdminUser adminUser : adminUserList) {
            if (adminUser.getUserName().equals(userName)
                    && adminUser.getPassword().equals(password)
                    && adminUser.getName().equals(name)
                    && adminUser.getPhoneNumber().equals(phoneNumber)
                    && adminUser.getRole().equals(role)) {
                return true;
            }
        }
        return false;
    }

    /**
     * This Method Checks User Means Customer Is Already in the userList or Not
     */
    public boolean userAlreadyExists(String name, String phoneNumber) {
        try{
            BufferedReader bufferedReader = new BufferedReader(new FileReader(""UserData.txt""));
            String s;
            while ((s=bufferedReader.readLine())!=null) {
                String textString = s.substring(s.indexOf("","")+1);
                String inputSting = name+"",""+phoneNumber;
                if(textString.equals(inputSting)) {
                    return true;
                }
            }
            bufferedReader.close();
        }
        catch (IOException e) {}

        return false;
    }

    /**
     * This Method Checks Admin Means Manager or Trainer can Login or Not
     */
    public boolean canLogin(String userName, String password,String role) {
        if (userName.equals("""") || password.equals("""") || role.equals("""")) {
            return false;
        }
        else if (userName.equals(""admin"") && password.equals(""admin"") && role.equals(""Manager"")) {
            return true;
        }
        else {
            for (AdminUser adminUser : adminUserList) {
                if (adminUser.getUserName().equals(userName)
                        && adminUser.getPassword().equals(password)
                        && adminUser.getRole().equals(role)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * This Method Writes User means Customer data to File and also Validates data
     */
    public boolean writeUserRegistrationData(String name, String phoneNumber) {

        if(name.equals("""")  || phoneNumber.equals("""")) {
            JOptionPane.showMessageDialog(null,""Please Enter All Information"");
            return false;
        } else if (userAlreadyExists(name,phoneNumber)) {
            JOptionPane.showMessageDialog(null,""These Data Already Exists"");
            return false;
        }
        else {
            try {
                BufferedWriter bufferedWriter =
                        new BufferedWriter(new FileWriter(""UserData.txt"", true));
                bufferedWriter.append(""U""+ getRandomNumber() + "",""
                        + name  + "","" + phoneNumber +""\n"");
                bufferedWriter.close();
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return true;
        }
    }
    /**
     * This Method returns trainerList as Object[] for the ComboBox Value
     */
    public Object[] getTrainers() {
        setTrainerList();
        return trainerList.toArray();
    }

    /**
     * This Method returns All User Info(ID Name) as Object[] for the ComboBox Value
     */
    public Object[] getALLUsers() {
        List<String> userList = new ArrayList<>();

        try{
            BufferedReader bufferedReader = new BufferedReader(new FileReader(""UserData.txt""));
            String s;
            while ((s=bufferedReader.readLine())!=null) {
                String[] inputArray = s.split("","");
                userList.add(inputArray[0]+"" ""+inputArray[1]);
            }
            bufferedReader.close();
        }catch (IOException e) {e.printStackTrace();}
        return userList.toArray();
    }

    /**
     * This Method Sets All Session Booking Data to File and
      Checks the data is valid or not.
     */
    public boolean writeSessionBookingData(String userID,String trainerID,String session, String time,String amount) {

        if(userID.equals("""")||trainerID.equals("""")||session.equals("""")||time.equals("""")||amount.equals("""")) {
            JOptionPane.showMessageDialog(null,""Please Enter All Information"");
            return false;
        }
        else if (userWithTrainerSessionTimeAlreadyExists(userID,trainerID,session,time)) {
            JOptionPane.showMessageDialog(null,""User Booking Information Already Exists"");
            return false;
        }
        else if(!isTrainerAvailable(trainerID,time)){
            JOptionPane.showMessageDialog(null,""Trainer is Not Available "" + getAvailableTimes(trainerID));
            return false;
        } else {
            try{
                BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(trainerID+"".txt"",true));
                bufferedWriter.append(""H""+getRandomNumber()+"",""+getUserInfoByID(userID)+"",""+trainerID+"",""+session+"",""+time+"",""+false+"",""+amount+"",""+false+"",""+""feedback""+""\n"");
                bufferedWriter.close();
            }
            catch (IOException e) {e.printStackTrace();}
        }
        return true;
    }

    /**
     * This Method Takes UserID and returns UserInfo as String
     */
    public String getUserInfoByID (String userID) {
        String userInfo = """";
        try{
            BufferedReader bufferedReader = new BufferedReader(new FileReader(""UserData.txt""));
            String s;
            while ((s=bufferedReader.readLine())!=null) {
               if(s.substring(0,9).equals(userID)) {
                   userInfo = s;
               }
            }
            bufferedReader.close();
        }catch (IOException e) {e.printStackTrace();}
        return userInfo;
    }

    /**
     * This Method Checks if Session Data of a Customer with a trainer is Already Exists or NOT
     */
    public boolean userWithTrainerSessionTimeAlreadyExists(String userID,String trainerID,String session, String time){
        setUserListForSpecificTrainer(trainerID);
        for (User user : userList) {
            if(user.getID().equals(userID)&&user.getTrainerID().equals(trainerID)&&user.getSession().equals(session)&&user.getTime().equals(time)) {
                return true;
            }
        }
        return false;
    }

    /**
     * This Method Checks if Trainer is Available at a specific time period
     */
    public boolean isTrainerAvailable(String trainerID, String time) {
        setUserListForSpecificTrainer(trainerID);
        for (User user : userList) {
            if(user.getTrainerID().equals(trainerID)&&user.getTime().equals(time)&&!user.isCompleted()) {
                return false;
            }
        }

        return true;
    }

    public String getAvailableTimes(String trainerID) {
        setUserListForSpecificTrainer(trainerID);
        ArrayList<String> list = new ArrayList<>(Arrays.asList(getTimeList()));

        for (User user : userList) {
            list.remove(user.getTime());
        }
        StringBuilder output = new StringBuilder(""\n\nAvailable Times Are"").append(""\n"");
        for (String s : list) {
            output.append(s).append(""\n"");
        }
        return output.toString();
    }

    /**
     * This Method Takes trainerID and Returns TrainerName of type String
     */
    public String getTrainerNameByID (String trainerID) {
        String name = """";
        setTrainerList();
        for (Trainer trainer : trainerList) {
            if(trainer.getID().equals(trainerID)) {
                name = trainer.getName();
            }
        }
        return name;
    }

    /**
     * This Method Takes trainerID and Returns Trainer of type Trainer
     */
    public Trainer getTrainerByID (String trainerID) {
        setTrainerList();
        Trainer targetTrainer = new Trainer();

        if (trainerID.equals("""")) {
            return targetTrainer;
        }

        for (Trainer trainer : trainerList) {
            if(trainer.getID().equals(trainerID)) {
                targetTrainer = trainer;
                break;
            }
        }

        targetTrainer.setUserList(userList);

        return targetTrainer;
    }

    /**
     * This method returns HTML Contents for design purpose only of type String
     */
    public String getHTMLContentOFTrainer(String trainerID) {

        setUserListForSpecificTrainer(trainerID);
        Trainer trainer = getTrainerByID(trainerID);
        String htmlText = """";
        int serialNo = 0,amount=0,collectedPayment=0;

        htmlText = htmlText +
                ""<table width=\""100%\"">""
                +""<tr style=\""text-align:center;font-size:22px;font-weight:bold;font-family:arial;color:blue;\"">SMART GYM CENTER</tr>""
                +""</table>""
                +""<table width=\""100%\"">""
                +""<tr style=\""text-align:center;font-size:13px;font-weight:bold;font-family:arial;\"">Trainer Information</tr>""
                +""</table>"";

        if (trainerID.equals("""")) {
            return htmlText;
        }

        htmlText = htmlText
                +""<br>""
                +""<table width=\""100%\"" style=\""font-size:14px\"" >""
                +""<tr>""
                +""<td>""+""Trainer Name</td><td>:</td><td>""+trainer.getName()+""</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>Trainer ID</td><td>:</td><td>""+trainer.getID()+""</td>""
                +""</tr>""
                +""<tr>""
                +""<td>""+""</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>Date & Time</td><td>:</td><td>""+getDate()+""</td>""
                +""</tr>""
                +""<tr>""
                +""<td>""+""Trainer Phone Number</td><td>:</td><td>""+trainer.getPhoneNumber()+""</td>""
                + ""</tr>""
                + ""</table>""
                +""<br>""
                +""<table width=\""100%\"" style=\""font-size:12px\"" >""
                +""<tr>""
                +""<th style=\""text-align: left\"">SL</th>"" +
                ""<th style=\""text-align: left\"">User ID</th>"" +
                ""<th style=\""text-align: left\"">User Name</th>"" +
                ""<th style=\""text-align: left\"">User Phone Number</th>"" +
                ""<th style=\""text-align: left\"">User Session</th>"" +
                ""<th style=\""text-align: left\"">Time</th>"" +
                ""<th style=\""text-align: left\"">Session Completed</th>"" +
                ""<th style=\""text-align: left\"">Payment</th>"" +
                ""<th style=\""text-align: right\"">Amount</th>"" +
                ""<th style=\""text-align: left\"">FeedBack</th>""
                +""</tr>"";

        for (User user : userList) {
            htmlText = htmlText
                    +""<tr>""
                    +""<td>""+(serialNo=serialNo+1)+""</td>"" +
                    ""<td>""+user.getID()+""</td>"" +
                    ""<td>""+user.getName()+""</td>"" +
                    ""<td>""+user.getPhoneNumber()+""</td>"" +
                    ""<td>""+user.getSession()+""</td>""+
                    ""<td>""+user.getTime()+""</td>"";

                    if(user.isCompleted()) {
                        htmlText = htmlText + ""<td>""+""Yes""+""</td>"";
                    } else {
                        htmlText = htmlText + ""<td>""+""No""+""</td>"";
                    }

            if(user.isCollected()) {
                htmlText = htmlText + ""<td>""+""Collected""+""</td>"";
                collectedPayment = collectedPayment + user.getAmount();
            } else {
                htmlText = htmlText + ""<td>""+""Not Collected""+""</td>"";
            }

            htmlText = htmlText
                    +""<td style=\""text-align:right\"">""+user.getAmount()+""</td>"";

            htmlText = htmlText
                    +""<td>""+user.getFeedback()+""</td>""
                    +""</tr>"";

            amount = amount + user.getAmount();
        }

        htmlText = htmlText
                +""<tr>""
                +""<td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>Total Amount</td><td style=\""text-align:right\"">""+amount+""</td>""
                +""</tr>""
                +""<tr>""
                +""<td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>Collected Payment</td><td style=\""text-align:right\"">""+collectedPayment+""</td>""
                +""</tr>""
                + ""</table>"";


        return htmlText;
    }

    /**
     * This Method return Date and Time of a specific format
     */
    public String getDate()
    {
        SimpleDateFormat sdf = new SimpleDateFormat(""dd/MM/yyyy E hh:mm:ss a"");
        Date date = new Date();
        return sdf.format(date);
    }

    /**
     * This method takes UserName,Password, Role as input and Returns TrainerID as String
     */
    public String getTrainerIDByNamePasswordRole(String userName,String password,String role) {
        setAdminUserList();
        String ID="""";
        for (AdminUser adminUser : adminUserList) {
            if (adminUser.getUserName().equals(userName) && adminUser.getPassword().equals(password) && adminUser.getRole().equals(role)) {
                ID = adminUser.getID();
                break;
            }
        }
        return ID;
    }

    /**
     *  This Method takes all session names from Sessions.txt file and sets SessionList
     */
    public void setSessionList() {
        sessionList = new ArrayList<>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(""Sessions.txt""));
            String s;
            while((s=bufferedReader.readLine())!=null) {
                sessionList.add(s);
            }
            bufferedReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     *  This Method takes all session names from sessionList writes to Sessions.txt File
     */
    public void writeSessionToFile() {
        try {
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(""Sessions.txt""));
            String input = """";
            for(String session : sessionList) {
                input = input + session + ""\n"";
            }
            bufferedWriter.write(input);
            bufferedWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method takes Session Name as String and deletes it from SessionList
     */
    public boolean deleteSession(String session) {

       if(session.equals("""")){
           return false;
       }
       setSessionList();
       sessionList.remove(session);
       writeSessionToFile();
       return true;
    }

    /**
     * This method takes session name as input and adds to SessionList
     */
    public boolean addSession(String session) {
        setSessionList();
        if (sessionList.contains(session)) {
            return false;
        }
        sessionList.add(session);
        writeSessionToFile();
        return true;
    }

    /**
     * This Method returns all session names from sessionList of type Object[]
     */
    public Object[] getSessionList() {
        setSessionList();
        return sessionList.toArray();
    }

    /**
     * This Method returns all time periods of type String[]
     */
    public String[] getTimeList() {
        String[] time = {""9AM - 9.45AM"",""10AM - 10.45AM"",""3PM - 3.45PM"",""4PM - 4.45PM""};
        return time;
    }

    /**
     * This method returns trainID_CustomerName from userList of type String[]
     */
    public String[] getTrainIDName(String trainerID) {
        setUserListForSpecificTrainer(trainerID);
        String[] trainArray = new String[userList.size()];
        for (int i=0;i<userList.size();i++) {
            trainArray[i] = userList.get(i).getTrainID()+""  ""+userList.get(i).getName();
        }
        return trainArray;
    }

    /**
     * This method takes TrainID,TrainerID and returns user object of type User
     */
    public User getUserByTrainID(String trainID,String trainerID) {

        setUserListForSpecificTrainer(trainerID);
        User demoUser = new User();
        for(User user : userList) {
            if(user.getTrainID().equals(trainID)) {
                demoUser = user;
                break;
            }
        }
        return demoUser;
    }

    /**
     * This Method returns Content or Text of type String [For design purpose only] of a Specific User
     */
    public String getContentForSpecificUser(User user) {
        String text = ""\n\n    SMART\n    GYM CENTRE\n\n""
                +""    TrainID : ""+user.getTrainID()+""\n""
                +""    Customer ID : ""+user.getID()+""\n""
                +""    Customer Name : ""+user.getName()+""\n""
                +""    Trainer Name : ""+getTrainerNameByID(user.getTrainerID())+""\n""
                +""    Session : ""+user.getSession()+""\n""
                +""    Time : ""+user.getTime()+""\n"";
        if(user.isCompleted()) {
            text = text + ""    Session Completed : Yes\n"";
        } else {
            text = text + ""    Session Completed : NO\n"";
        }

        text = text
                +""    Amount : ""+user.getAmount()+""\n"";

        if(user.isCollected()) {
            text = text + ""    Payment : Collected\n"";
        } else {
            text = text + ""    Payment : Not Collected\n"";
        }

        text = text
                +""    FeedBack : ""+user.getFeedback()+""\n"";

        return text;
    }

    public boolean updateUserInfoToSpecificTrainerFile(String trainerID,User targetUser) {
        setUserListForSpecificTrainer(trainerID);

        for(int i=0;i<userList.size();i++) {
            if(userList.get(i).getTrainID().equals(targetUser.getTrainID())) {
                userList.set(i,targetUser);
                break;
            }
        }

        String inputString = """";

        try {
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(trainerID+"".txt""));
            for (User user : userList) {
                inputString = inputString
                        + user.getTrainID() + "",""
                        + user.getID() + "",""
                        + user.getName() + "",""
                        + user.getPhoneNumber() + "",""
                        + user.getTrainerID() + "",""
                        + user.getSession() + "",""
                        + user.getTime() + "",""
                        + user.isCompleted() + "",""
                        + user.getAmount() + "",""
                        + user.isCollected() + "",""
                        + user.getFeedback() + ""\n"";
            }
            bufferedWriter.write(inputString);
            bufferedWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return true;
    }

    /**
     * This Method return Manager Report as String
     */
    public String getManagerReport() {

        String outPutString = ""\n\n    SMART\n    GYM CENTRE\n\n    Date & Time : ""+getDate()+""\n\n"";

        outPutString = outPutString +
                 ""    SMART GYM Center Total Customer : "" + getALLUsers().length+""\n""
                +""    SMART GYM Center Total Trainer : "" + trainerList.size()+""\n""
                +""    SMART GYM Center Total Manager : "" + (adminUserList.size()-trainerList.size())+""\n""
                +""    SMART GYM Center Total Employee : "" + (adminUserList.size())+""\n\n""
                +""    Total Number of Customer in Each Session\n    Session-No. of customers\n"";

        boolean flag = true;
        int customerAmount = 0;
        String feedbackString = ""    "";


        for (String session : sessionList) {
            int customerCount = 0;
            for(Trainer trainer : trainerList) {
                setUserListForSpecificTrainer(trainer.getID());
                for(User user : userList) {
                    if(user.getSession().equals(session)) {
                        customerCount++;
                    }
                    if(flag) {
                        customerAmount = customerAmount + user.getAmount();
                    }
                    if(!(user.getFeedback().equals(""feedback""))&&flag) {
                        feedbackString = feedbackString + ""TrainID ""+user.getTrainID() + ""Name : ""+user.getName()+"" FeedBack by ""+getTrainerNameByID(trainer.getID())+"" : ""+user.getFeedback()+""\n"";
                    }
                }
            }
            flag = false;
            outPutString = outPutString+ ""    ""+session+""-""+customerCount+""\n"";
        }

        outPutString = outPutString +
                ""\n    SMART GYM Center Total Income : "" + customerAmount+""\n\n""
               +""    FeedBack From All Trainer\n\n""+feedbackString;

        return outPutString;
    }

    /**
     * This Method Takes a Character of type char and returns if it is Digit or Not
     */
    public boolean isDigit(char ch) {
        if (ch=='0'||ch=='1'||ch=='2'||ch=='3'||ch=='4'||ch=='5'||ch=='6'||ch=='7'||ch=='8'||ch=='9'||ch==(char)10||ch==(char)8) {
            return true;
        } else {
            return false;
        }
    }

}",1
"package model;

import java.util.ArrayList;
import java.util.List;

/**
 * This is Trainer Class that contains all the
 * characteristics or properties that a Trainer Must Have
 */
public class Trainer {
    private String ID;
    private String name;
    private String phoneNumber;
    private List<User> userList;

    /**
     * Constructor OverLoading used by Black Constructor
     */
    public Trainer() {}

    /**
     * Constructor OverLoading used by Parameterised Constructor
     */
    public Trainer (String ID, String name, String phoneNumber) {
        this.ID = ID;
        this.name = name;
        this.phoneNumber = phoneNumber;
        userList = new ArrayList<>();
    }

    public String toString() {
        return ID+"" ""+name;
    }

    public String getID() {
        return ID;
    }

    public String getName() {
        return name;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public List<User> getUserList() {
        return userList;
    }

    public void setUserList(List<User> userList) {
        this.userList = userList;
    }
}",0
"package view;

import javax.swing.*;
import java.awt.*;

/**
 * Admin Template that is extended by ManagerPage and TrainerPage
 */
public class AdminTemplate extends FrameSetup {
    private JPanel componentPanel;

    /**
     *  Admin Template Constructor
     */
    public AdminTemplate() {
        setContainer();
        setComponentPanel();
    }

    /**
     *  Sets Container
     */
    public void setContainer() {
        //Method Overriding Concept Used

        super.setContainer();  //Here we get setContainer() of parent class

        getContainer().setLayout(new BorderLayout(100, 30));
    }

    /**
     *  Sets Component Panel
     */
    public void setComponentPanel() {
        getContainer().add(getNullLabel(), BorderLayout.EAST);
        getContainer().add(getNullLabel(), BorderLayout.WEST);
        getContainer().add(getNullLabel(), BorderLayout.NORTH);
        getContainer().add(getNullLabel(), BorderLayout.SOUTH);

        componentPanel = new JPanel();
        componentPanel.setBackground(Color.WHITE);
        componentPanel.setLayout(new BorderLayout());
        getContainer().add(componentPanel,BorderLayout.CENTER);
    }

    public JPanel getComponentPanel() {
        return componentPanel;
    }
}",0
"package view;

import java.awt.Color;
import java.awt.Container;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**
 * Parent CLass of all View CLasses that contains all the basic features that a JFrame Must Have
 */
public class FrameSetup extends JFrame {

    private Container container;    //Frame Container Declaration

    private final ImageIcon displayPicture = new ImageIcon(this.getClass().getResource(""/resources/displayPicture.png""));
    private final ImageIcon  appIcon = new ImageIcon(this.getClass().getResource(""/resources/appIcon.png""));
    private final ImageIcon  loginButtonIcon = new ImageIcon(this.getClass().getResource(""/resources/loginButton.png""));
    private final ImageIcon  registerButtonIcon = new ImageIcon(this.getClass().getResource(""/resources/registerButton.png""));
    private final ImageIcon  submitBookingButtonIcon = new ImageIcon(this.getClass().getResource(""/resources/submitBookingButton.png""));
    private final ImageIcon  reportGenerateButtonIcon = new ImageIcon(this.getClass().getResource(""/resources/reportGenerateButton.png""));
    private final ImageIcon  logoutButtonIcon = new ImageIcon(this.getClass().getResource(""/resources/logoutButton.png""));
    private final ImageIcon  backButtonIcon = new ImageIcon(this.getClass().getResource(""/resources/backButton.png""));
    private final ImageIcon  logoutPageIcon = new ImageIcon(this.getClass().getResource(""/resources/logoutPage.png""));
    private final ImageIcon  addSessionButtonIcon = new ImageIcon(this.getClass().getResource(""/resources/addSessionButton.png""));
    private final ImageIcon  deleteSessionButtonIcon = new ImageIcon(this.getClass().getResource(""/resources/deleteSessionButton.png""));
    private final ImageIcon showInfoButtonIcon = new ImageIcon(this.getClass().getResource(""/resources/showInfoButton.png""));
    private final ImageIcon  updateButtonIcon = new ImageIcon(this.getClass().getResource(""/resources/updateButton.png""));

    /**
     *  FrameSetup Constructor
     */
    public FrameSetup() {
        setFrame();
        setContainer();
        setAppIcon();
    }

    public void setFrame() {
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(900, 500);
        this.setLocationRelativeTo(null);
        this.setTitle(""Smart Gym Centre"");
    }

    public void setContainer() {
        container = this.getContentPane();
        container.setBackground(Color.WHITE);
    }
    public void setAppIcon() {
        this.setIconImage(appIcon.getImage());
    }

    public Container getContainer() {
        return container;
    }

    public JLabel getNullLabel() {
        return new JLabel();
    }

    public ImageIcon getDisplayPicture() {
        return displayPicture;
    }

    public ImageIcon getLoginButtonIcon() {
        return loginButtonIcon;
    }
    public ImageIcon getRegisterButtonIcon() {
        return registerButtonIcon;
    }

    public ImageIcon getSubmitBookingButtonIcon() {
        return submitBookingButtonIcon;
    }

    public ImageIcon getReportGenerateButtonIcon() {
        return reportGenerateButtonIcon;
    }

    public ImageIcon getLogoutButtonIcon() {
        return logoutButtonIcon;
    }

    public ImageIcon getBackButtonIcon() {
        return backButtonIcon;
    }

    public ImageIcon getLogoutPageIcon() {
        return logoutPageIcon;
    }

    public ImageIcon getAddSessionButtonIcon() {
        return addSessionButtonIcon;
    }

    public ImageIcon getDeleteSessionButtonIcon() {
        return deleteSessionButtonIcon;
    }

    public ImageIcon getUpdateButtonIcon() {
        return updateButtonIcon;
    }

    public ImageIcon getShowInfoButtonIcon() {
        return showInfoButtonIcon;
    }
}",1
"package view;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import static javax.swing.BorderFactory.createMatteBorder;
import javax.swing.JLabel;
import javax.swing.JProgressBar;

/**
 * This is the GymCentreView Page of this project that Contains all the FrontEnd Programs
 */
public class GymCentreView extends StartingTemplate {
    private JLabel progressLabel;
    private JProgressBar progressbar;
    private LoginPage loginPage;
    private RegisterPage registerPage;
    private ManagerPage managerPage;
    private TrainerPage trainerPage;

    /**
     *   Constructor of GymCentreView Class
     */
    public GymCentreView() {
        loginPage = new LoginPage();
        registerPage = new RegisterPage();
        managerPage = new ManagerPage(0);
        trainerPage = new TrainerPage("""",0);
        setComponentPanel();
        runThread();
    }

    /**
     *  Sets Component Panel
     */
    public void setComponentPanel() {

        getComponentPanel().setLayout(new GridLayout(13, 1));
        getComponentPanel().add(getNullLabel());

        JLabel welcomeLabel = new JLabel(""WELCOME TO"");
        welcomeLabel.setForeground(Color.BLACK);
        welcomeLabel.setHorizontalAlignment(JLabel.CENTER);
        welcomeLabel.setFont(new Font(""Monospaced"", Font.BOLD, 35));
        getComponentPanel().add(welcomeLabel);

        getComponentPanel().add(getNullLabel());

        JLabel projectNameLabelPart1 = new JLabel(""SMART"");
        projectNameLabelPart1.setHorizontalAlignment(JLabel.CENTER);
        projectNameLabelPart1.setForeground(Color.BLACK);
        projectNameLabelPart1.setFont(new Font(""Monospaced"", Font.BOLD, 28));
        getComponentPanel().add(projectNameLabelPart1);

        JLabel projectNameLabelPart2 = new JLabel(""GYM "");
        projectNameLabelPart2.setHorizontalAlignment(JLabel.CENTER);
        projectNameLabelPart2.setForeground(Color.BLACK);
        projectNameLabelPart2.setFont(new Font(""Monospaced"", Font.BOLD, 28));
        getComponentPanel().add(projectNameLabelPart2);

        JLabel projectNameLabelPart3 = new JLabel(""CENTER"");
        projectNameLabelPart3.setHorizontalAlignment(JLabel.CENTER);
        projectNameLabelPart3.setForeground(Color.BLACK);
        projectNameLabelPart3.setFont(new Font(""Monospaced"", Font.BOLD, 28));
        getComponentPanel().add(projectNameLabelPart3);

        getComponentPanel().add(getNullLabel());
        getComponentPanel().add(getNullLabel());

        progressbar = new JProgressBar();
        progressbar.setBackground(Color.WHITE);
        progressbar.setForeground(Color.BLUE);
        progressbar.setCursor(new Cursor(Cursor.HAND_CURSOR));
        progressbar.setBorder(createMatteBorder(0, 0, 20, 0, Color.WHITE));
        getComponentPanel().add(progressbar);

        progressLabel = new JLabel(""0%"");
        progressLabel.setForeground(Color.BLACK);
        progressLabel.setHorizontalAlignment(JLabel.CENTER);
        progressLabel.setFont(new Font(""Arial"", Font.BOLD, 16));
        getComponentPanel().add(progressLabel);

        getComponentPanel().add(getNullLabel());
        getComponentPanel().add(getNullLabel());
    }

    /**
     * Runs the Loading UI and Opens Login Page
     */
    public void runThread() {

        this.setUndecorated(true);
        this.setSize(870, 450);
        this.setVisible(true);

        try {
            for (int i = 0; i <= 18; i++) {
                Thread.sleep(80);
                this.progressLabel.setText(i + ""%"");
                this.progressbar.setValue(i);
            }

            for (int i = 18; i <= 87; i++) {
                Thread.sleep(20);
                this.progressLabel.setText(i + ""%"");
                this.progressbar.setValue(i);
            }

            for (int i = 87; i <= 100; i++) {
                Thread.sleep(100);
                this.progressLabel.setText(i + ""%"");
                this.progressbar.setValue(i);
            }

            Thread.sleep(500);

        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        this.dispose();
        loginPage.setVisible(true);
    }

    public void setManagerPage(ManagerPage managerPage) {
        this.managerPage = managerPage;
    }

    public ManagerPage getManagerPage() {
        return managerPage;
    }

    public void setTrainerPage(TrainerPage trainerPage) {
        this.trainerPage = trainerPage;
    }

    public TrainerPage getTrainerPage() {
        return trainerPage;
    }

    public void setRegisterPage(RegisterPage registerPage) {
        this.registerPage = registerPage;
    }

    public RegisterPage getRegisterPage() {
        return registerPage;
    }

    public void setLoginPage(LoginPage loginPage) {
        this.loginPage = loginPage;
    }

    public LoginPage getLoginPage() {
        return loginPage;
    }
}",0
"package view;

import javax.swing.*;
import java.awt.*;

class ImagePanel extends JPanel {

    private Image img;

    public ImagePanel(String img) {
        this(new ImageIcon(img).getImage());
    }

    public ImagePanel(Image img) {
        this.img = img;
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null));
        setPreferredSize(size);
        setMinimumSize(size);
        setMaximumSize(size);
        setSize(size);
        setLayout(null);
    }

    public void paintComponent(Graphics g) {
        g.drawImage(img, 0, 0, null);
    }

}",0
"package view;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import static javax.swing.BorderFactory.createMatteBorder;

import javax.swing.*;

public class LoginPage extends StartingTemplate {

    private JTextField usernameTextField;
    private JPasswordField passwordField;
    private JButton loginButton;
    private JRadioButton managerRadioButton, trainerRadioButton;

    /**
     * Login Page Constructor
     */
    public LoginPage() {
        setComponentPanel();
    }

    /**
     * Sets Component Panel
     */
    public void setComponentPanel() {

        getComponentPanel().setLayout(new GridLayout(12, 1));

        JLabel headerLabel = new JLabel(""User Login"");
        headerLabel.setHorizontalAlignment(JLabel.CENTER);
        headerLabel.setFont(new Font(""Arial"", Font.BOLD, 30));
        getComponentPanel().add(headerLabel);

        getComponentPanel().add(getNullLabel());

        JLabel usernameLabel = new JLabel(""Username"");
        usernameLabel.setForeground(Color.GRAY);
        usernameLabel.setFont(new Font(""Arial"", Font.BOLD, 20));
        getComponentPanel().add(usernameLabel);

        usernameTextField = new JTextField();
        usernameTextField.setFont(new Font(""Arial"", Font.BOLD, 16));
        usernameTextField.setForeground(Color.black);
        usernameTextField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        getComponentPanel().add(usernameTextField);

        getComponentPanel().add(getNullLabel());

        JLabel passwordLabel = new JLabel(""Password"");
        passwordLabel.setForeground(Color.GRAY);
        passwordLabel.setFont(new Font(""Arial"", Font.BOLD, 20));
        getComponentPanel().add(passwordLabel);

        passwordField = new JPasswordField();
        passwordField.setForeground(Color.black);
        passwordField.setFont(new Font(""Arial"", Font.BOLD, 16));
        passwordField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        getComponentPanel().add(passwordField);

        getComponentPanel().add(getNullLabel());

        setButtons();
    }

    public void setButtons() {

        ButtonGroup buttonGroup = new ButtonGroup();
        managerRadioButton = new JRadioButton(""Manager"");
        managerRadioButton.setBackground(Color.WHITE);
        managerRadioButton.setForeground(Color.GRAY);
        managerRadioButton.setFocusPainted(false);
        managerRadioButton.setFont(new Font(""Arial"", Font.BOLD, 18));
        buttonGroup.add(managerRadioButton);

        trainerRadioButton = new JRadioButton(""Trainer"");
        trainerRadioButton.setBackground(Color.WHITE);
        trainerRadioButton.setForeground(Color.GRAY);
        trainerRadioButton.setFocusPainted(false);
        trainerRadioButton.setFont(new Font(""Arial"", Font.BOLD, 18));
        buttonGroup.add(trainerRadioButton);

        JPanel radioButtonPanel = new JPanel();
        radioButtonPanel.setBackground(Color.WHITE);
        radioButtonPanel.add(managerRadioButton);
        radioButtonPanel.add(trainerRadioButton);
        getComponentPanel().add(radioButtonPanel);

        getComponentPanel().add(getNullLabel());

        loginButton = new JButton(getLoginButtonIcon());
        loginButton.setBorder(null);
        loginButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        loginButton.setBackground(Color.white);
        getComponentPanel().add(loginButton);
    }

    public JButton getLoginButton() {
        return loginButton;
    }

    public JTextField getUsernameTextField() {
        return usernameTextField;
    }

    public JPasswordField getPasswordField() {
        return passwordField;
    }

    public JRadioButton getManagerRadioButton() {
        return managerRadioButton;
    }

    public JRadioButton getTrainerRadioButton() {
        return trainerRadioButton;
    }
}",0
"package view;

import model.GymCenterModel;

import javax.swing.*;
import java.awt.*;

import static javax.swing.BorderFactory.createMatteBorder;

public class ManagerPage extends AdminTemplate {

    private JTabbedPane tabbedPane;
    private JPanel managerTrainerRegistrationPanel, userRegistrationPanel,bookingSessionPanel,customerDetailsPanel,logoutPanel,sessionsPanel;
    private JTextField nameTextField,phoneNumberTextField,amountTextField,sessionTextField;
    private JButton adminRegistrationButton,userRegistrationButton,submitBookingButton,addSessionButton,deleteSessionButton,reportGenerateButton,logoutButton;
    private JComboBox userComboBox,trainerComboBox,sessionComboBox,timeComboBox,deleteSessionComboBox;
    private JTextArea managerReportTextArea;

    /**
     * Manager Page Constructor
     * @param tabIndex TabIndex
     */
    public ManagerPage(int tabIndex) {
        setTabbedPane(tabIndex);
    }

    public void setTabbedPane(int tabIndex) {
        tabbedPane = new JTabbedPane();
        setManagerTrainerRegistrationPanel();
        setUserRegistrationPanel();
        setBookingSessionPanel();
        setSessionsPanel();
        setCustomerDetailsPanel();
        setLogoutPanel();
        tabbedPane.add(""Admin Register"" , managerTrainerRegistrationPanel);
        tabbedPane.add(""User Registration"",userRegistrationPanel);
        tabbedPane.add(""Book TrainerPage & Session"",bookingSessionPanel);
        tabbedPane.add(""Sessions"",sessionsPanel);
        tabbedPane.add(""Customer Details"",customerDetailsPanel);
        tabbedPane.add(""Log Out"",logoutPanel);
        tabbedPane.setSelectedIndex(tabIndex);
        getComponentPanel().add(tabbedPane,BorderLayout.CENTER);
    }

    public void setManagerTrainerRegistrationPanel() {
        managerTrainerRegistrationPanel = new ImagePanel(new ImageIcon(""GYM.jpg"").getImage());
        managerTrainerRegistrationPanel.setLayout(new BorderLayout(250,150));
        managerTrainerRegistrationPanel.setBackground(Color.WHITE);

        managerTrainerRegistrationPanel.add(getNullLabel(),BorderLayout.EAST);
        managerTrainerRegistrationPanel.add(getNullLabel(),BorderLayout.WEST);
        managerTrainerRegistrationPanel.add(getNullLabel(),BorderLayout.NORTH);
        managerTrainerRegistrationPanel.add(getNullLabel(),BorderLayout.SOUTH);

        adminRegistrationButton = new JButton(getRegisterButtonIcon());
        adminRegistrationButton.setBorder(null);
        adminRegistrationButton.setFocusPainted(false);
        adminRegistrationButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        adminRegistrationButton.setBackground(Color.WHITE);
        managerTrainerRegistrationPanel.add(adminRegistrationButton,BorderLayout.CENTER);
    }

    public void setUserRegistrationPanel() {
        userRegistrationPanel = new JPanel();
        userRegistrationPanel.setBackground(Color.WHITE);
        userRegistrationPanel.setLayout(new BorderLayout(150,50));

        userRegistrationPanel.add(getNullLabel(),BorderLayout.SOUTH);
        userRegistrationPanel.add(getNullLabel(),BorderLayout.EAST);
        userRegistrationPanel.add(getNullLabel(),BorderLayout.WEST);
        userRegistrationPanel.add(getNullLabel(),BorderLayout.NORTH);

        JPanel inputPanel = new JPanel();
        inputPanel.setBackground(Color.WHITE);
        inputPanel.setLayout(new GridLayout(6, 1));

        JLabel nameLabel = new JLabel(""Name"");
        nameLabel.setForeground(Color.GRAY);
        nameLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(nameLabel);

        nameTextField = new JTextField();
        nameTextField.setFont(new Font(""Arial"", Font.BOLD, 16));
        nameTextField.setForeground(Color.black);
        nameTextField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        inputPanel.add(nameTextField);

        JLabel phoneNumberLabel = new JLabel(""Phone Number"");
        phoneNumberLabel.setForeground(Color.GRAY);
        phoneNumberLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(phoneNumberLabel);

        phoneNumberTextField = new JTextField();
        phoneNumberTextField.setFont(new Font(""Arial"", Font.BOLD, 16));
        phoneNumberTextField.setForeground(Color.black);
        phoneNumberTextField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        inputPanel.add(phoneNumberTextField);

        inputPanel.add(getNullLabel());

        userRegistrationButton = new JButton(getRegisterButtonIcon());
        userRegistrationButton.setBorder(null);
        userRegistrationButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        userRegistrationButton.setBackground(Color.WHITE);
        inputPanel.add(userRegistrationButton);

        userRegistrationPanel.add(inputPanel,BorderLayout.CENTER);
    }

    public void setBookingSessionPanel() {
        bookingSessionPanel = new JPanel();
        bookingSessionPanel.setBackground(Color.WHITE);
        bookingSessionPanel.setLayout(new BorderLayout(150,20));

        bookingSessionPanel.add(getNullLabel(),BorderLayout.SOUTH);
        bookingSessionPanel.add(getNullLabel(),BorderLayout.EAST);
        bookingSessionPanel.add(getNullLabel(),BorderLayout.WEST);
        bookingSessionPanel.add(getNullLabel(),BorderLayout.NORTH);

        JPanel inputPanel = new JPanel();
        inputPanel.setBackground(Color.WHITE);
        inputPanel.setLayout(new GridLayout(12, 1));

        JLabel userLabel = new JLabel(""Select User"");
        userLabel.setForeground(Color.GRAY);
        userLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(userLabel);

        userComboBox = new JComboBox(new GymCenterModel().getALLUsers());
        userComboBox.setFont(new Font(""Arial"", Font.BOLD, 16));
        inputPanel.add(userComboBox);

        JLabel trainerLabel = new JLabel(""Select Trainer"");
        trainerLabel.setForeground(Color.GRAY);
        trainerLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(trainerLabel);

        trainerComboBox = new JComboBox(new GymCenterModel().getTrainers());
        trainerComboBox.setFont(new Font(""Arial"", Font.BOLD, 16));
        inputPanel.add(trainerComboBox);

        JLabel sessionLabel = new JLabel(""Select Session"");
        sessionLabel.setForeground(Color.GRAY);
        sessionLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(sessionLabel);

        sessionComboBox = new JComboBox(new GymCenterModel().getSessionList());
        sessionComboBox.setFont(new Font(""Arial"", Font.BOLD, 16));
        inputPanel.add(sessionComboBox);

        JLabel timeLabel = new JLabel(""Select Time"");
        timeLabel.setForeground(Color.GRAY);
        timeLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(timeLabel);

        timeComboBox = new JComboBox(new GymCenterModel().getTimeList());
        timeComboBox.setFont(new Font(""Arial"", Font.BOLD, 16));
        inputPanel.add(timeComboBox);

        JLabel amountLabel = new JLabel(""Payment Amount"");
        amountLabel.setForeground(Color.GRAY);
        amountLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(amountLabel);

        amountTextField = new JTextField();
        amountTextField.setFont(new Font(""Arial"", Font.BOLD, 16));
        amountTextField.setForeground(Color.black);
        amountTextField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        inputPanel.add(amountTextField);

        inputPanel.add(getNullLabel());

        submitBookingButton = new JButton(getSubmitBookingButtonIcon());
        submitBookingButton.setBorder(null);
        submitBookingButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        submitBookingButton.setBackground(Color.WHITE);
        inputPanel.add(submitBookingButton);

        bookingSessionPanel.add(inputPanel,BorderLayout.CENTER);
    }

    public void setSessionsPanel() {
        sessionsPanel = new JPanel();
        sessionsPanel.setBackground(Color.WHITE);
        sessionsPanel.setLayout(new BorderLayout(150,20));

        sessionsPanel.add(getNullLabel(),BorderLayout.SOUTH);
        sessionsPanel.add(getNullLabel(),BorderLayout.EAST);
        sessionsPanel.add(getNullLabel(),BorderLayout.WEST);
        sessionsPanel.add(getNullLabel(),BorderLayout.NORTH);

        JPanel inputPanel = new JPanel();
        inputPanel.setBackground(Color.WHITE);
        inputPanel.setLayout(new GridLayout(9, 1));

        JLabel enterSessionLabel = new JLabel(""Enter Session"");
        enterSessionLabel.setForeground(Color.GRAY);
        enterSessionLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(enterSessionLabel);

        sessionTextField = new JTextField();
        sessionTextField.setFont(new Font(""Arial"", Font.BOLD, 16));
        sessionTextField.setForeground(Color.black);
        sessionTextField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        inputPanel.add(sessionTextField);

        inputPanel.add(getNullLabel());

        addSessionButton = new JButton(getAddSessionButtonIcon());
        addSessionButton.setBorder(null);
        addSessionButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        addSessionButton.setFocusPainted(false);
        addSessionButton.setBackground(Color.WHITE);
        inputPanel.add(addSessionButton);

        inputPanel.add(getNullLabel());

        JLabel selectSessionLabel = new JLabel(""Select Session"");
        selectSessionLabel.setForeground(Color.GRAY);
        selectSessionLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(selectSessionLabel);

        deleteSessionComboBox = new JComboBox(new GymCenterModel().getSessionList());
        deleteSessionComboBox.setFont(new Font(""Arial"", Font.BOLD, 16));
        inputPanel.add(deleteSessionComboBox);

        inputPanel.add(getNullLabel());

        deleteSessionButton = new JButton(getDeleteSessionButtonIcon());
        deleteSessionButton.setBorder(null);
        deleteSessionButton.setFocusPainted(false);
        deleteSessionButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        deleteSessionButton.setBackground(Color.WHITE);
        inputPanel.add( deleteSessionButton);

        sessionsPanel.add(inputPanel,BorderLayout.CENTER);
    }

    public void setCustomerDetailsPanel() {
        customerDetailsPanel = new JPanel();
        customerDetailsPanel.setLayout(new BorderLayout());

        managerReportTextArea = new JTextArea();
        managerReportTextArea.setText(new GymCenterModel().getManagerReport());
        managerReportTextArea.setBackground(Color.WHITE);
        managerReportTextArea.setFont(new Font(""Arial"", Font.BOLD, 14));
        managerReportTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(managerReportTextArea);
        customerDetailsPanel.add(scrollPane,BorderLayout.CENTER);

        reportGenerateButton = new JButton(getReportGenerateButtonIcon());
        reportGenerateButton.setBorder(null);
        reportGenerateButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        reportGenerateButton.setBackground(Color.WHITE);
        customerDetailsPanel.add(reportGenerateButton,BorderLayout.SOUTH);
    }

    public void setLogoutPanel() {
        logoutPanel = new ImagePanel(new ImageIcon(""GYM.jpg"").getImage());
        logoutPanel.setLayout(new BorderLayout(250, 150));

        logoutPanel.add(getNullLabel(),BorderLayout.EAST);
        logoutPanel.add(getNullLabel(),BorderLayout.WEST);
        logoutPanel.add(getNullLabel(),BorderLayout.NORTH);
        logoutPanel.add(getNullLabel(),BorderLayout.SOUTH);

        logoutButton = new JButton(""Log Out"");
        logoutButton.setFont(new Font(""Arial"", Font.BOLD, 20));
        logoutButton.setBorder(null);
        logoutButton.setFocusPainted(false);
        logoutButton.setBackground(Color.BLUE);
        logoutButton.setForeground(Color.WHITE);
        logoutButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        logoutPanel.add(logoutButton,BorderLayout.CENTER);
    }

    public JTextField getNameTextField() {
        return nameTextField;
    }

    public JTextField getPhoneNumberTextField() {
        return phoneNumberTextField;
    }

    public JButton getUserRegistrationButton() {
        return userRegistrationButton;
    }

    public JButton getSubmitBookingButton() {
        return submitBookingButton;
    }

    public JComboBox getUserComboBox() {
        return userComboBox;
    }

    public JComboBox getTrainerComboBox() {
        return trainerComboBox;
    }

    public JComboBox getSessionComboBox() {
        return sessionComboBox;
    }

    public JTextField getAmountTextField() {
        return amountTextField;
    }

    public void setUserComboBox(JComboBox userComboBox) {
        this.userComboBox = userComboBox;
    }

    public JButton getLogoutButton() {
        return logoutButton;
    }

    public JButton getReportGenerateButton() {
        return reportGenerateButton;
    }

    public JButton getAddSessionButton() {
        return addSessionButton;
    }

    public JButton getDeleteSessionButton() {
        return deleteSessionButton;
    }

    public JComboBox getDeleteSessionComboBox() {
        return deleteSessionComboBox;
    }

    public JTextField getSessionTextField() {
        return sessionTextField;
    }

    public JComboBox getTimeComboBox() {
        return timeComboBox;
    }

    public JTextArea getManagerReportTextArea() {
        return managerReportTextArea;
    }

    public JButton getAdminRegistrationButton() {
        return adminRegistrationButton;
    }
}",1
"package view;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import static javax.swing.BorderFactory.createMatteBorder;
import javax.swing.JTextField;
import javax.swing.JPasswordField;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;


public class RegisterPage extends StartingTemplate {

    private JTextField usernameTextField, nameTextField, phoneNumberTextField;
    private JPasswordField passwordField, confirmPasswordField;
    private JButton registerButton;
    private JRadioButton managerRadioButton, trainerRadioButton;
    private JButton backButton;

    /**
     *  Register Page Constructor
     */
    public RegisterPage() {
        this.setSize(900, 675);
        this.setLocationRelativeTo(null);
        setComponentPanel();
    }

    /**
     *   Sets Component Panel
     */
    public void setComponentPanel() {

        GridLayout gridLayout = new GridLayout(18, 1);
        gridLayout.setVgap(5);
        getComponentPanel().setLayout(gridLayout);

        JLabel headerLabel = new JLabel(""Registration"");
        headerLabel.setHorizontalAlignment(JLabel.CENTER);
        headerLabel.setFont(new Font(""Arial"", Font.BOLD, 25));
        getComponentPanel().add(headerLabel);

        getComponentPanel().add(getNullLabel());

        JLabel nameLabel = new JLabel(""Name"");
        nameLabel.setForeground(Color.GRAY);
        nameLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        getComponentPanel().add(nameLabel);

        nameTextField = new JTextField();
        nameTextField.setFont(new Font(""Arial"", Font.BOLD, 16));
        nameTextField.setForeground(Color.black);
        nameTextField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        getComponentPanel().add(nameTextField);

        JLabel usernameLabel = new JLabel(""Username"");
        usernameLabel.setForeground(Color.GRAY);
        usernameLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        getComponentPanel().add(usernameLabel);

        usernameTextField = new JTextField();
        usernameTextField.setFont(new Font(""Arial"", Font.BOLD, 16));
        usernameTextField.setForeground(Color.black);
        usernameTextField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        getComponentPanel().add(usernameTextField);

        JLabel passwordLabel = new JLabel(""Password (Minimum 6 characters)"");
        passwordLabel.setForeground(Color.GRAY);
        passwordLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        getComponentPanel().add(passwordLabel);

        passwordField = new JPasswordField();
        passwordField.setForeground(Color.black);
        passwordField.setFont(new Font(""Arial"", Font.BOLD, 16));
        passwordField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        getComponentPanel().add(passwordField);

        passwordLabel = new JLabel(""Confirm Password"");
        passwordLabel.setForeground(Color.GRAY);
        passwordLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        getComponentPanel().add(passwordLabel);

        confirmPasswordField = new JPasswordField();
        confirmPasswordField.setForeground(Color.black);
        confirmPasswordField.setFont(new Font(""Arial"", Font.BOLD, 16));
        confirmPasswordField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        getComponentPanel().add(confirmPasswordField);

        JLabel phoneNumberLabel = new JLabel(""Phone Number"");
        phoneNumberLabel.setForeground(Color.GRAY);
        phoneNumberLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        getComponentPanel().add(phoneNumberLabel);

        phoneNumberTextField = new JTextField();
        phoneNumberTextField.setFont(new Font(""Arial"", Font.BOLD, 16));
        phoneNumberTextField.setForeground(Color.black);
        phoneNumberTextField.setBorder(createMatteBorder(0, 0, 2, 0, Color.blue));
        getComponentPanel().add(phoneNumberTextField);

        setButtons();
    }

    public void setButtons() {

        ButtonGroup buttonGroup = new ButtonGroup();
        JPanel radioButtonPanel = new JPanel();
        radioButtonPanel.setBackground(Color.WHITE);

        managerRadioButton = new JRadioButton(""Manager"");
        managerRadioButton.setBackground(Color.WHITE);
        managerRadioButton.setForeground(Color.GRAY);
        managerRadioButton.setFocusPainted(false);
        managerRadioButton.setFont(new Font(""Arial"", Font.BOLD, 18));
        buttonGroup.add(managerRadioButton);

        trainerRadioButton = new JRadioButton(""Trainer"");
        trainerRadioButton.setBackground(Color.WHITE);
        trainerRadioButton.setForeground(Color.GRAY);
        trainerRadioButton.setFocusPainted(false);
        trainerRadioButton.setFont(new Font(""Arial"", Font.BOLD, 18));
        buttonGroup.add(trainerRadioButton);

        radioButtonPanel.add(managerRadioButton);
        radioButtonPanel.add(trainerRadioButton);

        getComponentPanel().add(radioButtonPanel);

        getComponentPanel().add(getNullLabel());

        registerButton = new JButton(getRegisterButtonIcon());
        registerButton.setBorder(null);
        registerButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        registerButton.setBackground(Color.WHITE);
        getComponentPanel().add(registerButton);

        getComponentPanel().add(getNullLabel());

        backButton = new JButton(getBackButtonIcon());
        backButton.setBorder(null);
        backButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        backButton.setFocusPainted(false);
        backButton.setBackground(Color.WHITE);
        getComponentPanel().add(backButton);
    }

    public JTextField getUsernameTextField() {
        return usernameTextField;
    }

    public JPasswordField getPasswordField() {
        return passwordField;
    }

    public JTextField getNameTextField() {
        return nameTextField;
    }

    public JTextField getPhoneNumberTextField() {
        return phoneNumberTextField;
    }

    public JRadioButton getManagerRadioButton() {
        return managerRadioButton;
    }

    public JRadioButton getTrainerRadioButton() {
        return trainerRadioButton;
    }

    public JButton getRegisterButton() {
        return registerButton;
    }

    public JButton getBackButton() {
        return backButton;
    }

    public JPasswordField getConfirmPasswordField() {
        return confirmPasswordField;
    }
}",1
"package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class StartingTemplate extends FrameSetup {

    private JPanel picturePanel, componentPanel;

    /**
     *  Starting Template Constructor
     */
    public StartingTemplate() {
        setContainer();
        setPanels();
        setPicturePanel();
    }

    public void setContainer() {
        //Method Overriding Concept Used

        super.setContainer();  //Here we get setContainer() of parent class

        getContainer().setLayout(new BorderLayout(100, 30));
    }

    public void setPanels() {
        getContainer().add(getNullLabel(), BorderLayout.EAST);
        getContainer().add(getNullLabel(), BorderLayout.WEST);
        getContainer().add(getNullLabel(), BorderLayout.NORTH);
        getContainer().add(getNullLabel(), BorderLayout.SOUTH);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(1, 2));
        getContainer().add(mainPanel, BorderLayout.CENTER);

        picturePanel = new JPanel();
        picturePanel.setBackground(Color.WHITE);
        mainPanel.add(picturePanel);

        componentPanel = new JPanel();
        componentPanel.setBackground(Color.WHITE);
        mainPanel.add(componentPanel);
    }

    public void setPicturePanel() {
        JLabel pictureLabel = new JLabel(getDisplayPicture());
        picturePanel.add(pictureLabel);
    }

    public JPanel getComponentPanel() {
        return componentPanel;
    }
}",0
"package view;

import model.GymCenterModel;

import javax.swing.*;
import java.awt.*;

public class TrainerPage extends AdminTemplate{

    private int tabIndex;
    private String trainID;
    private String trainerID;
    private JTabbedPane tabbedPane;
    private JButton reportGenerateButton,showInfoButton,updateButton,logoutButton;
    private JPanel customerDetailsPanel,updateCustomerInfoPanel,inputPanel,logoutPanel;
    private JComboBox trainComboBox;
    private JEditorPane editorPane;
    private JCheckBox paymentCollectedCheckBox,sessionCompletedCheckBox;
    private JTextField feedbackTextField;
    private JTextArea showSingleUserInfoTextArea;

    /**
     * Trainer Page Constructor
     */
    public TrainerPage(String trainerID,int tabIndex) {
        this.trainerID = trainerID;
        this.tabIndex = tabIndex;
        this.setSize(1400,675);
        this.setLocationRelativeTo(null);
        setTabbedPane();

    }

    public void setTabbedPane() {
        tabbedPane = new JTabbedPane();
        setCustomerDetailsPanel();
        setUpdateCustomerInfoPanel();
        setLogoutPanel();
        tabbedPane.add(""Customer Details"",customerDetailsPanel);
        tabbedPane.add(""Update Customer Info"",updateCustomerInfoPanel);
        tabbedPane.add(""Log Out"",logoutPanel);
        tabbedPane.setSelectedIndex(tabIndex);
        getComponentPanel().add(tabbedPane,BorderLayout.CENTER);
    }

    public void setCustomerDetailsPanel() {
        customerDetailsPanel = new JPanel();
        customerDetailsPanel.setLayout(new BorderLayout());

        editorPane = new JEditorPane();
        editorPane.setContentType(""text/html"");
        editorPane.setText(new GymCenterModel().getHTMLContentOFTrainer(trainerID));
        editorPane.setBackground(Color.WHITE);
        editorPane.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(editorPane);
        customerDetailsPanel.add(scrollPane,BorderLayout.CENTER);

        reportGenerateButton = new JButton(getReportGenerateButtonIcon());
        reportGenerateButton.setBorder(null);
        reportGenerateButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        reportGenerateButton.setBackground(Color.WHITE);
        customerDetailsPanel.add(reportGenerateButton,BorderLayout.SOUTH);
    }

    public void setUpdateCustomerInfoPanel() {
        updateCustomerInfoPanel = new JPanel();
        updateCustomerInfoPanel.setLayout(new GridLayout(1,2));

        setInputPanel();

        showSingleUserInfoTextArea = new JTextArea();
        showSingleUserInfoTextArea.setText("""");
        showSingleUserInfoTextArea.setFont(new Font(""Arial"", Font.BOLD, 18));
        showSingleUserInfoTextArea.setBackground(Color.WHITE);
        showSingleUserInfoTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(showSingleUserInfoTextArea);
        updateCustomerInfoPanel.add(scrollPane);
    }

    public void setInputPanel() {
        inputPanel = new JPanel();
        inputPanel.setBackground(Color.WHITE);
        inputPanel.setLayout(new GridLayout(10,1));

        JLabel userLabel = new JLabel(""  Select (TrainID-UserName)"");
        userLabel.setForeground(Color.GRAY);
        userLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(userLabel);

        trainComboBox = new JComboBox(new GymCenterModel().getTrainIDName(trainerID));
        trainComboBox.setFont(new Font(""Arial"", Font.BOLD, 16));
        inputPanel.add(trainComboBox);

        showInfoButton = new JButton(getShowInfoButtonIcon());
        showInfoButton.setBorder(null);
        showInfoButton.setFocusPainted(false);
        showInfoButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        showInfoButton.setBackground(Color.WHITE);
        inputPanel.add(showInfoButton);

        JLabel paymentLabel = new JLabel(""  Payment"");
        paymentLabel.setForeground(Color.GRAY);
        paymentLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(paymentLabel);

        paymentCollectedCheckBox = new JCheckBox(""  Collected"");
        paymentCollectedCheckBox.setFont(new Font(""Arial"", Font.BOLD, 18));
        paymentCollectedCheckBox.setBackground(Color.WHITE);
        paymentCollectedCheckBox.setEnabled(false);
        inputPanel.add(paymentCollectedCheckBox);

        JLabel sessionLabel = new JLabel(""  Session"");
        sessionLabel.setForeground(Color.GRAY);
        sessionLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(sessionLabel);

        sessionCompletedCheckBox = new JCheckBox(""  Completed"");
        sessionCompletedCheckBox.setFont(new Font(""Arial"", Font.BOLD, 18));
        sessionCompletedCheckBox.setBackground(Color.WHITE);
        sessionCompletedCheckBox.setEnabled(false);
        inputPanel.add(sessionCompletedCheckBox);

        JLabel feedbackLabel = new JLabel("" Feedback"");
        feedbackLabel.setForeground(Color.GRAY);
        feedbackLabel.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(feedbackLabel);

        feedbackTextField = new JTextField();
        feedbackTextField.setEnabled(false);
        feedbackTextField.setFont(new Font(""Arial"", Font.BOLD, 18));
        inputPanel.add(feedbackTextField);

        updateButton = new JButton(getUpdateButtonIcon());
        updateButton.setBorder(null);
        updateButton.setFocusPainted(false);
        updateButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        updateButton.setBackground(Color.WHITE);
        updateButton.setEnabled(false);
        inputPanel.add(updateButton);

        updateCustomerInfoPanel.add(inputPanel);
    }


    public void setLogoutPanel() {
        logoutPanel = new ImagePanel(new ImageIcon(""GYM.jpg"").getImage());
        logoutPanel.setLayout(new BorderLayout(250, 150));

        logoutPanel.add(getNullLabel(),BorderLayout.EAST);
        logoutPanel.add(getNullLabel(),BorderLayout.WEST);
        logoutPanel.add(getNullLabel(),BorderLayout.NORTH);
        logoutPanel.add(getNullLabel(),BorderLayout.SOUTH);

        logoutButton = new JButton(""Log Out"");
        logoutButton.setFont(new Font(""Arial"", Font.BOLD, 20));
        logoutButton.setBorder(null);
        logoutButton.setFocusPainted(false);
        logoutButton.setBackground(Color.BLUE);
        logoutButton.setForeground(Color.WHITE);
        logoutButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        logoutPanel.add(logoutButton,BorderLayout.CENTER);
    }

    public String getTrainerID() {
        return trainerID;
    }

    public JButton getReportGenerateButton() {
        return reportGenerateButton;
    }

    public JEditorPane getEditorPane() {
        return editorPane;
    }

    public JButton getLogoutButton() {
        return logoutButton;
    }

    public JButton getShowInfoButton() {
        return showInfoButton;
    }

    public JButton getUpdateButton() {
        return updateButton;
    }

    public JComboBox getTrainComboBox() {
        return trainComboBox;
    }

    public JCheckBox getPaymentCollectedCheckBox() {
        return paymentCollectedCheckBox;
    }

    public JCheckBox getSessionCompletedCheckBox() {
        return sessionCompletedCheckBox;
    }

    public JTextField getFeedbackTextField() {
        return feedbackTextField;
    }

    public JTextArea getShowSingleUserInfoTextArea() {
        return showSingleUserInfoTextArea;
    }

    public String getTrainID() {
        return trainID;
    }

    public void setTrainID(String trainID) {
        this.trainID = trainID;
    }
}",1
"import controller.GymCenterController;
import model.GymCenterModel;
import view.GymCentreView;

public class App {
    public static void main(String[] args) {
        GymCenterModel model = new GymCenterModel();
        GymCentreView view = new GymCentreView();
        GymCenterController controller = new GymCenterController(model,view);
    }
}",0
"package citySaver;

import java.awt.image.BufferedImage;

import gfx.ImageLoader;


public class Assets {

	private static final int  width = 32 , height =32 ;
	
	public static BufferedImage playerL , playerR,playerD,playerU , grass , water , ice , brickWall , steelWall  ;
	
	
	public static void init() {
		playerU = ImageLoader.loadImage(""/Creature/tankU.gif"");
		playerD = ImageLoader.loadImage(""/Creature/tankD.gif"");
		playerL = ImageLoader.loadImage(""/Creature/tankL.gif"");
		playerR = ImageLoader.loadImage(""/Creature/tankR.gif"");
		grass =ImageLoader.loadImage(""/Textures/tree.gif"");
		water = ImageLoader.loadImage(""/Textures/river.jpg"");
		brickWall = ImageLoader.loadImage(""/Textures/commonWall.gif"");
		steelWall = ImageLoader.loadImage(""/Textures/metalWall.gif"");
	}
	
} ",0
"

package CitySaver;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Timer;
import java.util.TimerTask;

public class CitySaver extends JFrame implements KeyListener{

    private GamePanel mp = null;
    private About ab ;
    private static int gameWidth = 850;
    private static int gameHeight = 800;
    private static boolean isInGame = false;
    private static String currentState = ""WelcomeScreen"" ;                
    private Thread mt = null;                
    private WelcomeScreen ws = null;        
    private Audio audio = null;        
    private GameRecorder gr ;

    public CitySaver() {

        // Welcome scene
        GameRecorder.loadRecord();                                                
        ws = new WelcomeScreen();                                        
        this.add(ws);

        audio = new Audio(""Sound/welcome.wav"");
        audio.play();

        // Menu options
        JMenuBar jmb = new JMenuBar();
        JMenu jmG = new JMenu(""Game (G)"");
        
       
       // JMenuItem jmiReturn = new JMenuItem(""Return (R)"");
        JMenuItem about = new JMenuItem(""About (A)"");        
        JMenuItem jmiExit = new JMenuItem(""Exit (E)"");        
        


        // Hot keys

        jmiExit.setMnemonic('E');
        jmG.setMnemonic('G');
        //jmiReturn.setMnemonic('R');
        about.setMnemonic('A');
        jmb.add(jmG);
        jmG.add(jmiExit);
       // jmG.add(jmiReturn);
        jmG.add(about);


        this.addKeyListener(this);

//        jmiReturn.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                gr = new GameRecorder();
//                setIsInGame(true);
//                gr.reset() ;        
//                mp = new GamePanel();
//                mt = new Thread(mp);
//                mt.start();
//                add(mp);
//                repaint();
//                revalidate();
//                addKeyListener(mp);
//            }
//        });

        // Add actions
        // Exit
        jmiExit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                GameRecorder.saveRecord();                
                System.exit(0);                        
            }
        });
        
        //About
        about.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                    about();
            }
        });






        this.setTitle(""City Saver"");                                
        this.setResizable(false);                                
        this.setJMenuBar(jmb);
        this.setVisible(true);
        this.setBounds(100, 100, gameWidth + 250, gameHeight);         
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   
    }
    
    // About
    private void about() {
            if(getCurrentState() == ""GamePanel"") { // from Gamepanel 
                    setCurrentState(""About"");
                    setIsInGame(false);                                                                
                    ab = new About();                                                                
                this.remove(mp);                                                                
                mp = null;                                                                                        
                this.addKeyListener(this);                                                
                this.add(ab);                                                                        
                this.setVisible(true);                                                        
                this.repaint();                                                                        
                this.revalidate();}                                                                
            else if(getCurrentState() == ""About""){  //from About 
//                    setCurrentState(""About"");
//                    setIsInGame(false);        
//                    ab = new About();
//                this.remove(this);
//                //mp = null;
//                this.addKeyListener(this);
//                this.add(ab);
//                this.setVisible(true);
//                this.repaint();
//                this.revalidate();
                    
            }else {
                    setCurrentState(""About"");    // from Welcome Screen 
                    setIsInGame(false);                
                    ab = new About();        
                this.remove(ws);        
                ws = null;                
                this.addKeyListener(this);        
                this.add(ab);        
                this.setVisible(true);
                this.repaint();
                this.revalidate();                                
                    
            }
    }

      // Back to welcome screen                        
//    private void back() {
//            if(getCurrentState() == ""GamePanel"") {  // from gamepanel 
//                    setCurrentState(""WelcomeScreen"");
//                setIsInGame(false);                
//                audio = new Audio(""Sound/welcome.wav"");
//                audio.play();
//                ws = new WelcomeScreen();
//                this.remove(mp);
//                mp = null;
//                this.addKeyListener(this);
//                this.add(ws);
//                this.setVisible(true);
//                this.repaint();
//                this.revalidate();
//            }else if(getCurrentState()== ""About"") {                 //from About         
//
//                    setCurrentState(""WelcomeScreen"");
//                    setIsInGame(false);                
//                audio = new Audio(""Sound/welcome.wav"");
//                audio.play();
//                ws = new WelcomeScreen();
//                this.remove(ab);
//                ab = null;
//                this.addKeyListener(this);
//                this.add(ws);
//                this.setVisible(true);
//                this.repaint();
//                this.revalidate();
//                    
//            }else {                                                                        //from WelcomeScreen 
////                    setIsInGame(false);                
////                    setCurrentState(""WelcomeScreen"");
////                audio = new Audio(""Sound/welcome.wav"");
////                audio.play();
////                ws = new WelcomeScreen();
////                this.remove(this);
////                ws = null;
////                this.addKeyListener(this);
////                this.add(ws);
////                this.setVisible(true);
////                this.repaint();
////                this.revalidate();
//            }
//            
//    }

    // Start the game
    public void gameStart() {
        setIsInGame(true);        
        setCurrentState(""GamePanel"");        
        WelcomeScreen.run = false;         

        this.removeKeyListener(this);
        
        // Stage scene
        ws.stage() ;
        this.revalidate();
        this.repaint();        
        
        // Game start
        Timer t = new Timer();
        t.schedule(new TimerTask() {
            @Override
            public void run() { 
                remove(ws);
                ws = null;
                    //mp.setGameOver(false);
                mp = new GamePanel();
                mt = new Thread(mp);
                mt.start();
                add(mp);
                repaint();
                revalidate();
                addKeyListener(mp);
            }
        }, 3000);
    }

    public static int getGameWidth() {
        return gameWidth;
    }

    public static int getGameHeight() {
        return gameHeight;
    }

    public static boolean isIsInGame() {
        return isInGame;
    }

    public static void setIsInGame(boolean isInGame) {
        isInGame = isInGame;
    }

    @Override
    public void keyTyped(KeyEvent e) {
        if (ws != null) {
            if (e != null) {
                gameStart();
            }
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
            
    }

    @Override
    public void keyReleased(KeyEvent e) {
            
    }

    public static void main(String[] args) {
        CitySaver cs = new CitySaver();
    }

        public static String getCurrentState() {
                return currentState;
        }

        public static void setCurrentState(String currentState) {
                CitySaver.currentState = currentState;
        }
}

",1
"

package CitySaver;

public class  Eagle extends Material {
    public Eagle(int x, int y) {        
        super(x, y);        
        setBulletThrough(false);        
        setHeight(50);                
        setWidth(47);                
    }


}",0
"

package CitySaver;

import java.util.Random; 
import java.util.Vector;

public class EnemyTank extends Tank implements Runnable {
    private static Vector<EnemyTank> ets = new Vector<>();

    public EnemyTank(int x, int y, int c, int s) {
        super(x, y, c, s);
    }

    public static Vector<EnemyTank> getEts() {
        return ets;
    }

    public void setEts(Vector<EnemyTank> ets) {
        this.ets = ets;
    }

    // determine if the enemy tank is touching other enemy tanks
    // setting all the numbers to 25 to prevent sudden turn error
    public boolean isTouched() {

        switch (getDirection()) {
            case 0:
                for (int i = 0; i < ets.size(); i++) {
                    EnemyTank et = ets.get(i);
                    if (et!= this) {
                        if (getX() + 25 > et.getX() - 25 && getX() - 25 < et.getX() + 25
                                && getY() - 25 - getSpeed() < et.getY() + 25
                                && getY() + 25 > et.getY() - 25) return true;
                    }
                }
                break;
            case 1:
                for (int i = 0; i < ets.size(); i++) {
                    EnemyTank et = ets.get(i);
                    if (et!= this) {
                        if (getX() + 25 > et.getX() - 25 && getX() - 25 < et.getX() + 25
                                && getY() + 25 + getSpeed() > et.getY() - 25
                                && getY() - 25 < et.getY() + 25) return true;
                    }
                }
                break;
            case 2:
                for (int i = 0; i < ets.size(); i++) {
                    EnemyTank et = ets.get(i);
                    if (et!= this) {
                        if (getX() - 25 - getSpeed() < et.getX() + 25
                                && getX() + 25 > et.getX() - 25
                                && getY() - 25 < et.getY() + 25
                                && getY() + 25 > et.getY() - 25) return true;
                    }
                }
                break;
            case 3:
                for (int i = 0; i < ets.size(); i++) {
                    EnemyTank et = ets.get(i);
                    if (et!= this) {
                        if (getX() - 25 < et.getX() + 25
                                && getX() + 25 + getSpeed() > et.getX() - 25
                                && getY() - 25 < et.getY() + 25
                                && getY() + 25 > et.getY() - 25) return true;
                    }
                }
                break;
        }

        return false;
    }


    @Override
    public void run() {

        while (isAlive()) {
            Random rand = new Random();

            setDirection(rand.nextInt(4));

            for (int i = 0; i < rand.nextInt(1500) + 10; i++) {

                switch (getDirection()) {
                    case 0:
                        if (!isTouched()) {
                            if (getY() - getSpeed() - 25 <= 0) {
                                setDirection(1);
                                moveAhead();
                            }
                            moveAhead();
                        }
                        break;
                    case 1:
                        if (!isTouched()) {
                            if (getY() + getSpeed() + 25 > CitySaver.getGameHeight()) {
                                setDirection(0);
                                moveAhead();
                            }
                            moveAhead();

                        }
                        break;
                    case 2:
                        if (!isTouched()) {
                            if (getX() - getSpeed() - 23 < 0) {
                                setDirection(3);
                                moveAhead();
                            }
                            moveAhead();

                        }
                        break;
                    case 3:
                        if (!isTouched()) {
                            if (getX() - getSpeed() + 23 > CitySaver.getGameWidth()) {
                                setDirection(2);
                                moveAhead();
                            }
                            moveAhead();
                        }
                        break;
                }
                try {
                    Thread.sleep(rand.nextInt(50));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                Thread.sleep(20);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!isAlive()) break;
        }
    }
}",0
"package CitySaver;

public class Explosion {
    private int x, y;
    private int timer = 9;
    private boolean exists = true;

    public Explosion(int x, int y) {
        setX(x);
        setY(y);
    }

    public void countDown() {
        if (timer > 0) {
            timer--;
        } else {
            this.exists = false;
        }
    }

    public int getTimer() {
        return timer;
    }

    public boolean isExists() {
        return exists;
    }

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }
}",0
"package citySaver;

import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import state.State;
import input.KeyManager;
import state.GameState;
import state.MenuState;

public class Game implements Runnable{

	private Window display; 
	public int height , width ;
	public String title ;
	private Thread thread ; 
	boolean Running = false ; 
	
	private BufferStrategy bs ;
	private Graphics g ; 
	
	private BufferedImage testimage ; 
	
	
	//States
	private State gameState ; 
	private State menuState ;
	
	//Input
	private KeyManager keymanager;
	
	public Game(String title , int width , int height) {
		this.height = height; 
		this.width = width ; 
		this.title = title ; 
		keymanager  = new KeyManager();
	}
	
	private void init () {
		display = new Window(title,width ,height) ;

		display .getFrame().addKeyListener(keymanager);
		Assets.init();
		gameState = new GameState(this);
		menuState = new MenuState(this);
		State.setState(gameState);
	}
//	int x = 0 ;
	
	private void update() {
//		x +=1 ;
		keymanager.update();
		
		if(State.getState() !=null) {
			State.getState().update();
		}
	}
	
	private void render() {
		bs = display.getCanvas().getBufferStrategy();
		if(bs == null) {
			display.getCanvas().createBufferStrategy(3);
			return; 
		} 
		g=bs.getDrawGraphics();
		//clear Screen 
		g.clearRect(0, 0, width, height);	
		
		//Draw here 
					//		g.setColor(Color.black);	
			 		//		g.fillRect(0, 0, 50, height);	
		
//		g.drawImage(sheet.crop(0, 0, 32, 32), 20, 20, null);	
//		g.drawImage(Assets.player, x, 0, null);		
		
		if(State.getState() !=null) {
			State.getState().render(g);
		}
		
		//End Drawing 
		bs.show(); 
		g.dispose();
	}
	
	@Override
	public void run() { 
		init();
		
		int fps = 60 ; 
		double timePerTick = 1_000_000_000/fps;
		double delta = 0 ;
		long  now  ;
		long lastTime = System.nanoTime();

		long timer = 0 ;
		int ticks = 0 ;
		
		while(Running) {	
			now  = System.nanoTime();	
			delta +=(now - lastTime) /timePerTick;	
			
			timer += now -lastTime ; 
			lastTime = now ;	
			if(delta >= 1) {
				update();
				render();
				ticks++;
				delta--;
			}
			
			if(timer >= 1_000_000_000) {
				System.out.println(""Ticks and Frames :""+ticks);
				ticks = 0;
				timer = 0 ;
			}
			 
		}
		stop(); 
	}
	
	public synchronized void start() {
		if(Running) {
			return ; 
		}
		Running = true ;
		thread = new Thread (this);
		thread.start(); 
	}
	
	public synchronized void stop() {
		if(!Running) {
			return ;
		}
		Running = false ;
		
		try {
			thread.join();
		} catch (InterruptedException e) { 
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public KeyManager getKeymanager() {
		return keymanager ;
	}
	
}",1
"

package CitySaver;

import javax.swing.*;


import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;

public class GamePanel extends JLayeredPane implements KeyListener, Runnable {

    private static Hero hero = null;
    private Vector<EnemyTank> ets = new Vector<>();
    private Vector<Explosion> explosions = new Vector<>();
    private static Vector<Material> mat = new Vector<>();
    private Set<Integer> pressed = new HashSet<>();
    private Vector<Node> nodes = new Vector<>();
    private static boolean gameOver = false;
    private static boolean MissionCompleted = false ;
    private String startSound = ""Sound/start.wav"";
    private String fireSound = ""Sound/fire.wav"";
    private String explosionSound = ""Sound/Explosion.wav"";
    private Audio audio;
    private static boolean loadGame = false;	
    private Material eagle;		

 
    public GamePanel() {

        // Play BGM
        audio = new Audio(startSound);				
        audio.play();
      
            hero = new Hero(425, 550, 0, 5);

            GameRecorder.reset();
             
            setGameOver(false);
            setMissionCompleted(false);
            // Initialize NPC
            initializeNPC();
            
            
            // Draw map
            initializeMap1();
            initializeMap2();


        this.setBounds(0, 0, CitySaver.getGameWidth(), CitySaver.getGameHeight());
    }

    @Override 
    public void paint(Graphics g) {  
        super.paint(g);  

        // game canvas
        g.setColor(Color.BLACK);  
        g.fillRect(0, 0, CitySaver.getGameWidth(), CitySaver.getGameHeight());  
        
        g.setColor(new Color(77, 77, 77));
        g.fillRect(CitySaver.getGameWidth(), 0, CitySaver.getGameWidth()+250, CitySaver.getGameHeight());  
        
        // show game status  
        showInfo(g);  

 //        Draw material(map)
        for (Material m: mat) {
            this.drawMaterial(g, m);
        }
        
       


        // draw hero
        if (hero != null) {
            if (hero.isAlive()) {
            	drawTank(hero.getX(), hero.getY(), g, hero.getDirection(), hero.getType());
           }
            else {
                hero = null;
            }
        } else if (GameRecorder.getMyLife() > 0) {
            hero = new Hero(50, 700, 0, 5)	;
            GameRecorder.setMyLife(GameRecorder.getMyLife() - 1)	;
        } else {
            ets.removeAllElements();
            CitySaver.setIsInGame(false);
            setGameOver(true);			
        }
        
//        if(GameRecorder.getMyLife() < 0 || Eagle.isBulletThrough()) {
//        	 ets.removeAllElements();
//             CitySaver.setIsInGame(false);
//             setGameOver(true);
//        }

        
        //mision completed
        if(GameRecorder.getNumDeadNPC() == 6) {	
        	ets.removeAllElements();
        	setMissionCompleted(true);
        	CitySaver.setIsInGame(false);
        }

        // draw enemies
        for (EnemyTank el: ets) {
            this.drawTank(el.getX(), el.getY(), g, el.getDirection(), el.getType());
        }
 
        // explosion
        explode(g);

        // Game Over
        if (isGameOver()) {
            g.setFont(new Font(""BLACK"", Font.BOLD, 90));
            g.setColor(Color.white);
            g.drawString(""Game Over"", 183, 303);
            g.setColor(Color.red);
            g.drawString(""Game Over"", 180, 300);	

            for (EnemyTank el: getEts()) {			
                el = null;			
            }			

            CitySaver.setIsInGame(false);	
        }
        
        if(isMissionCompleted()) {
        	g.setFont(new Font (""BLACK"" , Font.BOLD , 90));
        	g.setColor(Color.WHITE);		
        	g.drawString(""Mission"",253,303);		
        	g.drawString(""Completed"",163,403);		
        	g.setColor(new Color(170, 0,0));		
        	g.drawString(""Mission"",250,300);		
        		
        	g.drawString(""Completed"",160,400);			
        	for(EnemyTank el : getEts()) {   		
        		el = null ;
        	}
        }
    }

    // =========== Draw map for Stage 1 ==============
    private void initializeMap1() {
        Material brick;
       for (int i = 0; i < 6; i++) {

            //vertical brick	
            //S
            brick = new Brick(200, i * 30 + 200);
            mat.add(brick);
            brick = new Brick(350, i * 30 + 410);
            mat.add(brick);
            
            
            //E
            brick = new Brick(450, i * 30 + 200);
            mat.add(brick);
            brick = new Brick(450, i * 30 + 410);
            mat.add(brick);
            

            //horizontal Brick
            //S
            brick = new Brick(i*30+200, 200);	
            mat.add(brick);
            brick = new Brick(i*30+200, 380);	
            mat.add(brick);
            brick = new Brick(i*30+200, 560);	
            mat.add(brick);
            //E
            brick = new Brick(i*30+450, 200);	
            mat.add(brick);
            brick = new Brick(i*30+450, 380);	
            mat.add(brick);
            brick = new Brick(i*30+450, 560);	
            mat.add(brick);
        }
        

        //============ Base Wall ============
        for (int i = 0; i < 4; i++) {
            brick = new Brick(i * 30 +365,  655);
            mat.add(brick);
        }

        for (int i = 0; i < 2; i++) {
            brick = new Brick(365,  685 + i * 30);  
            mat.add(brick);

            brick = new Brick(455,  685 + i * 30);	
            mat.add(brick);
        }
    }

    private void initializeMap2() {


        eagle = new Eagle(402, 750);
        mat.add(eagle);

    }

    public void drawMaterial(Graphics g, Material m) {
        g.setColor(m.getColor());
        String type = m.getClass().getSimpleName();
        switch (type) {
            case ""Water"" :
                g.fillRect(m.getX(), m.getY(), m.getWidth(), m.getHeight());
                break;
            case ""Brick"" :
                g.fill3DRect(m.getX(), m.getY(), m.getWidth(), m.getHeight(), true);
                break;
            case ""Eagle"" :	
                this.drawEagle(CitySaver.getGameWidth() / 2, CitySaver.getGameHeight() - 80, g);		
                break;		
        }
    }	

    public void initializeNPC() {	
        EnemyTank et = null;	
        // =========== new enemies and their threads ============
        for (int i = 0; i < 6; i++) {		
            if (i < 3) {
                et = new EnemyTank((i + 1) *85, 70, 1, 2);		
            } else {
                et = new EnemyTank(400 + i * 85, 70, 1, 2);	    
            }
            ets.add(et);
            et.setEts(ets);
            et.fire();
            Thread thread = new Thread(et); 	
            thread.start();

        }
    }

    private void showInfo(Graphics g) {
        // =========status Bar ==========
        this.drawTank(900, 120, g, 0, 1);
        this.drawTank(900, 190, g, 0, 0);
        this.drawTank(900, 350, g, 0, 1);
        this.drawTank(900, 540, g, 0, 1);
       // this.setBackground(Color.BLACK); 

        g.setColor(Color.BLACK);
        g.setFont(new Font(""BLACK"", Font.PLAIN, 30));
        g.drawString("" X "" + GameRecorder.getTotalNPC() + """", 940, 130);
        g.drawString("" X "" + GameRecorder.getMyLife() + """", 940, 200);
        g.drawString("" X "" + GameRecorder.getNumDeadNPC() + """", 940, 360);
        g.drawString("" X "" + GameRecorder.getRecord() + """", 940, 550);
        

        g.setColor(new Color(170, 0,0));
        g.setFont(new Font(""BLACK"", Font.BOLD, 40));
        g.drawString(""Score:"", 860, 290);
        g.drawString(""Status:"", 860, 60);
        g.drawString(""Highest"", 860, 450);
        g.drawString(""Score:"", 860, 490);
    }

    // ============= Determine if the bullet hits a tank ==============
    public void hitTank(Bullet b, Tank t) {
        switch(t.getDirection()) {
            case 0:
            case 1:
                if (b.getX() > t.getX() -23 && b.getX() < t.getX() + 23
                        && b.getY() > t.getY() - 25 && b.getY() < t.getY() + 25) {

                    b.setAlive(false);
                    makeExplosion(t);
                }
                break;
            case 2:
            case 3:
                if (b.getX() > t.getX() - 25 && b.getX() < t.getX() + 25
                        && b.getY() > t.getY() - 23 && b.getY() < t.getY() + 23) {
                    b.setAlive(false);		
                    makeExplosion(t);		
                }
                break;
        }
    }

    // ===========Hit materials ===============
    public void hitMaterial(Bullet b, Material m) {
        if (!m.isBulletThrough() && b.getX() + 1 >= m.getX() && b.getX() - 1 <= m.getX() + m.getWidth()  
                && b.getY() + 1 >= m.getY()   
                && b.getY() - 1 <= m.getY() + m.getHeight()) {  
            b.setAlive(false); 
            m.setAlive(false); 
        }
    }


    // ============Explosion happens after one tank dies =========
    private void makeExplosion(Tank t) {
        t.setAlive(false);

        Explosion exp = new Explosion(t.getX() - 26, t.getY() - 28);
        explosions.add(exp);
    }

    //===========explosion effect ===========
    private void explode(Graphics g) {
        for (int i = explosions.size() - 1; i >= 0; i--) {
            Explosion el = explosions.get(i);
            if (el.getTimer() > 6) {
                g.setColor(new Color(255, 128, 0));
                g.fillOval(el.getX(), el.getY(), 55, 55);
                try {
                    Thread.sleep(90);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else if (el.getTimer() > 3) {
                g.setColor(new Color(255, 218, 28));
                g.fillOval(el.getX() + 8, el.getY() + 8, 40, 40);
                try {
                    Thread.sleep(90);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else {
                g.setColor(new Color(255, 254, 208));
                g.fillOval(el.getX() + 15, el.getY() + 13, 20, 20);
                try {
                    Thread.sleep(90);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            audio = new Audio(explosionSound);
            audio.play();		
            el.countDown();		
            if (el.getTimer() == 0) {		
                explosions.remove(el);		
            }
        }
    }
    //==========draw Eagle==========
    public void drawEagle(int x, int y, Graphics g) {
    	
    	g.setColor(new Color(204, 51, 0));		
		int arr1[] = {x-10 , x , x+10 , x};
		int arr2[] = {y-15 , y-5 , y-15 , y+7   } ;
		
		g.fillPolygon(arr1,arr2,4);			
		//Right
		g.drawLine(x+10,y-7,x+25,y-20);
		g.drawLine(x+10,y-6,x+25,y-20);

		g.drawLine(x+7,y,x+20,y-10);

		g.drawLine(x+7,y+1,x+20,y-10);
 
		
		//left
		g.drawLine(x-10,y-7,x-23,y-20);
		g.drawLine(x-10,y-6,x-23,y-20);
		g.drawLine(x-7,y,x-20,y-10);
		g.drawLine(x-7,y+1,x-20,y-10);
		
		//lower
		g.drawLine(x,y+10,x-15,y);
		g.drawLine(x,y+11,x-15,y);
		g.drawLine(x,y+12,x-15,y);
		g.drawLine(x,y+13,x-15,y);
		g.drawLine(x,y+14,x-15,y);

		g.drawLine(x,y+10,x+15,y);
		g.drawLine(x,y+11,x+15,y);
		g.drawLine(x,y+12,x+15,y);
		g.drawLine(x,y+13,x+15,y);
		g.drawLine(x,y+14,x+15,y);
		
		

    }

    // ========== generic way to draw tanks ============
    private void drawTank(int x, int y, Graphics g, int direction, int type) {
        // 0 as hero and 1 as enemy
        switch (type) {
            case 0:
                g.setColor(Color.GREEN);
                break;
            case 1:
                g.setColor(new Color(128, 128, 255));
                break;
            case 2:
                g.setColor(Color.lightGray);
                break;
        }

        //================== draw Hero in 4 directions ===============
        if(type==0) {
	        switch (direction) {
	            case 0:
	                g.fill3DRect(x - 23, y - 25, 10, 50, false);
	                g.fill3DRect(x + 14, y - 25, 10, 50,false);
	                g.fill3DRect(x - 13, y - 15, 27, 30, false);
	
	                
	                g.fillRect(x -1, y - 25, 3, 15 );
	                for (int i = 1; i < 5; i ++) g.drawLine(x - 23, y -25 + 10 * i, x - 14, y -25 + 10 * i);
	                for (int i = 1; i < 5; i ++) g.drawLine(x + 14, y -25 + 10 * i, x + 23, y -25 + 10 * i);
	                g.setColor(Color.RED);
	                g.fillOval(x - 9, y - 10, 18, 18);
	                break;
	            case 1:
	                g.fill3DRect(x - 23, y - 25, 10, 50, false);	
	                g.fill3DRect(x + 14, y - 25, 10, 50,false);
	                g.fill3DRect(x - 13, y - 15, 27, 30, false);	
	                
	                g.fillRect(x -1, y + 10, 3, 15 );
	                for (int i = 1; i < 5; i ++) g.drawLine(x - 23, y -25 + 10 * i, x - 14, y -25 + 10 * i);
	                for (int i = 1; i < 5; i ++) g.drawLine(x + 14, y -25 + 10 * i, x + 23, y -25 + 10 * i);
	                g.setColor(Color.RED);
	                g.fillOval(x - 9, y - 9, 18, 18);
	                break;
	            case 2:
	                g.fill3DRect(x - 25, y - 23, 50, 10, false);    
	                g.fill3DRect(x -25 , y + 14, 50, 10,false);
	                g.fill3DRect(x - 15, y - 13, 30, 27, false);   
	              
	                g.fillRect(x - 25, y - 1, 15, 3 );
	                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y -23, x -25 + 10 * i, y - 14);
	                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y + 14, x -25 + 10 * i, y + 23);
	                g.setColor(Color.RED);
	                g.fillOval(x - 10, y - 9, 18, 18);
	                break;
	            case 3:
	                g.fill3DRect(x - 25, y - 23, 50, 10, false);
	                g.fill3DRect(x - 25, y + 14, 50, 10,false);
	                g.fill3DRect(x - 15, y - 13, 30, 27, false);
	               
	                g.fillRect(x + 10, y - 1, 15, 3 );
	                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y -23, x -25 + 10 * i, y - 14);
	                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y + 14, x -25 + 10 * i, y + 23);
	                g.setColor(Color.RED);
	                g.fillOval(x - 9, y - 9, 18, 18);
	                break;
	        }
        }else { //Draw Enemy Tanks in 4 Directions
        	switch (direction) {
            case 0:
                g.fill3DRect(x - 23, y - 25, 10, 50, false);
                g.fill3DRect(x + 14, y - 25, 10, 50,false);
                g.fill3DRect(x - 13, y - 15, 27, 30, false);

                
                g.fillRect(x -1, y - 25, 3, 15 );
                for (int i = 1; i < 5; i ++) g.drawLine(x - 23, y -25 + 10 * i, x - 14, y -25 + 10 * i);
                for (int i = 1; i < 5; i ++) g.drawLine(x + 14, y -25 + 10 * i, x + 23, y -25 + 10 * i);
               
                g.fillOval(x - 9, y - 10, 18, 18);
                break;
            case 1:
                g.fill3DRect(x - 23, y - 25, 10, 50, false);	
                g.fill3DRect(x + 14, y - 25, 10, 50,false);
                g.fill3DRect(x - 13, y - 15, 27, 30, false);	
                g.fillOval(x - 9, y - 9, 18, 18);
                g.fillRect(x -1, y + 10, 3, 15 );
                for (int i = 1; i < 5; i ++) g.drawLine(x - 23, y -25 + 10 * i, x - 14, y -25 + 10 * i);
                for (int i = 1; i < 5; i ++) g.drawLine(x + 14, y -25 + 10 * i, x + 23, y -25 + 10 * i);

                break;
            case 2:
                g.fill3DRect(x - 25, y - 23, 50, 10, false);    
                g.fill3DRect(x -25 , y + 14, 50, 10,false);
                g.fill3DRect(x - 15, y - 13, 30, 27, false);   
                g.fillOval(x - 10, y - 9, 18, 18);
                g.fillRect(x - 25, y - 1, 15, 3 );
                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y -23, x -25 + 10 * i, y - 14);
                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y + 14, x -25 + 10 * i, y + 23);

                break;
            case 3:
                g.fill3DRect(x - 25, y - 23, 50, 10, false);
                g.fill3DRect(x - 25, y + 14, 50, 10,false);
                g.fill3DRect(x - 15, y - 13, 30, 27, false);
                g.fillOval(x - 9, y - 9, 18, 18);
                g.fillRect(x + 10, y - 1, 15, 3 );
                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y -23, x -25 + 10 * i, y - 14);
                for (int i = 1; i < 5; i ++) g.drawLine(x -25 + 10 * i, y + 14, x -25 + 10 * i, y + 23);

                break;
        }
        
        }
        

        //============== hero fires ==================
        if (hero != null && hero.getBullet() != null && hero.getBullet().isAlive()) {
            g.setColor(Color.WHITE);

            for (Bullet el: hero.getBv()) {
                g.fill3DRect(el.getX() - 1, el.getY() - 1, 3, 3, true);	
            }
        }	
        
        

        //=============== enemy fires =================
        for (EnemyTank el: ets) {
            if (el.getBullet() != null && el.getBullet().isAlive()) {
                g.setColor(Color.WHITE);

                for (EnemyTank el1: ets) {
                    for (Bullet el2: el.getBv()) {
                        g.fill3DRect(el2.getX() - 1, el2.getY() - 1, 3, 3, true);
                    }
                }
            }
        }
    }

  

    public static Hero getHero() {
        return hero;
    }

    public static void setHero(Hero h) {
        hero = h;
    }

    public Vector<EnemyTank> getEts() {
        return ets;
    }

    public void setEts(Vector<EnemyTank> ets) {
        this.ets = ets;
    }

    public Vector<Node> getNodes() {
        return nodes;
    }

    public void setNodes(Vector<Node> nodes) {
        this.nodes = nodes;
    }

    public boolean isGameOver() {
        return gameOver;
    }

    public void setGameOver(boolean go) {
        gameOver = go;
    }

    public static boolean isLoadGame() {
        return loadGame;
    }

    public static void setLoadGame(boolean loadGame) {
        GamePanel.loadGame = loadGame;
    }

    public static Vector<Material> getMat() {
        return mat;  
    }

    @Override 
    public void keyTyped(KeyEvent e) {

    }

    //================= hero control
    @Override
    public void keyPressed(KeyEvent e) {
        pressed.add(e.getKeyCode());

        if (hero != null) {
            //=============== control directions ===============
            if (pressed.contains(KeyEvent.VK_DOWN)) {
                hero.setDirection(1);
                hero.moveDown();
            }
            if (pressed.contains(KeyEvent.VK_LEFT)) {
                    hero.setDirection(2);
                    hero.moveLeft();
            }
            if (pressed.contains(KeyEvent.VK_RIGHT)) {
                    hero.setDirection(3);
                    hero.moveRight();
            }
            if (pressed.contains(KeyEvent.VK_UP)) {
                    hero.setDirection(0);
                    hero.moveUp();
            }

            //============ control shot =========
            if (pressed.contains(KeyEvent.VK_SPACE)) {
                hero.fire();
                audio = new Audio(fireSound);
                audio.play();
            }

        }
        repaint();
    }

    @Override
    public void keyReleased(KeyEvent e) {
        pressed.remove(e.getKeyCode());
    }

    @Override
    public void run() {

    	setGameOver(false);
    	setMissionCompleted(false);
        while (true) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }


            //=============== judge if there's any tanks hit ==================
            for (EnemyTank el: ets) {
                if (hero != null) {
                    for (Bullet b : hero.getBv()) hitTank(b, el);
                    for (Bullet el1 : el.getBv()) hitTank(el1, hero);
                }
            }

            //================ judge if there's any materials get hit =================
            for (Material m: mat) { 
                if (hero != null) {
                    for (Bullet b : hero.getBv()) hitMaterial(b, m);	
                    for (EnemyTank e: ets) {
                        for (Bullet b: e.getBv()) hitMaterial(b, m);	
                    }
                }
            }

            // =============remove dead enemy tanks=================
            for (int i = ets.size() - 1; i >= 0; i--) {
                if (!ets.get(i).isAlive()) {
                    ets.remove(i);
                    // \====Total NPC number decreases as one NPC dies====
                    GameRecorder.setTotalNPC(GameRecorder.getTotalNPC() - 1);
                    GameRecorder.setNumDeadNPC(GameRecorder.getNumDeadNPC() + 1);
                }
            }

            //==============remove dead material=================
            for (int i = mat.size() - 1; i >= 0; i--) {
                if (!mat.get(i).isAlive()) {
                    mat.remove(i);
                }
            }

            // ==============remove hero dead bullets==============
            if (hero != null) {
                if (hero.isTouched()) {
                    makeExplosion(hero);
                }
                for (int i = hero.getBv().size() - 1; i >= 0; i--) {
                    if (!hero.getBv().get(i).isAlive()) hero.removeBullet(i);
                }
            }

            //==============remove enemy dead bullets and fire===============
            for (int j = ets.size() - 1; j >= 0; j--) {
                for (int i = ets.get(j).getBv().size() - 1; i >= 0; i--) {
                    if (!ets.get(j).getBv().get(i).isAlive()) {
                        ets.get(j).removeBullet(i);
                        ets.get(j).fire();
                    }
                }
            }

            //==============See if the commander is still alive==============
            if (!eagle.isAlive()) {
                ets.removeAllElements();
                CitySaver.setIsInGame(false);
                setGameOver(true);
            }

            repaint();
        }
    }

	public static boolean isMissionCompleted() {
		return MissionCompleted;
	}

	public static void setMissionCompleted(boolean missionCompleted) {
		MissionCompleted = missionCompleted;
	}
    


}",1
"

package CitySaver;

import java.io.*;
import java.util.Arrays;
import java.util.Vector;

public class GameRecorder {

    private static File recorder = new File(""Saves/record.sav"");
    private static File game = new File(""Saves/game.sav"");
//    private static int numNPC = 6;
    private static int numDeadNPC = 0 ;
    private static int totalNPC = 6 ;
    private static int myLife = 1 ;
    private static int record = 0;
    private static Vector<EnemyTank> ets = new Vector<>();
    private static Vector<Node> nodes = new Vector<>();

    public static void reset() {
//        setNumNPC(5);
        setNumDeadNPC(0);			
        setTotalNPC(6);				
        setMyLife(1);		
       // GamePanel.setGameOver(false);
        
    }



    // Save the highest record to file
    public static void saveRecord() {
        FileWriter fw = null;
        BufferedWriter bw = null;

        try {
            fw = new FileWriter(recorder);
            bw = new BufferedWriter(fw);

            bw.write(getRecord() + """");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                bw.close();
                fw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    // Load the record from file
    public static void loadRecord() {
        FileReader fr = null;
        BufferedReader br = null;

        try {
            fr = new FileReader(recorder);
            br = new BufferedReader(fr);
            String temp = """";

            if ((temp = br.readLine()) != null) {
                setRecord(Integer.valueOf(temp));
            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                fr.close();
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static int getRecord() {
        if (getNumDeadNPC() > record) {
            record = getNumDeadNPC();
            setRecord(record);
        }

        return record;
    }

    public static void setRecord(int record) {
        GameRecorder.record = record;
    }

//    public static int getNumNPC() {
//        return numNPC;
//    }
//
//    public static void setNumNPC(int numNPC) {
//        GameRecorder.numNPC = numNPC;
//    }

    public static int getNumDeadNPC() {
        return numDeadNPC;
    }

    public static void setNumDeadNPC(int numDeadNPC) {
        GameRecorder.numDeadNPC = numDeadNPC;
    }

    public static int getTotalNPC() {
        return totalNPC;
    }

    public static void setTotalNPC(int totalNPC) {
        GameRecorder.totalNPC = totalNPC;
    }

    public static int getMyLife() {
        return myLife;
    }

    public static void setMyLife(int myLife) {
        GameRecorder.myLife = myLife;
    }

    public static Vector<EnemyTank> getEts() {
        return ets;
    }

    public static void setEts(Vector<EnemyTank> e) {
        ets = e;
    }

    public static Vector<Node> getNodes() {
        return nodes;
    }
}

class Node {
    int x;
    int y;
    int direction;
    int speed;
    int type;

    public Node(int type, int x, int y, int direction, int speed) {
        this.type = type;
        this.x = x;
        this.y = y;
        this.direction = direction;
        this.speed = speed;
    }

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }

    public int getDirection() {
        return direction;
    }

    public void setDirection(int direction) {
        this.direction = direction;
    }

    public int getSpeed() {
        return speed;
    }

    public void setSpeed(int speed) {
        this.speed = speed;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }
}",0
"

package CitySaver;

public class Hero extends Tank {


    public Hero(int x, int y, int c, int s) {
        super(x, y, c, s);
    }

    public boolean isTouched() {

        switch (getDirection()) {
            case 0:
            case 1:
                // get all the enemy tanks
                for (int i = 0; i < EnemyTank.getEts().size(); i++) {
                    EnemyTank et = EnemyTank.getEts().get(i);
                    if (getX() >= et.getX() && getX() -25 <= et.getX() + 25
                            && getY() - 25<= et.getY() + 25
                            && getY() + 25>= et.getY() - 25 ) return true;
                    if (getX() + 25 >= et.getX() -25 && getX() <= et.getX()
                            && getY() - 25<= et.getY() + 25
                            && getY() + 25>= et.getY() - 25 ) return true;
                } 
                break;
            case 2:
            case 3:
                // get all the enemy tanks
                for (int i = 0; i < EnemyTank.getEts().size(); i++) {
                    EnemyTank et = EnemyTank.getEts().get(i);
                    if (getX() - 25 <= et.getX() + 25
                            && getX() + 25 >= et.getX() - 25
                            && getY() - 25 <= et.getY() + 25
                            && getY() + 25 >= et.getY() - 25 ) return true;
                    if (getX() + 25 >= et.getX()
                            && getX() <= et.getX()
                            && getY() - 25 <= et.getY() + 25
                            && getY() + 25 >= et.getY() - 25 ) return true;
                }
                break;
        }

        return false;
    }
}",0
"public class Launcher {
	public static void main(String[]args) {
		 Game g = new Game(""Title!"" , 500 , 500 );
		 g.start();
	}  
}",0
"package CitySaver;

import javax.swing.*;
import java.awt.*;

public class Stage extends JPanel implements Runnable{

    int timer = 0;

    public void paint (Graphics g) {
        super.paint(g);


        g.setColor(Color.darkGray);
        g.fillRect(0, 0, CitySaver.getGameWidth() + 250, CitySaver.getGameHeight());



        // flash the string every other second
        if (timer % 3 != 0) {
            g.setColor(Color.yellow);
            g.setFont(new Font(""BLACK"", Font.BOLD, 70));	
            g.drawString(""Stage: 1"", 350, 310);	
        }
    }

    @Override
    public void run() {
        while (true) {

            // a timer to make the string flash
            try {
                Thread.sleep(500);
                // prevent overflow of the timer
                if (timer == 10000) timer = 0;
                timer++;

            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            this.repaint();
        }
    }
}",0
"

package CitySaver ;

import java.util.Vector;

public class Tank {
    private int x = 0;
    private int y = 0;
    private int direction = 0;
    private int speed = 10;
    private int type = 0;
    private Bullet bullet = null;
    private Vector<Bullet> bv = new Vector<>();
    private boolean isAlive = true;

    public Tank (int x, int y, int type, int speed) {
        setX(x);
        setY(y);
        setType(type);
        setSpeed(speed);
    }

    public boolean touchMaterial() {
        Material m = null;

        switch (getDirection()) {
            case 0:
                for (int i = 0; i < GamePanel.getMat().size(); i++) {
                    m = GamePanel.getMat().get(i);
                    if (getX() - 25 < m.getX() + m.getWidth() && getX() + 25 > m.getX()
                            && getY() - 25 - getSpeed() < m.getY() + m.getHeight()
                            && getY() + 25 > m.getY()) return true;
                }
                break;
            case 1:
                for (int i = 0; i < GamePanel.getMat().size(); i++) {
                    m = GamePanel.getMat().get(i);
                    if (getX() - 25  < m.getX() + m.getWidth() && getX() + 25 > m.getX()
                            && getY() + 25 + getSpeed() > m.getY()
                            && getY() - 25 < m.getY() + m.getHeight()
                            ) return true;
                }
                break;
            case 2:
                for (int i = 0; i < GamePanel.getMat().size(); i++) {
                    m = GamePanel.getMat().get(i);
                    if (getY() - 25 < m.getY() + m.getHeight() && getY() + 25 > m.getY()
                            && getX() - 25 - getSpeed() < m.getX() + m.getWidth()
                            && getX() + 25 > m.getX()) return true;
                }
                break;
            case 3:
                for (int i = 0; i < GamePanel.getMat().size(); i++) {
                    m = GamePanel.getMat().get(i);
                    if (getY() - 25 < m.getY() + m.getHeight() && getY() + 25 > m.getY()
                            && getX() + 25 + getSpeed() > m.getX()
                            && getX() - 25 < m.getX() + m.getWidth()
                            ) return true;
                }
                break;
        }

        return false;
    }

    public void fire() {
        Thread t = null;

        for (int i = bv.size() - 1; i >= 0; i--) {
            if (!bv.get(i).isAlive()) bv.remove(i);
        }

        if (bv.size() < 5) {
            // determine the direction
            switch (getDirection()) {
                case 0:
                    bullet = new Bullet(getX(), getY() - 26, 0, 13);
                    break;
                case 1:
                    bullet = new Bullet(getX(), getY() + 26, 1, 13);
                    break;
                case 2:
                    bullet = new Bullet(getX() - 26, getY(), 2, 13);
                    break;
                case 3:
                    bullet = new Bullet(getX() + 26, getY(), 3, 13);
                    break;
            }

            bv.add(bullet);
        }
        // no more than 5 bullets each time

        t = new Thread(bullet);
        t.start();
    }

    public void moveUp() {
        // Limit the tanks inside the game screen
        if (getY() - 25 - getSpeed() >= 0 && !touchMaterial()) setY(getY() - getSpeed());
    }

    public void moveDown() {
        if (getY() + 75 + getSpeed() <= CitySaver.getGameHeight() && !touchMaterial()) setY(getY() + getSpeed());
    }

    public void moveLeft() {
        if (getX() - 23 - getSpeed() >= 0 && !touchMaterial()) setX(getX() - getSpeed());
    }

    public void moveRight() {
        if (getX() + 23 + getSpeed() <= CitySaver.getGameWidth() && !touchMaterial()) setX(getX() + getSpeed());
    }

    public void moveAhead() {
        switch(getDirection()) {
            case 0:
                moveUp();
                break;
            case 1:
                moveDown();
                break;
            case 2:
                moveLeft();
                break;
            case 3:
                moveRight();
                break;
        }
    }

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }

    public int getSpeed() {
        return speed;
    }

    public void setSpeed(int speed) {
        this.speed = speed;
    }

    public int getDirection() {
        return direction;
    }

    public void setDirection(int direction) {
        this.direction = direction;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public Vector<Bullet> getBv() {
        return bv;
    }

    public Bullet getBullet() {
        return bullet;
    }

    public void setBullet(Bullet bullet) {
        this.bullet = bullet;
    }

    public void removeBullet(int n) {
        bv.remove(n);
    }

    public boolean isAlive() {
        return isAlive;
    }

    public void setAlive(boolean alive) {
        isAlive = alive;
    }
}",0
"package CitySaver;

import java.awt.*;

public class Water extends Material {

    public Water(int x, int y, int w, int h) {
        super(x, y);
        setColor(new Color(17, 204, 255));
        setBulletThrough(true);
        setHeight(h);
        setWidth(w);
    }

//    public static void main(String[] args) {
//        Water w = new Water(0, 0, 0 ,0);
//        System.out.println(w.getClass().getSimpleName());
//    }
}",0
"package CitySaver;

import javax.imageio.ImageIO;
import javax.swing.*;


import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

public class WelcomeScreen extends JLayeredPane {

    static boolean run = true;
    JLabel jl = new JLabel();
    JLabel jl2 = new JLabel();
    JLabel jl1 = new JLabel();
    DrawWelcome dw = new DrawWelcome();

    public WelcomeScreen() {

        this.add(dw, 10);
        dw.setBounds(0, 0, CitySaver.getGameWidth() + 250, CitySaver.getGameHeight());
        dw.setVisible(true);
        dw.setOpaque(true);
        
        jl.setBounds(320, 310, 500, 100);
        jl.setForeground(Color.red);
        jl.setFont(new Font(""BLACK"", Font.ITALIC, 40));					
        jl.setVisible(true);				
        jl.setOpaque(false);					
        jl.setText(""Enter any key to start"");				
        jl.setBackground(Color.white);
        this.setVisible(true);
        this.setOpaque(true);
        this.add(jl, 0);
        

        java.util.Timer t = new Timer();
        t.schedule(new TimerTask() {
            @Override
            public void run() {
                int timer = 0;
                while (run) {
                    if (timer % 3 != 0) {
                        jl.setText(""Enter any key to start"");		
                        
                    } else {
                        jl.setText("""");
                    }
                    repaint();

                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    timer++;
                }
            }
        }, 1000);
    }

    public void stage() {
        jl1.setFont(new Font(""BLACK"", Font.BOLD, 90) );
        jl1.setOpaque(true);
        jl1.setVisible(true);
        jl1.setHorizontalAlignment(SwingConstants.CENTER);
        jl1.setBackground(Color.BLACK);
        jl1.setForeground(Color.yellow);
        jl1.setBounds(0, 0, CitySaver.getGameWidth() + 250, CitySaver.getGameHeight() - 100);
        jl1.setText(""Stage 1"");

        this.setBackground(Color.BLACK);
        this.remove(dw);
        this.remove(jl);
        this.add(jl1, 20);
        this.repaint();			
        this.revalidate();

        java.util.Timer t = new Timer();
        t.schedule(new TimerTask() {
            @Override
            public void run() {
                int counter = 0;

                while (true) {
                    if (counter % 2 == 0) {
                        jl1.setText("""");
                        counter++;
                    } else {
                        jl1.setHorizontalTextPosition(JLabel.CENTER);
                        jl1.setText(""Stage 1"");
                        counter++;
                    }

                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }, 1000);
    }


}

class DrawWelcome extends JLabel {
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        g.setColor(Color.darkGray);
        g.fillRect(0, 0, CitySaver.getGameWidth() + 250, CitySaver.getGameHeight());
        
    	BufferedImage screen = null;
		try {
			screen = ImageIO.read(new File(""World/picture.jpg""));		
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}				
		g.drawImage(screen, 0, 0,CitySaver.getGameWidth()+250,CitySaver.getGameHeight(), null);				
		
         //""City Saver"" and shadow
        g.setColor(Color.lightGray);
        g.setFont(new Font(""BLACK"", Font.BOLD, 90));
        g.drawString(""City Saver"", 304, 284);

        g.setColor(Color.BLACK);
        g.drawString(""City Saver"", 300 , 280);
        
        
    }

       
    
}",0
"package citySaver;

import java.awt.Canvas;
import java.awt.Dimension;

import javax.swing.JFrame;

public class Window {

	private Canvas canvas ;   // Canvas basically allow us to draw 
	private JFrame frame ; 
	private String title ; 
	private int width , height ; 
	
	public Window(String title  , int height , int width ){
		this.title = title ; 
		this.height = height ;   
		this.width  = width ;  
		createDisplay(); 
	}
	 
	private void createDisplay() { 
		
		frame = new JFrame(); 
		frame.setTitle(title); 
		frame.setSize(width , height);
		frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		
		canvas = new Canvas (); 
		canvas.setPreferredSize(new Dimension(width ,height));
		canvas.setMaximumSize(new Dimension(width , height) );
		canvas.setMinimumSize(new Dimension(width,height));
		canvas.setFocusable(false);
		frame.add(canvas); 
		frame.pack();
	 	
		
		 
	}
	
	
	public Canvas getCanvas() {
		return canvas;
	}
	
	public JFrame getFrame() {
		return  frame ;
	}
}",0
"package entity.cretures;

import java.awt.Graphics;

import citySaver.Assets;
import citySaver.Game;



public class Player extends Creatures {
	private Game game ;
	
	public Player(Game game ,float x, float y) {
		super(x, y,Creatures.DEFAULT_CREATURE_WIDTH,Creatures.DEFAULT_CREATURE_HEIGHT);
		this .game = game ;
		// TODO Auto-generated constructor stub
	}

	@Override
	public void update() {
		// TODO Auto-generated method stub
		getInput();
		move();
	}
	public void getInput() {
		xMove = 0 ; 
		yMove = 0 ;
		if(game.getKeymanager().UP)
			yMove = -speed;
		if(game.getKeymanager().DOWN)
			yMove = speed;
		if(game.getKeymanager().LEFT)
			xMove = -speed;	
		if(game.getKeymanager().RIGHT)
			xMove = speed;	
	}

	@Override
	public void render(Graphics g) {
		// TODO Auto-generated method stub
		
		if(game.getKeymanager().UP)
			g.drawImage(Assets.playerU, (int) x ,(int) y,width , height, null);
		if(game.getKeymanager().DOWN)
			g.drawImage(Assets.playerD, (int) x ,(int) y,width , height, null);
		if(game.getKeymanager().LEFT)
			g.drawImage(Assets.playerL, (int) x ,(int) y,width , height, null);
		if(game.getKeymanager().RIGHT)
			g.drawImage(Assets.playerR, (int) x ,(int) y,width , height, null);
		
	}

}",0
"package gfx;

import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;


public class ImageLoader {
	public static BufferedImage loadImage(String path) {
		try {
			return ImageIO.read(ImageLoader.class.getResource(path));
		} catch (IOException e) { 
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		return null;  
	}
}",0
"package input;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class KeyManager implements KeyListener{

	private boolean[] keys ;
	public boolean UP ,DOWN, RIGHT, LEFT ; 
	
	public KeyManager() {
		keys = new boolean[256];
	}
	
	
	public void update() {
		UP = keys[KeyEvent.VK_W ] || keys[KeyEvent.VK_UP];
		DOWN = keys[KeyEvent.VK_S ] || keys[KeyEvent.VK_DOWN];
		LEFT = keys[KeyEvent.VK_A ] || keys[KeyEvent.VK_LEFT];
		RIGHT = keys[KeyEvent.VK_D ] || keys[KeyEvent.VK_RIGHT];
	}
	 
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		keys[e.getKeyCode()] = true ; 
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		keys[e.getKeyCode()] = false ; 
	}

}",0
"package state;

import java.awt.Graphics;

import citySaver.Game;

import entity.cretures.Player;
import tiles.Tile;


public class GameState extends State{

	Player player ;
	public GameState(Game game) {
		super(game);
		player = new Player(game ,100,100);
		// TODO Auto-generated constructor stub
	}

	@Override
	public void update() {
		// TODO Auto-generated method stub
		player.update();
	}

	@Override
	public void render(Graphics g) {
		// TODO Auto-generated method stub
		player.render(g);
		Tile.tiles[0].render(g, 0, 0);
		 
	}

}",0
"package state;

import java.awt.Graphics;

import citySaver.Game;



public class MenuState extends State{

	public MenuState(Game game) {
		super(game);
		// TODO Auto-generated constructor stub
	}

	@Override
	public void update() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void render(Graphics g) {
		// TODO Auto-generated method stub
		
	}

}",0
"package state;

import java.awt.Graphics;

import citySaver.Game;



public abstract class State {
	private static State currentState = null ; 

	protected Game game ;
	public State(Game game) {
		this.game = game ; 
	}
	
	public static void setState(State state) {
		currentState = state ;
	}
	
	public static State getState() {
		return currentState ; 
	}
	
	//CLASS
	public abstract void update();
	public abstract void render(Graphics g);
}",0
"package tiles;

import java.awt.image.BufferedImage;

import citySaver.Assets;



public class BrickWall extends Tile {

	public BrickWall( int id) {
		super(Assets.brickWall, id);
		// TODO Auto-generated constructor stub
	}
	
	@Override
	public boolean isSolid() {
		return true ;
	}

}",0
"package tiles;

import java.awt.image.BufferedImage;

import citySaver.Assets;



public class GrassTile extends Tile{

	public GrassTile( int id) {
		super(Assets.grass, id);
		// TODO Auto-generated constructor stub
	}

}",0
"package tiles;

import java.awt.image.BufferedImage;

import citySaver.Assets;



public class SteelWall extends Tile {

	public SteelWall( int id) {
		super(Assets.steelWall, id);
		// TODO Auto-generated constructor stub
	}

}",0
"package tiles;

import java.awt.Graphics;
import java.awt.image.BufferedImage;

public class Tile {
	//STATIC STUFF HERE
	public static Tile[] tiles = new Tile[256];
	public static Tile grassTile = new GrassTile(0);
	public static Tile Water = new Water(1);
	public static Tile BricksWall = new BrickWall(2);
	public static Tile SteelWall = new SteelWall(3);
	
	
	//CLASS
	public static final int TILEWIDTH = 32, TILEHEIGHT =32;
	
	protected BufferedImage texture ; 
	protected final int id ; 
	public Tile(BufferedImage texture, int id) {
		this.texture = texture ; 
		 this.id  = id ; 
		 tiles[id] =this ; 
	}
	public void update() {
		
	}
	
	public void render(Graphics g , int x , int y) {
		g.drawImage(texture,x , y , TILEWIDTH ,TILEHEIGHT ,null);
	}
	
	public boolean isSolid () {
		return false;
	}
	
	public int getId() {
		return id  ; 
	}
}",0
"package tiles;

import java.awt.image.BufferedImage;

import citySaver.Assets;



public class Water extends Tile{

	public Water( int id) {
		super(Assets.water, id);
		// TODO Auto-generated constructor stub
	}
	

}",0
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.text.DecimalFormat;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


public class AddCoursePresent extends JFrame {
   
    
    
     Container c;
     JLabel namelbl,rolllbl,ct1lbl,ct2lbl,assignlbl,attendencelbl,presentlbl;
     JTextField name,roll,ct1,ct2,assign,attendence,present;
      JButton back,home,add;
     final Font f;
     JFrame frame;
     private static DecimalFormat df2 = new DecimalFormat(""#.##"");
    
  
    AddCoursePresent(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        
        namelbl=new JLabel(""Roll No"");      
        namelbl.setFont(f);
        namelbl.setBounds(140,100,200,50);
        c.add(namelbl);
        
        name=new JTextField();      
        name.setFont(f);
        name.setBounds(500,100,300,40);
        c.add(name);
        
        
        rolllbl=new JLabel(""Semester"");      
        rolllbl.setFont(f);
        rolllbl.setBounds(140,160,200,50);
        c.add(rolllbl);
       
        roll=new JTextField();      
        roll.setFont(f);
        roll.setBounds(500,160,300,40);
        c.add(roll);
        
        ct1lbl=new JLabel(""Session "");      
        ct1lbl.setFont(f);
        ct1lbl.setBounds(140,220,200,50);
        c.add(ct1lbl);
        
        ct1=new JTextField();      
        ct1.setFont(f);
        ct1.setBounds(500,220,300,40);
        c.add(ct1);
        
        ct2lbl=new JLabel(""Course name"");      
        ct2lbl.setFont(f); 
        ct2lbl.setBounds(140,280,200,50);
        c.add(ct2lbl);
        
        ct2=new JTextField();      
        ct2.setFont(f);
        ct2.setBounds(500,280,300,40);
        c.add(ct2);
        
        assignlbl=new JLabel(""Course Code"");      
        assignlbl.setFont(f); 
        assignlbl.setBounds(140,340,350,50);
        c.add(assignlbl);
        
        assign=new JTextField();      
        assign.setFont(f);
        assign.setBounds(500,340,300,40);
        c.add(assign);
        
        attendencelbl=new JLabel(""Class Held"");      
        attendencelbl.setFont(f);
        attendencelbl.setBounds(140,400,350,50);
        c.add(attendencelbl);
        
        attendence=new JTextField();      
        attendence.setFont(f);
        attendence.setBounds(500,400,300,40);
        c.add(attendence);
        
       presentlbl=new JLabel(""Class present"");      
        presentlbl.setFont(f);
        presentlbl.setBounds(140,460,350,50);
        c.add(presentlbl);
        
       present=new JTextField();      
        present.setFont(f);
        present.setBounds(500,460,300,40);
        c.add(present);
        
      
        add=new JButton(""Add"");
        add.setBounds(650,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(650,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
         frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Student Attendence"");
        frame.setVisible(true);
        frame.add(c);
        
        add.addActionListener(new ActionListener(){
        
  
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==add){
                String sroll =name.getText();
                String semister = roll.getText();
                String session = ct1.getText();
                String cname = ct2.getText();
                String ccode =assign.getText();
                String cheld = attendence.getText();
                String cpresent = present.getText();
                
                String file = sroll+semister;
              
                
                 if(sroll.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert roll"");
                }
                 else if(semister.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Semister"");
                }
                 else if(session.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Session"");
                }
                 else if(cname.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Course name"");
                }
                else if(ccode.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Course Code"");
                }
                else if(cheld.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Class held No"");
                }
                 else if(cpresent.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Class Present No"");
                }
                 else{
                     
                     double cheld1 =Double.parseDouble(cheld);
                     double cpresent1 =Double.parseDouble(cpresent);
                     double parcent1 =(cpresent1/cheld1)*100;
                     String parcent = df2.format(parcent1);
                     
                     String parcent2 =new Double(parcent).toString();
                     filewriter(file,cname,ccode,cheld,cpresent,parcent2);
                     JOptionPane.showMessageDialog(null, ""Added Successfully"");
                     name.setText("""");
                     roll.setText("""");
                     ct1.setText("""");
                     ct2.setText("""");
                     assign.setText("""");
                     attendence.setText("""");
                     present.setText("""");
                     
                 }
                  
                           

                }
        }
        private void filewriter(String file, String cname, String ccode, String cheld,String cpresent,String parcent1) {
                try{
                    FileWriter wr = new FileWriter(file,true);
                   // wr.write(sroll+"" ""+""#"");
                    //wr.write(semister+"" ""+""#"");
                    //wr.write(session+"" ""+""#"");
                    wr.write(cname+"" ""+""#"");
                    wr.write(ccode+"" ""+""#"");
                    wr.write(cheld+"" ""+""#"");
                    wr.write(cpresent+"" ""+""#"");
                    wr.write(parcent1+"" ""+""#"");
                    
                    
                    
                       
                    wr.write(System.getProperty(""line.separator""));
                    wr.close();
                }
                catch(Exception ae)
                {
                    System.out.println(ae);
                }
            }
        
        });
        home.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==home)
               {
                  frame.dispose();
                  Home menuFile = new Home();
                  
               }
            }
            
        });
    }
    
  
    
}",1
"
package project;


import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.util.Scanner;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;




public class AddFacultyMember extends JFrame{
    
    private Container c;
    private JLabel namelbl,motherslbl,Fatherslbl,hometownlbl,emaillbl,contactlbl,bloodlbl;
    private JTextField name,mother,father,hometown,email,contact,blood;
    private JButton add,back,home;
    private final Font f;
    
    
  
    AddFacultyMember(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        
        namelbl=new JLabel(""Name                 :"");      
        namelbl.setFont(f);
        namelbl.setBounds(180,100,200,50);
        c.add(namelbl);
        
        name=new JTextField();      
        name.setFont(f);
        name.setBounds(400,100,300,40);
        c.add(name);
        
        
        motherslbl=new JLabel(""Mother's Name  :"");      
        motherslbl.setFont(f);
        motherslbl.setBounds(180,160,200,50);
        c.add(motherslbl);
        
        mother=new JTextField();      
        mother.setFont(f);
        mother.setBounds(400,160,300,40);
        c.add(mother);
        
        Fatherslbl=new JLabel(""Father's Name   :"");      
        Fatherslbl.setFont(f);
        Fatherslbl.setBounds(180,220,200,50);
        c.add(Fatherslbl);
        
        father=new JTextField();      
        father.setFont(f);
        father.setBounds(400,220,300,40);
        c.add(father);
        
        hometownlbl=new JLabel(""Home town        :"");      
        hometownlbl.setFont(f); 
        hometownlbl.setBounds(180,280,200,50);
        c.add(hometownlbl);
        
        hometown=new JTextField();      
        hometown.setFont(f);
        hometown.setBounds(400,280,300,40);
        c.add(hometown);
        
        emaillbl=new JLabel(""Email                 :"");      
        emaillbl.setFont(f); 
        emaillbl.setBounds(180,340,200,50);
        c.add(emaillbl);
        
        email=new JTextField();      
        email.setFont(f);
        email.setBounds(400,340,300,40);
        c.add(email);
        
        contactlbl=new JLabel(""Contact             :"");      
        contactlbl.setFont(f);
        contactlbl.setBounds(180,400,200,50);
        c.add(contactlbl);
        
        contact=new JTextField();      
        contact.setFont(f);
        contact.setBounds(400,400,300,40);
        c.add(contact);
        
        bloodlbl=new JLabel(""Blood Group    :"");      
        bloodlbl.setFont(f);
        bloodlbl.setBounds(180,460,200,50);
        c.add(bloodlbl);
        
        blood=new JTextField();      
        blood.setFont(f);
        blood.setBounds(400,460,300,40);
        c.add(blood);
        
        add=new JButton(""Add"");
        add.setBounds(520,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(520,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
                
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Add a Faculty member"");
        frame.setVisible(true);
        frame.add(c);
       
          
    
         add.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if(e.getSource()==add){
                   String sntf=name.getText();
                  String mntf=mother.getText();
         String fntf=father.getText();
         String httf=hometown.getText();
         String etf=email.getText();
         String ctf=contact.getText();
         String btf=blood.getText();
       
         filewriter(sntf,mntf,fntf,httf,etf,ctf,btf); 
                }
            
         
                
           
                   
                   
                   
                
            }
             
         });
          back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
            
            name.setText("""");
            mother.setText("""");
            father.setText("""");
            hometown.setText("""");
            email.setText("""");
            contact.setText("""");
            blood.setText("""");
                

                
            }
             
         });
       
       
    } 
    public void filewriter(String sntf,String mntf,String fntf,String httf,String etf,String ctf,String btf)
        {
        File folder=new File(""C:/Users/ASUS/Desktop/myjava"");
        folder.mkdir();
        String path=folder.getAbsolutePath();
        File student=new File(path+""/student.txt"");
       // File teacher =new File(path+""/teacher.txt"");
       
       
        try{
            student.createNewFile();
            //teacher.createNewFile();
            
           // FileOutputStream fn=new FileOutputStream(path+""/student.txt"");
           // FileOutputStream fout1=new FileOutputStream(path+""/teacher.txt"");
            //FileInputStream fin=new FileInputStream(path+""/student.txt"");
            //FileInputStream fin1=new FileInputStream(path+""/teacher.txt"");
            
            FileWriter fn=new FileWriter(""student.txt"",true);
            fn.write(sntf+"" ""+"""");
            fn.write(mntf+"" ""+"""");
            fn.write(fntf+"" ""+"""");
            fn.write(httf+"" ""+"""");
            fn.write(etf+"" ""+"""");
            fn.write(ctf+"" ""+"""");
            fn.write(btf+"" ""+"""");
            fn.write(System.lineSeparator());
            
            
         // fn.append(System.lineSeparator());
           fn.close();   
            
        }
        catch(Exception e)
        {
          e.printStackTrace();
        }
         
    }  
    public static void main(String[] args) {
        
        AddFacultyMember home=new AddFacultyMember();
        
    }
        
    }",1
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;




public class AddMember extends JFrame{
    
     Container c;
     JLabel namelbl,rolllbl,sessionlbl,hometownlbl,emaillbl,contactlbl,bloodlbl;
     JTextField name,roll,session,hometown,eemail,contact,blood;
      JButton back,home;
     final Font f;
     JFrame frame;
    
  
    AddMember(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        
        namelbl=new JLabel(""Name                 :"");      
        namelbl.setFont(f);
        namelbl.setBounds(180,100,200,50);
        c.add(namelbl);
        
        name=new JTextField();      
        name.setFont(f);
        name.setBounds(400,100,300,40);
        c.add(name);
        
        
        rolllbl=new JLabel(""Roll No              :"");      
        rolllbl.setFont(f);
        rolllbl.setBounds(180,160,200,50);
        c.add(rolllbl);
       
        roll=new JTextField();      
        roll.setFont(f);
        roll.setBounds(400,160,300,40);
        c.add(roll);
        
        sessionlbl=new JLabel(""Session             :"");      
        sessionlbl.setFont(f);
        sessionlbl.setBounds(180,220,200,50);
        c.add(sessionlbl);
        
        session=new JTextField();      
        session.setFont(f);
        session.setBounds(400,220,300,40);
        c.add(session);
        
        hometownlbl=new JLabel(""Home town        :"");      
        hometownlbl.setFont(f); 
        hometownlbl.setBounds(180,280,200,50);
        c.add(hometownlbl);
        
        hometown=new JTextField();      
        hometown.setFont(f);
        hometown.setBounds(400,280,300,40);
        c.add(hometown);
        
        emaillbl=new JLabel(""Email                 :"");      
        emaillbl.setFont(f); 
        emaillbl.setBounds(180,340,200,50);
        c.add(emaillbl);
        
        eemail=new JTextField();      
        eemail.setFont(f);
        eemail.setBounds(400,340,300,40);
        c.add(eemail);
        
        contactlbl=new JLabel(""Contact              :"");      
        contactlbl.setFont(f);
        contactlbl.setBounds(180,400,200,50);
        c.add(contactlbl);
        
        contact=new JTextField();      
        contact.setFont(f);
        contact.setBounds(400,400,300,40);
        c.add(contact);
        
        bloodlbl=new JLabel(""Blood Group      :"");      
        bloodlbl.setFont(f);
        bloodlbl.setBounds(180,460,200,50);
        c.add(bloodlbl);
        
        blood=new JTextField();      
        blood.setFont(f);
        blood.setBounds(400,460,300,40);
        c.add(blood);
        
        
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(520,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
         frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Add member"");
        frame.setVisible(true);
        frame.add(c);
       
       
         
    
        
       }
    
    //public static void main(String[] args) {
        
        //AddMember home=new AddMember();
    //}
}",1
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;




public class AddMemberFaculty extends JFrame{
    
     Container c;
     JLabel namelbl,rolllbl,sessionlbl,hometownlbl,emaillbl,contactlbl,bloodlbl;
     JTextField name,hometown,email,contact,blood;
      JButton add,back,home;
     final Font f;
     JFrame frame;
    
  
    AddMemberFaculty(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        
        namelbl=new JLabel(""Name                 :"");      
        namelbl.setFont(f);
        namelbl.setBounds(180,100,200,50);
        c.add(namelbl);
        
        name=new JTextField();      
        name.setFont(f);
        name.setBounds(400,100,300,40);
        c.add(name);
        
        hometownlbl=new JLabel(""Home town        :"");      
        hometownlbl.setFont(f); 
        hometownlbl.setBounds(180,160,200,50);
        c.add(hometownlbl);
        
        hometown=new JTextField();      
        hometown.setFont(f);
        hometown.setBounds(400,160,300,40);
        c.add(hometown);
        
       emaillbl=new JLabel(""Email                 :"");      
      emaillbl.setFont(f); 
      emaillbl.setBounds(180,220,200,50);
      c.add(emaillbl);
        
        email=new JTextField();      
        email.setFont(f);
        email.setBounds(400,220,300,40);
        c.add(email);
        
        contactlbl=new JLabel(""Contact             :"");      
        contactlbl.setFont(f);
        contactlbl.setBounds(180,280,200,50);
        c.add(contactlbl);
        
        contact=new JTextField();      
        contact.setFont(f);
        contact.setBounds(400,280,300,40);
        c.add(contact);
        
        bloodlbl=new JLabel(""Blood Group    :"");      
        bloodlbl.setFont(f);
        bloodlbl.setBounds(180,340,200,50);
        c.add(bloodlbl);
        
        blood=new JTextField();      
        blood.setFont(f);
        blood.setBounds(400,340,300,40);
        c.add(blood);
        
        
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(520,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
         frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Add faculty member"");
        frame.setVisible(true);
        frame.add(c);
       
       
         
    
        
       }
    
    
}",1
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.text.DecimalFormat;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


public class AddPresent extends JFrame{
    
     Container c;
     JLabel namelbl,rolllbl,heldlbl,presentlbl;
     JTextField name,roll,held,present;
      JButton back,home,add;
     final Font f;
     JFrame frame;
     private static DecimalFormat df2 = new DecimalFormat(""#.##"");
     
     String filename;
    
  
    AddPresent(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        
        namelbl=new JLabel(""Name"");      
        namelbl.setFont(f);
        namelbl.setBounds(140,100,200,50);
        c.add(namelbl);
        
        name=new JTextField();      
        name.setFont(f);
        name.setBounds(500,100,300,40);
        c.add(name);
        
        
        rolllbl=new JLabel(""Roll no"");      
        rolllbl.setFont(f);
        rolllbl.setBounds(140,160,200,50);
        c.add(rolllbl);
       
        roll=new JTextField();      
        roll.setFont(f);
        roll.setBounds(500,160,300,40);
        c.add(roll);
        
        heldlbl=new JLabel(""Class Held(H)"");      
        heldlbl.setFont(f);
        heldlbl.setBounds(140,220,200,50);
        c.add(heldlbl);
        
        held=new JTextField();      
        held.setFont(f);
        held.setBounds(500,220,300,40);
        c.add(held);
        
        presentlbl=new JLabel(""Present In Class(H)"");      
        presentlbl.setFont(f); 
        presentlbl.setBounds(140,280,250,50);
        c.add(presentlbl);
        
        present=new JTextField();      
        present.setFont(f);
        present.setBounds(500,280,300,40);
        c.add(present);
             
      
        add=new JButton(""Add"");
        add.setBounds(650,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(650,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
         frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Course Attendence"");
        frame.setVisible(true);
        frame.add(c);
        
        add.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==add)
            {
                String sname =name.getText();
                String sroll = roll.getText();
                String sheld = held.getText();
                String spresent = present.getText();
                
                
                
                
                
                if(sname.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert name"");
                }
                else if(sroll.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert roll"");
                }
                else if(sheld.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Held classes(H)"");
                }
                
                else{
                     double intheld =Double.parseDouble(sheld);
                     double intpresent =Double.parseDouble(spresent);
                     double percent = (intpresent/intheld)*100;
                     String percent1 = df2.format(percent);
                     
                     String parcent2 =new Double(percent1).toString();
                     filewriter(sname,sroll,sheld,spresent,parcent2);
                     JOptionPane.showMessageDialog(null, ""Added Successfully"");
                     name.setText("""");
                     roll.setText("""");
                     held.setText("""");
                     present.setText("""");
                
                   
                    
                    
                    
                } 
                
                
            }
            
            }
        private void filewriter(String sname, String sroll, String sheld, String spresent, String spercent) {
                try{
                    FileWriter wr = new FileWriter(filename,true);
                    wr.write(sname+"" ""+""#"");
                    wr.write(sroll+"" ""+""#"");
                    wr.write(sheld+"" ""+""#"");
                    wr.write(spresent+"" ""+""#"");
                    wr.write(spercent+"" ""+""#"");
                    
                    
                    
                    
                       
                    wr.write(System.getProperty(""line.separator""));
                    wr.close();
                }
                catch(Exception ae)
                {
                    System.out.println(ae);
                }
            }
        
        });
        
         home.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==home)
               {
                  frame.dispose();
                  Home menuFile = new Home();
                  
               }
            }
            
        });
    }
    
    public static void main(String[] args) {
        
        AddPresent a =  new AddPresent();
        
    }
    
    
    
}",1
"
package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.util.Scanner;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
public class AddRoutine extends JFrame{
    
    public Container c;
    public JLabel daylbl,firstlbl,secondlbl,thirdlbl,fourthlbl,fifthlbl,sixthlbl;
    public JTextField daytf,firsttf,secondtf,thirdtf,fourthtf,fifthtf,sixthtf;
    public JButton add,clear,home;
    public Font f;
    
    AddRoutine()
    {
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        
        daylbl=new JLabel(""Day name      :"");      
        daylbl.setFont(f);
        daylbl.setBounds(140,100,220,50);
        c.add(daylbl);
        
        daytf=new JTextField();      
        daytf.setFont(f);
        daytf.setBounds(400,100,300,40);
        c.add(daytf);
        
        
        firstlbl=new JLabel(""09.00am-10.00am:"");      
        firstlbl.setFont(f);
       firstlbl.setBounds(140,160,220,50);
        c.add(firstlbl);
        
       firsttf=new JTextField();      
        firsttf.setFont(f);
        firsttf.setBounds(400,160,300,40);
        c.add(firsttf);
        
        secondlbl=new JLabel(""10.00am-11.00am:"");      
        secondlbl.setFont(f);
        secondlbl.setBounds(140,220,220,50);
        c.add(secondlbl);
        
        secondtf=new JTextField();      
        secondtf.setFont(f);
        secondtf.setBounds(400,220,300,40);
        c.add(secondtf);
        
        thirdlbl=new JLabel(""11.00am-12.00pm:"");      
        thirdlbl.setFont(f); 
        thirdlbl.setBounds(140,280,220,50);
        c.add(thirdlbl);
        
        thirdtf=new JTextField();      
        thirdtf.setFont(f);
        thirdtf.setBounds(400,280,300,40);
        c.add(thirdtf);
        
        fourthlbl=new JLabel(""12.00pm-01.00pm:"");      
        fourthlbl.setFont(f); 
        fourthlbl.setBounds(140,340,220,50);
        c.add(fourthlbl);
        
        fourthtf=new JTextField();      
        fourthtf.setFont(f);
        fourthtf.setBounds(400,340,300,40);
        c.add(fourthtf);
        
        fifthlbl=new JLabel(""02.00pm-03.00pm:"");      
        fifthlbl.setFont(f);
        fifthlbl.setBounds(140,400,220,50);
        c.add(fifthlbl);
        
        fifthtf=new JTextField();      
        fifthtf.setFont(f);
        fifthtf.setBounds(400,400,300,40);
        c.add(fifthtf);
        
        sixthlbl=new JLabel(""03.00pm-04.00pm:"");      
        sixthlbl.setFont(f);
        sixthlbl.setBounds(140,460,220,50);
        c.add(sixthlbl);
        
        sixthtf=new JTextField();      
        sixthtf.setFont(f);
        sixthtf.setBounds(400,460,300,40);
        c.add(sixthtf);
        
        add=new JButton(""Add"");
        add.setBounds(520,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        clear=new JButton(""Clear"");
        clear.setBounds(180,570,150,50);
        clear.setFont(f);
        clear.setBackground(Color.BLACK);
        clear.setForeground(Color.WHITE);
        c.add(clear);
        
        home=new JButton(""Home"");
        home.setBounds(520,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        clear.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
            daytf.setText("""");
            firsttf.setText("""");
            secondtf.setText("""");
            thirdtf.setText("""");
            fourthtf.setText("""");
            fifthtf.setText("""");
            sixthtf.setText("""");
            }
             });
        
        home.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==home)
            {
                dispose();
                HomeDemo home=new HomeDemo();  
            }
            }
        
        });

        add.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if(e.getSource()==add){
         String sntf=daytf.getText();
         String mntf=firsttf.getText();
         String fntf=secondtf.getText();
         String httf=thirdtf.getText();
         String etf=fourthtf.getText();
         String ctf=fifthtf.getText();
         String btf=sixthtf.getText();
       
         filewriter(sntf,mntf,fntf,httf,etf,ctf,btf); 
                }
             }
             });
               
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Add Routine data"");
        frame.setVisible(true);
        frame.add(c);
        
    }
        
        public void filewriter(String sntf,String mntf,String fntf,String httf,String etf,String ctf,String btf)
        {
        try{
            FileWriter fn=new FileWriter(""routine.txt"",true);
            fn.write(sntf+"" ""+"""");
            fn.write(mntf+"" ""+"""");
            fn.write(fntf+"" ""+"""");
            fn.write(httf+"" ""+"""");
            fn.write(etf+"" ""+"""");
            fn.write(ctf+"" ""+"""");
            fn.write(btf+"" ""+"""");
            fn.write(System.getProperty(""line.separator""));

           fn.close();   
         }
        catch(Exception e)
        {
          e.printStackTrace();
        }
         
        }
    
    
    public static void main(String[] args) {
        AddRoutine r =new AddRoutine();
    }
    
}",1
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


public class AddStudentMarks extends  StudentMarks{
    
      JButton add;
      JTextField filenam;
      JLabel filenamelbl;
      String filename;
    
    AddStudentMarks(){
        
        filenamelbl=new JLabel(""File Name"");      
        filenamelbl.setFont(f);
       filenamelbl.setBounds(140,460,350,50);
       c.add(filenamelbl);
        
        filenam=new JTextField();      
        filenam.setFont(f);
        filenam.setBounds(500,460,300,40);
        c.add(filenam);
        
        add=new JButton(""Add"");
        add.setBounds(650,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        add.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==add)
            {
                String sname =name.getText();
                String sroll = roll.getText();
                String sct1 = ct1.getText();
                String sct2 = ct2.getText();
                String sassign =assign.getText();
                String sattendence = attendence.getText();
                filenam.setText(filename);
                String sfilename = filenam.getText();
                
                
                
                
                if(sname.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert name"");
                }
                else if(sroll.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert roll"");
                }
                else if(sct1.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert CT1 Mark"");
                }
                else if(sct2.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert CT2 Mark"");
                }
               else if(sassign.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Assgignment Mark"");
                }
               else if(sattendence.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Attentence Mark"");
                }
               else if(!sfilename.equals(filename)){
                    JOptionPane.showMessageDialog(null,""You Modify the Filenme"");
                }
                else{
                     double intct1 =Double.parseDouble(sct1);
                double intct2 =Double.parseDouble(sct2);
                double intassign =Double.parseDouble(sassign);
               double intattend =Double.parseDouble(sattendence);
                if(intct1>=intassign && intct2>=intassign){
                                 
                      double sum = (intct1+intct2)/2+intattend;
                              
                         String sum1=new Double(sum).toString();
                         filewriter(sname,sroll,sct1,sct2,sassign,sattendence,sum1);
                         JOptionPane.showMessageDialog(null, ""Insert Successfully"");
                           name.setText("""");
                          roll.setText("""");
                         ct1.setText("""");
                          ct2.setText("""");
                         assign.setText("""");
                         attendence.setText("""");
                            }
                             else if(intct1>=intct2 && intct2<=intassign){
                                 double sum = (intct1+intassign)/2+intattend;
                                  String sum1=new Double(sum).toString(); 
                                  filewriter(sname,sroll,sct1,sct2,sassign,sattendence,sum1);
                                  JOptionPane.showMessageDialog(null, ""Insert Successfully"");
                                 name.setText("""");
                                 roll.setText("""");
                                 ct1.setText("""");
                                  ct2.setText("""");
                                 assign.setText("""");
                                 attendence.setText("""");
                             }
                             else if(intct1<=intct2 && intct1<=intassign){
                                 
                                 double sum = (intct2+intassign)/2+intattend;
                                  String sum1=new Double(sum).toString(); 
                                  filewriter(sname,sroll,sct1,sct2,sassign,sattendence,sum1);
                                 JOptionPane.showMessageDialog(null, ""Insert Successfully"");
                                 name.setText("""");
                                 roll.setText("""");
                                 ct1.setText("""");
                                 ct2.setText("""");
                                 assign.setText("""");
                                 attendence.setText("""");
                              
                                 
                                 
                             }
                   
                    
                    
                    
                } 
                
                
            }
            
            }
        private void filewriter(String sname, String sroll, String sct1, String sct2, String sassign, String sattendence,String sum1) {
                try{
                    FileWriter wr = new FileWriter(filename,true);
                    wr.write(sname+"" ""+""#"");
                    wr.write(sroll+"" ""+""#"");
                    wr.write(sct1+"" ""+""#"");
                    wr.write(sct2+"" ""+""#"");
                    wr.write(sassign+"" ""+""#"");
                    wr.write(sattendence+"" ""+""#"");
                    wr.write(sum1+"" ""+""#"");
                    
                    
                    
                       
                    wr.write(System.getProperty(""line.separator""));
                    wr.close();
                }
                catch(Exception ae)
                {
                    System.out.println(ae);
                }
            }
        
        });
        
        

        
        
    }
    
   // public static void main(String[] args) {
       // AddStudentMarks addStudentMarks = new AddStudentMarks();
   // }
    
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JOptionPane;


public class AddStudentMember extends AddMember{
    
            JButton add;
    
            
            
    AddStudentMember(){
        
        add=new JButton(""Add"");
        add.setBounds(520,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        add.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==add)
            {
                
            String sname =name.getText();
            String sroll =roll.getText();
            String  ssession = session.getText();
            String  shometown = hometown.getText();
            String  semail = eemail.getText();
            String scontact = contact.getText();
            String sblood = blood.getText();
            
            if(sname.equals(""""))
                    {
                        JOptionPane.showMessageDialog(null,""Please Enter name"");
                    }
            else if(sroll.equals("""")){
                            JOptionPane.showMessageDialog(null, ""Please Enter hometown"");
                        }
            else if(ssession.equals("""")){
                            JOptionPane.showMessageDialog(null, ""Please Enter Session"");
                        }
                    else if(shometown.equals("""")){
                            JOptionPane.showMessageDialog(null, ""Please Enter hometown"");
                        }
                   else if(semail.equals("""")){
                                JOptionPane.showMessageDialog(null, ""Please Enter Email"");
                            }
                    else if(scontact.equals("""")){
                                    JOptionPane.showMessageDialog(null,""Please Enter contact"");
                                }
                    else if(sblood.equals("""")){
                                        JOptionPane.showMessageDialog(null,""Please Enter Blood"");
                                    }
                
                else{
                    
                   filewriter(sname,sroll,ssession,shometown,semail,scontact,sblood);
                   JOptionPane.showMessageDialog(null,""Added Succesfully"");
                   name.setText("""");
                   roll.setText("""");
                   session.setText("""");
                   hometown.setText("""");
                   eemail.setText("""");
                   contact.setText("""");
                   blood.setText("""");
                    
                }
                
               
                
            }
        }
            private void filewriter(String sname, String sroll, String ssession, String shometown, String semail, String scontact, String sblood) {
                try{
                    FileWriter wr = new FileWriter(""student.txt"",true);
                    wr.write(sname+"" ""+""#"");
                    wr.write(sroll+"" ""+""#"");
                    wr.write(ssession+"" ""+""#"");
                    wr.write(shometown+"" ""+""#"");
                    wr.write(semail+"" ""+""#"");
                    wr.write(scontact+"" ""+""#"");
                    wr.write(sblood+"" ""+""#"");    
                    wr.write(System.getProperty(""line.separator""));
                    wr.close();
                }
                catch(Exception ae)
                {
                    System.out.println(ae);
                }
            }
            
           
        
        });
      
        home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home admin =new Home();
        }
        
        });
        
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
               if(e.getSource()==back){
                 
                    frame.dispose();
                    AdminstratorDemo admin = new AdminstratorDemo();
                    
                }
        }
   
        
        });
    }
    
    
    
}",0
"package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JOptionPane;

public class AddfacultyMember extends AddMemberFaculty{
    
    AddfacultyMember()
    {
        add=new JButton(""Add"");
        add.setBounds(520,510,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        
        add.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            String tname =name.getText();
            String thometown = hometown.getText();
            String temail = email.getText();
            String tcontact = contact.getText();
            String tblood = blood.getText();
            
                           
                    if(tname.equals(""""))
                    {
                        JOptionPane.showMessageDialog(null,""Please Enter name"");
                    }
                    else if(thometown.equals("""")){
                            JOptionPane.showMessageDialog(null, ""Please Enter hometown"");
                        }
                   else if(temail.equals("""")){
                                JOptionPane.showMessageDialog(null, ""Please Enter Email"");
                            }
                    else if(tcontact.equals("""")){
                                    JOptionPane.showMessageDialog(null,""Please Enter contact"");
                                }
                    else if(tblood.equals("""")){
                                        JOptionPane.showMessageDialog(null,""Please Enter Blood"");
                                    }
                
                else{
                    
                    filewriter(tname,thometown,temail,tcontact,tblood);
                   JOptionPane.showMessageDialog(null,""Added Succesfully"");
                   name.setText("""");
                   hometown.setText("""");
                   email.setText("""");
                   contact.setText("""");
                   blood.setText("""");
                    
                }
                
            
  
        }
            private void filewriter(String tname, String thometown,String temail, String tcontact, String tblood) {
                
                try{
                    FileWriter wr = new FileWriter(""teachersInformation.txt"",true);
                    wr.write(tname+"" ""+""#"");
                    wr.write(thometown+"" ""+""#"");
                    wr.write(temail+"" ""+""#"");
                    wr.write(tcontact+"" ""+""#"");
                    wr.write(tblood+"" ""+""#"");
                    wr.write(System.getProperty(""line.separator""));
                    wr.close();
                }
                catch(Exception ae)
                {
                    System.out.println(ae);
                }
            }
        
        });
        home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home admin =new Home();
        }
        
        });
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
               if(e.getSource()==back){
                 
                    frame.dispose();
                    AdminstratorDemo admin = new AdminstratorDemo();
                    
                }
        }
   
        
        });
    
        
        
    }
   
    
}",0
"
package projectsms;

import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;


public class AdministratorLogin extends JFrame{
    
    
           private Container c;
           private Font F ;
           private JLabel username,password;
           private JTextField usernameField;
           private JPasswordField passField;
           private JButton submit;
    
    AdministratorLogin(){
        
        
        
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        F = new Font(""Arial"",Font.BOLD,30);
        
        username = new JLabel(""Username   :"");
        username.setBounds(270, 200, 250,60);
        username.setFont(F);
        c.add(username);
        
        usernameField = new JTextField();
        usernameField.setBounds(520, 200, 400,60);
        usernameField.setFont(F);
        c.add(usernameField);
        
        password = new JLabel(""Password   :"");
        password.setBounds(270, 330, 250,60);
        password.setFont(F);
        c.add(password);
        
       
        passField = new JPasswordField();
        passField.setBounds(520, 330, 400,60);
        passField.setFont(F);
        c.add(passField);
        
        submit = new JButton(""Submit"");
        submit.setBounds(750, 415, 165, 50);
        submit.setFont(F);
        c.add(submit);
        
        
        
        JFrame frame = new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Administrator"");
        frame.setVisible(true);
        frame.add(c);
        
        
        submit.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
 
            String name=usernameField.getText();
            String pass= passField.getText();
 
                if(name.equals(""Admin"") && pass.equals(""1234"")){
                    JOptionPane.showMessageDialog(null,""Welcome"");
                    frame.dispose();
                    AdminstratorDemo admin = new AdminstratorDemo();
                }
                else{
                    JOptionPane.showMessageDialog(null,""Wrong Password"");
                    usernameField.setText("""");
                    passField.setText("""");
                }
        }
        
        });
    }
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.border.Border;


public class AdminstratorDemo extends JFrame{
    
    private Container c;
    private JLabel adminlabel,label1,label2,label3,label4,label5,label6,label7,label8;
    private JButton homebtn,addfacultybtn,addstubtn,updatebtn,deletestubtn,updatefacbtn,deletetfacbtn,routinebtn,addroutine;
    private final Font f;
    private final Font hf;
    private final Cursor cursor; 
    
    AdminstratorDemo(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        
        hf=new Font(""Arial"",Font.BOLD,28);
        f=new Font(""Arial"",Font.BOLD,24);
        cursor =new Cursor(Cursor.HAND_CURSOR);
        
        adminlabel=new JLabel(""Administrator"");
        adminlabel.setFont(hf);
        adminlabel.setBounds(380,60,200,70);
        c.add(adminlabel);
        
        label1=new JLabel(""1."");
        label1.setFont(f);
        label1.setBounds(180,140,20,50);
        c.add(label1);
        
        updatebtn=new JButton(""Update Student Information"");
        updatebtn.setBounds(200,140,370,50);
        updatebtn.setFont(f);
        updatebtn.setCursor(cursor);
        updatebtn.setBackground(new java.awt.Color(0,230,230));
        c.add(updatebtn);
        
        label2=new JLabel(""2."");
        label2.setFont(f);
        label2.setBounds(180,200,20,50);
        c.add(label2);
        
        addstubtn=new JButton(""Add Student"");
        addstubtn.setBounds(200,200,190,50);
        addstubtn.setFont(f);
        addstubtn.setCursor(cursor);
        addstubtn.setBackground(new java.awt.Color(0,230,230));
        c.add(addstubtn);
        
        label3=new JLabel(""3."");
        label3.setFont(f);
        label3.setBounds(180,260,20,50);
        c.add(label3);
        
        deletestubtn=new JButton(""Delete Student"");
        deletestubtn.setBounds(200,260,210,50);
        deletestubtn.setFont(f);
        deletestubtn.setCursor(cursor);
        deletestubtn.setBackground(new java.awt.Color(0,230,230));
        c.add(deletestubtn);
        
        label4=new JLabel(""4."");
        label4.setFont(f);
        label4.setBounds(180,320,20,50);
        c.add(label4);
        
        addfacultybtn=new JButton(""Add a Faculty member"");
        addfacultybtn.setBounds(200,320,300,50);
        addfacultybtn.setFont(f);
        addfacultybtn.setCursor(cursor);
        addfacultybtn.setBackground(new java.awt.Color(0,230,230));
        c.add(addfacultybtn);
        
        label5=new JLabel(""5."");
        label5.setFont(f);
        label5.setBounds(180,380,20,50);
        c.add(label5);
        
        updatefacbtn=new JButton(""Update Faculty member Information"");
        updatefacbtn.setBounds(200,380,450,50);
        updatefacbtn.setFont(f);
        updatefacbtn.setCursor(cursor);
        updatefacbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(updatefacbtn);
        
        label6=new JLabel(""6."");
        label6.setFont(f);
        label6.setBounds(180,440,20,50);
        c.add(label6);
        
        deletetfacbtn=new JButton(""Delete a Faculty member"");
        deletetfacbtn.setBounds(200,440,330,50);
        deletetfacbtn.setFont(f);
        deletetfacbtn.setCursor(cursor);
        deletetfacbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(deletetfacbtn);
        
        label7=new JLabel(""7."");
        label7.setFont(f);
        label7.setBounds(180,500,20,50);
        c.add(label7);
        
        routinebtn=new JButton(""Update Routine"");
        routinebtn.setBounds(200,500,220,50);
        routinebtn.setFont(f);
        routinebtn.setCursor(cursor);
        routinebtn.setBackground(new java.awt.Color(0,230,230));
        c.add(routinebtn);
        
        label8=new JLabel(""8."");
        label8.setFont(f);
        label8.setBounds(180,560,20,50);
        c.add(label8);
        
        addroutine=new JButton(""Add Routine"");
        addroutine.setBounds(200,560,210,50);
        addroutine.setFont(f);
        addroutine.setCursor(cursor);
        addroutine.setBackground(new java.awt.Color(0,230,230));
        c.add(addroutine);
        
        
        homebtn=new JButton(""Home"");
        homebtn.setBounds(300,620,150,50);
        homebtn.setFont(f);
        homebtn.setBackground(Color.BLACK);
        homebtn.setForeground(Color.WHITE);
        homebtn.setCursor(cursor);
        c.add(homebtn);
        
        Border emptyBorder = BorderFactory.createEmptyBorder();
        addstubtn.setBorder(emptyBorder);
        updatebtn.setBorder(emptyBorder);
       deletestubtn.setBorder(emptyBorder);
        addfacultybtn.setBorder(emptyBorder);
        updatefacbtn.setBorder(emptyBorder);
        deletetfacbtn.setBorder(emptyBorder);
        routinebtn.setBorder(emptyBorder);
        addroutine.setBorder(emptyBorder);
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Administrator"");
        frame.setVisible(true);
        frame.add(c);   
        
        
        homebtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home admin =new Home();
        }
        
        });
        
        addfacultybtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==addfacultybtn){
                 
                    frame.dispose();
                    AddfacultyMember addmember = new AddfacultyMember();
                    
                }
        }
        
        });
        
        addstubtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==addstubtn){
                 
                    frame.dispose();
                    AddStudentMember addmember = new AddStudentMember();
                    
                }
        }
        
        });
        
        updatebtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==updatebtn){
                 
                    frame.dispose();
                    try {
                        UpdateStudentInformation up = new UpdateStudentInformation();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AdminstratorDemo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        }
        
        });
        
       updatefacbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==updatefacbtn){
                 
                    frame.dispose();
                    try {
                        UpdateFacultyInformation up = new UpdateFacultyInformation();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AdminstratorDemo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        }
        
        });
        
        deletestubtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()==deletestubtn){
                 
                    frame.dispose();
                    try {
                        DeleteStudent deletestu = new DeleteStudent();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AdminstratorDemo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                    
                    
                }
        }
        
        });
        
         deletetfacbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()== deletetfacbtn){
                 
                    frame.dispose();
                    try {
                        DeleteFaculty delete = new DeleteFaculty();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AdminstratorDemo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                    
                    
                }
        }
        
        });
         routinebtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()== routinebtn){
                 
                    frame.dispose();
                    try {
                        UpdateRoutine updateRoutine = new UpdateRoutine();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AdminstratorDemo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                    
                    
                }
        }
        
        });
         addroutine.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                if(e.getSource()== addroutine){
                 
                    frame.dispose();
                    AddRoutine updateRoutine = new AddRoutine();
                   
                    
                    
                }
        }
        
        });         
    }
    public static void main(String[] args) {
       AdminstratorDemo adminDemo = new AdminstratorDemo();
    }
}",1
"
package Demo;


import javax.swing.JButton;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel; 
import org.jfree.chart.JFreeChart; 
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset; 
import org.jfree.data.category.DefaultCategoryDataset; 
import org.jfree.ui.ApplicationFrame; 
import org.jfree.ui.RefineryUtilities; 

public class BarChart_AWT extends ApplicationFrame {
   
   
   public BarChart_AWT( String applicationTitle , String chartTitle ) {
      super( applicationTitle );
      
      JFreeChart barChart = ChartFactory.createBarChart(
         chartTitle,           
         ""Category"",            
         ""GPA"",            
         createDataset(),          
         PlotOrientation.VERTICAL,           
         true, true, false);
         
      ChartPanel chartPanel = new ChartPanel( barChart );        
      chartPanel.setPreferredSize(new java.awt.Dimension( 400 , 300 ) );        
      setContentPane( chartPanel ); 
   }
   
   private CategoryDataset createDataset( ) {
      final String fiat = ""1st"";        
      final String audi = ""2nd"";        
      final String ford = ""3rd"";
      final String marcity = ""4rd"";
      final String nissan = ""5rd"";
      final String first = ""1st Semister"";        
      final String second = ""2nd Semister"";        
      final String third = ""3rd Semister"";        
      final String fourth = ""4th Semister""; 
      final String safe = ""5th Semister""; 
      final DefaultCategoryDataset dataset = 
      new DefaultCategoryDataset( );  

      dataset.addValue( 3.40 , marcity , first);        
      // dataset.addValue( 3.0 , fiat , userrating );        
     //  dataset.addValue( 5.0 , fiat , millage ); 
     //  dataset.addValue( 5.0 , fiat , safety );           

     // dataset.addValue( 5.0 , audi , speed );        
      //dataset.addValue( 6.0 , audi , userrating );       
      dataset.addValue( 3.52 , marcity , second );        
    //  dataset.addValue( 4.0 , audi , safety );

    //  dataset.addValue( 4.0 , ford , speed );        
    //  dataset.addValue( 3.90 , marcity , third );  //      
     // dataset.addValue( 3.0 , ford , millage );        
   //   dataset.addValue( 3.99 , marcity , fourth );    //
     // dataset.addValue( 5.0 , fiat , millage );
     
     // dataset.addValue( 5.0 , fiat , safety );     
    //  dataset.addValue( 3.99 , marcity , safe ); 

      return dataset; 
   }
   
   public static void main( String[ ] args ) {
     //  JButton btn =new JButton(""show"");
     //  btn.setBounds(0,0,100,50);
       
      BarChart_AWT chart = new BarChart_AWT(""Result sheet"", 
         """");
      chart.setBounds(100,85,500,500);
     // chart.add(btn);
     // RefineryUtilities.centerFrameOnScreen( chart );        
      chart.setVisible( true ); 
   }
}",0
"
package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;


public class Changepass extends JFrame{
             Container c;
            JLabel password;
            JTextField passtf;
            JButton add;
            Font F;
    
    Changepass()
    {
         c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
         F = new Font(""Arial"",Font.BOLD,30);
        
        password = new JLabel(""Password   :"");
        password.setBounds(270, 200, 250,60);
        password.setFont(F);
        c.add(password);
        
       passtf = new JTextField();
       passtf.setBounds(520, 200, 400,60);
       passtf.setFont(F);
        c.add(passtf);
        
        add=new JButton(""Add"");
        add.setBounds(520, 300, 100,60);
        add.setFont(F);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        add.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                       if(e.getSource()==add){
         String changetf=passtf.getText();
       
        
                    
                     
                    try {
                     File file  = new File(""password.txt"");
                     FileWriter    fw = new FileWriter(file);
                        fw.write(changetf);
                        fw.write(System.getProperty(""line.separator""));
                        fw.close();
                    } catch (IOException ex) {
                        Logger.getLogger(Changepass.class.getName()).log(Level.SEVERE, null, ex);
                    }
                     
              
                }
            }
        });
                
                
       
        
        JFrame frame = new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setVisible(true);
        frame.setTitle(""Change password"");
        frame.add(c);
        
    }
    
            
    
    
    public static void main(String[] args) {
      Changepass c= new Changepass();
      
    }
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import static java.awt.SystemColor.menu;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;


public class  CourseMenu extends JFrame{
       Container c;
       JMenuBar mb;
        JMenu  menu;
       JMenuItem newitem,openitem;
       JButton home,back;
     JFrame frame;
     String filename1;
     JFileChooser jc;
     JTable table;
    DefaultTableModel model;
    JScrollPane scroll;
    String[] coloum = {""Name"",""Roll No"",""Class held"",""Class present"",""Percentage""};
    
     
       
    CourseMenu(){
        c = this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
         
        mb=new JMenuBar();
        mb.setBounds(0, 0,1600,50);
        mb.getMaximumSize();
        
        
        menu=new JMenu(""File""); 
        menu.setPreferredSize(new Dimension(105,50));
            
        newitem = new JMenuItem(""New""); 
        newitem.setPreferredSize(new Dimension(100,50));
        openitem=new JMenuItem(""Open""); 
        openitem.setPreferredSize(new Dimension(100,50));
            
            
        menu.add(newitem); menu.add(openitem);  
        mb.add(menu);
        c.add(mb);
        
        
         Font hf=new Font(""Arial"",Font.BOLD,16);
        table = new JTable();
        
        model = new DefaultTableModel();
        
        
        
        jc = new JFileChooser(""."");
        
         home=new JButton(""Home"");
        home.setBounds(500,600,150,50);
        home.setFont(hf);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        back=new JButton(""Back"");
        back.setBounds(700,600,150,50);
        back.setFont(hf);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        
        frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Menu"");
        frame.setVisible(true);
        frame.add(c);
        
        
        
        openitem.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
                
                model.setColumnIdentifiers(coloum);
                table.setModel(model);
                table.setFont(hf);
                table.setSelectionBackground(Color.BLACK);
                table.setBackground(Color.WHITE);
                table.setRowHeight(30);
        
                scroll = new JScrollPane(table);
                scroll.setBounds(10,60,1300,500);
                c.add(scroll);
  
                int option = jc.showOpenDialog(CourseMenu.this);
                if (option == JFileChooser.APPROVE_OPTION){
                    
                    File sf = jc.getSelectedFile();
                    filename1 =sf.getPath();
                    sf  = new File(filename1);
                    try{
                        FileReader  fr = new FileReader(sf);
                         BufferedReader br = new BufferedReader(fr); 
                         
                         Object[] lines = br.lines().toArray();
                        for(int i=0;i<lines.length;i++)
                        {
                            String[] row = lines[i].toString().split(""#"");
                             model.addRow(row);
                                
                         }
                    }
                    catch(Exception ae){
                       ae.printStackTrace();
                    }
                    
                }
                
        }
        
        });
        
       home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home hm = new Home();           
        }
        
        });
           
        
        
    }
    
    
    public static void main(String[] args) {
        CourseMenu cm = new CourseMenu();
    }
    
    
    
    
}",1
"
package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Font;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.border.Border;

public class CourseTitleDemo extends JFrame{
     private Container c;
     private JLabel titlelabel,label1,label2,label3,label4,label5;
     private JButton btn1,btn2,btn3,btn4,btn5,backbtn,homebtn;
     private Font f,hf;
     private Cursor cursor;
     
    CourseTitleDemo()
    {
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        hf=new Font(""Arial"",Font.BOLD,28);
        
        cursor =new Cursor(Cursor.HAND_CURSOR);
        
        
        titlelabel=new JLabel(""Course Title"");
        titlelabel.setFont(hf);
        titlelabel.setBounds(350,60,250,70);
        c.add(titlelabel);
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        label1=new JLabel(""1."");
        label1.setFont(f);
        label1.setBounds(180,140,20,50);
        c.add(label1);
        
        btn1=new JButton(""Course Description"");
        btn1.setBounds(200,140,270,50);
        btn1.setFont(f);
        btn1.setCursor(cursor);
        btn1.setBackground(new java.awt.Color(0,230,230));
        c.add(btn1);
        
        label2=new JLabel(""2."");
        label2.setFont(f);
        label2.setBounds(180,200,20,50);
        c.add(label2);
        
        btn2=new JButton(""Course Attendence"");
        btn2.setBounds(200,200,270,50);
        btn2.setFont(f);
        btn2.setCursor(cursor);
        btn2.setBackground(new java.awt.Color(0,230,230));
        c.add(btn2);
        
        label3=new JLabel(""3."");
        label3.setFont(f);
        label3.setBounds(180,260,20,50);
        c.add(label3);
        
        btn3=new JButton(""Course CT and Final Mark"");
        btn3.setBounds(200,260,340,50);
        btn3.setFont(f);
        btn3.setCursor(cursor);
        btn3.setBackground(new java.awt.Color(0,230,230));
        c.add(btn3);
        
        label4=new JLabel(""4."");
        label4.setFont(f);
        label4.setBounds(180,320,20,50);
        c.add(label4);
        
        btn4=new JButton(""Add a Student"");
        btn4.setBounds(200,320,210,50);
        btn4.setFont(f);
        btn4.setCursor(cursor);
        btn4.setBackground(new java.awt.Color(0,230,230));
        c.add(btn4);
        
        label5=new JLabel(""5."");
        label5.setFont(f);
        label5.setBounds(180,380,20,50);
        c.add(label5);
        
        btn5=new JButton(""Remove a Student"");
        btn5.setBounds(200,380,260,50);
        btn5.setFont(f);
        btn5.setCursor(cursor);
        btn5.setBackground(new java.awt.Color(0,230,230));
        c.add(btn5);
        
        backbtn=new JButton(""Back"");
        backbtn.setBounds(100,500,150,50);
        backbtn.setFont(f);
        backbtn.setBackground(Color.BLACK);
        backbtn.setForeground(Color.WHITE);
        backbtn.setCursor(cursor);
        c.add(backbtn);
        
        homebtn=new JButton(""Home"");
        homebtn.setBounds(500,500,150,50);
        homebtn.setFont(f);
        homebtn.setBackground(Color.BLACK);
        homebtn.setForeground(Color.WHITE);
        homebtn.setCursor(cursor);
        c.add(homebtn);
        
        Border emptyBorder = BorderFactory.createEmptyBorder();
        btn1.setBorder(emptyBorder);
        btn2.setBorder(emptyBorder);
        btn3.setBorder(emptyBorder);
        btn4.setBorder(emptyBorder);
        btn5.setBorder(emptyBorder);
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Courses Title"");
        frame.setVisible(true);
        frame.add(c);
        
    }
    public static void main(String[] args) {
        
        CourseTitleDemo title =new CourseTitleDemo();
        
    }
    
}",1
"
package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Font;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.border.Border;


public class CoursesDemo extends JFrame{
     private Container c;
     private JLabel titlelabel,label1,label2,label3,label4,label5;
     private JButton btn1,btn2,btn3,btn4,btn5,backbtn,homebtn;
     private Font f,hf;
     private Cursor cursor;
    
     CoursesDemo()
     {
         c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        hf=new Font(""Arial"",Font.BOLD,28);
        
        cursor =new Cursor(Cursor.HAND_CURSOR);
        
        
        titlelabel=new JLabel(""Courses"");
        titlelabel.setFont(hf);
        titlelabel.setBounds(350,60,250,70);
        c.add(titlelabel);
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        label1=new JLabel(""1."");
        label1.setFont(f);
        label1.setBounds(180,140,20,50);
        c.add(label1);
        
        btn1=new JButton();
        btn1.setBounds(200,140,350,50);
        btn1.setFont(f);
        btn1.setCursor(cursor);
        btn1.setBackground(new java.awt.Color(0,230,230));
        c.add(btn1);
        
        label2=new JLabel(""2."");
        label2.setFont(f);
        label2.setBounds(180,200,20,50);
        c.add(label2);
        
        btn2=new JButton();
        btn2.setBounds(200,200,350,50);
        btn2.setFont(f);
        btn2.setCursor(cursor);
        btn2.setBackground(new java.awt.Color(0,230,230));
        c.add(btn2);
        
        label3=new JLabel(""3."");
        label3.setFont(f);
        label3.setBounds(180,260,20,50);
        c.add(label3);
        
        btn3=new JButton();
        btn3.setBounds(200,260,350,50);
        btn3.setFont(f);
        btn3.setCursor(cursor);
        btn3.setBackground(new java.awt.Color(0,230,230));
        c.add(btn3);
        
        label4=new JLabel(""4."");
        label4.setFont(f);
        label4.setBounds(180,320,20,50);
        c.add(label4);
        
        btn4=new JButton();
        btn4.setBounds(200,320,350,50);
        btn4.setFont(f);
        btn4.setCursor(cursor);
        btn4.setBackground(new java.awt.Color(0,230,230));
        c.add(btn4);
        
        label5=new JLabel(""5."");
        label5.setFont(f);
        label5.setBounds(180,380,20,50);
        c.add(label5);
        
        btn5=new JButton();
        btn5.setBounds(200,380,350,50);
        btn5.setFont(f);
        btn5.setCursor(cursor);
        btn5.setBackground(new java.awt.Color(0,230,230));
        c.add(btn5);
        
        backbtn=new JButton(""Back"");
        backbtn.setBounds(100,500,150,50);
        backbtn.setFont(f);
        backbtn.setBackground(Color.BLACK);
        backbtn.setForeground(Color.WHITE);
        backbtn.setCursor(cursor);
        c.add(backbtn);
        
        homebtn=new JButton(""Home"");
        homebtn.setBounds(500,500,150,50);
        homebtn.setFont(f);
        homebtn.setBackground(Color.BLACK);
        homebtn.setForeground(Color.WHITE);
        homebtn.setCursor(cursor);
        c.add(homebtn);
        
        Border emptyBorder = BorderFactory.createEmptyBorder();
        btn1.setBorder(emptyBorder);
        btn2.setBorder(emptyBorder);
        btn3.setBorder(emptyBorder);
        btn4.setBorder(emptyBorder);
        btn5.setBorder(emptyBorder);
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Courses"");
        frame.setVisible(true);
        frame.add(c);
        
     }
    public static void main(String[] args) {
        
        CoursesDemo course=new CoursesDemo();
    }
}",1
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;


public class DeleteFaculty extends TeacherInformtion{
    
     JButton delete,back;     
   public  DeleteFaculty() throws FileNotFoundException{
        
        
        delete=new JButton(""Delete"");
        delete.setBounds(1100,540,150,50);
        //home.setFont(f);
        delete.setBackground(Color.BLACK);
        delete.setForeground(Color.WHITE);
        c.add(delete);
        
        back=new JButton(""Back"");
        back.setBounds(700,600,150,50);
        //home.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        delete.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                int numRow =table.getSelectedRow();
                model.removeRow(numRow);
                
                JOptionPane.showMessageDialog(null,""Delete SuccessFully\n"");
                File file  = new File(""teachersInformation.txt"");
            try{
           FileWriter  fr = new FileWriter(file);
           BufferedWriter bw = new BufferedWriter(fr); 
           
           //Object[] lines = bw.lines().toArray();
        
               
            for(int i=0;i<table.getRowCount();i++) 
            {
                 for(int j=0;j<table.getColumnCount();j++)
                 {
                  bw.write(table.getValueAt(i, j).toString()+"" ""+""#"");
                    
                 }
                 bw.write(System.getProperty(""line.separator"")); 
                
            }
           
            bw.close(); 
            fr.close();        
            
      }
      catch(FileNotFoundException ea)
      {
          ea.printStackTrace();
      }     catch (IOException ex) {
                Logger.getLogger(UpdateStudentInformation.class.getName()).log(Level.SEVERE, null, ex);
            }
         
        }
      
        
        });
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                AdminstratorDemo admin = new AdminstratorDemo();
        }
        
        });
    }
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;


public class DeleteStudent extends StudentInformation{
     
     JButton delete,back;     
   public  DeleteStudent() throws FileNotFoundException{
        
        
        delete=new JButton(""Delete"");
        delete.setBounds(1100,540,150,50);
        //home.setFont(f);
        delete.setBackground(Color.BLACK);
        delete.setForeground(Color.WHITE);
        c.add(delete);
        
        back=new JButton(""Back"");
        back.setBounds(700,600,150,50);
        //home.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        delete.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                int numRow =table.getSelectedRow();
                model.removeRow(numRow);
                
                JOptionPane.showMessageDialog(null,""Delete SuccessFully\n"");
                File file  = new File(""student.txt"");
            try{
           FileWriter  fr = new FileWriter(file);
           BufferedWriter bw = new BufferedWriter(fr); 
           
           //Object[] lines = bw.lines().toArray();
        
               
            for(int i=0;i<table.getRowCount();i++) 
            {
                 for(int j=0;j<table.getColumnCount();j++)
                 {
                  bw.write(table.getValueAt(i, j).toString()+"" ""+""#"");
                    
                 }
                 bw.write(System.getProperty(""line.separator"")); 
                
            }
           
            bw.close(); 
            fr.close();        
            
      }
      catch(FileNotFoundException ea)
      {
          ea.printStackTrace();
      }     catch (IOException ex) {
                Logger.getLogger(UpdateStudentInformation.class.getName()).log(Level.SEVERE, null, ex);
            }
         
        }
      
        
        });
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                AdminstratorDemo admin = new AdminstratorDemo();
        }
        
        });
    }
    
}",0
"
package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;


public class DirecTorModule extends TeacherModuleDemo{
    
    DirecTorModule(){
        
       
        
        addbtn.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==addbtn)
            {
                 frame.dispose();
                DirectorAddCourse course=new DirectorAddCourse();  
            }
                        
        }
        
        });
        coursebtn.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==coursebtn)
            {
                 frame.dispose();
                try {  
                    DirectorCourses course=new DirectorCourses();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DirecTorModule.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                        
        }
        
        });
        
        coursemarkbtn.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==coursemarkbtn)
               {
                  frame.dispose();
                  DirectorMenuFile menuFile = new DirectorMenuFile();
            
                  
               }
            }
            
        }); 
        
            courseattend.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==courseattend)
               {
                  frame.dispose();
                  AddCoursePresent addc = new AddCoursePresent();
                      addc.back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent aee) {
               if(aee.getSource()==addc.back )
               {
                  addc.frame.dispose();
                  DirecTorModule dtm = new DirecTorModule();
                  
               }
            }
            
        });
                  
                  
               }
            }
            
        });
       coursepresent.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==coursepresent)
               {
                  frame.dispose();
                  DirectorCourseMenu menuFile = new DirectorCourseMenu();
            
                  
               }
            }
            
       
      
            
        });   
        
        
        
    }
    public static void main(String[] args) {
        DirecTorModule d = new DirecTorModule();
    }
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JOptionPane;


public class DirectorAddCourse extends AddCourses{
    
    DirectorAddCourse(){
        
        back = new JButton(""Back"");
        back.setBounds(290, 560, 130, 50);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        back.setFont(F);
        c.add(back);
        
         
         
         Add.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
               if(e.getSource()==Add)
            {
                
                String name =tname.getText();
                String code =tcode.getText();
                String  description = desArea.getText();
                if(name.equals("""")){
                    JOptionPane.showMessageDialog(null, ""Pelase Enter  Coursename"");
                }
                else if(code.equals("""")){
                    JOptionPane.showMessageDialog(null, ""Pelase Enter  Course Code"");
                }
                else if(desArea.equals("""")){
                    JOptionPane.showMessageDialog(null, ""Pelase Say something About Course"");
                }
                else{
                    filewriter(name,code,description);
                    JOptionPane.showMessageDialog(null,""added Successfully"");
                    tname.setText("""");
                    tcode.setText("""");
                   desArea.setText("""");
                    
                }
                
                
                
                
                
                
            }
        }
            private void filewriter(String tname, String tcode, String desArea) {
                try{
                    FileWriter wr = new FileWriter(""DirectorCourse.txt"",true);
                    wr.write(tname+"" ""+""#"");
                    wr.write(tcode+"" ""+""#"");
                    wr.write(desArea+"" ""+""#"");   
                    wr.write(System.getProperty(""line.separator""));
                    wr.close();
                }
                catch(Exception ae)
                {
                    System.out.println(ae);
                }
            
        }
        
        });
         
         home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home admin =new Home();
        }
        
        });
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                DirecTorModule admin =new DirecTorModule();
        }
        
        });
        
    }
    
}",0
"
package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JFileChooser;

public class DirectorCourseMenu extends CourseMenu{
     int option;
    DirectorCourseMenu(){
        
        newitem.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
             File file;
             filename1=null;
            //JOptionPane.showMessageDialog(null, ""why"");
            if(filename1==null){
                int option = jc.showSaveDialog(DirectorCourseMenu.this);
            if(option==JFileChooser.APPROVE_OPTION){
                file=jc.getSelectedFile();
                filename1 = file.getPath();
                frame.dispose();
                AddPresent addPresent= new AddPresent();
                addPresent.filename=filename1;
               addPresent.back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==addPresent.back)
               {
                 addPresent.frame.dispose();
                 DirectorCourseMenu dmf = new DirectorCourseMenu();
                  
               }
            }
            
        });
                
            }
            }
            
            
            
            
        }
        
        });
              back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==back)
               {
                  frame.dispose();
                  DirecTorModule dtm = new DirecTorModule();
            
                  
               }
            }
            
        });
        
    }
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class DirectorCourses extends JFrame{
    Container c;
    JTable table;
    DefaultTableModel model;
    JScrollPane scroll;
    String[] coloum = {""Name"",""Code"",""DesCription""};
      JFrame frame;      
    //String[] rows = new String[6];
    JButton home,back;
    
    DirectorCourses() throws FileNotFoundException{
         c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
       
        
         Font hf=new Font(""Arial"",Font.BOLD,16);
        
        
        table = new JTable();
        
        model = new DefaultTableModel();
        model.setColumnIdentifiers(coloum);
        table.setModel(model);
        table.setFont(hf);
        table.setSelectionBackground(Color.BLACK);
        table.setBackground(Color.WHITE);
        table.setRowHeight(30);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(10,30,1300,500);
        c.add(scroll);
        
        back=new JButton(""Back"");
        back.setBounds(700,600,150,50);
        //home.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(1100,600,150,50);
        //home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
        
        
        frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Courses"");
        frame.setVisible(true);
        frame.add(c);
        
        File file  = new File(""DirectorCourse.txt"");
         
      try{
           FileReader  fr = new FileReader(file);
           BufferedReader br = new BufferedReader(fr); 
           
           Object[] lines = br.lines().toArray();
           
           for(int i=0;i<lines.length;i++)
           {
               String[] row = lines[i].toString().split(""#"");
               model.addRow(row);
           }
           
      }
      catch(Exception e)
      {
          e.printStackTrace();
      }
        
        
        home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home hm = new Home();           
        }
        
        });
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                DirecTorModule dirctor = new DirecTorModule();           
        }
        
        });
    }
    
}",0
"
package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;


public class DirectorLogin extends Login{
    
    DirectorLogin(){
        
        submit.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
 
            String name=usernameField.getText();
            String pass= passField.getText();
 
                if(name.equals(""Director"") && pass.equals(""1234"")){
                    JOptionPane.showMessageDialog(null,""Welcome"");
                    frame.dispose();
                    DirecTorModule director = new DirecTorModule();
                }
                else{
                    JOptionPane.showMessageDialog(null,""Wrong Password"");
                    usernameField.setText("""");
                    passField.setText("""");
                }
        }
        
        });
        
    }
    
}",0
"
package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JFileChooser;


public class DirectorMenuFile extends MenuFile{
    //int option;
    DirectorMenuFile(){
             
              newitem.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
             File file;
             filename1=null;
            //JOptionPane.showMessageDialog(null, ""why"");
            if(filename1==null){
                int option = jc.showSaveDialog(DirectorMenuFile.this);
            if(option==JFileChooser.APPROVE_OPTION){
                file=jc.getSelectedFile();
                filename1 = file.getPath();
                frame.dispose();
                AddStudentMarks addStudentMarks = new AddStudentMarks();
                addStudentMarks.filename=filename1;
               addStudentMarks.back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==addStudentMarks.back)
               {
                 addStudentMarks.frame.dispose();
                 DirectorMenuFile dmf = new DirectorMenuFile();
                  
               }
            }
            
        });
                
            }
            }
            
            
            
            
        }
        
        });
              back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==back)
               {
                  frame.dispose();
                  DirecTorModule dtm = new DirecTorModule();
            
                  
               }
            }
            
        });
              
              
    }
    
}",0
"
package project;


import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;

/*
 that class shows Fuculty member oF IIT.

*/
public class FacultyMember extends JFrame{
    
    private Container c;
    private Font F;
    private JButton t1,t2,t3,t4,t5;
    private JLabel l1,l2,l3,l4,l5;
    
    
    FacultyMember(){
        
        initComponent();
    }
    public void initComponent(){
        
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setTitle(""Faculty Member"");
        this.setLayout(null);
        this.setBounds(300,100, 650, 550);
        this.setBackground(Color.yellow);
        this.setResizable(false);
        c = this.getContentPane();
        c.setBackground(Color.pink);
        
        F = new Font(""Arial"",Font.BOLD,20);
        
        t1 = new JButton(""1"");
        t1.setBounds(100,30,50,40);
        t1.setFont(F);
        c.add(t1);
        
        
        t2 = new JButton(""2"");
        t2.setBounds(100,100,50,40);
        t2.setFont(F);
        c.add(t2);
        
        t3 = new JButton(""3"");
        t3.setBounds(100,170,50,40);
        t3.setFont(F);
        c.add(t3);
        
        t4 = new JButton(""4"");
        t4.setBounds(100,240,50,40);
        t4.setFont(F);
        c.add(t4);
        
        t5 = new JButton(""5"");
        t5.setBounds(100,310,50,40);
        t5.setFont(F);
        c.add(t5);
        
        
        
        
    }
    
    
    
    public static void main(String[] args) {
        
        
        FacultyMember Frame = new FacultyMember();
        
    }
    
}",0
"
package project;


import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import static java.text.NumberFormat.Field.INTEGER;
import static javax.management.openmbean.SimpleType.INTEGER;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


public class GraphDemo extends JFrame{
    Container c;
    JPanel panel2;
    JButton addbtn;
    JLabel semestername,gpa;
    JTextField semestertf,gpatf;
    Font f;
    JComboBox semestercb;
    String se;
     String       gp;
     ChartPanel chartPanel;
     public String[] cb={""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8""};
    GraphDemo()
    {
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
         
          
        XYDataset dataset = createDataset();
        JFreeChart chart = createChart(dataset);
        chartPanel = new ChartPanel(chart);
        chartPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        chartPanel.setBackground(Color.white);
        chartPanel.setBounds(70,20,750,500);
        chartPanel.setVisible(false);
        c.add(chartPanel);
        pack();
        setTitle(""Line chart"");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        semestername=new JLabel(""Semester Name :"");
        semestername.setBounds(70,550,220,50);
        semestername.setFont(f);
        c.add(semestername);
        
        semestercb=new JComboBox(cb);
        semestercb.setBounds(295,550,150,45);
        semestercb.setFont(f);
        c.add(semestercb);
        
        gpa=new JLabel(""Semister Gpa :"");
        gpa.setBounds(70,600,220,50);
        gpa.setFont(f);
        
        c.add(gpa);
        
        gpatf=new JTextField();
        gpatf.setBounds(295,600,150,45);
        gpatf.setFont(f);
        c.add(gpatf);
        
        addbtn=new JButton(""Add"");
        addbtn.setBounds(1100,640,120,50);
         addbtn.setFont(f);
        c.add(addbtn);
        
       
          gp= gpatf.getText();
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Home "");
        frame.setVisible(true);
        frame.add(c);
        
        addbtn.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
            
             if(e.getSource()==addbtn){
                
                  String gp=gpatf.getText();
                
                resultshow(gp); 
                chartPanel.setVisible(true);
                }
                
        
                
            }
            
        });
        
    }
    
   //  int tf=Integer.parseInt(se);
    // double value = Double.parseDouble(gp);
    
    
     private XYDataset createDataset() {

        XYSeries series = new XYSeries(""Saifur Rahman"");
       /* if(tf==1)
        {
          series.add(tf,value);
        }
        else if(tf==2)
        {
         series.add(tf, value);   
        }
        else if(tf==3)
        {
         series.add(tf, value);   
        }
        else if(tf==4)
        {
         series.add(tf, value);   
        }
       */
      
      
        series.add(1, 3.40);
        series.add(2, 3.52);
        series.add(3, 3.90);
        series.add(4, 3.50);
        series.add(5, 3.89);
        series.add(6, 4.00);
        series.add(7, 3.98);
        series.add(8, 4.00);  
      

        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);

        return dataset;
    }

    private JFreeChart createChart(XYDataset dataset) {

        JFreeChart chart = ChartFactory.createXYLineChart(
                ""Result sheet"", 
                ""Semester"", 
                ""GPA"", 
                dataset, 
                PlotOrientation.VERTICAL,
                true, 
                true, 
                false 
        );

        XYPlot plot = chart.getXYPlot();

        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesPaint(0, Color.RED);
        renderer.setSeriesStroke(0, new BasicStroke(2.0f));

        plot.setRenderer(renderer);
        plot.setBackgroundPaint(Color.white);

        plot.setRangeGridlinesVisible(true);
        plot.setRangeGridlinePaint(Color.BLACK);

        plot.setDomainGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.BLACK);

        chart.getLegend().setFrame(BlockBorder.NONE);

        chart.setTitle(new TextTitle(""Result Sheet"",
                        new Font(""Serif"", java.awt.Font.BOLD, 18)
                )
        );

        return chart;

    }
     public void resultshow(String gp)
        {
        //File folder=new File(""C:/Users/ASUS/Desktop/ResultSheet"");
       // folder.mkdir();
       // String path=folder.getAbsolutePath();
        //File result=new File(path+""/result.txt"");
        try{
           // result.createNewFile();
            FileWriter fn=new FileWriter(""result.txt"",true);
           
            fn.write(gp+"" ""+"""");
            fn.write(System.getProperty(""line.separator""));
            
            fn.close();   
            
        }
        catch(Exception e)
        {
          e.printStackTrace();
        }
            System.out.println(""success"");  
    }  
    
    
    
    public static void main(String[] args) {
        GraphDemo graph=new GraphDemo();
    }
}",1
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JButton;
 

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.border.Border;



public class Home extends JFrame{
    private Container c;
    private JLabel homelabel,label1,label2,label3,label4,label5,label6;
    private JButton studentbtn,teacherbtn,coursebtn,routinebtn,adminbtn,facultybtn,atndbtn,graphbtn;
    private Font f,hf;
    private Cursor cursor;
    
     Home()
    {
    
        
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        hf=new Font(""Arial"",Font.BOLD,28);
        
        cursor =new Cursor(Cursor.HAND_CURSOR);
        
        
        homelabel=new JLabel(""Home"");
        homelabel.setFont(hf);
        homelabel.setBounds(380,60,100,70);
        c.add(homelabel);
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        label1=new JLabel(""1."");
        label1.setFont(f);
        label1.setBounds(180,140,20,50);
        c.add(label1);
        
        studentbtn=new JButton(""Student Information"");
        studentbtn.setBounds(200,140,260,50);
        studentbtn.setFont(f);
        studentbtn.setCursor(cursor);
        studentbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(studentbtn);
        
        label2=new JLabel(""2."");
        label2.setFont(f);
        label2.setBounds(180,200,20,50);
        c.add(label2);
        
        teacherbtn=new JButton(""Teacher Information"");
        teacherbtn.setBounds(200,200,260,50);
        teacherbtn.setFont(f);
        teacherbtn.setCursor(cursor);
        teacherbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(teacherbtn);
        
        label3=new JLabel(""3."");
        label3.setFont(f);
        label3.setBounds(180,260,20,50);
        c.add(label3);
        
        coursebtn=new JButton(""Course Plan"");
        coursebtn.setBounds(200,260,170,50);
        coursebtn.setFont(f);
        coursebtn.setCursor(cursor);
        coursebtn.setBackground(new java.awt.Color(0,230,230));
        c.add(coursebtn);
        
        label4=new JLabel(""4."");
        label4.setFont(f);
        label4.setBounds(180,320,20,50);
        c.add(label4);
        
        routinebtn=new JButton(""Routine"");
        routinebtn.setBounds(200,320,130,50);
        routinebtn.setFont(f);
        routinebtn.setCursor(cursor);
        routinebtn.setBackground(new java.awt.Color(0,230,230));
        c.add(routinebtn);
        
        label5=new JLabel(""5."");
        label5.setFont(f);
        label5.setBounds(180,380,20,50);
        c.add(label5);
        
        atndbtn=new JButton(""Attendence Percentage"");
        atndbtn.setBounds(200,380,310,50);
        atndbtn.setFont(f);
        atndbtn.setCursor(cursor);
        atndbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(atndbtn);
        
        label6=new JLabel(""6."");
        label6.setFont(f);
        label6.setBounds(180,440,20,50);
        c.add(label6);
        
        graphbtn=new JButton(""Result Graph"");
        graphbtn.setBounds(200,440,210,50);
        graphbtn.setFont(f);
        graphbtn.setCursor(cursor);
        graphbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(graphbtn);
        
        adminbtn=new JButton(""Administrator"");
        adminbtn.setBounds(100,500,200,50);
        adminbtn.setFont(f);
        adminbtn.setBackground(Color.BLACK);
        adminbtn.setForeground(Color.WHITE);
        adminbtn.setCursor(cursor);
        c.add(adminbtn);
        
        facultybtn=new JButton(""Faculty"");
        facultybtn.setBounds(500,500,150,50);
        facultybtn.setFont(f);
        facultybtn.setBackground(Color.BLACK);
        facultybtn.setForeground(Color.WHITE);
        facultybtn.setCursor(cursor);
        c.add(facultybtn);
        
        
        
        
        Border emptyBorder = BorderFactory.createEmptyBorder();
        studentbtn.setBorder(emptyBorder);
        teacherbtn.setBorder(emptyBorder);
        coursebtn.setBorder(emptyBorder);
        routinebtn.setBorder(emptyBorder);
        adminbtn.setBorder(emptyBorder);
        atndbtn.setBorder(emptyBorder);
        graphbtn.setBorder(emptyBorder);
        
        
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Home "");
        frame.setVisible(true);
        frame.add(c);
        
        
        
        graphbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
               // TeacherNameDemo teacher = new TeacherNameDemo();    
               graph1 g =new graph1();
               
        }
        
        });
        facultybtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
               TeacherNameDemo teacher = new TeacherNameDemo();    
               //graph1 g =new graph1();
               
        }
        
        });
        
        studentbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
            try {
                StudentInformation stdInfo = new StudentInformation();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        });
        
        teacherbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
            try {
                TeacherInformtion teaher = new TeacherInformtion();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        });
        adminbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                AdministratorLogin admin =new AdministratorLogin();
        }
        
        });
       atndbtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                ShowA showA = new ShowA();
        }
        
        });
       
       routinebtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
            try {
                RoutineDemo routineDemo = new RoutineDemo();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        });
       
       coursebtn.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                sign a = new sign();
        }
        
        });
    }
 
}",1
"
package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;


public class Login extends JFrame{
    
    
            Container c;
            Font F ;
            JLabel username,password;
            JTextField usernameField;
            JPasswordField passField;
            JButton submit,back,reset;
           
           String user=""Admin"";
           String pass=""1234"";
            String newpassw;
           
    Login(){
        
        
        
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        F = new Font(""Arial"",Font.BOLD,30);
        
        username = new JLabel(""Username   :"");
        username.setBounds(270, 200, 250,60);
        username.setFont(F);
        c.add(username);
        
        usernameField = new JTextField();
        usernameField.setBounds(520, 200, 400,60);
        usernameField.setFont(F);
        c.add(usernameField);
        
        password = new JLabel(""Password   :"");
        password.setBounds(270, 330, 250,60);
        password.setFont(F);
        c.add(password);
        
       
        passField = new JPasswordField();
        passField.setBounds(520, 330, 400,60);
        passField.setFont(F);
        c.add(passField);
        
        submit = new JButton(""Submit"");
        submit.setBounds(750, 440, 165, 50);
        submit.setBackground(Color.BLACK);
        submit.setForeground(Color.WHITE);
        submit.setFont(F);
        c.add(submit);
        
        back=new JButton(""Back"");
        back.setBounds(750, 520, 165, 50);
        back.setFont(F);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        reset=new JButton(""Reset"");
        reset.setBounds(450, 440, 165, 50);
        reset.setFont(F);
        reset.setBackground(Color.BLACK);
        reset.setForeground(Color.WHITE);
        c.add(reset);
        
        
        
        
       
        
        
        
        File file  = new File(""password.txt"");
        try{
        FileWriter fw = new FileWriter(file);
        fw.write(pass);
        fw.write(System.getProperty(""line.separator""));
        fw.close();
        }
        catch(Exception e){
            e.printStackTrace();
        }
         
      
 
         reset.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==reset)
            {
                String m = JOptionPane.showInputDialog(null, ""Current Password"", 
                ""Change Password"", JOptionPane.INFORMATION_MESSAGE);
                
                if(m.equals(newpassw))
                {
                     
                     File file  = new File(""password.txt"");
                     file.delete(); 
                   Changepass c = new Changepass(); 
                  // c.setVisible(true);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, ""Invalid Password"");
                }
        
            }
            }
        
        });
        
        
         back.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==back)
            {
                dispose();
                Teachers t=new Teachers();  
            }
            }
        
        });
        
        
        
        submit.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
             
       
           
      
 
            String name=usernameField.getText();
            String password= passField.getText();
             File file  = new File(""password.txt"");
            try{
           FileReader  fr = new FileReader(file);
           BufferedReader br = new BufferedReader(fr); 
          String newpassw =br.readLine();
           
          System.out.println(newpassw);
           
      }
      catch(IOException ea)
      {
          ea.printStackTrace();
      }
        
             
                if(name.equals(user) && password.equals(newpassw)){
                    JOptionPane.showMessageDialog(null,""Welcome"");
                    dispose();
                    TeacherModuleDemo te=new TeacherModuleDemo();
                }
                else{
                    JOptionPane.showMessageDialog(null,""Wrong Password"");
                    usernameField.setText("""");
                    passField.setText("""");
                }
        }
        
        });
        
        JFrame frame = new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setVisible(true);
        frame.setTitle(""Faculty"");
        frame.add(c);
        
    }
    public static void main(String[] args) {
        Login l=new Login();
    }
   
}",1
"
package projectsms;


public class MainClass {
    
    public static void main(String[] args) {
        Home home=new Home();
    }
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import static java.awt.SystemColor.menu;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;


public class MenuFile extends JFrame{
       Container c;
       JMenuBar mb;
        JMenu  menu;
       JMenuItem newitem,openitem;
       JButton home,back;
     JFrame frame;
     String filename1;
     JFileChooser jc;
     JTable table;
    DefaultTableModel model;
    JScrollPane scroll;
    String[] coloum = {""Name"",""Roll No"",""CT1"",""CT2"",""Assignment"",""Attendence"",""total mark""};
    
     
       
    MenuFile(){
        c = this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
         
        mb=new JMenuBar();
        mb.setBounds(0, 0,1600,50);
        mb.getMaximumSize();
        
        
        menu=new JMenu(""File""); 
        menu.setPreferredSize(new Dimension(105,50));
            
        newitem = new JMenuItem(""New""); 
        newitem.setPreferredSize(new Dimension(100,50));
        openitem=new JMenuItem(""Open""); 
        openitem.setPreferredSize(new Dimension(100,50));
            
            
        menu.add(newitem); menu.add(openitem);  
        mb.add(menu);
        c.add(mb);
        
        
         Font hf=new Font(""Arial"",Font.BOLD,16);
        table = new JTable();
        
        model = new DefaultTableModel();
        
        
        
        jc = new JFileChooser();
        
         home=new JButton(""Home"");
        home.setBounds(500,600,150,50);
        home.setFont(hf);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        back=new JButton(""Back"");
        back.setBounds(700,600,150,50);
        back.setFont(hf);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        
        frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Menu"");
        frame.setVisible(true);
        frame.add(c);
        
        
        
        openitem.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
                
                model.setColumnIdentifiers(coloum);
                table.setModel(model);
                table.setFont(hf);
                table.setSelectionBackground(Color.BLACK);
                table.setBackground(Color.WHITE);
                table.setRowHeight(30);
        
                scroll = new JScrollPane(table);
                scroll.setBounds(10,60,1300,500);
                c.add(scroll);
  
                int option = jc.showOpenDialog(MenuFile.this);
                if (option == JFileChooser.APPROVE_OPTION){
                    
                    File sf = jc.getSelectedFile();
                    filename1 =sf.getPath();
                    sf  = new File(filename1);
                    try{
                        FileReader  fr = new FileReader(sf);
                         BufferedReader br = new BufferedReader(fr); 
                         
                         Object[] lines = br.lines().toArray();
                        for(int i=0;i<lines.length;i++)
                        {
                            String[] row = lines[i].toString().split(""#"");
                             model.addRow(row);
                                
                         }
                    }
                    catch(Exception ae){
                       ae.printStackTrace();
                    }
                    
                }
                
        }
        
        });
        
       home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home hm = new Home();           
        }
        
        });
           
        
        
    }
    
    
    
    
    
    
}",1
"
package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;


public class Routine_Demo extends JFrame{
    
    public Container c;
    public JTable table;
    public JLabel label;
    public JTextField tf;
    public JScrollPane scroll;
     Font f;   
    public JButton back,home;
     String cols[]={""Days"",""09.00am-10.00am"",""10.00am-11.00am"",""11.00am-12.00pm"",""01.00pm-02.00pm"",""02.00pm-03.00pm"",""3.00pm-4.00pm""};
     String rows[][] = new String[7][7] ;
     DefaultTableModel model;
     JFrame frame;
    Routine_Demo()throws FileNotFoundException
    {
        c=this.getContentPane();
        c.setBackground(new java.awt.Color(0, 230, 230));
        c.setLayout(null);
        
        f=new Font(""Arial"",Font.BOLD,18);
        
        label= new JLabel(""Semester :"");
        label.setBounds(10,10,150,50);
        label.setFont(f);
        c.add(label);
        
        tf =new JTextField();
        tf.setFont(f);
        tf.setBounds(150,10,150,50);
        c.add(tf);
      /*  
        rows[0][0]=""Sunday"";
        rows[0][1]="""";
        rows[0][2]="""";
        rows[0][3]="""";
        rows[0][4]="""";
        rows[0][5]="""";
        rows[0][6]="""";
        rows[1][0]=""Monday"";
        rows[1][1]="""";
        rows[1][2]="""";
        rows[1][3]="""";
        rows[1][4]="""";
        rows[1][5]="""";
        rows[1][6]="""";
        rows[2][0]=""Tuesday"";
        rows[2][1]="""";
        rows[2][2]="""";
        rows[2][3]="""";
        rows[2][4]="""";
        rows[2][5]="""";
        rows[2][6]="""";
        rows[3][0]=""Wednesday"";
        rows[3][1]="""";
        rows[3][2]="""";
        rows[3][3]="""";
        rows[3][4]="""";
        rows[3][5]="""";
        rows[3][6]="""";
        rows[4][0]=""Thusday"";
        rows[4][1]="""";
        rows[4][2]="""";
        rows[4][3]="""";
        rows[4][4]="""";
        rows[4][5]="""";
        rows[4][6]="""";
        rows[5][0]=""Friday"";
        rows[5][1]="""";
        rows[5][2]="""";
        rows[5][3]="""";
        rows[5][4]="""";
        rows[5][5]="""";
        rows[5][6]="""";
        rows[6][0]=""Saturday"";
        rows[6][1]="""";
        rows[6][2]="""";
        rows[6][3]="""";
        rows[6][4]="""";
        rows[6][5]="""";
        rows[6][6]="""";
        */
        Font hf=new Font(""Arial"",Font.BOLD,16);
        
        table =new JTable(rows,cols);
        table.setSelectionBackground(Color.GREEN);
        table.setRowHeight(60); 
        
        model=new DefaultTableModel();
        model.setColumnIdentifiers(cols);
        table.setModel(model);
        table.setFont(hf);
        table.setBackground(Color.WHITE);
    
        scroll=new JScrollPane(table);
        scroll.setBounds(5,90,1350,450);
        c.add(scroll);
        
        String filepath = """";
        
        File file  = new File(""routine.txt"");
         
      try{
           FileReader  fr = new FileReader(file);
           BufferedReader br = new BufferedReader(fr); 
           
           Object[] lines = br.lines().toArray();
           
           for(int i=0;i<lines.length;i++)
           {
               String[] row = lines[i].toString().split(""#"");
               
               model.addRow(row);
           }
           
      }
      catch(Exception e)
      {
          e.printStackTrace();
      }
        
        
        
        home=new JButton(""Home"");
        home.setBounds(520,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        home.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==home)
            {
                dispose();
                HomeDemo home=new HomeDemo();  
            }
            }
        
        });
           frame=new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Routine"");
        frame.setVisible(true);
        frame.add(c);
    }
    
    
   /* public static void main(String[] args) {
        Routine_Demo f= new Routine_Demo();
        
        
        
    }*/
}",0
"
package projectsms;



import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.text.DecimalFormat;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;


public class ShowA extends JFrame{
   Container c;
      JLabel l1,l2,l3,total,label;
      Font f;
      JTextField tf1,tf2,tf3;
      JButton b1,show,home;
      JComboBox cb1,cb2;
      private static DecimalFormat df2 = new DecimalFormat(""#.##"");
       JTable table;
     DefaultTableModel model;
      JScrollPane scroll;
      String[] coloum1 = {""Course Name"",""Course Code"",""Class Held"",""Class Attendence"",""Course Percentage""};
      
      ShowA()
      {
          
        
         c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(0,230,230));
        
        f = new Font(""Arial"",Font.BOLD,18);
        
        l1 = new JLabel(""Roll NO: "");
        l1.setBounds(10,10,80,50);
        l1.setForeground(Color.BLACK);
        l1.setFont(f);
        c.add(l1);
        
        l2 = new JLabel(""Semester  "");
        l2.setBounds(260,10,120,50);
        l2.setForeground(Color.BLACK);
        l2.setFont(f);
        c.add(l2);
        
        l3 = new JLabel(""Session  "");
        l3.setBounds(600,10,120,50);
        l3.setForeground(Color.BLACK);
        l3.setFont(f);
        c.add(l3);
        
        tf1= new JTextField();
        tf1.setBounds(90,10,150,50);
        tf1.setBackground(Color.WHITE);
        tf1.setFont(f);
        c.add(tf1);
        
         tf2= new JTextField();
        tf2.setBounds(380,10,200,50);
        tf2.setBackground(Color.WHITE);
        tf2.setFont(f);
        c.add(tf2);
        
        tf3= new JTextField();
        tf3.setBounds(725,10,200,50);
        tf3.setBackground(Color.WHITE);
        tf3.setFont(f);
        c.add(tf3);
        
        show=new JButton(""Show"");
        show.setBounds(1000,10,150,50);
        show.setFont(f);
        show.setBackground(Color.BLACK);
        show.setForeground(Color.WHITE);
        c.add(show);
        
        total = new JLabel(""Average Attendence :"");
        total.setBounds(40,640,200,50);
        total.setForeground(Color.BLACK);
        total.setFont(f);
        c.add(total);
        
        label = new JLabel(""No data"");
        label.setBounds(250,640,200,50);
        label.setForeground(Color.BLACK);
        label.setFont(f);
        c.add(label);
        
        home=new JButton(""Home"");
        home.setBounds(700,640,100,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
        
        
        JFrame frame=new JFrame();
      
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setExtendedState(MAXIMIZED_BOTH);
        frame.setVisible(true);
        frame.setTitle(""Attendence "");
        frame.add(c);
        
        home.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==home)
            {
                frame.dispose();
                Home home=new Home();  
            }
            }
        
        });
       show.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==show)
            {
                //frame.dispose();
        
        table = new JTable();
        model = new DefaultTableModel();
        
        model.setColumnIdentifiers(coloum1);
        table.setModel(model);
        table.setFont(f);
        table.setSelectionBackground(Color.BLACK);
        table.setBackground(Color.WHITE);
        table.setRowHeight(30);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(10,80,1300,450);
        c.add(scroll);
               String rollno =tf1.getText();
               String semister =tf2.getText();
               String session = tf3.getText();
               String filename = rollno+semister;
               
                if(rollno.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Roll No"");
                }
               else if(semister.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Semister"");
                }
                else if(semister.equals("""")){
                    JOptionPane.showMessageDialog(null,""Please Insert Session"");
                }
                else{
                    File file  = new File(filename);
                    if(file.isFile()){
                        
                        
                        try{
                         FileReader  fr = new FileReader(file);
                        BufferedReader br = new BufferedReader(fr); 
           
                        Object[] lines = br.lines().toArray();
           
                       for(int i=0;i<lines.length;i++)
                      {
                           String[] row = lines[i].toString().split(""#"");
                           model.addRow(row);
                           String per = model.getValueAt(i, 4).toString();
                           double per1 =Double.parseDouble(per);
                           per1++;
                           if(i==lines.length-1){
                               double per2 =per1/i+1;
                              String parcent = df2.format(per1); 
                              String parcent2 =new Double(parcent).toString();
                              label.setText(parcent2+""%"");
                           }
                           
                          
                           
                      }
           
      }
      catch(FileNotFoundException ae)
      {
          ae.printStackTrace();
      }
                        
                    }
                    else{
                        JOptionPane.showMessageDialog(null, ""There are no file"");
                    }
                    
                }
                
               
               
                 
            }
            }
        
        });
        
      }
      public static void main(String[] args) {
        ShowA d=new ShowA();
        
    }
}",1
"
package projectsms;

  

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;


public class StudentMarks extends JFrame{
    
    
     Container c;
     JLabel namelbl,rolllbl,ct1lbl,ct2lbl,assignlbl,attendencelbl;
     JTextField name,roll,ct1,ct2,assign,attendence;
      JButton back,home;
     final Font f;
     JFrame frame;
    
  
    StudentMarks(){
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        
        namelbl=new JLabel(""Name                 "");      
        namelbl.setFont(f);
        namelbl.setBounds(140,100,200,50);
        c.add(namelbl);
        
        name=new JTextField();      
        name.setFont(f);
        name.setBounds(500,100,300,40);
        c.add(name);
        
        
        rolllbl=new JLabel(""Roll No              "");      
        rolllbl.setFont(f);
        rolllbl.setBounds(140,160,200,50);
        c.add(rolllbl);
       
        roll=new JTextField();      
        roll.setFont(f);
        roll.setBounds(500,160,300,40);
        c.add(roll);
        
        ct1lbl=new JLabel(""Class Test 1  "");      
        ct1lbl.setFont(f);
        ct1lbl.setBounds(140,220,200,50);
        c.add(ct1lbl);
        
        ct1=new JTextField();      
        ct1.setFont(f);
        ct1.setBounds(500,220,300,40);
        c.add(ct1);
        
        ct2lbl=new JLabel(""Class Test 2    "");      
        ct2lbl.setFont(f); 
        ct2lbl.setBounds(140,280,200,50);
        c.add(ct2lbl);
        
        ct2=new JTextField();      
        ct2.setFont(f);
        ct2.setBounds(500,280,300,40);
        c.add(ct2);
        
        assignlbl=new JLabel(""Assignment Mark"");      
        assignlbl.setFont(f); 
        assignlbl.setBounds(140,340,350,50);
        c.add(assignlbl);
        
        assign=new JTextField();      
        assign.setFont(f);
        assign.setBounds(500,340,300,40);
        c.add(assign);
        
        attendencelbl=new JLabel(""Attendence  Mark"");      
        attendencelbl.setFont(f);
        attendencelbl.setBounds(140,400,350,50);
        c.add(attendencelbl);
        
        attendence=new JTextField();      
        attendence.setFont(f);
        attendence.setBounds(500,400,300,40);
        c.add(attendence);
        
      
        
        
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(650,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
         frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Student Marks"");
        frame.setVisible(true);
        frame.add(c);
    }
    
   // public static void main(String[] args) {
      //  StudentMarks sm = new StudentMarks();
   // }
    
}",1
"
package project;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

public class TableTeat extends JFrame{
  public JScrollPane scroll;
  public static void main(String[] args) {
    new TableTeat();
  }

  public TableTeat() {
    startUI();
  }

  public void startUI() {
    EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        try {
          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
          ex.printStackTrace();
        }
     
        
        MyTableModel model = new MyTableModel();
        model.addRow(new Object[]{""ASH1825001M"", ""Abdulla Al Noor"", false});
        model.addRow(new Object[]{""ASH1825002M"", ""Imran Hossien"", false});
        model.addRow(new Object[]{""ASH1825003M"", ""Mahabub Alam"", false});
        model.addRow(new Object[]{""ASH1825004M"", ""Fazle Rabbi"", false});
        model.addRow(new Object[]{""ASH1825005M"", ""Asif "", false});
        model.addRow(new Object[]{""ASH1825006M"", ""Tamanna"", false});
        model.addRow(new Object[]{""ASH1825007M"", ""Mynuddin"", false});
        model.addRow(new Object[]{""ASH1825008M"", ""Suvra"", false});
        model.addRow(new Object[]{""ASH1825009M"", ""Abdulla Al Noor"", false});
        model.addRow(new Object[]{""ASH1825010M"", ""Imran Hossien"", false});
        model.addRow(new Object[]{""ASH1825002M"", ""Mahabub Alam"", false});
        model.addRow(new Object[]{""ASH1825003M"", ""Fazle Rabbi"", false});
        model.addRow(new Object[]{""ASH1825001M"", ""Asif "", false});
        model.addRow(new Object[]{""ASH1825002M"", ""Tamanna"", false});
        model.addRow(new Object[]{""ASH1825002M"", ""Mynuddin"", false});
        model.addRow(new Object[]{""ASH1825003M"", ""Suvra"", false});
        model.addRow(new Object[]{""ASH1825001M"", ""Abdulla Al Noor"", false});
        model.addRow(new Object[]{""ASH1825002M"", ""Imran Hossien"", false});
        model.addRow(new Object[]{""ASH1825003M"", ""Mahabub Alam"", false});
        model.addRow(new Object[]{""ASH1825004M"", ""Fazle Rabbi"", false});
        model.addRow(new Object[]{""ASH1825005M"", ""Asif "", false});
        model.addRow(new Object[]{""ASH1825006M"", ""Tamanna"", false});
        model.addRow(new Object[]{""ASH1825007M"", ""Mynuddin"", false});
        model.addRow(new Object[]{""ASH1825008M"", ""Suvra"", false});
        model.addRow(new Object[]{""ASH1825009M"", ""Abdulla Al Noor"", false});
        model.addRow(new Object[]{""ASH1825010M"", ""Imran Hossien"", false});
        model.addRow(new Object[]{""ASH1825002M"", ""Mahabub Alam"", false});
        model.addRow(new Object[]{""ASH1825003M"", ""Fazle Rabbi"", false});
        model.addRow(new Object[]{""ASH1825001M"", ""Asif "", false});
        model.addRow(new Object[]{""ASH1825002M"", ""Tamanna"", false});
        model.addRow(new Object[]{""ASH1825002M"", ""Mynuddin"", false});
        model.addRow(new Object[]{""ASH1825003M"", ""Suvra"", false});
        JTable table = new JTable(model);
        table.setRowHeight(40);
       
        
        
       /* TableColumnModel columnModel = table.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(20);
        columnModel.getColumn(1).setPreferredWidth(100);
        columnModel.getColumn(2).setPreferredWidth(50);
        */
       
       DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
       
        JScrollPane scrollpane = new JScrollPane(table);
        scrollpane.setBounds(5,90,1350,600);
        
       // scroll=new JScrollPane(table);
       // scroll.setBounds(5,90,1350,600);
        
       // JScrollPane scrollpane ;
        JFrame frame = new JFrame(""Testing"");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       // frame.add(new JScrollPane(table));
        frame.add(scrollpane);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        
      }
    });
  }

  public class MyTableModel extends DefaultTableModel {

    public MyTableModel() {
      super(new String[]{""ID"", ""Name"", ""Present"",""Percentage""}, 0);
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
      Class clazz = String.class;
      switch (columnIndex) {
        case 0:
          clazz = Integer.class;
          break;
        case 2:
          clazz = Boolean.class;
          break;
      }
      return clazz;
    }

    @Override
    public boolean isCellEditable(int row, int column) {
      return column == 2;
    }

    @Override
    public void setValueAt(Object aValue, int row, int column) {
      if (aValue instanceof Boolean && column == 2) {
        System.out.println(aValue);
        Vector rowData = (Vector)getDataVector().get(row);
        rowData.set(2, (boolean)aValue);
        fireTableCellUpdated(row, column);
      }
    }

  }

}",0
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JOptionPane;


public class Teacher4AddCourse extends AddCourses{
    
    Teacher4AddCourse(){
        
        back = new JButton(""Back"");
        back.setBounds(290, 560, 130, 50);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        back.setFont(F);
        c.add(back);
        
         
         
         Add.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
               if(e.getSource()==Add)
            {
                
                String name =tname.getText();
                String code =tcode.getText();
                String  description = desArea.getText();
                if(name.equals("""")){
                    JOptionPane.showMessageDialog(null, ""Pelase Enter  Coursename"");
                }
                else if(code.equals("""")){
                    JOptionPane.showMessageDialog(null, ""Pelase Enter  Course Code"");
                }
                else if(desArea.equals("""")){
                    JOptionPane.showMessageDialog(null, ""Pelase Say something About Course"");
                }
                else{
                    filewriter(name,code,description);
                    JOptionPane.showMessageDialog(null,""added Successfully"");
                    tname.setText("""");
                    tcode.setText("""");
                   desArea.setText("""");
                    
                }
                
                
                
                
                
                
            }
        }
            private void filewriter(String tname, String tcode, String desArea) {
                try{
                    FileWriter wr = new FileWriter(""teacherCourse.txt"",true);
                    wr.write(tname+"" ""+""#"");
                    wr.write(tcode+"" ""+""#"");
                    wr.write(desArea+"" ""+""#"");   
                    wr.write(System.getProperty(""line.separator""));
                    wr.close();
                }
                catch(Exception ae)
                {
                    System.out.println(ae);
                }
            
        }
        
        });
         
         home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home admin =new Home();
        }
        
        });
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Teacher4Module admin =new Teacher4Module();
        }
        
        });
        
    }
    
}",0
"
package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JFileChooser;

public class Teacher4CourseMenu extends CourseMenu{
     int option;
    Teacher4CourseMenu(){
        
        newitem.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
             File file;
             filename1=null;
            //JOptionPane.showMessageDialog(null, ""why"");
            if(filename1==null){
                int option = jc.showSaveDialog(Teacher4CourseMenu.this);
            if(option==JFileChooser.APPROVE_OPTION){
                file=jc.getSelectedFile();
                filename1 = file.getPath();
                frame.dispose();
                AddPresent addPresent= new AddPresent();
                addPresent.filename=filename1;
               addPresent.back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==addPresent.back)
               {
                 addPresent.frame.dispose();
                 Teacher4CourseMenu dmf = new Teacher4CourseMenu();
                  
               }
            }
            
        });
                
            }
            }
            
            
            
            
        }
        
        });
              back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==back)
               {
                  frame.dispose();
                  Teacher4Module dtm = new Teacher4Module();
            
                  
               }
            }
            
        });
        
    }
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class Teacher4Courses extends JFrame{
    Container c;
    JTable table;
    DefaultTableModel model;
    JScrollPane scroll;
    String[] coloum = {""Name"",""Code"",""DesCription""};
      JFrame frame;      
    //String[] rows = new String[6];
    JButton home,back;
    
    Teacher4Courses() throws FileNotFoundException{
         c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
       
        
         Font hf=new Font(""Arial"",Font.BOLD,16);
        
        
        table = new JTable();
        
        model = new DefaultTableModel();
        model.setColumnIdentifiers(coloum);
        table.setModel(model);
        table.setFont(hf);
        table.setSelectionBackground(Color.BLACK);
        table.setBackground(Color.WHITE);
        table.setRowHeight(30);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(10,30,1300,500);
        c.add(scroll);
        
        back=new JButton(""Back"");
        back.setBounds(700,600,150,50);
        //home.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(1100,600,150,50);
        //home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
        
        
        frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Courses"");
        frame.setVisible(true);
        frame.add(c);
        
        File file  = new File(""teacherCourse.txt"");
         
      try{
           FileReader  fr = new FileReader(file);
           BufferedReader br = new BufferedReader(fr); 
           
           Object[] lines = br.lines().toArray();
           
           for(int i=0;i<lines.length;i++)
           {
               String[] row = lines[i].toString().split(""#"");
               model.addRow(row);
           }
           
      }
      catch(Exception e)
      {
          e.printStackTrace();
      }
        
        
        home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home hm = new Home();           
        }
        
        });
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Teacher4Module dirctor = new Teacher4Module();           
        }
        
        });
    }
    
}",0
"

package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;


public class Teacher4Login extends Login{
    
    Teacher4Login(){
        
        submit.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
 
            String name=usernameField.getText();
            String pass= passField.getText();
 
                if(name.equals(""Falguni Roy"") && pass.equals(""1234"")){
                        JOptionPane.showMessageDialog(null,""Welcome"");
                    frame.dispose();
                    Teacher4Module director = new Teacher4Module();
                }
                else{
                    JOptionPane.showMessageDialog(null,""Wrong Password"");
                    usernameField.setText("""");
                    passField.setText("""");
                }
        }
        
        });
        
    }
    
}
",0
"
package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JFileChooser;


public class Teacher4MenuFile extends MenuFile{
    int option;
    Teacher4MenuFile(){
             
              newitem.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
             File file;
             filename1=null;
            //JOptionPane.showMessageDialog(null, ""why"");
            if(filename1==null){
                int option = jc.showSaveDialog(Teacher4MenuFile.this);
            if(option==JFileChooser.APPROVE_OPTION){
                file=jc.getSelectedFile();
                filename1 = file.getPath();
                frame.dispose();
                AddStudentMarks addStudentMarks = new AddStudentMarks();
                addStudentMarks.filename=filename1;
               addStudentMarks.back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==addStudentMarks.back)
               {
                 addStudentMarks.frame.dispose();
                 Teacher4MenuFile dmf = new Teacher4MenuFile();
                  
               }
            }
            
        });
                
            }
            }
            
            
            
            
        }
        
        });
              back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==back)
               {
                  frame.dispose();
                 Teacher4Module dtm = new Teacher4Module();
            
                  
               }
            }
            
        });
              
              
    }
    
}",0
"
package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;


public class Teacher4Module extends TeacherModuleDemo{
    
    Teacher4Module(){
        
       
        
        addbtn.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==addbtn)
            {
                 frame.dispose();
                Teacher4AddCourse course=new Teacher4AddCourse();  
            }
                        
        }
        
        });
        coursebtn.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==coursebtn)
            {
                 frame.dispose();
                try {  
                    Teacher4Courses course=new Teacher4Courses();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DipanitaModule.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                        
        }
        
        });
        
        coursemarkbtn.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==coursemarkbtn)
               {
                  frame.dispose();
                  Teacher4MenuFile menuFile = new Teacher4MenuFile();
            
                  
               }
            }
            
        }); 
        
            courseattend.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==courseattend)
               {
                  frame.dispose();
                  AddCoursePresent addc = new AddCoursePresent();
                      addc.back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent aee) {
               if(aee.getSource()==addc.back )
               {
                  addc.frame.dispose();
                  Teacher4Module dtm = new Teacher4Module();
                  
               }
            }
            
        });
                  
                  
               }
            }
            
        });
            coursepresent.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==coursepresent)
               {
                  frame.dispose();
                  Teacher4CourseMenu menuFile = new Teacher4CourseMenu();
            
                  
               }
            }
            
       
      
            
        });  
        
        
        
    }
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JOptionPane;


public class Teacher5AddCourse extends AddCourses{
    
    Teacher5AddCourse(){
        
        back = new JButton(""Back"");
        back.setBounds(290, 560, 130, 50);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        back.setFont(F);
        c.add(back);
        
         
         
         Add.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
               if(e.getSource()==Add)
            {
                
                String name =tname.getText();
                String code =tcode.getText();
                String  description = desArea.getText();
                if(name.equals("""")){
                    JOptionPane.showMessageDialog(null, ""Pelase Enter  Coursename"");
                }
                else if(code.equals("""")){
                    JOptionPane.showMessageDialog(null, ""Pelase Enter  Course Code"");
                }
                else if(desArea.equals("""")){
                    JOptionPane.showMessageDialog(null, ""Pelase Say something About Course"");
                }
                else{
                    filewriter(name,code,description);
                    JOptionPane.showMessageDialog(null,""added Successfully"");
                    tname.setText("""");
                    tcode.setText("""");
                   desArea.setText("""");
                    
                }
                
                
                
                
                
                
            }
        }
            private void filewriter(String tname, String tcode, String desArea) {
                try{
                    FileWriter wr = new FileWriter(""teacher5Course.txt"",true);
                    wr.write(tname+"" ""+""#"");
                    wr.write(tcode+"" ""+""#"");
                    wr.write(desArea+"" ""+""#"");   
                    wr.write(System.getProperty(""line.separator""));
                    wr.close();
                }
                catch(Exception ae)
                {
                    System.out.println(ae);
                }
            
        }
        
        });
         
         home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home admin =new Home();
        }
        
        });
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Teacher5Module admin =new Teacher5Module();
        }
        
        });
        
    }
    
}",0
"
package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JFileChooser;

public class Teacher5CourseMenu extends CourseMenu{
     int option;
    Teacher5CourseMenu(){
        
        newitem.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
             File file;
             filename1=null;
            //JOptionPane.showMessageDialog(null, ""why"");
            if(filename1==null){
                int option = jc.showSaveDialog(Teacher5CourseMenu.this);
            if(option==JFileChooser.APPROVE_OPTION){
                file=jc.getSelectedFile();
                filename1 = file.getPath();
                frame.dispose();
                AddPresent addPresent= new AddPresent();
                addPresent.filename=filename1;
               addPresent.back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==addPresent.back)
               {
                 addPresent.frame.dispose();
                 Teacher5CourseMenu dmf = new Teacher5CourseMenu();
                  
               }
            }
            
        });
                
            }
            }
            
            
            
            
        }
        
        });
              back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==back)
               {
                  frame.dispose();
                  Teacher5Module dtm = new Teacher5Module();
            
                  
               }
            }
            
        });
        
    }
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class Teacher5Courses extends JFrame{
    Container c;
    JTable table;
    DefaultTableModel model;
    JScrollPane scroll;
    String[] coloum = {""Name"",""Code"",""DesCription""};
      JFrame frame;      
    //String[] rows = new String[6];
    JButton home,back;
    
    Teacher5Courses() throws FileNotFoundException{
         c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
       
        
         Font hf=new Font(""Arial"",Font.BOLD,16);
        
        
        table = new JTable();
        
        model = new DefaultTableModel();
        model.setColumnIdentifiers(coloum);
        table.setModel(model);
        table.setFont(hf);
        table.setSelectionBackground(Color.BLACK);
        table.setBackground(Color.WHITE);
        table.setRowHeight(30);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(10,30,1300,500);
        c.add(scroll);
        
        back=new JButton(""Back"");
        back.setBounds(700,600,150,50);
        //home.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        home=new JButton(""Home"");
        home.setBounds(1100,600,150,50);
        //home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
        
        
        frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Courses"");
        frame.setVisible(true);
        frame.add(c);
        
        File file  = new File(""teacher5Course.txt"");
         
      try{
           FileReader  fr = new FileReader(file);
           BufferedReader br = new BufferedReader(fr); 
           
           Object[] lines = br.lines().toArray();
           
           for(int i=0;i<lines.length;i++)
           {
               String[] row = lines[i].toString().split(""#"");
               model.addRow(row);
           }
           
      }
      catch(Exception e)
      {
          e.printStackTrace();
      }
        
        
        home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home hm = new Home();           
        }
        
        });
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Teacher5Module dirctor = new Teacher5Module();           
        }
        
        });
    }
    
}",0
"

package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;


public class Teacher5Login extends Login{
    
    Teacher5Login(){
        
        submit.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
 
            String name=usernameField.getText();
            String pass= passField.getText();
 
                if(name.equals(""Dipok Chandra Das"") && pass.equals(""1234"")){
                        JOptionPane.showMessageDialog(null,""Welcome"");
                    frame.dispose();
                    Teacher5Module t = new Teacher5Module();
                }
                else{
                    JOptionPane.showMessageDialog(null,""Wrong Password"");
                    usernameField.setText("""");
                    passField.setText("""");
                }
        }
        
        });
        
    }
    
}
",0
"
package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JFileChooser;


public class Teacher5MenuFile extends MenuFile{
    int option;
    Teacher5MenuFile(){
             
              newitem.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
             File file;
             filename1=null;
            //JOptionPane.showMessageDialog(null, ""why"");
            if(filename1==null){
                int option = jc.showSaveDialog(Teacher5MenuFile.this);
            if(option==JFileChooser.APPROVE_OPTION){
                file=jc.getSelectedFile();
                filename1 = file.getPath();
                frame.dispose();
                AddStudentMarks addStudentMarks = new AddStudentMarks();
                addStudentMarks.filename=filename1;
               addStudentMarks.back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==addStudentMarks.back)
               {
                 addStudentMarks.frame.dispose();
                 Teacher5MenuFile dmf = new Teacher5MenuFile();
                  
               }
            }
            
        });
                
            }
            }
            
            
            
            
        }
        
        });
              back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==back)
               {
                  frame.dispose();
                 Teacher5Module dtm = new Teacher5Module();
            
                  
               }
            }
            
        });
              
              
    }
    
}",0
"
package projectsms;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;


public class Teacher5Module extends TeacherModuleDemo{
    
    Teacher5Module(){
        
       
        
        addbtn.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==addbtn)
            {
                 frame.dispose();
                Teacher5AddCourse course=new Teacher5AddCourse();  
            }
                        
        }
        
        });
        coursebtn.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==coursebtn)
            {
                 frame.dispose();
                try {  
                    Teacher5Courses course1=new Teacher5Courses();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Teacher5Module.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                        
        }
        
        });
        
        coursemarkbtn.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==coursemarkbtn)
               {
                  frame.dispose();
                  Teacher5MenuFile menuFile = new Teacher5MenuFile();
            
                  
               }
            }
            
        }); 
        
            courseattend.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==courseattend)
               {
                  frame.dispose();
                  AddCoursePresent addc = new AddCoursePresent();
                      addc.back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent aee) {
               if(aee.getSource()==addc.back )
               {
                  addc.frame.dispose();
                  Teacher5Module dtm = new Teacher5Module();
                  
               }
            }
            
        });
                  
                  
               }
            }
            
        });
            
coursepresent.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==coursepresent)
               {
                  frame.dispose();
                  Teacher5CourseMenu menuFile = new Teacher5CourseMenu();
            
                  
               }
            }
            
       
      
            
        }); 
        
        
        
    }
    
}",0
"
package projectsms;


import java.awt.Color;
import java.awt.Container; 
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;



public class TeacherInformtion extends JFrame{
    
    Container c;
    JTable table;
    DefaultTableModel model;
    JScrollPane scroll;
    String[] coloum = {""Name"",""Home town"",""Email"",""Contact"",""Blood group""};
      JFrame frame;      
    //String[] rows = new String[6];
    JButton home;
    
    public TeacherInformtion() throws FileNotFoundException {
    
         
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
       
        
         Font hf=new Font(""Arial"",Font.BOLD,16);
        
        
        table = new JTable();
        
        model = new DefaultTableModel();
        model.setColumnIdentifiers(coloum);
        table.setModel(model);
        table.setFont(hf);
        table.setSelectionBackground(Color.BLACK);
        table.setBackground(Color.WHITE);
        table.setRowHeight(30);
        
        scroll = new JScrollPane(table);
        scroll.setBounds(10,30,1300,500);
        c.add(scroll);
        
        
        home=new JButton(""Home"");
        home.setBounds(1100,600,150,50);
        //home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        
        
        
        frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Teacher Information"");
        frame.setVisible(true);
        frame.add(c);
        
        //String arr[]= {""dsfs"",""dhgfh"",""fgdh"",""hggfh"",""fgh"",""fghf""};
        //model.addRow(arr);
       
        
        File file  = new File(""teachersInformation.txt"");
         
      try{
           FileReader  tfr = new FileReader(file);
           BufferedReader tbr = new BufferedReader(tfr); 
           
           Object[] lines = tbr.lines().toArray();
           
            for (Object line : lines) {
                String[] row = line.toString().split(""#"");
                model.addRow(row);
            }
           
      }
      catch(FileNotFoundException e)
      {
          e.printStackTrace();
      }
        
        
        home.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                Home hom = new Home();           
        }
        
        });
        
        
       
        
       
    }
    
    
}",0
"
package projectsms;





import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.border.Border;


public class TeacherModuleDemo extends JFrame{
     Container c;
     JLabel contentlabel,label1,label2,label3,label4,label5,label6;
     JButton coursebtn,addbtn,updatebtn,backbtn,homebtn,coursemarkbtn,courseattend,coursepresent,back;
     Font hf,f;
     Cursor cursor;
     JFrame frame;
    TeacherModuleDemo()
    {
         c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
        hf=new Font(""Arial"",Font.BOLD,28);
        
        cursor =new Cursor(Cursor.HAND_CURSOR);
        
        
        contentlabel=new JLabel(""Teacher Module"");
        contentlabel.setFont(hf);
        contentlabel.setBounds(350,60,250,70);
        c.add(contentlabel);
        
        f=new Font(""Arial"",Font.BOLD,24);
        
        label1=new JLabel(""1."");
        label1.setFont(f);
        label1.setBounds(180,140,20,50);
        c.add(label1);
        
        coursebtn=new JButton(""Courses"");
        coursebtn.setBounds(200,140,130,50);
        coursebtn.setFont(f);
        coursebtn.setCursor(cursor);
        coursebtn.setBackground(new java.awt.Color(0,230,230));
        c.add(coursebtn);
        
        label2=new JLabel(""2."");
        label2.setFont(f);
        label2.setBounds(180,200,20,50);
        c.add(label2);
        
        addbtn=new JButton(""Add Courses"");
        addbtn.setBounds(200,200,170,50);
        addbtn.setFont(f);
        addbtn.setCursor(cursor);
        addbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(addbtn);
        
        label3=new JLabel(""3."");
        label3.setFont(f);
        label3.setBounds(180,260,20,50);
        c.add(label3);
        
        coursemarkbtn=new JButton(""Courses CT and attendence"");
        coursemarkbtn.setBounds(200,260,360,50);
        coursemarkbtn.setFont(f);
        coursemarkbtn.setCursor(cursor);
        coursemarkbtn.setBackground(new java.awt.Color(0,230,230));
        c.add(coursemarkbtn);
        
        label4=new JLabel(""4."");
        label4.setFont(f);
        label4.setBounds(180,320,20,50);
        c.add(label4);
        
        courseattend=new JButton(""Courses Attendence"");
        courseattend.setBounds(200,320,260,50);
        courseattend.setFont(f);
        courseattend.setCursor(cursor);
        courseattend.setBackground(new java.awt.Color(0,230,230));
        c.add(courseattend);
        
        label5=new JLabel(""5."");
        label5.setFont(f);
        label5.setBounds(180,380,20,50);
        c.add(label5);
        
        coursepresent=new JButton(""Course Percentage"");
        coursepresent.setBounds(200,380,260,50);
        coursepresent.setFont(f);
        coursepresent.setCursor(cursor);
        coursepresent.setBackground(new java.awt.Color(0,230,230));
        c.add(coursepresent);
        
        
        
        
        homebtn=new JButton(""Home"");
        homebtn.setBounds(500,500,150,50);
        homebtn.setFont(f);
        homebtn.setBackground(Color.BLACK);
        homebtn.setForeground(Color.WHITE);
        homebtn.setCursor(cursor);
        c.add(homebtn);
        
        back=new JButton(""Back"");
        back.setBounds(200,500,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
       back.setCursor(cursor);
        c.add(back);
        
        Border emptyBorder = BorderFactory.createEmptyBorder();
        coursebtn.setBorder(emptyBorder);
        addbtn.setBorder(emptyBorder);
        coursemarkbtn.setBorder(emptyBorder);
        courseattend.setBorder(emptyBorder);
        coursepresent.setBorder(emptyBorder);
        
        
        frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Teacher Module"");
        frame.setVisible(true);
        frame.add(c);
        
        
        
           
            back.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==back)
               {
                  frame.dispose();
                  TeacherNameDemo n = new TeacherNameDemo();
                  
               }
            }
            
        });
        
         
         
        
        
       
        
        
        
    }
    
    public static void main(String[] args) {
        TeacherModuleDemo t = new TeacherModuleDemo();
    }
   
    
}",1
"
package projectsms;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.border.Border;


public class TeacherNameDemo extends JFrame{
    
    Container c;
    private JButton back;
    private Font F;
    private JButton btn1,btn2,btn3,btn4,btn5;
    private JLabel l1,l2,l3,l4,l5;
    
    
    TeacherNameDemo(){
        
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
         F = new Font(""Arial"",Font.BOLD,20);
        
        l1 = new JLabel(""1 ."");
        l1.setBounds(100,30,50,40);
        l1.setFont(F);
        c.add(l1);
        
        btn1 = new JButton(""Mohammad Nuruzzaman Bhuiyan"");
        btn1.setBounds(160,30,350,40);
        btn1.setBackground(new java.awt.Color(0,230,230));
        btn1.setFont(F);
        c.add(btn1);
        
        l2 = new JLabel(""2 ."");
        l2.setBounds(100,100,50,40);
        l2.setFont(F);
        c.add(l2);
        
        btn2=new JButton(""Md. Auhidur Rahman"");
         btn2.setBounds(160,100,250,40);
        btn2.setBackground(new java.awt.Color(0,230,230));
        btn2.setFont(F);
        c.add(btn2);
        
        l3 = new JLabel(""3 ."");
        l3.setBounds(100,170,50,40);
        l3.setFont(F);
        c.add(l3);
        
        btn3=new JButton(""Dipanita Saha"");
         btn3.setBounds(160,170,190,40);
        btn3.setBackground(new java.awt.Color(0,230,230));
        btn3.setFont(F);
        c.add(btn3);
        
        l4 = new JLabel(""4 ."");
        l4.setBounds(100,240,50,40);
        l4.setFont(F);
        c.add(l4);
        
        btn4=new JButton(""Falguni Roy"");
         btn4.setBounds(160,240,185,40);
        btn4.setBackground(new java.awt.Color(0,230,230));
        btn4.setFont(F);
        c.add(btn4);
        
        l5 = new JLabel(""5 ."");
        l5.setBounds(100,310,50,40);
        l5.setFont(F);
        c.add(l5);
        
        btn5=new JButton(""Dipok Chandra Das"");
         btn5.setBounds(160,310,250,40);
        btn5.setBackground(new java.awt.Color(0,230,230));
        btn5.setFont(F);
        c.add(btn5);
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(F);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        Border emptyBorder = BorderFactory.createEmptyBorder();
        btn1.setBorder(emptyBorder);
        btn2.setBorder(emptyBorder);
        btn3.setBorder(emptyBorder);
        btn4.setBorder(emptyBorder);
        btn5.setBorder(emptyBorder);
        
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Teacher"");
        frame.setVisible(true);
        frame.add(c);
        
        
        back.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==back)
            {
                 frame.dispose();
                Home home=new Home();  
            }
            }
        
        });
        btn1.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn1)
               {
                  frame.dispose();
                  DirectorLogin login=new DirectorLogin();
               }
            }
             });
        btn2.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn2)
               {
                  frame.dispose();
                  SumonLogin slogin = new SumonLogin();
               }
            }
            
        });
        btn3.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn3)
               {
                  frame.dispose();
                  DipanitaLogin login=new DipanitaLogin();
               }
            }
            
        });
        btn4.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn4)
               {
                  frame.dispose();
                  Teacher4Login login=new Teacher4Login();
               }
            }
            
        });
        
         btn5.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn5)
               {
                  frame.dispose();
                  Teacher5Login login=new Teacher5Login();
               }
            }
            
        });
        
    }
    
   // public static void main(String[] args) {
   //     TeacherNameDemo teacherNameDemo = new TeacherNameDemo();
   // }
    
    
    
    
}",1
"
package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;


public class Teachers extends JFrame{
    
    Container c;
    private JButton back;
    private Font F;
    private JButton btn1,btn2,btn3,btn4,btn5;
    private JLabel l1,l2,l3,l4,l5;
    
    
    Teachers(){
        
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
         F = new Font(""Arial"",Font.BOLD,20);
        
        l1 = new JLabel(""1 ."");
        l1.setBounds(100,30,50,40);
        l1.setFont(F);
        c.add(l1);
        
        btn1 = new JButton(""Mohammad Nuruzzaman Bhuiyan"");
        btn1.setBounds(160,30,350,40);
        btn1.setBackground(new java.awt.Color(0,230,230));
        btn1.setFont(F);
        c.add(btn1);
        
        l2 = new JLabel(""2 ."");
        l2.setBounds(100,100,50,40);
        l2.setFont(F);
        c.add(l2);
        
        btn2=new JButton(""Md. Auhidur Rahman"");
         btn2.setBounds(160,100,250,40);
        btn2.setBackground(new java.awt.Color(0,230,230));
        btn2.setFont(F);
        c.add(btn2);
        
        l3 = new JLabel(""3 ."");
        l3.setBounds(100,170,50,40);
        l3.setFont(F);
        c.add(l3);
        
        btn3=new JButton(""Dipanita Saha"");
         btn3.setBounds(160,170,250,40);
        btn3.setBackground(new java.awt.Color(0,230,230));
        btn3.setFont(F);
        c.add(btn3);
        
        l4 = new JLabel(""4 ."");
        l4.setBounds(100,240,50,40);
        l4.setFont(F);
        c.add(l4);
        
        btn4=new JButton(""Falguni Roy"");
         btn4.setBounds(160,240,250,40);
        btn4.setBackground(new java.awt.Color(0,230,230));
        btn4.setFont(F);
        c.add(btn4);
        
        l5 = new JLabel(""5 ."");
        l5.setBounds(100,310,50,40);
        l5.setFont(F);
        c.add(l5);
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(F);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Teacher"");
        frame.setVisible(true);
        frame.add(c);
        
        
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==back)
            {
                 frame.dispose();
                HomeDemo home=new HomeDemo();  
            }
                        
        }
        
        });
        
        btn1.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn1)
               {
                  frame.dispose();
                  Login login=new Login();
               }
            }
            
        });
        btn2.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn2)
               {
                  frame.dispose();
                  Login login=new Login();
               }
            }
            
        });
        btn3.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn3)
               {
                  frame.dispose();
                  Login login=new Login();
               }
            }
            
        });
        btn4.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn4)
               {
                  frame.dispose();
                  Login login=new Login();
               }
            }
            
        });
        
    }
    
    
    
    
}",1
"
package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;


public class Teachers extends JFrame{
    
    Container c;
    private JButton back;
    private Font F;
    private JButton btn1,btn2,btn3,btn4,btn5;
    private JLabel l1,l2,l3,l4,l5;
    
    
    Teachers(){
        
        c=this.getContentPane();
        c.setLayout(null);
        c.setBackground(new java.awt.Color(0, 230, 230));
        
         F = new Font(""Arial"",Font.BOLD,20);
        
        l1 = new JLabel(""1 ."");
        l1.setBounds(100,30,50,40);
        l1.setFont(F);
        c.add(l1);
        
        btn1 = new JButton(""Mohammad Nuruzzaman Bhuiyan"");
        btn1.setBounds(160,30,350,40);
        btn1.setBackground(new java.awt.Color(0,230,230));
        btn1.setFont(F);
        c.add(btn1);
        
        l2 = new JLabel(""2 ."");
        l2.setBounds(100,100,50,40);
        l2.setFont(F);
        c.add(l2);
        
        btn2=new JButton(""Md. Auhidur Rahman"");
         btn2.setBounds(160,100,250,40);
        btn2.setBackground(new java.awt.Color(0,230,230));
        btn2.setFont(F);
        c.add(btn2);
        
        l3 = new JLabel(""3 ."");
        l3.setBounds(100,170,50,40);
        l3.setFont(F);
        c.add(l3);
        
        btn3=new JButton(""Dipanita Saha"");
         btn3.setBounds(160,170,250,40);
        btn3.setBackground(new java.awt.Color(0,230,230));
        btn3.setFont(F);
        c.add(btn3);
        
        l4 = new JLabel(""4 ."");
        l4.setBounds(100,240,50,40);
        l4.setFont(F);
        c.add(l4);
        
        btn4=new JButton(""Falguni Roy"");
         btn4.setBounds(160,240,250,40);
        btn4.setBackground(new java.awt.Color(0,230,230));
        btn4.setFont(F);
        c.add(btn4);
        
        l5 = new JLabel(""5 ."");
        l5.setBounds(100,310,50,40);
        l5.setFont(F);
        c.add(l5);
        
        back=new JButton(""Back"");
        back.setBounds(180,570,150,50);
        back.setFont(F);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        JFrame frame=new JFrame();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200,50,800,650);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setTitle(""Teacher"");
        frame.setVisible(true);
        frame.add(c);
        
        
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==back)
            {
                 frame.dispose();
                HomeDemo home=new HomeDemo();  
            }
                        
        }
        
        });
        
        btn1.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn1)
               {
                  frame.dispose();
                  Login login=new Login();
               }
            }
            
        });
        btn2.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn2)
               {
                  frame.dispose();
                  Login login=new Login();
               }
            }
            
        });
        btn3.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn3)
               {
                  frame.dispose();
                  Login login=new Login();
               }
            }
            
        });
        btn4.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==btn4)
               {
                  frame.dispose();
                  Login login=new Login();
               }
            }
            
        });
        
    }
    
    
    
    
}",1
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileNotFoundException;
import javax.swing.JButton;


public class UpdateRoutine extends RoutineDemo{
    
    public JButton update,back;
    
    
    UpdateRoutine() throws FileNotFoundException{
        
        back=new JButton(""Back"");
        back.setBounds(700,570,150,50);
        back.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
         table.addMouseListener(new MouseAdapter(){
            
            @Override
            public void mouseClicked(MouseEvent ae){
                
                int numRow = table.getSelectedRow();
                String day =model.getValueAt(numRow, 0).toString();
               String fc= model.getValueAt(numRow, 1).toString();
                String sc  = model.getValueAt(numRow, 2).toString();
                String thc = model.getValueAt(numRow, 3).toString();
                String fhc = model.getValueAt(numRow, 4).toString();
                String ffc = model.getValueAt(numRow, 5).toString();
                String stc = model.getValueAt(numRow, 6).toString();
               // model.removeRow(numRow);
                
                  
        
                
                frame.dispose();
                UpdateRoutines adm = new UpdateRoutines();
                adm.daytf.setText(day);
                adm.firsttf.setText(fc);
                adm.secondtf.setText(sc);
                adm.thirdtf.setText(thc);
                adm.fourthtf.setText(fhc);
                adm.fifthtf.setText(ffc);
                adm.sixthtf.setText(stc);
                adm.row=numRow;
                
                
            }
        });
         
          back.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==back)
            {
                frame.dispose();
                AdminstratorDemo home=new AdminstratorDemo();  
            }
            }
        
        });
        
    }
    
    public static void main(String[] args) throws FileNotFoundException {
        UpdateRoutine r = new UpdateRoutine();
    }
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;


public class UpdateRoutines extends AddRoutine{
    
    JButton update;
    JFrame frame;
    int row;
    
    UpdateRoutines() {
         add.setVisible(false);
        update=new JButton(""update"");
        update.setBounds(520,510,150,50);
       update.setFont(f);
        update.setBackground(Color.BLACK);
        update.setForeground(Color.WHITE);
        c.add(update);
        
         update.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if(e.getSource()==update){
         String sntf=daytf.getText();
         String mntf=firsttf.getText();
         String fntf=secondtf.getText();
         String httf=thirdtf.getText();
         String etf=fourthtf.getText();
         String ctf=fifthtf.getText();
         String btf=sixthtf.getText();
         
                    // frame.dispose();
                    RoutineDemo ru;
                    try {
                        ru = new RoutineDemo();
                        
                     ru.model.setValueAt(sntf, row, 0);
                    ru.model.setValueAt(mntf, row, 1);
                    ru.model.setValueAt(fntf, row, 2);
                    ru.model.setValueAt(httf, row, 3);
                    ru.model.setValueAt(etf, row, 4);
                    ru.model.setValueAt(ctf, row, 5);
                    ru.model.setValueAt(btf, row, 6);
                    File file  = new File(""routine.txt"");
                           try{
                                FileWriter  fr = new FileWriter(file);
                                BufferedWriter bw = new BufferedWriter(fr); 
           
         
        
               
                                for(int i=0;i<ru.table.getRowCount();i++) 
                                {
                                   for(int j=0;j<ru.table.getColumnCount();j++)
                                   {
                                     bw.write(ru.table.getValueAt(i, j).toString()+"" ""+""#"");
                    
                                   }
                                     bw.write(System.getProperty(""line.separator"")); 
                
                               }
           
                                bw.close(); 
                               fr.close();        
            
                           }
                          catch(FileNotFoundException ea)
                          {
                           ea.printStackTrace();
                          } catch (IOException ex) {
                 Logger.getLogger(AddRoutine.class.getName()).log(Level.SEVERE, null, ex);
             }
                        
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(AddRoutine.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
       
        
                }
             }
             });
                }
    
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;


public class UpdateStudent extends AddMember{
    
    JButton update;
    int row;
    
    UpdateStudent(){
        
        update=new JButton(""Update"");
        update.setBounds(520,510,150,50);
        update.setFont(f);
        update.setBackground(Color.BLACK);
        update.setForeground(Color.WHITE);
        c.add(update);
        
        update.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
         if(e.getSource()==update)
            {
                
            String sname =name.getText();
            String sroll =roll.getText();
            String  ssession = session.getText();
            String  shometown = hometown.getText();
            String  semail = eemail.getText();
            String scontact = contact.getText();
            String sblood = blood.getText();
            
            if(sname.equals(""""))
                    {
                        JOptionPane.showMessageDialog(null,""Please Enter name"");
                    }
            else if(sroll.equals("""")){
                            JOptionPane.showMessageDialog(null, ""Please Enter hometown"");
                        }
            else if(ssession.equals("""")){
                            JOptionPane.showMessageDialog(null, ""Please Enter Session"");
                        }
                    else if(shometown.equals("""")){
                            JOptionPane.showMessageDialog(null, ""Please Enter hometown"");
                        }
                   else if(semail.equals("""")){
                                JOptionPane.showMessageDialog(null, ""Please Enter Email"");
                            }
                    else if(scontact.equals("""")){
                                    JOptionPane.showMessageDialog(null,""Please Enter contact"");
                                }
                    else if(sblood.equals("""")){
                                        JOptionPane.showMessageDialog(null,""Please Enter Blood"");
                                    }
                
                else{
                        JOptionPane.showMessageDialog(null,""Updated Succesfully"");
                    
                try {
                    
                    frame.dispose();
                    StudentInformation stu  = new StudentInformation();
                    stu.model.setValueAt(sname, row, 0);
                    stu.model.setValueAt(sroll, row, 1);
                    stu.model.setValueAt(ssession, row, 2);
                    stu.model.setValueAt(shometown, row, 3);
                    stu.model.setValueAt(semail, row, 4);
                    stu.model.setValueAt(scontact, row, 5);
                    stu.model.setValueAt(sblood, row, 6);
               
                           File file  = new File(""student.txt"");
                           try{
                                FileWriter  fr = new FileWriter(file);
                                BufferedWriter bw = new BufferedWriter(fr); 
           
         
        
               
                                for(int i=0;i<stu.table.getRowCount();i++) 
                                {
                                   for(int j=0;j<stu.table.getColumnCount();j++)
                                   {
                                     bw.write(stu.table.getValueAt(i, j).toString()+"" ""+""#"");
                    
                                   }
                                     bw.write(System.getProperty(""line.separator"")); 
                
                               }
           
                                bw.close(); 
                               fr.close();        
            
                           }
                          catch(FileNotFoundException ea)
                          {
                           ea.printStackTrace();
                          }     catch (IOException ex) {
                          Logger.getLogger(UpdateStudentInformation.class.getName()).log(Level.SEVERE, null, ex);
                          }
                         } catch (FileNotFoundException ex) {
                         Logger.getLogger(UpdateStudent.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
                   
                    
                }
                
               
                
            }
        }
           
            
        
        
        });
    }
    
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;


public class UpdateStudentInformation extends StudentInformation{
    public JButton update,back,edit;
  
    
    public UpdateStudentInformation() throws FileNotFoundException
    {
       
      
        
        back=new JButton(""Back"");
        back.setBounds(700,600,150,50);
        //home.setFont(f);
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        c.add(back);
        
        
        table.addMouseListener(new MouseAdapter(){
            
            public void mouseClicked(MouseEvent ae){
                
                int numRow = table.getSelectedRow();
                String name =model.getValueAt(numRow, 0).toString();
                String roll_no = model.getValueAt(numRow, 1).toString();
                String s_session = model.getValueAt(numRow, 2).toString();
                String home = model.getValueAt(numRow, 3).toString();
                String email_name  = model.getValueAt(numRow, 4).toString();
                String contact_no = model.getValueAt(numRow, 5).toString();
                String blood_grp = model.getValueAt(numRow, 6).toString();
               // model.removeRow(numRow);
                
                  
        
                
                frame.dispose();
                UpdateStudent adm = new UpdateStudent();
                adm.name.setText(name);
                adm.roll.setText(roll_no);
                adm.session.setText(s_session);
                adm.hometown.setText(home);
                adm.eemail.setText(email_name);
                adm.contact.setText(contact_no);
                adm.blood.setText(blood_grp);
                adm.row=numRow;
                
                
            }
        });
        back.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
  
                frame.dispose();
                AdminstratorDemo admin =new AdminstratorDemo();
        }
        
        });
    }
    
    
}",0
"
package projectsms;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;


public class Updatefaculty extends AddMemberFaculty{
    
     JButton update;
      int row;
    
    Updatefaculty(){
        
        update=new JButton(""Update"");
        update.setBounds(520,510,150,50);
        update.setFont(f);
        update.setBackground(Color.BLACK);
        update.setForeground(Color.WHITE);
        c.add(update);
        
        update.addActionListener(new ActionListener(){
        
  
        @Override
        public void actionPerformed(ActionEvent e){
            
         if(e.getSource()==update)
            {
                
            String tname =name.getText();
            
            String  thometown = hometown.getText();
            String  temail = email.getText();
            String tcontact = contact.getText();
            String tblood = blood.getText();
            
            if(tname.equals(""""))
                    {
                        JOptionPane.showMessageDialog(null,""Please Enter name"");
                    }
            
                    else if(thometown.equals("""")){
                            JOptionPane.showMessageDialog(null, ""Please Enter hometown"");
                        }
                   else if(temail.equals("""")){
                                JOptionPane.showMessageDialog(null, ""Please Enter Email"");
                            }
                    else if(tcontact.equals("""")){
                                    JOptionPane.showMessageDialog(null,""Please Enter contact"");
                                }
                    else if(tblood.equals("""")){
                                        JOptionPane.showMessageDialog(null,""Please Enter Blood"");
                                    }
                
                else{
                        JOptionPane.showMessageDialog(null,""Updated Succesfully"");
                    
                try {
                    
                    frame.dispose();
                    TeacherInformtion stu  = new TeacherInformtion();
                    stu.model.setValueAt(tname, row, 0);
                    
                    stu.model.setValueAt(thometown, row, 1);
                    stu.model.setValueAt(temail, row, 2);
                    stu.model.setValueAt(tcontact, row, 3);
                    stu.model.setValueAt(tblood, row, 4);
               
                           File file  = new File(""teachersInformation.txt"");
                           try{
                                FileWriter  fr = new FileWriter(file);
                                BufferedWriter bw = new BufferedWriter(fr); 
           
         
        
               
                                for(int i=0;i<stu.table.getRowCount();i++) 
                                {
                                   for(int j=0;j<stu.table.getColumnCount();j++)
                                   {
                                     bw.write(stu.table.getValueAt(i, j).toString()+"" ""+""#"");
                    
                                   }
                                     bw.write(System.getProperty(""line.separator"")); 
                
                               }
           
                                bw.close(); 
                               fr.close();        
            
                           }
                          catch(FileNotFoundException ea)
                          {
                           ea.printStackTrace();
                          }     catch (IOException ex) {
                          Logger.getLogger(UpdateFacultyInformation.class.getName()).log(Level.SEVERE, null, ex);
                          }
                         } catch (FileNotFoundException ex) {
                         Logger.getLogger(Updatefaculty.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
                   
                    
                }
                
               
                
            }
        }
           
            
        
        
        });
    }
    
}",0
"
package Demo;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;


public class graph1 extends JFrame {
       Container c;
      JLabel l1,l2,l3,header;
      Font f;
      JTextField tf1,tf2,tf3;
      JButton b1,b2,add,clear,show;
      
    graph1()
    {
          c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(0,230,230));
        
        f = new Font(""Arial"",Font.BOLD,18);
        
        header = new JLabel(""Add Student GPA in File "");
        header.setBounds(600,5,300,80);
        header.setForeground(Color.BLACK);
        header.setFont(f);
        c.add(header);
        
         l1 = new JLabel(""Name: "");
        l1.setBounds(100,60,200,50);
        l1.setForeground(Color.BLACK);
        l1.setFont(f);
        c.add(l1);
        
        l2 = new JLabel(""Roll:  "");
        l2.setBounds(100,170,200,50);
        l2.setForeground(Color.BLACK);
        l2.setFont(f);
        c.add(l2);
        
        l3 = new JLabel(""GPA:  "");
        l3.setBounds(100,280,200,50);
        l3.setForeground(Color.BLACK);
        l3.setFont(f);
        c.add(l3);
        
        tf1= new JTextField();
        tf1.setBounds(320,60,200,50);
        tf1.setBackground(Color.WHITE);
        c.add(tf1);
        
          tf2= new JTextField();
        tf2.setBounds(320,170,200,50);
        tf2.setBackground(Color.WHITE);
        c.add(tf2);
        
          tf3= new JTextField();
        tf3.setBounds(320,280,200,50);
        tf3.setBackground(Color.WHITE);
        c.add(tf3);
        
        add=new JButton(""Add"");
        add.setBounds(380,400,150,50);
        add.setFont(f);
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        c.add(add);
        
        clear=new JButton(""Clear"");
        clear.setBounds(100,400,150,50);
        clear.setFont(f);
        clear.setBackground(Color.BLACK);
        clear.setForeground(Color.WHITE);
        c.add(clear);
        
        show=new JButton(""Show"");
        show.setBounds(100,600,150,50);
        show.setFont(f);
        show.setBackground(Color.BLACK);
        show.setForeground(Color.WHITE);
        c.add(show);
        
        show.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
           if(e.getSource()==show)
           {
               graph2 g= new graph2();
           }
            
            }
             });
        
        clear.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
            tf1.setText("""");
            tf2.setText("""");
            tf3.setText("""");
            
            }
             });
        
        add.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if(e.getSource()==add){
         String stf=tf1.getText();
         String idtf=tf2.getText();
         String gpatf=tf3.getText();
         
       
         filewriter(stf,idtf,gpatf); 
                }
             }
             });
        
        JFrame frame=new JFrame();
      
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setExtendedState(MAXIMIZED_BOTH);
        frame.setVisible(true);
        frame.setTitle(""Add Student GPA in File "");
        frame.add(c);
        
    }
    
     public void filewriter(String stf,String idtf,String gpatf)
        {
        try{
            FileWriter fn=new FileWriter(""graph.txt"",true);
            fn.write(stf+"" ""+"""");
            fn.write(idtf+"" ""+"""");
            fn.write(gpatf+"" ""+"""");
            
            fn.write(System.getProperty(""line.separator""));
            fn.close();   
         }
        catch(Exception e)
        {
          e.printStackTrace();
        }
         
        }
    
    public static void main(String[] args) {
        graph1 frame = new graph1();
    }
}",1
"
package Demo;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;


public class graph2 extends JFrame{
      Container c;
      JLabel l1,l2,l3;
      Font f;
      JTextField tf1,tf2;
      JButton b1,home;
      JComboBox cb1;
      JPanel panel;
     
    graph2()
    {
        c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(0,230,230));
        
        f = new Font(""Candara"",Font.BOLD,25);
        
         l1 = new JLabel(""Semester: "");
        l1.setBounds(100,60,200,50);
        l1.setForeground(Color.BLACK);
        l1.setFont(f);
        c.add(l1);
        
        l2 = new JLabel(""Name:  "");
        l2.setBounds(100,170,200,50);
        l2.setForeground(Color.BLACK);
        l2.setFont(f);
        c.add(l2);
        
        l3 = new JLabel(""Id:  "");
        l3.setBounds(100,260,200,50);
        l3.setForeground(Color.BLACK);
        l3.setFont(f);
        c.add(l3);
        
        tf1= new JTextField();
        tf1.setBounds(320,60,200,50);
        tf1.setBackground(Color.WHITE);
        c.add(tf1);
        
         tf2= new JTextField();
        tf2.setBounds(320, 260, 200, 50);
        tf2.setBackground(Color.WHITE);
        c.add(tf2);
        
        String student[]={""Abdullah An Noor"",""Imran Hossain"",""Mahbub Alam"",""Fazle Rabbi"",""Abrar Hossain Asif"",""Nishat Tasnim"",""Md Mynuddin"",""Al Adnan Sami"",""Shuvro Aditya"",""Gazi MoinuddinRobi"",""Tahrim Kabir"",""Azad Hossain"",""Faysal Ahammed"",""Al Shahriar Priyo"",""Rahat Uddin Azad"",""Moonmoon Das"",""Mahfuzur Rahman"",""Al Jaber Nishad"",""Saifur Rahman"",""Suvo Islam"",""Faizul Karim Pathan"",""Nadim Bhuiyan"",""Kamruzzaman Shekh"",""Akash Chandra Debnath"",""Khair Ahmad"",""Anwar Kabir"",""Nowal Binte Bashar""};
        cb1 = new JComboBox(student);
        cb1.setBounds(320, 170, 200, 50);
        cb1.setBackground(Color.WHITE);
        c.add(cb1);
        
       
          JFreeChart barChart = ChartFactory.createBarChart(
         ""Result Graph"",           
         ""Semester"",            
         ""GPA"",            
         createDataset(),          
         PlotOrientation.VERTICAL,           
         true, true, false);
         
      ChartPanel chartPanel = new ChartPanel( barChart );        
      chartPanel.setPreferredSize(new java.awt.Dimension( 400 , 300 ) ); 
      chartPanel.setBounds(600,20,500,500);
      chartPanel.setVisible(false);
      c.add(chartPanel);
       
       
        b1= new JButton(""Enter"");
        b1.setForeground(Color.WHITE);
        b1.setBackground(Color.BLACK);
        b1.setBounds(320, 330, 100, 50);
        b1.setFont(f);
        c.add(b1);
        
         home=new JButton(""Home"");
        home.setBounds(520,570,150,50);
        home.setFont(f);
        home.setBackground(Color.BLACK);
        home.setForeground(Color.WHITE);
        c.add(home);
        
        home.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            
            if(e.getSource()==home)
            {
                dispose();
              //  HomeDemo home=new HomeDemo();  
            }
            }
        
        });
        
        
       b1.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
               if(ae.getSource()==b1)
               {
                   chartPanel.setVisible(true);
                   
               }
            }
           
       });
       
       
        
       JFrame frame=new JFrame();
      
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setExtendedState(MAXIMIZED_BOTH);
        frame.setVisible(true);
        frame.setTitle(""CGPA graph"");
        frame.add(c);
        
    }
    
    private CategoryDataset createDataset( ) {
       String fiat = ""1st"";        
       String audi = ""2nd"";        
       String ford = ""3rd"";
       String marcity = """";
       String nissan = ""5rd"";
       String first = ""1st Semister"";        
       String second = ""2nd Semister"";        
       String third = ""3rd Semister"";        
       String fourth = ""4th Semister""; 
       String safe = ""5th Semister""; 
       DefaultCategoryDataset dataset = 
      new DefaultCategoryDataset( );  
      
       File file  = new File(""routine.txt"");
         
      try{
           FileReader  fr = new FileReader(file);
           BufferedReader br = new BufferedReader(fr); 
           
           Object[] lines = br.lines().toArray();
           
           for(int i=0;i<lines.length;i++)
           {
               String[] row = lines[i].toString().split(""#"");
               
               
           }
           
      }
      catch(Exception e)
      {
          e.printStackTrace();
      }
       
      dataset.addValue( 3.40 , marcity , first);        
      // dataset.addValue( 3.0 , fiat , userrating );        
     //  dataset.addValue( 5.0 , fiat , millage ); 
     //  dataset.addValue( 5.0 , fiat , safety );           

     // dataset.addValue( 5.0 , audi , speed );        
      //dataset.addValue( 6.0 , audi , userrating );       
      dataset.addValue( 3.52 , marcity , second );        
    //  dataset.addValue( 4.0 , audi , safety );

    //  dataset.addValue( 4.0 , ford , speed );        
    //  dataset.addValue( 3.90 , marcity , third );  //      
     // dataset.addValue( 3.0 , ford , millage );        
   //   dataset.addValue( 3.99 , marcity , fourth );    //
     // dataset.addValue( 5.0 , fiat , millage );
     
     // dataset.addValue( 5.0 , fiat , safety );     
    //  dataset.addValue( 3.99 , marcity , safe ); 

      return dataset; 
   }
   
    
    public static void main(String[] args) {
        graph2 frame = new graph2();
    }
}
",1
"
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;


public class sign extends JFrame implements ActionListener{
    
    private Container c;
    private Font f;
    private JLabel l1;
    private JButton b1,b2,b3,b4,b5,b6,b7,b8;
    
    sign()
    {
        components();
    }
    
    public void components()
    {
          c= this.getContentPane();
        c.setLayout(null);
        c.setBackground(new Color(25,45,45));
        
        f = new Font(""Candara"",Font.BOLD,18);
        
        l1 = new JLabel(""Course Plan"");
        l1.setBounds(250,20,200,50);
        l1.setForeground(Color.WHITE);
        l1.setFont(f);
        c.add(l1);
        
        
        b1 = new JButton(""1st Semester"");
        b1.setBounds(220,70, 150, 50);
        b1.setBackground(new Color(25,45,45));
        b1.setForeground(Color.WHITE);
        b1.setBorderPainted(false);
        b1.setFont(f);
        c.add(b1);
        b1.addActionListener(this);
        
        
        b2 = new JButton(""2nd Semester"");
        b2.setBounds(220,120, 150, 50);
        b2.setBackground(new Color(25,45,45));
        b2.setForeground(Color.WHITE);
        b2.setBorderPainted(false);
        b2.setFont(f);
        c.add(b2);
        b2.addActionListener(this);
        
        b3 = new JButton(""3rd Semester"");
        b3.setBounds(220,170, 150, 50);
        b3.setBackground(new Color(25,45,45));
        b3.setForeground(Color.WHITE);
        b3.setBorderPainted(false);
        b3.setFont(f);
        c.add(b3);
        b3.addActionListener(this);
        
        b4 = new JButton(""4th Semester"");
        b4.setBounds(220,220, 150, 50);
        b4.setBackground(new Color(25,45,45));
        b4.setForeground(Color.WHITE);
        b4.setBorderPainted(false);
        b4.setFont(f);
        c.add(b4);
        b4.addActionListener(this);
        
        b5 = new JButton(""5th Semester"");
        b5.setBounds(220,270, 150, 50);
        b5.setBackground(new Color(25,45,45));
        b5.setForeground(Color.WHITE);
        b5.setBorderPainted(false);
        b5.setFont(f);
        c.add(b5);
        b5.addActionListener(this);
        
        b6 = new JButton(""6th Semester"");
        b6.setBounds(220,320, 150, 50);
        b6.setBackground(new Color(25,45,45));
        b6.setForeground(Color.WHITE);
        b6.setBorderPainted(false);
        b6.setFont(f);
        c.add(b6);
        b6.addActionListener(this);
        
        
        b7 = new JButton(""7th Semester"");
        b7.setBounds(220,370, 150, 50);
        b7.setBackground(new Color(25,45,45));
        b7.setForeground(Color.WHITE);
        b7.setBorderPainted(false);
        b7.setFont(f);
        c.add(b7);
        b7.addActionListener(this);
        
        b8 = new JButton(""8th Semester"");
        b8.setBounds(220,420, 150, 50);
        b8.setBackground(new Color(25,45,45));
        b8.setForeground(Color.WHITE);
        b8.setBorderPainted(false);
        b8.setFont(f);
        c.add(b8);
        b8.addActionListener(this);
        
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource()==b1)
        {
            semester1 s1=new semester1();
            s1.setVisible(true);
            this.dispose();
        }      
             if(e.getSource()==b2)
        {
            semester2 s2=new semester2();
            s2.setVisible(true);
            this.dispose();
            
        }
              if(e.getSource()==b3)
        {
            semester3 s3=new semester3();
            s3.setVisible(true);
            this.dispose();
        }   
           if(e.getSource()==b4)
        {
            semester4 s4=new semester4();
            s4.setVisible(true);
            this.dispose();
        }       
           
            if(e.getSource()==b5)
        {
            semester5 s5=new semester5();
            s5.setVisible(true);
            this.dispose();
        }   
            
             if(e.getSource()==b6)
        {
            semester6 s6=new semester6();
            s6.setVisible(true);
            this.dispose();
        }   
             
              if(e.getSource()==b7)
        {
            semester7 s7=new semester7();
            s7.setVisible(true);
            this.dispose();
        }   
              
               if(e.getSource()==b8)
        {
            semester8 s8=new semester8();
            s8.setVisible(true);
            this.dispose();
        }   
               
                if(e.getSource()==b3)
        {
            semester3 s3=new semester3();
            s3.setVisible(true);
            this.dispose();
        }   
    
 }
    public static void main(String[] args) {
       sign frame = new sign();
       frame.setVisible(true);
       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      
       frame.setExtendedState(MAXIMIZED_BOTH);
        
    }

 
}",1
"
package ShopAssistant;

import Templates.DashBoardTemplate;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedWriter;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;


public class AddCostPage extends DashBoardTemplate
{
    public JPanel inputPanel;
    public JLabel dateLabel,costTypeLabel,amountLabel;
    public JButton costSubmitButton;
    public JTextField dateTextField,costAmountTextField;
    public JComboBox costTypeCombobox;
    public String costType[] = {"""",""Staff Salary"",""Electricity Bill"",""Shop Rent"",""Miscellaneous""};

    /**
     *  Add Cost Page Constructor
     */
    public AddCostPage()
    {
        setPageButton();
        setMainPanel();
        setInputPanel();
        setAddCostFeatures();
    }
    
    /**
     * This Method Sets Button Using Different BackGround and ForeGround Color
     */
    public void setPageButton()
    {
        getButton(""Add Cost"").setBackground(Color.LIGHT_GRAY);
        getButton(""Add Cost"").setForeground(Color.BLACK);
        getButton(""Add Cost"").setFont(new Font(""Arial"",Font.BOLD,16));
    }
    
    /**
     *  This Method Sets Main Panel Components
     */
    public void setMainPanel()
    {
        mainPanel.setLayout(new BorderLayout(120,50));
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.NORTH);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.EAST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.WEST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.SOUTH);
        
        inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(8,1));
        inputPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        inputPanel.setBackground(Color.WHITE);
        mainPanel.add(inputPanel,BorderLayout.CENTER);
    }
    
    /**
     * This Method Sets Input Panel Components
     */
    public void setInputPanel()
    {    
        dateLabel = new JLabel(""Date & Time"");
        dateLabel.setBackground(Color.WHITE);
        dateLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(dateLabel);       
 
        
        dateTextField = new JTextField(setDate());
        dateTextField.setBackground(Color.WHITE);
        dateTextField.setEditable(false);
        dateTextField.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(dateTextField);

        costTypeLabel = new JLabel(""Cost Type"");
        costTypeLabel.setBackground(Color.WHITE);
        costTypeLabel.setFont(new Font(""Arial"",Font.BOLD,16));        
        inputPanel.add(costTypeLabel);
        

        costTypeCombobox = new JComboBox(costType);
        costTypeCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(costTypeCombobox);
        
        
        amountLabel = new JLabel(""Amount"");
        amountLabel.setBackground(Color.WHITE);
        amountLabel.setFont(new Font(""Arial"",Font.BOLD,16));        
        inputPanel.add(amountLabel);
        
        
        costAmountTextField = new JTextField();
        costAmountTextField.setFont(new Font(""Arial"",Font.BOLD,16));
        costAmountTextField.setEnabled(false);
        costAmountTextField.setBackground(Color.WHITE);
        inputPanel.add(costAmountTextField); 
        
       
        costSubmitButton = new JButton(""Submit"");
        costSubmitButton.setFont(new Font(""Arial"",Font.BOLD,18));
        costSubmitButton.setFocusPainted(false);
        inputPanel.add(costSubmitButton);  
    }
    
    /**
     *  This Method Sets Cost Features
     */
    public void setAddCostFeatures()
    {
        costTypeCombobox.addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if(costTypeCombobox.getSelectedItem()=="""")
                {
                    JOptionPane.showMessageDialog(null, ""Please Select an Option"");
                    costAmountTextField.setText("""");
                    costAmountTextField.setEnabled(false);
                }
                else
                {
                    costAmountTextField.setEnabled(true);
                }
            }
        }); 
        
        costAmountTextField.addKeyListener(new KeyListener(){
      
            public void keyTyped(KeyEvent ke) {
            }

            public void keyPressed(KeyEvent ke) 
            {
                if(!isDigit(ke.getKeyChar()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Valid Digit"");
                    costAmountTextField.setText("""");
                }
            }

            public void keyReleased(KeyEvent ke)
            {
                try{
                if(Float.parseFloat(costAmountTextField.getText())>100000000)
                {
                    JOptionPane.showMessageDialog(null, ""Please Do Not Enter Large Values"");   
                    costAmountTextField.setText("""");
                }
                }catch(Exception e) {}
            }
        });
        
        
        costSubmitButton.addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if("""".equals(costAmountTextField.getText()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Amount"");
                }
                else
                {    
                 try
                 {
                    BufferedWriter bw = new BufferedWriter(new FileWriter(""IncomeCostDatabase.txt"",true));
                     
                    bw.append(""P100000000""+"",""+dateTextField.getText()+"",""+""Cost By ""+costTypeCombobox.getSelectedItem()+"",""+costAmountTextField.getText()+""\n"");
                    bw.close();
                    
                    JOptionPane.showMessageDialog(null,costTypeCombobox.getSelectedItem()+"" ""+costAmountTextField.getText()+"" Added Successfully"");
                    
                    costAmountTextField.setText(""""); 
                 } 
                 catch (Exception ex) {}
                }
            }
        });
    
    }
    
    public static void main(String[] args) 
    {
        AddCostPage frame = new AddCostPage();
        frame.setVisible(true);
    }
}",1
"
package ShopAssistant;

import Templates.DashBoardTemplate;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.FileReader;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;


public class AdvancedStockCheckPage extends DashBoardTemplate
{
    public JPanel outputPanel,datePanel;
    public JLabel selectLabel,dayLabel,monthLabel,yearLabel,productTypeLabel,modelNumberLabel;
    public JComboBox dayCombobox,monthCombobox,yearCombobox,productTypeCombobox,modelNumberCombobox;
    public JTextField showQuantityTextField;
    public JButton printButton;
    public JTextArea printTextarea = new JTextArea("""");
    
    public String day[] = new String[32];
    public String month[] = new String[13];
    public String year[] = new String[102];
    
    /**
     *  Advanced Stock Check Constructor
     */
    public AdvancedStockCheckPage()
    {
        setPageButton();
        setMainPanel();
        setOutputPanel();
        setAdvancedStockCheckFeatures();
    }
    
    /**
     * This Method Sets Button Using Different BackGround and ForeGround Color
     */
    public void setPageButton()
    {
        getButton(""Advanced Stock Check"").setBackground(Color.LIGHT_GRAY);
        getButton(""Advanced Stock Check"").setForeground(Color.BLACK);
        getButton(""Advanced Stock Check"").setFont(new Font(""Arial"",Font.BOLD,16));
    }
    
    /**
     * This Method Sets Input Panel Components
     */
    public void setMainPanel()
    {
        mainPanel.setLayout(new BorderLayout(120,50));

        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.NORTH);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.EAST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.WEST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.SOUTH);
        
        outputPanel = new JPanel();
        outputPanel.setLayout(new GridLayout(8,1));
        outputPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        outputPanel.setBackground(Color.WHITE);
        mainPanel.add(outputPanel,BorderLayout.CENTER);
    }
    
    /**
     * This Method Sets Output Panel Components
     */
    public void setOutputPanel()
    {   
        datePanel = new JPanel();
        datePanel.setBackground(Color.WHITE);
        datePanel.setLayout(new GridLayout(2,3));
        outputPanel.add(datePanel);
          
        dayLabel = new JLabel(""Day"");
        dayLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(dayLabel);
        
        monthLabel = new JLabel(""Month"");
        monthLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(monthLabel);
        
        yearLabel = new JLabel(""Year"");
        yearLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(yearLabel);
        
        setManualDate();
        
        dayCombobox = new JComboBox(day);
        dayCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(dayCombobox);
        
        monthCombobox = new JComboBox(month);
        monthCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(monthCombobox);
        
        yearCombobox = new JComboBox(year);
        yearCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(yearCombobox);
        
        productTypeLabel = new JLabel(""Product Type"");
        productTypeLabel.setBackground(Color.WHITE);
        productTypeLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        outputPanel.add(productTypeLabel);
        
        productTypeCombobox = new JComboBox(setProductTypes());
        productTypeCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        outputPanel.add(productTypeCombobox);
        
        modelNumberLabel = new JLabel(""Model Number"");
        modelNumberLabel.setBackground(Color.WHITE);
        modelNumberLabel.setFont(new Font(""Arial"",Font.BOLD,16));        
        outputPanel.add(modelNumberLabel);
        
        modelNumberCombobox = new JComboBox(setProductTypes());
        modelNumberCombobox.setEnabled(true);
        modelNumberCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        outputPanel.add(modelNumberCombobox);
        
        showQuantityTextField = new JTextField();
        showQuantityTextField.setFont(new Font(""Arial"",Font.BOLD,14));
        showQuantityTextField.setEditable(false);
        showQuantityTextField.setBackground(Color.WHITE);
        outputPanel.add(showQuantityTextField);
        
        printButton = new JButton(""Print"");
        printButton.setFont(new Font(""Arial"",Font.BOLD,16));
        printButton.setFocusPainted(false);
        outputPanel.add(printButton);
        
    }
    
    /**
     *  This Method Helps To Generate Date Manually
     */
    public void setManualDate()
    {
        int i;
        
        day[0]="""";
        i=1;
        while(i!=day.length)
        {
            if(i<10)
            {
                day[i] = ""0""+Integer.toString(i);
            }
            else
            {
                day[i] = Integer.toString(i);
            }
            i++;
        }
        
        i=1;
        month[0]="""";
        while(i!=month.length)
        {
            if(i<10)
            {
                month[i] = ""0""+Integer.toString(i);
            }
            else
            {
                month[i] = Integer.toString(i);
            }
            i++;
        }
        
        
        i=1;
        int j=2020;
        year[0]="""";
        while(i!=year.length)
        {
            year[i] = Integer.toString(j);
            i++;
            j++;
        }
    
    }
    
    /**
     *  This Method Sets Advanced Stock Check Features
     */
    public void setAdvancedStockCheckFeatures()
    {
         productTypeCombobox.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                if(!dayCombobox.getSelectedItem().equals("""")&&!monthCombobox.getSelectedItem().equals("""")&&!yearCombobox.getSelectedItem().equals("""")&&!productTypeCombobox.getSelectedItem().equals(""""))
                {
                    setModelNumberCombobox(dayCombobox.getSelectedItem().toString()+""/""+monthCombobox.getSelectedItem().toString()+""/""+yearCombobox.getSelectedItem().toString());
                }
                else if(!monthCombobox.getSelectedItem().equals("""")&&!yearCombobox.getSelectedItem().equals("""")&&!productTypeCombobox.getSelectedItem().equals(""""))
                {
                    setModelNumberCombobox(monthCombobox.getSelectedItem().toString()+""/""+yearCombobox.getSelectedItem().toString());
                }
                else
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Valid Date and Product Type"");
                }
            }
  
        }); 
         
        printButton.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                if("""".equals(printTextarea.getText()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Get Some Stock Information"");
                }
                else 
                {
                    try {
                        printTextarea.print(); 
                    } catch (PrinterException ex) {
                    }   
                }  
            }
         
        }); 
        
    }
    
    public void setModelNumberCombobox(String date)
    {
        modelNumberCombobox.setEnabled(true);
        modelNumberCombobox.removeAllItems();
        modelNumberCombobox.addItem("""");
        printTextarea.setText(""Information For This Period : ""+date+""\n\n"");

        int salesModelCount=0,salesStock,purchaseModelCount=0,purchaseStock;

        try{
            
            BufferedReader br = new BufferedReader(new FileReader(""ProductType&ModelList.txt""));
            String s,result = """",modelNumber ="""";
     
            while((s=br.readLine())!=null)
            {
                if(productTypeCombobox.getSelectedItem().equals(s.substring(0, s.indexOf("",""))))
                {
                    result = s.substring(s.indexOf("","")+1, s.length());    
                }
            }
         
            char demo[] = result.toCharArray();
            int i=0;
                
            while(i!=demo.length)
            {
                modelNumber = modelNumber + demo[i];
                if(demo[i]=='.')
                {
                    salesStock = getRemainingQuantityUsingDate(date,modelNumber,""SalesDatabase.txt"");
                    purchaseStock = getRemainingQuantityUsingDate(date,modelNumber,""PurchaseDatabase.txt"");
                            
                    if(salesStock!=0)
                    {
                        salesModelCount = salesModelCount + salesStock;
                        modelNumberCombobox.addItem(modelNumber); 
                        modelNumberCombobox.addItem(""Sales ""+salesStock+"" Pcs\n""); 
                        
                        printTextarea.append(modelNumber);
                        printTextarea.append(""Sales ""+salesStock+"" Pcs\n"");
                    }
                    if(purchaseStock!=0)
                    {
                        purchaseModelCount = purchaseModelCount + purchaseStock;
                        modelNumberCombobox.addItem(modelNumber); 
                        modelNumberCombobox.addItem(""Purchase ""+purchaseStock+"" Pcs\n""); 
                        
                        printTextarea.append(modelNumber);
                        printTextarea.append(""Purchase ""+purchaseStock+"" Pcs\n"");
                    }        
                    modelNumber = """";
                }
                i++;
            }
                    
            showQuantityTextField.setText(""Total ""+productTypeCombobox.getSelectedItem()+"" Sold : ""+salesModelCount+"" Pcs Purchased : ""+purchaseModelCount+"" Pcs\n"");
            printTextarea.append(""Total ""+productTypeCombobox.getSelectedItem()+"" Sold : ""+salesModelCount+"" Pcs Purchased : ""+purchaseModelCount+"" Pcs\n"");

            }catch(Exception ex){System.out.println(ex);}
    }
    
    public static void main(String[] args) 
    {
        AdvancedStockCheckPage  frame = new AdvancedStockCheckPage();
        frame.setVisible(true);
    }
}",1
"
package ShopAssistant;

import Templates.InvoiceGeneratorTemplate;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JOptionPane;

public class CreatePurchaseInvoicePage extends InvoiceGeneratorTemplate
{
    /**
     * Create Purchase Invoice Page Constructor
     * 
     * @param keyword KeyWord Determines Sales or Purchase Invoice
     * @param fileName Sales or Purchase FileName
     */
    public CreatePurchaseInvoicePage(String keyword, String fileName) 
    {
        super(keyword, fileName);
        setPageButton();
        setQuantityTextFieldListener();
    }
    
    /**
     * This Method Sets Button Using Different BackGround and ForeGround Color
     */
    public void setPageButton()
    {
        getButton(""Create Purchase Invoice"").setBackground(Color.LIGHT_GRAY);
        getButton(""Create Purchase Invoice"").setForeground(Color.BLACK);
        getButton(""Create Purchase Invoice"").setFont(new Font(""Arial"",Font.BOLD,16));
    }
    
    /**
     * This Method Sets Quantity TextField Listener
     */
    public void setQuantityTextFieldListener()
    {
        quantityTextField.addKeyListener(new KeyListener()
        {
            public void keyTyped(KeyEvent ke){}    

            public void keyPressed(KeyEvent ke) {} 
            
            public void keyReleased(KeyEvent ke) 
            {
                if(!isDigit(ke.getKeyChar()))
                {    
                    JOptionPane.showMessageDialog(null, ""Please Enter Valid Digits""); 
                    quantityTextField.setText("""");
                }
                
                if(productTypeCombobox.getSelectedItem()==""""||modelNumberCombobox.getSelectedItem()=="""")
                {
                   JOptionPane.showMessageDialog(null, ""Please Enter Product Type and Model Number"");
                   quantityTextField.setText("""");
                }
                else
                {
                    setPayment();
                    setDue();
                }
            }
        
        });
    }
    
    
    public static void main(String[] args) 
    {
        CreatePurchaseInvoicePage frame = new CreatePurchaseInvoicePage(""Company"",""PurchaseDatabase.txt"");
        frame.setVisible(true);
    }
}",0
"
package ShopAssistant;

import Templates.InvoiceGeneratorTemplate;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JOptionPane;

public class CreateSalesInvoicePage extends InvoiceGeneratorTemplate
{
    /**
     * Create Sales Invoice Page Constructor
     * 
     * @param keyword KeyWord Determines Sales or Purchase Invoice
     * @param fileName Sales or Purchase FileName
     */
    public CreateSalesInvoicePage(String keyword, String fileName) 
    {
        super(keyword, fileName);
        setPageButton();
        setQuantityTextFieldListener();
    }
    
    /**
     * This Method Sets Button Using Different BackGround and ForeGround Color
     */
    public void setPageButton()
    {
        getButton(""Create Sales Invoice"").setBackground(Color.LIGHT_GRAY);
        getButton(""Create Sales Invoice"").setForeground(Color.BLACK);
        getButton(""Create Sales Invoice"").setFont(new Font(""Arial"",Font.BOLD,16));
    }
    
    /**
     * This Method Sets Quantity TextField Listener
     */
    public void setQuantityTextFieldListener()
    {
        quantityTextField.addKeyListener(new KeyListener()
        { 
            public void keyTyped(KeyEvent ke){}    

            public void keyPressed(KeyEvent ke){}
         
            public void keyReleased(KeyEvent ke) 
            { 
                try{
                int totalStock = getTotalStock((String)modelNumberCombobox.getSelectedItem(),""PurchaseDatabase.txt"",""SalesDatabase.txt"");
                int givenValue = Integer.parseInt(quantityTextField.getText());

                if(!isDigit(ke.getKeyChar()))
                {    
                    JOptionPane.showMessageDialog(null, ""Please Enter Valid Digits""); 
                    quantityTextField.setText("""");
                }
                
                if(productTypeCombobox.getSelectedItem()==""""||modelNumberCombobox.getSelectedItem()=="""")
                {
                    JOptionPane.showMessageDialog(null, ""Please Select Product Type and Model Number"");
                    quantityTextField.setText("""");
                }
                else{
                
                if(totalStock==0)
                {
                    JOptionPane.showMessageDialog(null, ""You Have No More Item Left"");
                    quantityTextField.setText("""");
                }
                else
                {
                    if((totalStock-givenValue)>=0)
                    {
                        JOptionPane.showMessageDialog(null, ""You Have ""+(totalStock-givenValue)+"" Item Left"");                      
                        setPayment();
                        setDue();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, ""There Will Not Any Item Left"");                                                  
                        quantityTextField.setText("""");
                    }
                }
                }  
                
                }catch(Exception e){}
            }               
        });
    
    }
    
    public static void main(String[] args) 
    {  
        CreateSalesInvoicePage frame = new CreateSalesInvoicePage(""Customer"",""SalesDatabase.txt"");
        frame.setVisible(true);
    }
}",0
"
package ShopAssistant;

import Templates.DashBoardTemplate;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.FileReader;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class DailyIncomeCostPage extends DashBoardTemplate
{
    public JPanel inputPanel,inputDatePanel,datePanel;
    public JLabel selectLabel,dayLabel,monthLabel,yearLabel;
    public JComboBox dayCombobox,monthCombobox,yearCombobox;
    public JButton submitButton,printButton;
    public JTextArea showDetailsTextarea;
    public JScrollPane scroll;
    
    public String day[] = new String[32];
    public String month[] = new String[13];
    public String year[] = new String[102];
    
    /**
     *  Daily Income Cost Page Constructor
     */
    public DailyIncomeCostPage()
    {
        setPageButton();
        setMainPanel();
        setInputPanel();
        setDailyIncomeCostFeatures();
    }
    
    /**
     * This Method Sets Button Using Different BackGround and ForeGround Color
     */
    public void setPageButton()
    {
        getButton(""Daily Income Cost"").setBackground(Color.LIGHT_GRAY);
        getButton(""Daily Income Cost"").setForeground(Color.BLACK);
        getButton(""Daily Income Cost"").setFont(new Font(""Arial"",Font.BOLD,16));
    }
    
    /**
     * This Method Sets Main Panel
     */
    public void setMainPanel()
    {
        mainPanel.setLayout(new BorderLayout(70,25));

        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.NORTH);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.EAST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.WEST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.SOUTH);
        
        
        inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(2,1));
        inputPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        inputPanel.setBackground(Color.WHITE);
        mainPanel.add(inputPanel,BorderLayout.CENTER);
    }
    
    /**
     * This Method Sets Input Panel
     */
    public void setInputPanel()
    {    
        inputDatePanel = new JPanel();
        inputDatePanel.setLayout(new GridLayout(4,1));
        inputDatePanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        inputDatePanel.setBackground(Color.WHITE);
        inputPanel.add(inputDatePanel);
        
        
        selectLabel = new JLabel(""Select Date"");
        selectLabel.setBackground(Color.WHITE);
        selectLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        inputDatePanel.add(selectLabel); 
        
        datePanel = new JPanel();
        datePanel.setBackground(Color.WHITE);
        datePanel.setLayout(new GridLayout(2,3));
        inputDatePanel.add(datePanel);
        
        
        dayLabel = new JLabel(""Day"");
        dayLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(dayLabel);
        
        monthLabel = new JLabel(""Month"");
        monthLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(monthLabel);
        
        yearLabel = new JLabel(""Year"");
        yearLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(yearLabel);
        
        setManualDate();
        
        dayCombobox = new JComboBox(day);
        dayCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(dayCombobox);
        
        monthCombobox = new JComboBox(month);
        monthCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(monthCombobox);
        
        yearCombobox = new JComboBox(year);
        yearCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        datePanel.add(yearCombobox);
        
        submitButton = new JButton(""Submit"");
        submitButton.setFont(new Font(""Arial"",Font.BOLD,16));
        submitButton.setFocusPainted(false);
        inputDatePanel.add(submitButton); 
        
        printButton = new JButton(""Print"");
        printButton.setFont(new Font(""Arial"",Font.BOLD,16));
        printButton.setFocusPainted(false);
        inputDatePanel.add(printButton); 
        
        showDetailsTextarea = new JTextArea();
        showDetailsTextarea.setFont(new Font(""Arial"",Font.BOLD,14));
        showDetailsTextarea.setEditable(false);
        scroll = new JScrollPane(showDetailsTextarea);
        inputPanel.add(scroll); 
    }
 
    /**
     *  This Method Helps To Generate Date Manually
     */
    public void setManualDate()
    {
        int i;
        
        day[0]="""";
        i=1;
        while(i!=day.length)
        {
            if(i<10)
            {
                day[i] = ""0""+Integer.toString(i);
            }
            else
            {
                day[i] = Integer.toString(i);
            }
            i++;
        }
        
        i=1;
        month[0]="""";
        while(i!=month.length)
        {
            if(i<10)
            {
                month[i] = ""0""+Integer.toString(i);
            }
            else
            {
                month[i] = Integer.toString(i);
            }
            i++;
        }
        
        
        i=1;
        int j=2020;
        year[0]="""";
        while(i!=year.length)
        {
            year[i] = Integer.toString(j);
            i++;
            j++;
        }
    
    }
    
    /**
     * This Method Used For Set IncomeCost Information
     * 
     * @param keyword KeyWord Determines Sales or Purchase Part
     * @param date Date of A Specific Day
     */
    public void setIncomeCostInformation(String keyword,String date)
    {
        try{
                BufferedReader br = new BufferedReader(new FileReader(""IncomeCostDatabase.txt""));
                String s,dataDate;
                String ans = """";
                int incomeAmount = 0;
                int costAmount = 0;
                while((s=br.readLine())!=null)
                { 
                    if(date.length()==10)
                    {
                        dataDate = s.substring(11, 21);
                    }
                    else
                    {
                        dataDate = s.substring(13, 21);
                    }
                    
                    if(date.equals(dataDate))
                    {
                        String demo[] = s.substring(11, s.length()).split("","");
                        int j=0;
                        while(j!=demo.length)
                        {
                            ans = ans + demo[j]+"" "";
                            j++;
                        } 
                        ans = ans + ""Tk\n"";

                        if(s.charAt(0)=='P')
                        {
                            char demo2[] = s.toCharArray();
                                 
                            int i = s.length()-1;
                            String r="""";
                            while(demo2[i]!=',')
                            {
                                r = r + demo2[i];
                                i--;
                            }
                                 
                            StringBuilder sb = new StringBuilder(r);  
                            sb.reverse();
                                
                            int amount = Integer.parseInt(sb.toString());
                                
                            costAmount = costAmount+amount;  
                        }
                             
                        if(s.charAt(0)=='S')
                        {
                            char demo2[] = s.toCharArray();
                                 
                            int i = s.length()-1;
                            String r="""";
                            while(demo2[i]!=',')
                            {
                                r = r + demo2[i];
                                i--;
                            }
                                 
                            StringBuilder sb = new StringBuilder(r);  
                            sb.reverse();
                                
                            int amount = Integer.parseInt(sb.toString()); 
                            incomeAmount = incomeAmount+amount;  
                            
                            }
                         }
                     }
 
                    if("""".equals(ans))
                    {
                        JOptionPane.showMessageDialog(null, ""No Information On That ""+keyword);
                        showDetailsTextarea.setText("""");
                    }
                    else
                    {                     
                        ans = ans + ""\n\nThis ""+keyword+""'s Total Income ""+incomeAmount+"" Tk""; 
                        ans = ans + ""\nThis ""+keyword+""'s Total Cost ""+costAmount+"" Tk""; 
                        ans = ans + ""\nThis ""+keyword+""'s Total Cash ""+(incomeAmount-costAmount)+"" Tk""; 
                        
                        showDetailsTextarea.setText(ans);
                    }  
                        
                    }catch(Exception ex){System.out.println(ex);}
    }
    
    /**
     *  Sets Daily Income Cost Features
     */
    public void setDailyIncomeCostFeatures()
    {
        submitButton.addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if(!"""".equals(dayCombobox.getSelectedItem())&&!"""".equals(monthCombobox.getSelectedItem())&&!"""".equals(yearCombobox.getSelectedItem()))
                {
                    String result = dayCombobox.getSelectedItem()+""/""+monthCombobox.getSelectedItem()+""/""+yearCombobox.getSelectedItem();
                    setIncomeCostInformation(""Day"",result);
                }
                else if(!"""".equals(monthCombobox.getSelectedItem())&&!"""".equals(yearCombobox.getSelectedItem()))
                {
                    String result = ""/""+monthCombobox.getSelectedItem()+""/""+yearCombobox.getSelectedItem();
                    setIncomeCostInformation(""Month"",result);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter A Valid Date"");
                }
            }
        });
        
        printButton.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                if("""".equals(showDetailsTextarea.getText()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Get Some Income Cost Information"");
                }
                else 
                {
                    try {
                        showDetailsTextarea.print();
                    } catch (PrinterException ex) {
                    }   
                }  
            }
         
        });
        
        
    }
    
    public static void main(String[] args) 
    {
        DailyIncomeCostPage frame = new DailyIncomeCostPage();
        frame.setVisible(true);
    }
}",1
"
package ShopAssistant;

import Templates.DashBoardTemplate;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;


public class DueCheckPage extends DashBoardTemplate
{
    public JPanel outputPanel;
    public JLabel dateLabel,customerDueLabel,companyDueLabel,customerDueInfoLabel,companyDueInfoLabel,amountLabel;
    public JTextField dateTextField,customerDueTextField,companyDueTextField,customerAmountTextField,companyAmountTextField;
    public JComboBox customerDueIdCombobox,companyDueIdCombobox;
    public JButton customerSubmitButton,companySubmitButton;
    
    /**
     *  Due Check Page Constructor
     */
    public DueCheckPage()
    {
        setPageButton();
        setMainPanel();
        setOutputPanel();
        setDueCheckFeatures();
    }
    
    /**
     * This Method Sets Button Using Different BackGround and ForeGround Color
     */
    public void setPageButton()
    {
        getButton(""Due Check"").setBackground(Color.LIGHT_GRAY);
        getButton(""Due Check"").setForeground(Color.BLACK);
        getButton(""Due Check"").setFont(new Font(""Arial"",Font.BOLD,16));
    }
    
    /**
     * This Method Sets Main Panel
     */
    public void setMainPanel()
    {
        mainPanel.setLayout(new BorderLayout(120,50));
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.NORTH);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.EAST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.WEST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.SOUTH);
        
        
        outputPanel = new JPanel();
        outputPanel.setLayout(new GridLayout(8,2));
        outputPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        outputPanel.setBackground(Color.WHITE);
        mainPanel.add(outputPanel,BorderLayout.CENTER);
    }
    
    
    /**
     * This Method Sets Output Panel
     */
    public void setOutputPanel()
    { 
        dateLabel = new JLabel(""Date & Time"");
        dateLabel.setBackground(Color.WHITE);
        dateLabel.setFont(new Font(""Arial"",Font.BOLD,14));
        outputPanel.add(dateLabel);       
 
        
        dateTextField = new JTextField(setDate());
        dateTextField.setBackground(Color.WHITE);
        dateTextField.setEditable(false);
        dateTextField.setFont(new Font(""Arial"",Font.BOLD,14));
        outputPanel.add(dateTextField);
       
         
        customerDueLabel = new JLabel(""Customer Total Due"");
        customerDueLabel.setBackground(Color.WHITE);
        customerDueLabel.setFont(new Font(""Arial"",Font.BOLD,14));
        outputPanel.add(customerDueLabel);
        
        
        companyDueLabel = new JLabel(""Company Total Due"");
        companyDueLabel.setBackground(Color.WHITE);
        companyDueLabel.setFont(new Font(""Arial"",Font.BOLD,14));
        outputPanel.add(companyDueLabel);
        
        
        customerDueTextField = new JTextField();
        customerDueTextField.setFont(new Font(""Arial"",Font.BOLD,14));
        customerDueTextField.setEditable(false);
        customerDueTextField.setBackground(Color.WHITE);
        outputPanel.add(customerDueTextField);
        
        
        companyDueTextField = new JTextField();
        companyDueTextField.setFont(new Font(""Arial"",Font.BOLD,14));
        companyDueTextField.setEditable(false);
        companyDueTextField.setBackground(Color.WHITE);
        outputPanel.add(companyDueTextField);
        
        
        customerDueInfoLabel = new JLabel(""Customer Due ID's"");
        customerDueInfoLabel.setBackground(Color.WHITE);
        customerDueInfoLabel.setFont(new Font(""Arial"",Font.BOLD,14));
        outputPanel.add(customerDueInfoLabel);
        
        
        companyDueInfoLabel = new JLabel(""Compnay Due ID's"");
        companyDueInfoLabel.setBackground(Color.WHITE);
        companyDueInfoLabel.setFont(new Font(""Arial"",Font.BOLD,14));
        outputPanel.add(companyDueInfoLabel);
        
        
        customerDueIdCombobox = new JComboBox();
        customerDueIdCombobox.setFont(new Font(""Arial"",Font.BOLD,14));
        outputPanel.add(customerDueIdCombobox);
        setCustomerDue();
        
        
        companyDueIdCombobox = new JComboBox();
        companyDueIdCombobox.setFont(new Font(""Arial"",Font.BOLD,14));
        outputPanel.add(companyDueIdCombobox);
        setCompanyDue();
        
        
        amountLabel = new JLabel(""Amount"");
        amountLabel.setBackground(Color.WHITE);
        amountLabel.setFont(new Font(""Arial"",Font.BOLD,14));        
        outputPanel.add(amountLabel);
        
        
        amountLabel = new JLabel(""Amount"");
        amountLabel.setBackground(Color.WHITE);
        amountLabel.setFont(new Font(""Arial"",Font.BOLD,14));        
        outputPanel.add(amountLabel);
        
        
        customerAmountTextField = new JTextField();
        customerAmountTextField.setFont(new Font(""Arial"",Font.BOLD,14));
        customerAmountTextField.setEnabled(false);
        customerAmountTextField.setBackground(Color.WHITE);
        outputPanel.add(customerAmountTextField); 
        
        
        companyAmountTextField = new JTextField();
        companyAmountTextField.setFont(new Font(""Arial"",Font.BOLD,14));
        companyAmountTextField.setEnabled(false);
        companyAmountTextField.setBackground(Color.WHITE);
        outputPanel.add(companyAmountTextField); 
        
        
        customerSubmitButton = new JButton(""Submit"");
        customerSubmitButton.setFont(new Font(""Arial"",Font.BOLD,14));
        customerSubmitButton.setFocusPainted(false);
        outputPanel.add(customerSubmitButton); 
        
        
        companySubmitButton = new JButton(""Submit"");
        companySubmitButton.setFont(new Font(""Arial"",Font.BOLD,14));
        companySubmitButton.setFocusPainted(false);
        outputPanel.add(companySubmitButton);
        
    }
    
    /**
     * This Method Sets Customer Due
     */
    public void setCustomerDue()
    {
        int totalDue = 0;
        customerDueIdCombobox.addItem("""");
        
        try{
          BufferedReader br = new BufferedReader(new FileReader(""SalesDatabase.txt""));
          String s = """";
          
          
          while((s=br.readLine())!=null)
          {  
            int due = checkDue(s.substring(0, 10),""SalesDatabase.txt"");
            
            
            if(due>0)
            {
                customerDueIdCombobox.addItem(s.substring(0, 10));
            }
        
            totalDue = totalDue + due;     
         }
   
        }catch(Exception e){System.out.println(e);}
        
        customerDueTextField.setText(""""+totalDue);
    }
    
    /**
     * This Method Sets Company
     */
    public void setCompanyDue()
    {
        int totalDue = 0;
        companyDueIdCombobox.addItem("""");
        
        try{
          BufferedReader br = new BufferedReader(new FileReader(""PurchaseDatabase.txt""));
          String s = """";
          
         
          while((s=br.readLine())!=null)
          {  
            int due = checkDue(s.substring(0, 10),""PurchaseDatabase.txt"");
            
            if(due>0)
            {
                companyDueIdCombobox.addItem(s.substring(0, 10));
            }
            
            totalDue = totalDue + due;
              
          }
          
          companyDueTextField.setText(""""+totalDue);
          
            
        }catch(Exception e){System.out.println(e);}

    }
    
    /**
     * Checks Due
     * 
     * @param selectedItem Due of Selected Item
     * @param filename Specific FileName
     * @return Due
     */
    public int checkDue(String selectedItem,String filename)
    {
        int totalDue = 0;
        
        try{
         
        BufferedReader br = new BufferedReader(new FileReader(filename));
        String s = """";
        
        
        while((s=br.readLine())!=null)
        {
            if(selectedItem.equals(s.substring(0, 10)))
            {                
                char demo[] = s.toCharArray();
                int i = s.length()-1;
                String result="""";
                while(demo[i]!=',')
                {
                  result = result + demo[i];
                  i--;
                }
            
                StringBuffer sb=new StringBuffer(result);  
                sb.reverse();    
        
                int due = Integer.parseInt(sb.toString());
                totalDue = totalDue + due;
            }
             
        }

        
        BufferedReader br2 = new BufferedReader(new FileReader(""IncomeCostDatabase.txt""));
        String s2 = """";
    
        while((s2=br2.readLine())!=null)
        {  
            if(selectedItem.equals(s2.substring(0, 10)))
            {
                char demo[] = s2.toCharArray();
                int i = s2.length()-1;
                String result="""";
                while(demo[i]!=',')
                {
                  result = result + demo[i];
                  i--;
                }
            
                StringBuffer sb=new StringBuffer(result);  
                sb.reverse();    
        
                int due = Integer.parseInt(sb.toString());
                
                totalDue = totalDue - due;  
            }
        }
        
            
        }catch(Exception e) {System.out.println(e);}
        
        return totalDue;
        
    }
    
    /**
     * Checks If Money Digit or Not
     * 
     * @param c A Specific Character 
     * @return True if MoneyDigit otherwise false
     */
    public boolean checkMoneyDigit(char c)
    {
        if(c!='0'&&c!='1'&&c!='2'&&c!='3'&&c!='4'&&c!='5'&&c!='6'&&c!='7'&&c!='8'&&c!='9'&&c!=(char)10&&c!=(char)8)
            return true;
        else
            return false;
    }
    
    
    public void refresh()
    {
        dispose();
        DueCheckPage frame = new DueCheckPage();
        frame.setVisible(true);
        
    }
    
    /**
     *  Sets Due Features
     */
    public void setDueCheckFeatures()
    {
        customerDueIdCombobox.addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if("""".equals(customerDueIdCombobox.getSelectedItem()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Select an Option"");
                    customerAmountTextField.setText("""");
                    customerAmountTextField.setEnabled(false);
                }
                else
                {
                    customerAmountTextField.setEnabled(true);
                    JOptionPane.showMessageDialog(null, ""Due Amount is ""+checkDue((String)customerDueIdCombobox.getSelectedItem(),""SalesDatabase.txt""));
                }
            }
        }); 
        
        customerAmountTextField.addKeyListener(new KeyListener(){
      
            public void keyTyped(KeyEvent ke) {
            }

            public void keyPressed(KeyEvent ke) 
            {
                if(checkMoneyDigit(ke.getKeyChar()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Valid Digit"");
                    customerAmountTextField.setText("""");
                }
            }

            public void keyReleased(KeyEvent ke){    
            }
        
        
        
        });
        
        
        companyDueIdCombobox.addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if("""".equals(companyDueIdCombobox.getSelectedItem()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Select an Option"");
                    companyAmountTextField.setText("""");
                    companyAmountTextField.setEnabled(false);
                }
                else
                {
                    companyAmountTextField.setEnabled(true);
                    JOptionPane.showMessageDialog(null, ""Due Amount is ""+checkDue((String)companyDueIdCombobox.getSelectedItem(),""PurchaseDatabase.txt""));
                }
            }
        }); 
        
        companyAmountTextField.addKeyListener(new KeyListener(){
      
            public void keyTyped(KeyEvent ke) {
            }

            public void keyPressed(KeyEvent ke) 
            {
                if(checkMoneyDigit(ke.getKeyChar()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Valid Digit"");
                    companyAmountTextField.setText("""");
                }
            }

            public void keyReleased(KeyEvent ke){              
            }
        
        });
        
        
        customerSubmitButton.addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                try{
                    
                if("""".equals(customerAmountTextField.getText())) 
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Some Amount"");   
                }
                
                else if(Integer.parseInt(customerAmountTextField.getText())>checkDue((String)customerDueIdCombobox.getSelectedItem(),""SalesDatabase.txt""))
                {
                    JOptionPane.showMessageDialog(null, ""Please Do Not Enter Extra Amount\nYour Due is ""+checkDue((String)customerDueIdCombobox.getSelectedItem(),""SalesDatabase.txt""));
                    customerAmountTextField.setText("""");
                }
                else
                {
                   
                BufferedWriter bw = new BufferedWriter(new FileWriter(""IncomeCostDatabase.txt"",true));
                bw.append(customerDueIdCombobox.getSelectedItem()+"",""+dateTextField.getText()+"",""+""Income By Customer Due Amount""+"",""+customerAmountTextField.getText()+""\n"");
                bw.close();
                 
                JOptionPane.showMessageDialog(null, ""Customer Due Added Successfully"");
                JOptionPane.showMessageDialog(null, ""Remaining Due Amount is ""+checkDue((String)customerDueIdCombobox.getSelectedItem(),""SalesDatabase.txt""));
                
                refresh();
                      
                }
                
                }catch(Exception ex) {}
            }
        });
        
        companySubmitButton.addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                try{
                if("""".equals(companyAmountTextField.getText())) 
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Some Amount"");   
                }
                
                else if(Integer.parseInt(companyAmountTextField.getText())>checkDue((String)companyDueIdCombobox.getSelectedItem(),""PurchaseDatabase.txt""))
                {
                    JOptionPane.showMessageDialog(null, ""Please Do Not Enter Extra Amount\nYour Due is ""+checkDue((String)companyDueIdCombobox.getSelectedItem(),""PurchaseDatabase.txt""));
                    companyAmountTextField.setText("""");
                }
                
                else
                {
  
                BufferedWriter bw = new BufferedWriter(new FileWriter(""IncomeCostDatabase.txt"",true));
                bw.append(companyDueIdCombobox.getSelectedItem()+"",""+dateTextField.getText()+"",""+""Cost By Company Due Amount""+"",""+companyAmountTextField.getText()+""\n"");
                bw.close();
                
                JOptionPane.showMessageDialog(null, ""Company Due Paid Successfully"");
                JOptionPane.showMessageDialog(null, ""Remaining Due Amount is ""+checkDue((String)companyDueIdCombobox.getSelectedItem(),""PurchaseDatabase.txt""));

                
                refresh();

                }
                
                }catch(Exception ex) {}
            }
        });
    }
    
    
    public static void main(String[] args) 
    {
       DueCheckPage frame = new DueCheckPage();
       frame.setVisible(true);
    }
}",1
"
package ShopAssistant;

import Templates.DashBoardTemplate;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.FileReader;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;


public class HomePage extends DashBoardTemplate 
{
    public JPanel searchPanel,inputPanel;
    public JLabel searchLabel;
    public JTextField searchTextField;
    public JButton searchButton,clearButton,printButton;
    public JEditorPane showDetailsEditorpane;
    public JScrollPane scroll;
    public String HTMLText = """";
    
    /**
     *  Home Page Constructor
     */
    public HomePage()
    {
        setPageButton();
        setMainPanel();
        setSearchPanel();
        setSeachFeatures();
    }
    
    /**
     * This Method Sets Button Using Different BackGround and ForeGround Color
     */
    public void setPageButton()
    {
        getButton(""Home"").setBackground(Color.LIGHT_GRAY);
        getButton(""Home"").setForeground(Color.BLACK);
        getButton(""Home"").setFont(new Font(""Arial"",Font.BOLD,16));
    }
    
    /**
     * This Method Sets Main Panel
     */
    public void setMainPanel()
    {
        mainPanel.setLayout(new BorderLayout(90,40));

        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.NORTH);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.EAST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.WEST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.SOUTH);
        
        
        searchPanel = new JPanel();
        searchPanel.setLayout(new BorderLayout());
        searchPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        searchPanel.setBackground(Color.WHITE);
        mainPanel.add(searchPanel,BorderLayout.CENTER);
    }
    
    /**
     * This Method Sets Search Panel
     */
    public void setSearchPanel()
    {
        inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(3,2));
        searchPanel.add(inputPanel,BorderLayout.NORTH);
        
        searchLabel = new JLabel(""Enter Your Keyword"");
        searchLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        searchLabel.setOpaque(true);
        searchLabel.setBackground(Color.WHITE);
        inputPanel.add(searchLabel);
        
        searchTextField = new JTextField();
        searchTextField.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(searchTextField);
        
        clearButton = new JButton(""Clear"");
        clearButton.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(clearButton);
        
        searchButton = new JButton(""Search"");
        searchButton.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(searchButton);
        
        printButton = new JButton(""Print"");
        printButton.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(printButton);
        
        showDetailsEditorpane = new JEditorPane();
        showDetailsEditorpane.setContentType(""text/html"");
        showDetailsEditorpane.setText(HTMLText);
        showDetailsEditorpane.setEditable(false);
        scroll = new JScrollPane(showDetailsEditorpane);
        searchPanel.add(scroll,BorderLayout.CENTER);
    }
    
    /**
     * This Method Sets HTML Text For Design Purpose
     */
    public void setHTMLText(String filename)
    {
        try{
                
            BufferedReader brSalesOrPurchase = new BufferedReader(new FileReader(filename));
            String strSalesOrPurchase;
                  
            while((strSalesOrPurchase = brSalesOrPurchase.readLine())!=null)
            {
                if(strSalesOrPurchase.contains(searchTextField.getText()))
                {
                    char demo[] = strSalesOrPurchase.toCharArray();
                    String dataArray[] = new String[strSalesOrPurchase.length()];
                    
                    int i = 0 , j = 0, start = 0 , end;
                    
                    while(i!=demo.length)
                    {
                        if(demo[i]==',')
                        {
                            end = i;
                            
                            dataArray[j] = strSalesOrPurchase.substring(start, end);
                            j++;
                            
                            start = end + 1;
                        }
                        i++;
                    }
                    
                    dataArray[j] = strSalesOrPurchase.substring(start, i);
                    
                    int arraySizeToDue = j;
                    
                   
                    HTMLText = HTMLText
                        +""<table width = \""100%\"" style=\""font-family:monospaced;font-weight:bold;font-size:13px;\"" >""    
                        ;
                    
                    dataArray[0] = ""  Invoice  Id  :  "" + dataArray[0];
                    dataArray[1] = ""  Date & Time  :  "" + dataArray[1];
                    dataArray[2] = ""  Name  :  "" + dataArray[2];
                    dataArray[3] = ""  Address  :  "" + dataArray[3];
                    dataArray[4] = ""  Mobile Number  :  "" + dataArray[4];
                    dataArray[5] = ""  Product Type  :  "" + dataArray[5];
                    dataArray[6] = ""  Model Number  :  "" + dataArray[6];
                    dataArray[7] = ""  Quantity  :  "" + dataArray[7];
                    dataArray[8] = ""  Unit Price  :  "" + dataArray[8];
                    dataArray[9] = ""  Payment  :  "" + dataArray[9];
                    dataArray[arraySizeToDue-2] = ""  Total Payment  :  "" + dataArray[arraySizeToDue - 2];
                    dataArray[arraySizeToDue-1] = ""  Paid Amount  :  "" + dataArray[arraySizeToDue - 1];
                    dataArray[arraySizeToDue] = ""  Due Amount  :  "" + dataArray[arraySizeToDue];
                    
                    BufferedReader brIncomeCost = new BufferedReader(new FileReader(""IncomeCostDatabase.txt""));
                    String strIncomeCost;
                    
                    int dueAmount = Integer.parseInt(dataArray[arraySizeToDue].substring(17, dataArray[arraySizeToDue].length()));
                    int m = arraySizeToDue + 1;
                    
                    while((strIncomeCost = brIncomeCost.readLine())!=null)
                    {
                        if(strSalesOrPurchase.substring(0, 10).equals(strIncomeCost.substring(0, 10)))
                        {
                            if(strIncomeCost.charAt(0)=='P')
                            {
                                int currentPayment = Integer.parseInt(strIncomeCost.substring(65, strIncomeCost.length()));
                                dataArray[m] = ""  Due Amount  :  ""+(dueAmount - currentPayment)+""(""+strIncomeCost.substring(11, 21)+"")  Paid ""+currentPayment;
                                dueAmount = dueAmount - currentPayment;
                                m++;
                            }
                            if(strIncomeCost.charAt(0)=='S')
                            {
                                int currentPayment = Integer.parseInt(strIncomeCost.substring(68, strIncomeCost.length()));
                                dataArray[m] = ""  Due Amount  :  ""+(dueAmount - currentPayment)+""(""+strIncomeCost.substring(11, 21)+"")  Paid ""+currentPayment;
                                dueAmount = dueAmount - currentPayment;
                                m++;
                            }
                        }
                    }
                    
                    int arraySize = m-1;
                            
                    for(i=0; i<= arraySize ;i++)
                    {
                        if(dataArray[i].contains(searchTextField.getText()))
                        {
                            if(dataArray[i].contains("":""))
                            {
                                HTMLText = HTMLText
                                +""<tr style=\""color:red;font-weight:bold;\""><td>""+dataArray[i].substring(0,dataArray[i].indexOf("":""))+""</td><td>:</td><td>""+dataArray[i].substring(dataArray[i].indexOf("":"")+1,dataArray[i].length())+""</td></tr>"";
                            }
                            else
                            {
                                HTMLText = HTMLText
                                +""<tr style=\""color:red;font-weight:bold;\""><td></td><td>:</td><td>""+dataArray[i]+""</td></tr>"";
                            }                            
                        }    
                        else
                        {
                            if(dataArray[i].contains("":""))
                            {
                                HTMLText = HTMLText
                                +""<tr><td>""+dataArray[i].substring(0,dataArray[i].indexOf("":""))+""</td><td>:</td><td>""+dataArray[i].substring(dataArray[i].indexOf("":"")+1,dataArray[i].length())+""</td></tr>"";
                            }
                            else
                            {
                                HTMLText = HTMLText
                                +""<tr><td></td><td>:</td><td>""+dataArray[i]+""</td></tr>"";
                            }
                        }
                    }
                    
                    HTMLText = HTMLText    
                        +""</table><br><br>""
                            ;  
                }    
            }
       
        }catch(Exception ex) { System.out.println(ex);}
            
    }
    
    /**
     *  Sets Search Features
     */
    public void setSeachFeatures()
    {
        searchButton.addActionListener(new ActionListener(){
        
        public void actionPerformed(ActionEvent e)
        {
            if("""".equals(searchTextField.getText()))
            {
                JOptionPane.showMessageDialog(null,""Please Enter A Keyword"");
            }
            else
            {
                setHTMLText(""SalesDatabase.txt"");
                setHTMLText(""PurchaseDatabase.txt"");
                showDetailsEditorpane.setText(HTMLText);
                HTMLText = """";
            }
        }
        
        });
        
        clearButton.addActionListener(new ActionListener(){
        
        public void actionPerformed(ActionEvent e)
        {
            showDetailsEditorpane.setText("""");
        }
        
        });
        
        printButton.addActionListener(new ActionListener(){
        
        public void actionPerformed(ActionEvent e)
        {
            try 
            {
                showDetailsEditorpane.print();
            } catch (PrinterException ex) {}
        }
       
        });
        
    }

    public static void main(String[] args) 
    {
       HomePage frame = new HomePage();
       frame.setVisible(true);
    }
}",1
"
package ShopAssistant;

import Templates.StartingTemplate;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static javax.swing.BorderFactory.createMatteBorder;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

public class LoginPage extends StartingTemplate
{
    private JLabel headerLabel,usernameLabel,passwordLabel;
    private JTextField usernameTextField;
    private JPasswordField passwordField;
    private JButton loginButton;
    
    /**
     *  Login Page Constructor
     */
    public LoginPage()
    {
        setComponetPanel();
        setLoginFeatures();
    }
    
    /**
     *   Sets Component Panel
     */
    public void setComponetPanel()
    {
        componentPanel.setLayout(new GridLayout(11,1));
 
        headerLabel = new JLabel(""User Login"");
        headerLabel.setHorizontalAlignment(JLabel.CENTER);
        headerLabel.setFont(new Font(""Arial"",Font.BOLD,30));
        componentPanel.add(headerLabel);
        
        nullLabel = new JLabel();
        componentPanel.add(nullLabel);
        
        usernameLabel = new JLabel(""Username"");
        usernameLabel.setForeground(Color.GRAY);
        usernameLabel.setFont(new Font(""Arial"",Font.BOLD,20));
        componentPanel.add(usernameLabel);
        
        usernameTextField = new JTextField();
        usernameTextField.setFont(new Font(""Arial"",Font.BOLD,16));
        usernameTextField.setForeground(Color.black);
        usernameTextField.setBorder(createMatteBorder(0,0,2,0,Color.blue));
        componentPanel.add(usernameTextField);
       
        nullLabel = new JLabel();
        componentPanel.add(nullLabel);
        
        passwordLabel = new JLabel(""Password"");
        passwordLabel.setForeground(Color.GRAY);
        passwordLabel.setFont(new Font(""Arial"",Font.BOLD,20));
        componentPanel.add(passwordLabel);
        
        passwordField = new JPasswordField();
        passwordField.setForeground(Color.black);
        passwordField.setFont(new Font(""Arial"",Font.BOLD,16));
        passwordField.setBorder(createMatteBorder(0,0,2,0,Color.blue));
        componentPanel.add(passwordField);
        
        nullLabel = new JLabel();
        componentPanel.add(nullLabel);
        nullLabel = new JLabel();
        componentPanel.add(nullLabel);
        
        loginButton = new JButton(loginButtonIcon);
        loginButton.setBorder(null);
        loginButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        loginButton.setBackground(Color.white);
        componentPanel.add(loginButton);   
    }
    
    /**
     *  Sets Login Features
     */
    public void setLoginFeatures()
    {
        loginButton.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                if(""admin"".equals(usernameTextField.getText())&&(""admin"".equals(passwordField.getText())||getPassword().equals(passwordField.getText())))
                {
                    dispose();
                    HomePage frame = new HomePage();
                    frame.setVisible(true);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, ""Please enter valid username and password"");
                }
            }
        });       
    }
}",0
"
package ShopAssistant;

import Templates.DashBoardTemplate;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class SettingsPage extends DashBoardTemplate
{
    public JPanel centerPanel,passwordChangeAddNewStaffPanel,addNewModelRemoveMemberPanel;
    public JLabel passwordChangeLabel,oldPasswordLabel,newPasswordLabel,newModelAddLabel,selectCategoryLabel,modelNameLabel,addNewMemberLabel,memberNameLabel,removeMemberLabel,selectMemberLabel;
    public JTextField oldPasswordTextField,newPasswordTextField_1,newPasswordTextField_2,modelNameTextField_1,modelNameTextField_2,memberNameTextField;
    public JButton passwordSubmitButton,addModelButton,addMemberButton,removeMemberButton;
    public JComboBox productTypeCombobox,memberNameCombobox;
    
    public boolean passwordSectionVisibility = false;
    public boolean addNewMemberSectionVisibility = false;
    public boolean addNewModelSectionVisibility = false;
    public boolean removeModelSectionVisibility = false;
    
    /**
     *  Settings Page Constructor
     */
    public SettingsPage()
    {
        setPageButton();
        setMainPanel();
        setCenterPanel();
        setSettingsPageFeatures();
    }
    
    /**
     * This Method Sets Button Using Different BackGround and ForeGround Color
     */
    public void setPageButton()
    {
        getButton(""Settings"").setBackground(Color.LIGHT_GRAY);
        getButton(""Settings"").setForeground(Color.BLACK);
        getButton(""Settings"").setFont(new Font(""Arial"",Font.BOLD,16));
    }
    
    /**
     * This Method Sets Main Panel
     */
    public void setMainPanel()
    {
        mainPanel.setLayout(new BorderLayout(50,30));
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.NORTH);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.EAST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.WEST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.SOUTH);
        
        centerPanel = new JPanel();
        GridLayout gridLayout = new GridLayout(1,2);
        gridLayout.setHgap(20);
        centerPanel.setLayout(gridLayout);
        
        centerPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        centerPanel.setBackground(Color.WHITE);
        mainPanel.add(centerPanel,BorderLayout.CENTER);
    }
    
    /**
     * This Method Sets Center Panel
     */
    public void setCenterPanel()
    {
        setPasswordChangeAddNewStaffPanel();
        setAddNewModelRemoveMemberPanel();
    }
    
    /**
     * This Method Sets Password Change and Add New Staff Panel
     */
    public void setPasswordChangeAddNewStaffPanel()
    {
        passwordChangeAddNewStaffPanel = new JPanel();
        passwordChangeAddNewStaffPanel.setLayout(new GridLayout(12,1));
        passwordChangeAddNewStaffPanel.setBackground(Color.WHITE);
        centerPanel.add(passwordChangeAddNewStaffPanel);
        
        passwordChangeLabel = new JLabel(""Password Change"");
        passwordChangeLabel.setOpaque(true);
        passwordChangeLabel.setBackground(Color.DARK_GRAY);
        passwordChangeLabel.setForeground(Color.WHITE);
        passwordChangeLabel.setHorizontalAlignment(JLabel.CENTER);
        passwordChangeLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        passwordChangeAddNewStaffPanel.add(passwordChangeLabel);
        
        oldPasswordLabel = new JLabel(""Enter Old Password"");
        oldPasswordLabel.setBackground(Color.WHITE);
        oldPasswordLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        oldPasswordLabel.setVisible(false);
        passwordChangeAddNewStaffPanel.add(oldPasswordLabel);
        
        oldPasswordTextField = new JTextField();
        oldPasswordTextField.setBackground(Color.WHITE);
        oldPasswordTextField.setFont(new Font(""Arial"",Font.BOLD,16));
        oldPasswordTextField.setVisible(false);
        passwordChangeAddNewStaffPanel.add(oldPasswordTextField);
        
        newPasswordLabel = new JLabel(""Enter New Password (2 Times)"");
        newPasswordLabel.setBackground(Color.WHITE);
        newPasswordLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        newPasswordLabel.setVisible(false);
        passwordChangeAddNewStaffPanel.add(newPasswordLabel);
        
        newPasswordTextField_1 = new JTextField();
        newPasswordTextField_1.setBackground(Color.WHITE);
        newPasswordTextField_1.setFont(new Font(""Arial"",Font.BOLD,16));
        newPasswordTextField_1.setVisible(false);
        passwordChangeAddNewStaffPanel.add(newPasswordTextField_1);
        
        newPasswordTextField_2 = new JTextField();
        newPasswordTextField_2.setBackground(Color.WHITE);
        newPasswordTextField_2.setFont(new Font(""Arial"",Font.BOLD,16));
        newPasswordTextField_2.setVisible(false);
        passwordChangeAddNewStaffPanel.add(newPasswordTextField_2);
        
        passwordSubmitButton = new JButton(""Submit"");
        passwordSubmitButton.setFont(new Font(""Arial"",Font.BOLD,16));
        passwordSubmitButton.setFocusPainted(false);
        passwordSubmitButton.setVisible(false);
        passwordChangeAddNewStaffPanel.add(passwordSubmitButton);
        
        nullLabel = new JLabel();
        passwordChangeAddNewStaffPanel.add(nullLabel);
        
        addNewMemberLabel = new JLabel(""Add New Staff"");
        addNewMemberLabel.setOpaque(true);
        addNewMemberLabel.setBackground(Color.DARK_GRAY);
        addNewMemberLabel.setForeground(Color.WHITE);
        addNewMemberLabel.setHorizontalAlignment(JLabel.CENTER);
        addNewMemberLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        passwordChangeAddNewStaffPanel.add(addNewMemberLabel);
        
        memberNameLabel = new JLabel(""Enter New Staff Name"");
        memberNameLabel.setBackground(Color.WHITE);
        memberNameLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        memberNameLabel.setVisible(false);
        passwordChangeAddNewStaffPanel.add(memberNameLabel);
        
        memberNameTextField = new JTextField();
        memberNameTextField.setBackground(Color.WHITE);
        memberNameTextField.setFont(new Font(""Arial"",Font.BOLD,16));
        memberNameTextField.setVisible(false);
        passwordChangeAddNewStaffPanel.add(memberNameTextField);
        
        addMemberButton = new JButton(""Add Staff"");
        addMemberButton.setFont(new Font(""Arial"",Font.BOLD,16));
        addMemberButton.setFocusPainted(false);
        addMemberButton.setVisible(false);
        passwordChangeAddNewStaffPanel.add(addMemberButton);
    }
    
    /**
     * This Method Add New Model and Remove Member Panel
     */
    public void setAddNewModelRemoveMemberPanel()
    {
        addNewModelRemoveMemberPanel = new JPanel();
        addNewModelRemoveMemberPanel.setLayout(new GridLayout(12,1));
        addNewModelRemoveMemberPanel.setBackground(Color.WHITE);
        centerPanel.add(addNewModelRemoveMemberPanel);
        
        newModelAddLabel = new JLabel(""Add New Model"");
        newModelAddLabel.setOpaque(true);
        newModelAddLabel.setBackground(Color.DARK_GRAY);
        newModelAddLabel.setForeground(Color.WHITE);
        newModelAddLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        newModelAddLabel.setHorizontalAlignment(JLabel.CENTER);
        addNewModelRemoveMemberPanel.add(newModelAddLabel);
        
        selectCategoryLabel = new JLabel(""Select Category"");
        selectCategoryLabel.setBackground(Color.WHITE);
        selectCategoryLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        selectCategoryLabel.setVisible(false);
        addNewModelRemoveMemberPanel.add(selectCategoryLabel);
        
        productTypeCombobox = new JComboBox(setProductTypes());
        productTypeCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        productTypeCombobox.setVisible(false);
        addNewModelRemoveMemberPanel.add(productTypeCombobox);
        
        modelNameLabel = new JLabel(""Enter New Model (2 Times)"");
        modelNameLabel.setBackground(Color.WHITE);
        modelNameLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        modelNameLabel.setVisible(false);
        addNewModelRemoveMemberPanel.add(modelNameLabel);
        
        modelNameTextField_1 = new JTextField();
        modelNameTextField_1.setBackground(Color.WHITE);
        modelNameTextField_1.setFont(new Font(""Arial"",Font.BOLD,16));
        modelNameTextField_1.setVisible(false);
        addNewModelRemoveMemberPanel.add(modelNameTextField_1);
        
        modelNameTextField_2 = new JTextField();
        modelNameTextField_2.setBackground(Color.WHITE);
        modelNameTextField_2.setFont(new Font(""Arial"",Font.BOLD,16));
        modelNameTextField_2.setVisible(false);
        addNewModelRemoveMemberPanel.add(modelNameTextField_2);
        
        addModelButton = new JButton(""Add Model"");
        addModelButton.setFont(new Font(""Arial"",Font.BOLD,16));
        addModelButton.setFocusPainted(false);
        addModelButton.setVisible(false);
        addNewModelRemoveMemberPanel.add(addModelButton);
        
        nullLabel = new JLabel();
        addNewModelRemoveMemberPanel.add(nullLabel);
         
        removeMemberLabel = new JLabel(""Remove Staff"");
        removeMemberLabel.setOpaque(true);
        removeMemberLabel.setBackground(Color.DARK_GRAY);
        removeMemberLabel.setForeground(Color.WHITE);
        removeMemberLabel.setHorizontalAlignment(JLabel.CENTER);
        removeMemberLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        addNewModelRemoveMemberPanel.add(removeMemberLabel);
        
        selectMemberLabel = new JLabel(""Select Staff"");
        selectMemberLabel.setBackground(Color.WHITE);
        selectMemberLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        selectMemberLabel.setVisible(false);
        addNewModelRemoveMemberPanel.add(selectMemberLabel);
        
        memberNameCombobox = new JComboBox();
        memberNameCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        memberNameCombobox.setVisible(false);
        addNewModelRemoveMemberPanel.add(memberNameCombobox);
        setMemberNames();
        
        removeMemberButton = new JButton(""Remove Staff"");
        removeMemberButton.setFont(new Font(""Arial"",Font.BOLD,16));
        removeMemberButton.setFocusPainted(false);
        removeMemberButton.setVisible(false);
        addNewModelRemoveMemberPanel.add(removeMemberButton);  
    }
    
    /**
     *  Sets Settings Page Features
     */
    public void setSettingsPageFeatures()
    {
        passwordChangeLabel.addMouseListener(new MouseAdapter(){
            
            public void mouseClicked(MouseEvent me) 
            {
                if(passwordSectionVisibility)
                {
                    setPasswordSectionVisible(false);
                    passwordSectionVisibility = false;
                }
                else
                {
                    setPasswordSectionVisible(true);
                    passwordSectionVisibility = true;
                }                  
            }
        });       
        
        addNewMemberLabel.addMouseListener(new MouseAdapter(){
            
            public void mouseClicked(MouseEvent me) 
            {
                if(addNewMemberSectionVisibility)
                {
                    setAddNewMemberSectionVisible(false);
                    addNewMemberSectionVisibility = false;
                }
                else
                {
                    setAddNewMemberSectionVisible(true);
                    addNewMemberSectionVisibility = true;
                }                  
            }           
        });
        
        newModelAddLabel.addMouseListener(new MouseAdapter(){
            
            public void mouseClicked(MouseEvent me) 
            {
                if(addNewModelSectionVisibility)
                {
                    setAddNewModelSectionVisible(false);
                    addNewModelSectionVisibility = false;
                }
                else
                {
                    setAddNewModelSectionVisible(true);
                    addNewModelSectionVisibility = true;
                }                  
            }
        });
        
        removeMemberLabel.addMouseListener(new MouseAdapter(){
            
            public void mouseClicked(MouseEvent me) 
            {
                if(removeModelSectionVisibility)
                {
                    setRemoveMemberSectionVisible(false);
                    removeModelSectionVisibility = false;
                }
                else
                {
                    setRemoveMemberSectionVisible(true);
                    removeModelSectionVisibility = true;
                }                  
            }
        });
        
        passwordSubmitButton.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                if(passwordSubmitButton.isVisible())
                {
                    try{
                        
                    String newPassword,oldPassword = getPassword();
                    
                    if(oldPassword.equals(oldPasswordTextField.getText())||""admin"".equals(oldPasswordTextField.getText()))
                    {
                        if(!"""".equals(newPasswordTextField_1.getText())&&!"""".equals(newPasswordTextField_2.getText()))
                        {
                       
                        if(newPasswordTextField_1.getText().equals(newPasswordTextField_2.getText()))
                        {
                            newPassword = newPasswordTextField_1.getText();
                            JOptionPane.showMessageDialog(null, ""Password Changed Successfully"");
   
                            BufferedWriter bw = new BufferedWriter(new FileWriter(""UserDatabase.txt"",false));
                            bw.write(""Password:""+newPassword);
                            bw.close();
                    
                            oldPasswordTextField.setText("""");
                            newPasswordTextField_1.setText("""");
                            newPasswordTextField_2.setText("""");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, ""New Password Does Not Match"");
                        }
                        
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, ""Please Enter New PassWord Twice"");
                        }

                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, ""Old Password is Incorrect"");
                    }
                    
     
                    }catch(Exception ex) {System.out.println(ex);}
                        
                }
            }
        
        });
        
        addMemberButton.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                if(addMemberButton.isVisible())
                {
                    try{
                        
                    if(!"""".equals(memberNameTextField.getText()))
                    {
                        BufferedWriter bw = new BufferedWriter(new FileWriter(""StaffNameList.txt"",true));
                        bw.append(""Member:""+memberNameTextField.getText()+""\n"");
                        bw.close();
                    
                        JOptionPane.showMessageDialog(null, ""New Member Added Successfully"");
                    
                        memberNameTextField.setText("""");          
                    }    
                    else
                    {
                        JOptionPane.showMessageDialog(null, ""Please Enter Staff Name"");
                    }
                    
                    }catch(Exception ex) {System.out.println(ex);}     
                }
            }
        
        });  
        
        addModelButton.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                if(addModelButton.isVisible())
                {
                    try{
                        
                    String modelNumber,category = productTypeCombobox.getSelectedItem().toString();

                    if(!"""".equals(category))
                    {
                        if(!"""".equals(modelNameTextField_1.getText())&&!"""".equals(modelNameTextField_2.getText()))
                        {
                            if(modelNameTextField_1.getText().equals(modelNameTextField_2.getText()))
                            {
                                modelNumber = modelNameTextField_1.getText();

                                BufferedReader br = new BufferedReader(new FileReader(""ProductType&ModelList.txt""));
                                
                                String rawData = """",s;
                                
                                while((s=br.readLine())!=null)
                                {
                                    if(s.contains(category))
                                    {        
                                        rawData = rawData + s + modelNumber + ""."" + ""\n"";
                                    }
                                    else
                                    {
                                        rawData = rawData + s + ""\n"";
                                    }
                                }
                                
                                br.close();
                                
                                BufferedWriter bw = new BufferedWriter(new FileWriter(""ProductType&ModelList.txt"",false));           
                                bw.write(rawData);
                                bw.close();
                    
                                modelNameTextField_1.setText("""");
                                modelNameTextField_2.setText("""");
                                
                                JOptionPane.showMessageDialog(null, ""New Model Added Successfully"");
                            } 
                            else
                            {
                                JOptionPane.showMessageDialog(null, ""Model Number Does Not Macth"");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, ""Please Enter New Model Name Twice"");
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, ""Please Select Product Type"");
                    }
                    
                    }catch(Exception ex) {System.out.println(ex);}
                        
                }
            }
        
        });
        
        removeMemberButton.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                if(removeMemberButton.isVisible())
                {
                    try{
                        
                        String memberName = memberNameCombobox.getSelectedItem().toString();
                        
                    if(!"""".equals(memberName))
                    {
                        BufferedReader br = new BufferedReader(new FileReader(""StaffNameList.txt""));
                        String s,rawData="""";
                        
                        while((s=br.readLine())!=null)
                        {
                            if(!s.contains(memberName))
                            {
                                rawData = rawData + s + ""\n"";
                            }
                        }
                        
                        br.close();
                        
                        BufferedWriter bw = new BufferedWriter(new FileWriter(""StaffNameList.txt"",false));
                        bw.write(rawData);
                        bw.close();
                    
                        JOptionPane.showMessageDialog(null, ""Staff ""+memberName+"" Removed  Successfully"");
                    
                        memberNameCombobox.removeAllItems();
                        setMemberNames();
                    }    
                    else
                    {
                        JOptionPane.showMessageDialog(null, ""Please Select A Staff"");
                    }
                    
                    }catch(Exception ex) {System.out.println(ex);}     
                }
            }
        
        }); 
    }
    
    /**
     *  Sets Member Names From File
     */
    public void setMemberNames() 
    {  
        memberNameCombobox.addItem("""");
        
        try{
       
            BufferedReader br = new BufferedReader(new FileReader(""StaffNameList.txt""));
            String s;
            
            while((s=br.readLine())!=null)
            {
                if(s.contains(""Member""))
                {
                    memberNameCombobox.addItem(s.substring(s.indexOf("":"")+1, s.length()));
                }
            }  
            
            br.close();
            
        }catch(Exception e) {System.out.println(e);}       
    }
    
    /**
     * Set Password Section Visible according to Visibility
     * 
     * @param visibility sets Visibility True or False
     */
    public void setPasswordSectionVisible(boolean visibility)
    {
        oldPasswordLabel.setVisible(visibility);
        oldPasswordTextField.setVisible(visibility);
        newPasswordLabel.setVisible(visibility);
        newPasswordTextField_1.setVisible(visibility);
        newPasswordTextField_2.setVisible(visibility);
        passwordSubmitButton.setVisible(visibility);  
    }
    
    /**
     * Set Add New Member Section Visible according to Visibility
     * 
     * @param visibility sets Visibility True or False
     */
    public void setAddNewMemberSectionVisible(boolean visibility)
    {
        memberNameLabel.setVisible(visibility);
        memberNameTextField.setVisible(visibility);
        addMemberButton.setVisible(visibility);
    }
    
    /**
     * Set Add New Model Section Visible according to Visibility
     * 
     * @param visibility sets Visibility True or False
     */
    public void setAddNewModelSectionVisible(boolean visibility)
    {
        selectCategoryLabel.setVisible(visibility);
        productTypeCombobox.setVisible(visibility);
        modelNameLabel.setVisible(visibility);
        modelNameTextField_1.setVisible(visibility);
        modelNameTextField_2.setVisible(visibility);
        addModelButton.setVisible(visibility);
    }
    
    /**
     * Set Remove Member Section Visible according to Visibility
     * 
     * @param visibility sets Visibility True or False
     */
    public void setRemoveMemberSectionVisible(boolean visibility)
    {
        selectMemberLabel.setVisible(visibility);
        memberNameCombobox.setVisible(visibility);
        removeMemberButton.setVisible(visibility);   
        memberNameCombobox.removeAllItems();
        setMemberNames();
    }
    
    public static void main(String[] args) 
    {
        SettingsPage frame = new SettingsPage();
        frame.setVisible(true);
    }
 
}",1
"
package ShopAssistant;

import Templates.DashBoardTemplate;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;


public class StaffAttendancePage extends DashBoardTemplate
{
    public JLabel dateLabel,selectMemberLabel;
    public JPanel centerPanel,inputPanel;
    public JTextField dateTextField;
    public JTextArea outputTextarea;
    public JScrollPane scroll;
    public JComboBox memberNameCombobox;
    public JRadioButton presentRadioButton,absentRadioButton;
    public ButtonGroup attendenceButtonGroup;
    public JButton submitButton,showDetailsButton,printButton;
    
    /**
     *  Staff Attendance Page Constructor
     */
    public StaffAttendancePage()
    {
        setPageButton();
        setMainPanel();
        setCenterPanel();
       setStaffAttendanceFeatures();
    }
    
    /**
     * This Method Sets Button Using Different BackGround and ForeGround Color
     */
    public void setPageButton()
    {
        getButton(""Staff Attendence"").setBackground(Color.LIGHT_GRAY);
        getButton(""Staff Attendence"").setForeground(Color.BLACK);
        getButton(""Staff Attendence"").setFont(new Font(""Arial"",Font.BOLD,16));
    }
    
    /**
     * This Method Sets Main Panel
     */
    public void setMainPanel()
    {
        mainPanel.setLayout(new BorderLayout(50,30));
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.NORTH);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.EAST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.WEST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.SOUTH);
        
        centerPanel = new JPanel();
        centerPanel.setLayout(new GridLayout(1,2));
        centerPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        centerPanel.setBackground(Color.WHITE);
        mainPanel.add(centerPanel,BorderLayout.CENTER);
    }
    
    /**
     * This Method Sets Center Panel
     */
    public void setCenterPanel()
    {
        setintputPanel();
        setOutputTextArea();
    }
    
    /**
     * This Method Sets Input Panel
     */
    public void setintputPanel()
    {    
        inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(9,1));
        inputPanel.setBackground(Color.WHITE);
        centerPanel.add(inputPanel);
        
        dateLabel = new JLabel(""Date & Time"");
        dateLabel.setBackground(Color.WHITE);
        dateLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(dateLabel);       
  
        dateTextField = new JTextField(setDate());
        dateTextField.setBackground(Color.WHITE);
        dateTextField.setEditable(false);
        dateTextField.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(dateTextField);
        
        selectMemberLabel = new JLabel(""Select Member"");
        selectMemberLabel.setBackground(Color.WHITE);
        selectMemberLabel.setFont(new Font(""Arial"",Font.BOLD,16));        
        inputPanel.add(selectMemberLabel);
        
        memberNameCombobox = new JComboBox();
        memberNameCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(memberNameCombobox);
        setMemberNames();
        
        presentRadioButton = new JRadioButton(""Present"");   
        presentRadioButton.setBackground(Color.WHITE);
        presentRadioButton.setFocusPainted(false);
        presentRadioButton.setFont(new Font(""Arial"",Font.BOLD,16));
        inputPanel.add(presentRadioButton);
        
        absentRadioButton = new JRadioButton(""Absent"");   
        absentRadioButton.setFont(new Font(""Arial"",Font.BOLD,16));
        absentRadioButton.setBackground(Color.WHITE);
        absentRadioButton.setFocusPainted(false);
        inputPanel.add(absentRadioButton);
        
        attendenceButtonGroup = new ButtonGroup();
        attendenceButtonGroup.add(presentRadioButton);
        attendenceButtonGroup.add(absentRadioButton);
        
        submitButton = new JButton(""Submit"");
        submitButton.setFont(new Font(""Arial"",Font.BOLD,16));
        submitButton.setFocusPainted(false);
        inputPanel.add(submitButton);
        
        showDetailsButton = new JButton(""Show Details"");
        showDetailsButton.setFont(new Font(""Arial"",Font.BOLD,16));
        showDetailsButton.setFocusPainted(false);
        inputPanel.add(showDetailsButton);
        
        printButton = new JButton(""Print Details"");
        printButton.setFont(new Font(""Arial"",Font.BOLD,16));
        printButton.setFocusPainted(false);
        inputPanel.add(printButton);   
    }
    
    /**
     * This Method Sets Output Text Area 
     */
    public void setOutputTextArea()
    {
        outputTextarea = new JTextArea();
        outputTextarea.setFont(new Font(""Arial"",Font.BOLD,16));
        outputTextarea.setEditable(false);
        scroll = new JScrollPane(outputTextarea);
        centerPanel.add(scroll);
    }
    
    /**
     * This Method Sets Staff Attendance Features
     */
    public void setStaffAttendanceFeatures()
    {
        submitButton.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                try{
                    
                    BufferedWriter bw = new BufferedWriter(new FileWriter(""StaffAttendanceInfo.txt"",true));
                
                    String memberName = memberNameCombobox.getSelectedItem().toString();
                    String date = dateTextField.getText();
                    
                if(!memberName.equals(""""))
                {
                    if(!isAttendanceGiven(memberName,date.substring(0, 10)))
                    {
                        if(presentRadioButton.isSelected())
                        { 
                            
                            bw.append(memberName+"",""+""Present""+"",""+date+""\n"");
                            bw.close();
                            
                            JOptionPane.showMessageDialog(null, ""Attendence Given SuccessFully"");
                        }
                        else if(absentRadioButton.isSelected())
                        {
                            bw.append(memberName+"",""+""Absent""+"",""+date.substring(0, 10)+""\n"");
                            bw.close();
                            
                            JOptionPane.showMessageDialog(null, ""Attendence Given SuccessFully"");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, ""Please Select An Option"");
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, ""Already Attendence Given"");
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, ""Please Select A Member"");
                }
                
                dateTextField.setText(setDate());
                
                
                }catch(Exception ex) {System.out.println(ex);}
            }
        });
        
        showDetailsButton.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                
                outputTextarea.setText("""");
                
                
                try{
                    
                    BufferedReader br = new BufferedReader(new FileReader(""StaffAttendanceInfo.txt""));
                    String s;
                    
                if(!memberNameCombobox.getSelectedItem().equals(""""))
                {
                    outputTextarea.setText(""\n""+""    ""+memberNameCombobox.getSelectedItem()+"" Attendence List\n\n"");
                    
                    int monthArrayPresent[] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
                    int monthArrayAbsent[] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
                    int i;
                    
                    while((s=br.readLine())!=null)
                    {
                        if(s.contains(memberNameCombobox.getSelectedItem().toString()))
                        {
                            String showInfo = s.substring(s.indexOf("","")+1, s.length())+""\n"";
                            
                            String attendence = showInfo.substring(0, showInfo.indexOf("",""));
                            String date = showInfo.substring(showInfo.indexOf("","")+1 , showInfo.indexOf("","")+11);

                            int month = Integer.parseInt(date.substring(3, 5));
                            
                            if(attendence.equals(""Present""))
                            {
                                monthArrayPresent[month]++;
                            }
                            else if(attendence.equals(""Absent""))
                            {
                                monthArrayAbsent[month]++;
                            }
                            
                            
                            outputTextarea.append(""    ""+attendence+""  ""+s.substring(s.indexOf(date), s.length())+""\n"");
                        }    
                    }
                    
                    outputTextarea.append(""\n\n"");
                    
                    for(i=1;i<=12;i++)
                    {
                        if(monthArrayPresent[i]>0||monthArrayAbsent[i]>0)
                        {
                            outputTextarea.append(""    Total Present in ""+(i)+""th month ""+monthArrayPresent[i]+"" days\n"");
                            outputTextarea.append(""    Total Absent in ""+(i)+""th month ""+monthArrayAbsent[i]+"" days\n"");
                        }
                    }
                    
                    br.close();
                }
                else
                {
                    JOptionPane.showMessageDialog(null, ""Please Select A Member"");
                }
                
                
                }catch(Exception ex) {System.out.println(ex);}
            }
        });
        
        printButton.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
                if("""".equals(outputTextarea.getText()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Get Some Attendence Information"");
                }
                else 
                {
                    try {
                        outputTextarea.print();
                    } catch (PrinterException ex) {
                    }   
                }  
            }
        
        
        });
    }
    
    /**
     * This Method Returns Boolean Value if Attendance is Already Given or Not
     * 
     * @param name Specific Member Name
     * @param date Specific Date
     * @return Attendance Given Or Not
     */
    public boolean isAttendanceGiven(String name,String date)
    {
        boolean given = false;
        
        try{
       
            BufferedReader br = new BufferedReader(new FileReader(""StaffAttendanceInfo.txt""));
            String s;
            
            while((s=br.readLine())!=null)
            {
                if(s.contains(name)&&s.contains(date))
                {
                    given = true;
                }
            }   
            
            br.close();
            
        }catch(Exception e) {System.out.println(e);}  
        
        return given;
    }
    
    /**
     *  Sets Member Name According to File
     */
    public void setMemberNames() 
    {  
        memberNameCombobox.addItem("""");
        
        try{
       
            BufferedReader br = new BufferedReader(new FileReader(""StaffNameList.txt""));
            String s;
            
            while((s=br.readLine())!=null)
            {
                if(s.contains(""Member""))
                {
                    memberNameCombobox.addItem(s.substring(s.indexOf("":"")+1, s.length()));
                }
            }  
            
            br.close();
            
        }catch(Exception e) {System.out.println(e);}    
        
    }
    
    public static void main(String[] args) 
    {
        StaffAttendancePage frame = new StaffAttendancePage();
        frame.setVisible(true);
    }
 
}",1
"
package ShopAssistant;

import Templates.DashBoardTemplate;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;


public class StockCheckPage extends DashBoardTemplate
{
    public JPanel outputPanel;
    public JLabel productTypeLabel,modelNumberLabel;
    public JTextField showQuantityTextField;
    public JComboBox productTypeCombobox,modelNumberCombobox;
    
    /**
     *  Stock Check Page Constructor
     */
    public StockCheckPage()
    {
        setPageButton();
        setMainPanel();
        setOutputPanel();
        setStockCheckFeatures();
    }
    
    /**
     * This Method Sets Button Using Different BackGround and ForeGround Color
     */
    public void setPageButton()
    {
        getButton(""Stock Check"").setBackground(Color.LIGHT_GRAY);
        getButton(""Stock Check"").setForeground(Color.BLACK);
        getButton(""Stock Check"").setFont(new Font(""Arial"",Font.BOLD,16));
    }
    
    /**
     * This Method Sets Main Panel
     */
    public void setMainPanel()
    {
        mainPanel.setLayout(new BorderLayout(120,50));

        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.NORTH);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.EAST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.WEST);
        
        nullLabel = new JLabel();
        mainPanel.add(nullLabel,BorderLayout.SOUTH);
        
        outputPanel = new JPanel();
        outputPanel.setLayout(new GridLayout(6,1));
        outputPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        outputPanel.setBackground(Color.WHITE);
        mainPanel.add(outputPanel,BorderLayout.CENTER);
    }
    
    /**
     * This Method Sets Output Panel
     */
    public void setOutputPanel()
    {    
        productTypeLabel = new JLabel(""Product Type"");
        productTypeLabel.setBackground(Color.WHITE);
        productTypeLabel.setFont(new Font(""Arial"",Font.BOLD,16));
        outputPanel.add(productTypeLabel);
        
        productTypeCombobox = new JComboBox(setProductTypes());
        productTypeCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        outputPanel.add(productTypeCombobox);
        
        modelNumberLabel = new JLabel(""Model Number"");
        modelNumberLabel.setBackground(Color.WHITE);
        modelNumberLabel.setFont(new Font(""Arial"",Font.BOLD,16));        
        outputPanel.add(modelNumberLabel);
        
        modelNumberCombobox = new JComboBox();
        modelNumberCombobox.setEnabled(false);
        modelNumberCombobox.setFont(new Font(""Arial"",Font.BOLD,16));
        outputPanel.add(modelNumberCombobox);
        
        showQuantityTextField = new JTextField();
        showQuantityTextField.setFont(new Font(""Arial"",Font.BOLD,16));
        showQuantityTextField.setEditable(false);
        showQuantityTextField.setBackground(Color.WHITE);
        outputPanel.add(showQuantityTextField); 
    }
    
    /**
     * This Method Sets Stock Check Features
     */
    public void setStockCheckFeatures()
    {
        productTypeCombobox.addActionListener(new ActionListener(){
        
            public void actionPerformed(ActionEvent e)
            {
 
                modelNumberCombobox.setEnabled(true);
                modelNumberCombobox.removeAllItems();
                modelNumberCombobox.addItem("""");
                
                try{                    
                BufferedReader br = new BufferedReader(new FileReader(""ProductType&ModelList.txt""));
                String s,result = """",modelNumber = """";
     
                while((s=br.readLine())!=null)
                {
                    if(productTypeCombobox.getSelectedItem().equals(s.substring(0, s.indexOf("",""))))
                    {
                        result = s.substring(s.indexOf("","")+1, s.length());    
                    }
                }
         
                char demo[] = result.toCharArray();
                
                int i = 0,modelCount = 0,stock;
              
                while(i!=demo.length)
                {
                    modelNumber = modelNumber + demo[i];
                    if(demo[i]=='.')
                    {
                        stock = getTotalStock(modelNumber,""PurchaseDatabase.txt"",""SalesDatabase.txt"");
                        
                        if(stock!=0)
                        {
                            modelCount = modelCount + stock;
                            modelNumberCombobox.addItem(modelNumber+"" Available Item ""+stock+"" pcs"");
                        }
                        
                        modelNumber = """";
                    }
                    i++;
                }
                
                showQuantityTextField.setText(""Total ""+productTypeCombobox.getSelectedItem()+"" is ""+modelCount);
                                             
            }catch(Exception ex){System.out.println(ex);}
               
            }
  
        });

    }
    
    public static void main(String[] args) 
    {
        StockCheckPage frame = new StockCheckPage();
        frame.setVisible(true);
    }
}",0
"
package Templates;

import ShopAssistant.AddCostPage;
import ShopAssistant.AdvancedStockCheckPage;
import ShopAssistant.CreatePurchaseInvoicePage;
import ShopAssistant.CreateSalesInvoicePage;
import ShopAssistant.DailyIncomeCostPage;
import ShopAssistant.DueCheckPage;
import ShopAssistant.HomePage;
import ShopAssistant.LoginPage;
import ShopAssistant.SettingsPage;
import ShopAssistant.StaffAttendancePage;
import ShopAssistant.StockCheckPage;



import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


public class DashBoardTemplate extends FrameSetup 
{
    public JPanel horizontalPanel,verticalPanel,mainPanel;
    public JButton shopNameButton,createSalesInvoiceButton,createPurchaseInvoiceButton,logoutButton,homeButton,addCostButton,dailyIncomeCostButton,stockCheckButton,advancedStockCheckButton,dueCheckButton,staffAttendanceButton,settingsButton;
    
    
    public JButton horizontalPanelButtons[] = {shopNameButton,createSalesInvoiceButton,createPurchaseInvoiceButton,logoutButton};
    public JButton verticalPanelButtons[] = {homeButton,addCostButton,dailyIncomeCostButton,stockCheckButton,advancedStockCheckButton,dueCheckButton,staffAttendanceButton,settingsButton};
    
    /**
     *   DashBoard Template Constructor   
     */
    public DashBoardTemplate()
    {
        setFrame();
        setContainer();
        setPanels();
        setActionListeners();
    }
    
    /**
     *  Sets Frame Basic Features
     */
    
    public void setFrame()
    {
        super.setFrame();
        this.setSize(1000, 600);
        this.setLocationRelativeTo(null);
    }
    
    /**
     *  Sets Container
     */
    
    public void setContainer()
    {
        //Method Overriding Contept Used
        
        super.setContainer();  //Here we get setContainer() of parrent class
        
        container.setLayout(new BorderLayout());
    }
    
    /**
     *  Sets Two Panels Called Horizontal Panel and Vertical Panel
     */
    
    public void setPanels()
    {
        horizontalPanel = new JPanel();
        horizontalPanel.setLayout(new GridLayout(1,3));
        horizontalPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        container.add(horizontalPanel,BorderLayout.NORTH);
        setHorizontalPanelComponents();
        
        verticalPanel = new JPanel();
        verticalPanel.setLayout(new GridLayout(8,1));
        verticalPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        container.add(verticalPanel,BorderLayout.WEST);
        setVerticalPanelComponents();
        
        mainPanel = new JPanel();
        mainPanel.setBackground(Color.WHITE);
        container.add(mainPanel,BorderLayout.CENTER);
    }
    
    /**
     *  Sets Horizontal Panel Components
     */
    
    public void setHorizontalPanelComponents()
    {
        String buttonNames[] = {""Shop Name"",""Create Sales Invoice"",""Create Purchase Invoice"",""Log Out""};
        
        for(int i = 0; i < horizontalPanelButtons.length ; i++)
        {
            horizontalPanelButtons[i] = new JButton(buttonNames[i]);
            horizontalPanelButtons[i].setName(buttonNames[i]);
            horizontalPanelButtons[i].setFont(new Font(""Arial"",Font.PLAIN,16));
            horizontalPanelButtons[i].setBackground(Color.DARK_GRAY);
            horizontalPanelButtons[i].setForeground(Color.WHITE);
            horizontalPanelButtons[i].setFocusPainted(false);
            horizontalPanel.add(horizontalPanelButtons[i]);
        }
        
        horizontalPanelButtons[3].setIcon(logoutButtonIcon);
    }    
        
    /**
     *  Sets Vertical Panel Components
     */
    public void setVerticalPanelComponents()
    {
        ImageIcon icons[] = {homeButtonIcon,addCostButtonIcon,dailyIncomeCostButtonIcon,stockCheckButtonIcon,stockCheckButtonIcon,dueCheckButtonIcon,staffAttendanceButtonIcon,settingsButtonIcon};
        String buttonNames[] = {""Home"",""Add Cost"",""Daily Income Cost"",""Stock Check"",""Advanced Stock Check"",""Due Check"",""Staff Attendance"",""Settings""};
        
        for(int i = 0 ; i < verticalPanelButtons.length ; i++)
        {
            verticalPanelButtons[i] = new JButton(buttonNames[i]);
            verticalPanelButtons[i].setName(buttonNames[i]);
            verticalPanelButtons[i].setFont(new Font(""Arial"",Font.PLAIN,16));
            verticalPanelButtons[i].setBackground(Color.DARK_GRAY);
            verticalPanelButtons[i].setForeground(Color.WHITE);
            verticalPanelButtons[i].setFocusPainted(false);
            verticalPanelButtons[i].setIcon(icons[i]);
            verticalPanel.add(verticalPanelButtons[i]);
        }
    }
    
    /**
     *  Sets ActionListeners For All Buttons
     */
    
    public void setActionListeners()
    {   
        /**
         *   Moving to Create Sales Invoice Page
         */
        getButton(""Create Sales Invoice"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                dispose();             
                CreateSalesInvoicePage frame = new CreateSalesInvoicePage(""Customer"",""SalesDatabase.txt"");
                frame.setVisible(true);
            }
        });
         
        /**
         *   Moving to Create Purchase Invoice Page
         */
        getButton(""Create Purchase Invoice"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                dispose();
                CreatePurchaseInvoicePage frame = new CreatePurchaseInvoicePage(""Compnay"",""PurchaseDatabase.txt"");
                frame.setVisible(true);  
            }
        }); 
        
        /**
         *   Moving to Log Out Page
         */
        getButton(""Log Out"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                dispose();
                LoginPage frame = new LoginPage();
                frame.setVisible(true);
            }
        });
        
        /**
         *   Moving to Home Page
         */
        getButton(""Home"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                dispose();
                HomePage frame = new HomePage();
                frame.setVisible(true);
            }
        });
        
        /**
         *   Moving to Add Cost Page
         */
        getButton(""Add Cost"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                dispose();
                AddCostPage frame = new AddCostPage();
                frame.setVisible(true);
            }
        });
        
        /**
         *   Moving to Daily Income Cost Page
         */
        getButton(""Daily Income Cost"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                dispose();
                DailyIncomeCostPage frame = new DailyIncomeCostPage();
                frame.setVisible(true);
            }
        });
        
        /**
         *   Moving to Due Check Page
         */
        getButton(""Due Check"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                dispose();
                DueCheckPage frame = new DueCheckPage();
                frame.setVisible(true);
            }
        });
        
        /**
         *   Moving to Stock Check Page
         */
        getButton(""Stock Check"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                dispose();
                StockCheckPage frame = new StockCheckPage();
                frame.setVisible(true);
            }
        });
        
        /**
         *   Moving to Advanced Stock Check Page
         */
        getButton(""Advanced Stock Check"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                dispose();
                AdvancedStockCheckPage  frame = new AdvancedStockCheckPage();
                frame.setVisible(true);
            }
        });
        
        /**
         *   Moving to Staff Attendance Page
         */
        getButton(""Staff Attendance"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                try{
                    
                    String userInput = JOptionPane.showInputDialog(null, ""Enter Admin Password"", ""Admin Access"",JOptionPane.QUESTION_MESSAGE);
                
                /**
                 * Verification Process
                 * If Password Matches then Move Otherwise Show Invalid Password
                 */   
                if(userInput.equals(""admin""))
                {
                    dispose();
                    StaffAttendancePage frame = new StaffAttendancePage();
                    frame.setVisible(true);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, ""Invalid Password"");
                }
                }catch(NullPointerException ex) {}
                
            }
        });
        
        /**
         *   Moving to Settings Page
         */
        getButton(""Settings"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                try{
                    String userInput = JOptionPane.showInputDialog(null, ""Enter Admin Password"", ""Admin Access"",JOptionPane.QUESTION_MESSAGE);
                
                /**
                 * Verification Process
                 * If Password Matches then Move Otherwise Show Invalid Password
                 */
                
                if(userInput.equals(""admin""))
                {
                    dispose();
                    SettingsPage frame = new SettingsPage();
                    frame.setVisible(true);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, ""Invalid Password"");
                }
                }catch(NullPointerException ex) {}
            }
        });
         
    }
    
    /**
     * This Method Returns A JButton For A Specific Button Name
     * 
     * @param buttonName A Specific ButtonName
     * @return A JButton
     */
    public JButton getButton(String buttonName)
    {
        int i,j; JButton button = new JButton();

        for(i = 0; i < horizontalPanelButtons.length ; i++)
        {
            if(horizontalPanelButtons[i].getName().equals(buttonName))
            {
                button = horizontalPanelButtons[i];
                break;
            }
        }
        
        for(j = 0; j < verticalPanelButtons.length ; j++)
        {   
            if(verticalPanelButtons[j].getName().equals(buttonName))
            {
                button = verticalPanelButtons[j];
            } 
        }
        
        return button;
    }
    
}",1
"
package Templates;

import java.awt.Color;
import java.awt.Container;
import java.io.BufferedReader;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;


public class FrameSetup extends JFrame 
{
    public Container container;    //Frame Container Declaration  
    public JLabel nullLabel;       //Declaring NullLabel For Design Perpouse
    
    
    /**
     * Declaring All Icons
     */
    public ImageIcon  displayPicture = new ImageIcon(this.getClass().getResource(""/Pictures/displayPicture.png""));
    public ImageIcon  loginButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/loginButtonIcon.png""));
    public ImageIcon  shopNameButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/shopNameButtonIcon.png""));
    public ImageIcon  createSalesInvoiceButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/createSalesInvoiceButtonIcon.png""));
    public ImageIcon  createPurchaseInvoiceButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/createPurchaseInvoiceButtonIcon.png""));
    public ImageIcon  logoutButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/logoutButtonIcon.png""));  
    public ImageIcon  homeButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/homeButtonIcon.png""));
    public ImageIcon  addCostButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/addCostButtonIcon.png""));
    public ImageIcon  dailyIncomeCostButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/dailyIncomeCostButtonIcon.png""));
    public ImageIcon  stockCheckButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/stockCheckButtonIcon.png""));
    public ImageIcon  dueCheckButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/dueCheckButtonIcon.png""));
    public ImageIcon  staffAttendanceButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/staffAttendanceButtonIcon.png""));
    public ImageIcon  settingsButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/settingsButtonIcon.png""));
    public ImageIcon  clearButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/clearButtonIcon.png""));
    public ImageIcon  addToCartButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/addToCartButtonIcon.png""));
    public ImageIcon  printButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/printButtonIcon.png""));
    public ImageIcon  deleteButtonIcon = new ImageIcon(this.getClass().getResource(""/Pictures/deleteButtonIcon.png""));
    
    
    /**
     *  FrameSetup Constructor
     */
    public FrameSetup()
    {
        setFrame();  
        setContainer();
        setAppIcon();
    }
    
    /**
     *  Sets Frame Basic Features
     */
    public void setFrame()
    {
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(900, 500);
        this.setLocationRelativeTo(null);
        this.setTitle(""SHOP ASSISTANT"");
    }
    
    /**
     *  Sets Container
     */
    public void setContainer()
    {
        container = this.getContentPane();
        container.setBackground(Color.WHITE);
    }
    
    /**
     *  Sets Application Icon
     */
    public void setAppIcon()
    {
        ImageIcon logo = new ImageIcon(this.getClass().getResource(""/Pictures/shoppingCart.png""));
        this.setIconImage(logo.getImage());
    }
    
    /**
     * This Method returns date as a string
     * 
     * @return date Instant time and Date
     */
    public String setDate()
    {
        SimpleDateFormat sdf = new SimpleDateFormat(""dd/MM/yyyy E hh:mm:ss a"");
        Date date = new Date();
        return sdf.format(date);
    }
    
    
    /**
     * This Method Returns A String Array of All Models Numbers
     * 
     * @return String Array of Model Number
     */
    public String[] setProductTypes()
    {
        String productType[] = new String[80];
        
        try{                    
                BufferedReader br = new BufferedReader(new FileReader(""ProductType&ModelList.txt""));
                String s;
                int i = 1;
                productType[0]="""";
                while((s=br.readLine())!=null)
                {
                    productType[i] = s.substring(0, s.indexOf("",""));
                    i++;
                }
                
                int p = i;
                
                while(p<80)
                {
                    productType[p] = """";
                    p++;
                }
                
            }catch(Exception ex){}
        
        return productType;
    }
   
    /**
     * @param character Any Character
     * @return True if Character is Digit
     */
    
    public boolean isDigit(char character)
    {
       if(character!='0'&&character!='1'&&character!='2'&&character!='3'&&character!='4'&&character!='5'&&character!='6'&&character!='7'&&character!='8'&&character!='9'&&character!=(char)8&&character!=(char)10)
       {
           return false;
       }
       else
       {
           return true;
       }
    }
    
    /**
     * This Method Shows A Reminder to Print Invoice
     */
    public void setReminder()
    {
        JOptionPane.showMessageDialog(null, ""Remember to Print"");
    }
    
    /**
     * This Method shows Remaining Quantity For a Specific ModelNumber And Data Stored At a Specific File
     * 
     * @param modelNumber  A Model Number
     * @param filename     A FileName  
     * @return Remaining Quantity
     */
    public int getRemainingQuantity(String modelNumber,String filename)
    {
        boolean found = false;
        int modelCount = 0,quantityStringIndex;
        
        if(modelNumber==null||"""".equals(modelNumber))
        {
            return 0;
        } 
        else
        {
        /*try
        {
            BufferedReader br = new BufferedReader(new FileReader(filename));
            int s = 0;
            String text="""";
            
            while((s=br.read())!=-1)
            {
                text = text + (char)s;
            }
            
            Pattern pattern = Pattern.compile(modelNumber);
            Matcher matcher = pattern.matcher(text);
            
            while(matcher.find())
            {                
                String demoText = text.substring(matcher.end()+1, matcher.end()+10);             
                
                String result = demoText.substring(0, demoText.indexOf("",""));
                
                modelCount = modelCount+Integer.parseInt(result);               
                found = true;
            }
      
            }catch(Exception e){}
            
            if(!found)
            {
                return 0;
            }
            else
            {
                return modelCount;
            }*/
                    
            try{
                
                BufferedReader br = new BufferedReader(new FileReader(filename));
                String s;
                
                while((s=br.readLine())!=null)
                {
                    while(s.contains(modelNumber))
                    {
                        //if(s.contains(modelNumber))
                        //{
                            quantityStringIndex = s.indexOf(modelNumber) + modelNumber.length() + 1;
                            String demoString = s.substring(quantityStringIndex, quantityStringIndex+10);
                            modelCount = modelCount + Integer.parseInt(demoString.substring(0, demoString.indexOf("","")));
                            s = s.substring(s.indexOf(modelNumber) + modelNumber.length() + 1, s.length());
                       // }
                    }
                }
    
            }catch(Exception e) {}
              
        return modelCount;
        
        }
    }
    
    /**
     * This Method shows Remaining Quantity For a Specific ModelNumber, Date And Data Stored At a Specific File
     * 
     * @param date   A Date
     * @param modelNumber ModelNumber
     * @param filename FileName
     * @return Remaining Quantity
     */
    public int getRemainingQuantityUsingDate(String date,String modelNumber,String filename)
    {
        int modelCount = 0,quantityStringIndex;
        
        if(modelNumber==null||"""".equals(modelNumber))
        {
            return 0;
        } 
        else
        {    
            try{
                
                BufferedReader br = new BufferedReader(new FileReader(filename));
                String s;
                
                while((s=br.readLine())!=null)
                {                    
                    if(s.contains(date))
                    {             
                        while(s.contains(modelNumber))
                        {
                            quantityStringIndex = s.indexOf(modelNumber) + modelNumber.length() + 1;
                            String demoString = s.substring(quantityStringIndex, quantityStringIndex+10);
                            modelCount = modelCount + Integer.parseInt(demoString.substring(0, demoString.indexOf("","")));
                            s = s.substring(s.indexOf(modelNumber) + modelNumber.length() + 1, s.length());  
                        }
                    }
                }
    
            }catch(Exception e) {}
              
        return modelCount;
        
        }
    }
    
    /**
     * This Method Shows Exact Quantity After Subtracting SoldItem From Purchased Item
     * 
     * @param modelNumber  A Model Number
     * @param purchaseFilename  Purchase File Name
     * @param salesFilename Sales File Name
     * @return Quantity
     */
    public int getTotalStock(String modelNumber,String purchaseFilename,String salesFilename)
    {  
        int productSold = getRemainingQuantity(modelNumber,salesFilename);
        int productPurchased = getRemainingQuantity(modelNumber,purchaseFilename);
        
        return (productPurchased-productSold);
    }
    
    /**
     * This Method Shows Password From File as String
     * 
     * @return Password
     */
    
    public String getPassword()
    {
        String password = """";
        
        try{
            
            BufferedReader br = new BufferedReader(new FileReader(""UserDatabase.txt""));   
            String s = br.readLine();
            password = s.substring(9,s.length());
            br.close();        
            
        }catch(Exception e) {System.out.println(e);}
        
        return password;
    }  
}",1
"
package Templates;

import ShopAssistant.CreatePurchaseInvoicePage;
import ShopAssistant.CreateSalesInvoicePage;
import ShopAssistant.HomePage;
import ShopAssistant.LoginPage;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintWriter;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;


public class InvoiceGeneratorTemplate extends FrameSetup
{
    public JPanel horizontalPanelTop,mainPanel,horizontalPanelBottom,inputPanel,outputPanel,totalInformationPanel;
    public JLabel dateLabel,idLabel,nameLabel,addressLabel,mobileNumberLabel,productTypeLabel,modelNumberLabel,quantityLabel,unitPriceLabel,paymentLabel,paidLabel,dueLabel,subtotalLabel,discountLabel,totalPaymentLabel,totalPaidLabel,totalDueLabel;
    public JTextField dateTextField,idTextField,nameTextField,addressTextField,mobileNumberTextField,quantityTextField,unitPriceTextField,paymentTextField,subtotalTextField,discountTextField,totalPaymentTextField,totalPaidTextField,totalDueTextField;
    public JButton homeButton,createSalesInvoiceButton,createPurchaseInvoiceButton,logoutButton,clearButton,addToCartButton,printButton,deleteButton;
    public JEditorPane cartEditorPane;
    public JScrollPane scroll;
    
    public JButton horizontalPanelTopButtons[] = {homeButton,createSalesInvoiceButton,createPurchaseInvoiceButton,logoutButton};
    public JButton horizontalPanelBottomButtons[] = {clearButton,addToCartButton,deleteButton,printButton};
    public JComboBox productTypeCombobox,modelNumberCombobox;
    public int subtotal=0,totalPayment,totalPaid=0,totalDue=0,serialNo=1;
    public String htmlText = """";
    public String rawData = """";

    public Font font = new Font(""Arial"",Font.BOLD,16);
    
    
    /**
     * Invoice Generator Constructor
     * 
     * @param keyword Keyword Determines this is Sales or Purchase Invoice
     * @param fileName Sales or Purchase FileName or Writing Values
     */
    public InvoiceGeneratorTemplate(String keyword,String fileName)
    {
        setFrame();
        setContainer();
        setPanels();
        setButtons();
        setInputPanel(keyword,fileName);
        setOutputPanel();
        setListeners(keyword,fileName);
    }
    
    /**
     * Sets Frame Basic Features
     */
    public void setFrame()
    {
        super.setFrame();
        this.setSize(950, 600);
        this.setLocationRelativeTo(null);
    }
    
    /**
     * Sets Container
     */
    public void setContainer()
    {
        //Method Overriding Contept Used
        super.setContainer();  //Here we get setContainer() of parrent class
        container.setLayout(new BorderLayout(15,0));
    }
    
    /**
     * Sets HorizontalPanelTop, HorizontalPanelBottom , MainPanel, InputPanel,OutputPanel
     */
    public void setPanels()
    {
        nullLabel = new JLabel("""");
        container.add(nullLabel,BorderLayout.WEST);
        nullLabel = new JLabel("""");
        container.add(nullLabel,BorderLayout.EAST);
        
        horizontalPanelTop = new JPanel();
        horizontalPanelTop.setLayout(new GridLayout(1,4));
        horizontalPanelTop.setCursor(new Cursor(Cursor.HAND_CURSOR));
        container.add(horizontalPanelTop,BorderLayout.NORTH);
        
        horizontalPanelBottom = new JPanel();
        horizontalPanelBottom.setLayout(new GridLayout(1,4));
        horizontalPanelBottom.setCursor(new Cursor(Cursor.HAND_CURSOR));
        container.add(horizontalPanelBottom,BorderLayout.SOUTH);
        
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(1,2));
        container.add(mainPanel,BorderLayout.CENTER);
        
        inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(10,2));
        inputPanel.setBackground(Color.WHITE);
        mainPanel.add(inputPanel);
        
        outputPanel = new JPanel();
        outputPanel.setLayout(new BorderLayout());
        mainPanel.add(outputPanel);
    }
    
    /**
     * Sets All Buttons
     */
    public void setButtons()
    {
        String horizontalPanelTopButtonNames[] = {""Home"",""Create Sales Invoice"",""Create Purchase Invoice"",""Log Out""};
        String horizontalPanelBottomButtonNames[] = {""Clear"",""Add to Cart"",""Finish"",""Print""};
        ImageIcon horizontalPanelBottomButtonIcons[]  = {clearButtonIcon,addToCartButtonIcon,deleteButtonIcon,printButtonIcon}; 

        for(int i = 0 ; i < horizontalPanelTopButtons.length ; i++)
        {
            horizontalPanelTopButtons[i] = new JButton(horizontalPanelTopButtonNames[i]);
            horizontalPanelTopButtons[i].setName(horizontalPanelTopButtonNames[i]);
            horizontalPanelTopButtons[i].setFont(new Font(""Arial"",Font.PLAIN,16));
            horizontalPanelTopButtons[i].setBackground(Color.DARK_GRAY);
            horizontalPanelTopButtons[i].setForeground(Color.WHITE);
            horizontalPanelTopButtons[i].setFocusPainted(false);
            horizontalPanelTop.add(horizontalPanelTopButtons[i]);
        }
        
        horizontalPanelTopButtons[0].setIcon(homeButtonIcon);
        horizontalPanelTopButtons[3].setIcon(logoutButtonIcon);
        
        for(int i = 0 ; i < horizontalPanelBottomButtons.length ; i++)
        {
            horizontalPanelBottomButtons[i] = new JButton(horizontalPanelBottomButtonNames[i]);
            horizontalPanelBottomButtons[i].setName(horizontalPanelBottomButtonNames[i]);
            horizontalPanelBottomButtons[i].setFont(new Font(""Arial"",Font.PLAIN,16));
            horizontalPanelBottomButtons[i].setBackground(Color.DARK_GRAY);
            horizontalPanelBottomButtons[i].setForeground(Color.WHITE);
            horizontalPanelBottomButtons[i].setIcon(horizontalPanelBottomButtonIcons[i]);
            horizontalPanelBottomButtons[i].setFocusPainted(false);
            horizontalPanelBottom.add(horizontalPanelBottomButtons[i]);
        }
    }
    
    /**
     * Sets InputPanel According to Specific Sales or Purchase Keyword and Write Data In Specific File
     * 
     * @param keyword   Keyword Determines this is Sales or Purchase Invoice
     * @param fileName  Sales or Purchase FileName or Writing Values
     */
    public void setInputPanel(String keyword,String fileName)
    {   
        idLabel = new JLabel();
        idLabel.setFont(font);
        inputPanel.add(idLabel);
        
        if(""Customer"".equals(keyword))
        {
            idLabel.setText(""Sales Id"");
        }
        else
        {
            idLabel.setText(""Purchase Id"");
        }
        
        idTextField = new JTextField();
        idTextField.setEditable(false);
        idTextField.setFont(font);
        inputPanel.add(idTextField);
        setId(fileName);
        
        dateLabel = new JLabel(""Date & Time"");
        dateLabel.setFont(font);
        inputPanel.add(dateLabel);
        
        dateTextField = new JTextField(""""+setDate());
        dateTextField.setEditable(false);
        dateTextField.setFont(font);
        inputPanel.add(dateTextField);

        nameLabel = new JLabel(""Enter ""+keyword+""'s Name"");
        nameLabel.setFont(font);
        inputPanel.add(nameLabel);
        nameTextField = new JTextField();
        nameTextField.setFont(font);
        inputPanel.add(nameTextField);

        addressLabel = new JLabel(""Enter ""+keyword+""'s Address"");
        addressLabel.setFont(font);
        inputPanel.add(addressLabel);
        addressTextField = new JTextField();
        addressTextField.setFont(font);
        inputPanel.add(addressTextField);
        
        mobileNumberLabel = new JLabel(""Enter Mobile Number"");
        mobileNumberLabel.setFont(font);
        inputPanel.add(mobileNumberLabel);
        mobileNumberTextField = new JTextField();
        mobileNumberTextField.setFont(font);
        inputPanel.add(mobileNumberTextField);
        
        productTypeLabel = new JLabel(""Enter Product's Type"");
        productTypeLabel.setFont(font);
        inputPanel.add(productTypeLabel);
        
        productTypeCombobox = new JComboBox(setProductTypes());
        productTypeCombobox.setFont(font);
        inputPanel.add(productTypeCombobox);
               
        modelNumberLabel = new JLabel(""Enter Product's Model"");
        modelNumberLabel.setFont(font);
        inputPanel.add(modelNumberLabel);
        modelNumberCombobox = new JComboBox();
        modelNumberCombobox.setEnabled(false);
        modelNumberCombobox.setFont(font);
        inputPanel.add(modelNumberCombobox);
        
        quantityLabel = new JLabel(""Enter Product's Quantity"");
        quantityLabel.setFont(font);
        inputPanel.add(quantityLabel);
        quantityTextField = new JTextField("""");
        quantityTextField.setFont(font);
        inputPanel.add(quantityTextField);
        
        unitPriceLabel = new JLabel(""Enter Per Item Price"");
        unitPriceLabel.setFont(font);
        inputPanel.add(unitPriceLabel);
        unitPriceTextField = new JTextField("""");
        unitPriceTextField.setFont(font);
        inputPanel.add(unitPriceTextField);
         
        paymentLabel = new JLabel(""Product's Payment"");
        paymentLabel.setFont(font);
        inputPanel.add(paymentLabel);
        paymentTextField = new JTextField("""");
        paymentTextField.setFont(font);
        paymentTextField.setEditable(false);
        inputPanel.add(paymentTextField);
        
    }
    
    /**
     * Sets OutputPanel Components
     */
    public void setOutputPanel()
    {
       cartEditorPane = new JEditorPane();
       cartEditorPane.setContentType(""text/html"");
       cartEditorPane.setText(htmlText);
       cartEditorPane.setBackground(Color.white);
       cartEditorPane.setEditable(false);
       scroll = new JScrollPane(cartEditorPane);
       outputPanel.add(scroll,BorderLayout.CENTER);
       
       totalInformationPanel = new JPanel();
       GridLayout gridlayout = new GridLayout(5,2);
       gridlayout.setVgap(7);
       totalInformationPanel.setLayout(gridlayout);
       outputPanel.add(totalInformationPanel,BorderLayout.SOUTH);
       
       subtotalLabel = new JLabel(""        Subtotal"");
       subtotalLabel.setFont(new Font(""Arial"",Font.BOLD,18));
       totalInformationPanel.add(subtotalLabel);
       subtotalTextField = new JTextField("""");
       subtotalTextField.setFont(new Font(""Arial"",Font.BOLD,18));
       subtotalTextField.setEditable(false);
       totalInformationPanel.add(subtotalTextField);
       
       discountLabel = new JLabel(""        Discount"");
       discountLabel.setFont(new Font(""Arial"",Font.BOLD,18));
       totalInformationPanel.add(discountLabel);
       discountTextField = new JTextField("""");
       discountTextField.setFont(new Font(""Arial"",Font.BOLD,18));
       totalInformationPanel.add(discountTextField);
       
       totalPaymentLabel = new JLabel(""        Total Payment"");
       totalPaymentLabel.setFont(new Font(""Arial"",Font.BOLD,18));
       totalInformationPanel.add(totalPaymentLabel);
       totalPaymentTextField = new JTextField("""");
       totalPaymentTextField.setFont(new Font(""Arial"",Font.BOLD,18));
       totalPaymentTextField.setEditable(false);
       totalInformationPanel.add(totalPaymentTextField);
       
       totalPaidLabel = new JLabel(""        Total Paid Amount"");
       totalPaidLabel.setFont(new Font(""Arial"",Font.BOLD,18));
       totalInformationPanel.add(totalPaidLabel);
       totalPaidTextField = new JTextField("""");
       totalPaidTextField.setFont(new Font(""Arial"",Font.BOLD,18));
       totalInformationPanel.add(totalPaidTextField);
       
       totalDueLabel = new JLabel(""        Total Due Amount"");
       totalDueLabel.setFont(new Font(""Arial"",Font.BOLD,18));
       totalInformationPanel.add(totalDueLabel);
       totalDueTextField = new JTextField("""");
       totalDueTextField.setFont(new Font(""Arial"",Font.BOLD,18));
       totalDueTextField.setEditable(false);
       totalInformationPanel.add(totalDueTextField);
    }
    
    
    /**
     * This Method Sets ID For Specific Sales or Purchase File
     * 
     * @param fileName 
     */
    public void setId(String fileName)
    {
    try{
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        String s = """",temp="""";
        while((s=br.readLine())!=null)
        {
            temp = s;
        }
 
        if("""".equals(temp))
        {
            if(""SalesDatabase.txt"".equals(fileName))
            {
                idTextField.setText(""S200000001"");
            }
            else
            {
                idTextField.setText(""P100000001"");
            }
        }
        else
        {
            if(""SalesDatabase.txt"".equals(fileName))
            {
                idTextField.setText(""S""+(Integer.parseInt(temp.substring(1, 10))+1));
            }
            else
            {
                idTextField.setText(""P""+(Integer.parseInt(temp.substring(1, 10))+1));
            }
        } 
            
        }catch(Exception e){}
    }
    
    /**
     *  This Method Sets Payment Multiplying Quantity Value with Unit Price Value
     */
    public void setPayment()
    {
        try{
        int answer = Math.round(Float.parseFloat(quantityTextField.getText())*Float.parseFloat(unitPriceTextField.getText()));
                        
        if(answer>1000000000)
        {
                JOptionPane.showMessageDialog(null, ""Please Do Not Enter Large Digits"");
                quantityTextField.setText("""");
                unitPriceTextField.setText("""");
                paymentTextField.setText("""");
        }
        else
        {
            paymentTextField.setText(""""+answer);
        }  }catch(Exception ex) {}                 
    }
    
    /**
     *  This Method Sets Due Subtracting Total Paid Value From Total Payment
     */
    public void setDue()
    {
        try{
        int answer = Math.round(Float.parseFloat(totalPaymentTextField.getText())-Float.parseFloat(totalPaidTextField.getText()));
                        
        if(answer<0)
        {
            JOptionPane.showMessageDialog(null, ""You Paid More Than Required Amount"");     
            totalPaidTextField.setText("""");
            totalDueTextField.setText("""");
        }
        else
        {
            totalDueTextField.setText(""""+answer);
        }  }catch(Exception ex) {}             
    }
    
    /**
     * This Method Returns A JButton of A Specific Button Name
     * 
     * @param buttonName
     * @return A JButton of Specific Name
     */
    public JButton getButton(String buttonName)
    {
        int i,j; JButton button = new JButton();

        for(i = 0; i < horizontalPanelTopButtons.length ; i++)
        {
            if(horizontalPanelTopButtons[i].getName().equals(buttonName))
            {
                button = horizontalPanelTopButtons[i];
                break;
            }
        }
        
        for(j = 0; j < horizontalPanelBottomButtons.length ; j++)
        {   
            if(horizontalPanelBottomButtons[j].getName().equals(buttonName))
            {
                button = horizontalPanelBottomButtons[j];
            } 
        }
        
        return button;
    }
    
    /**
     * This Method Checks If All Data is given or Not
     * 
     * @return False if All Data Not Given Otherwise True
     */
    public boolean checkAllFilledUp()
    {
        if("""".equals(idTextField.getText())||"""".equals(dateTextField.getText())||"""".equals(nameTextField.getText())||"""".equals(addressTextField.getText())||"""".equals(mobileNumberTextField.getText())||"""".equals(productTypeCombobox.getSelectedItem())||"""".equals(modelNumberCombobox.getSelectedItem())||"""".equals(quantityTextField.getText())||"""".equals(unitPriceTextField.getText())||"""".equals(paymentTextField.getText()))
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    
    /**
     * This Method Adds Value TO The Cart and Stores Data in Specific File
     * 
     * @param fileName Sales or Purchase File Name
     */
    public void addToCart(String fileName)
    {
        subtotal = subtotal + Integer.parseInt(paymentTextField.getText());
        subtotalTextField.setText(""""+subtotal);
        
        setDue();
   
        productTypeCombobox.setSelectedItem("""");
        modelNumberCombobox.setSelectedItem("""");
        quantityTextField.setText("""");
        unitPriceTextField.setText("""");
        paymentTextField.setText(""""); 
        discountTextField.setText(""""); 
        totalPaidTextField.setText(""""); 
    }
    
    /**
     * This Method Adds HTML Begin Text For Design Purpose
     * 
     * @param keyword Keyword Determines this is Sales or Purchase Invoice
     */
    public void addHTMLbegintext(String keyword)
    {
        htmlText = htmlText 
            
            +""<table width=\""100%\"">"" 
            +""<tr style=\""text-align:center;font-size:18px;font-weight:bold;font-family:arial;color:red;\"">Samir Electronics</tr>""
            +""<tr style=\""font-family:arial;font-size:13px;font-weight:bold;text-align:center;color:blue;\"">WALTON</tr>""
            + ""<tr style=\""text-align:center;font-size:13px;font-weight:bold;font-family:arial;\"">Exclusive Showroom</tr>""
            +""<tr style=\""text-align:center;font-size:9px;font-family:arial;\"">Saiham Future Complex , Madhabpur , Habiganj</tr>""
            +""<tr style=\""text-align:center;font-size:9px;font-family:arial;\"">Mobile : 01748987951 , 01746003532</tr>""
            +""<tr style=\""text-align:center;font-size:7px;font-family:arial;\"">Money Receipt</tr>""
            +""</table>""
            +""<br>""
            +""<table width=\""100%\"" style=\""font-size:8px\"" >""
            +""<tr>""
            +""<td>""+keyword+"" Name</td><td>:</td><td>""+nameTextField.getText()+""</td><td></td><td></td><td></td><td></td><td></td><td></td><td>Invoice No</td><td>:</td><td>""+idTextField.getText()+""</td>""
            +""</tr>""
            +""<tr>""
            +""<td>""+keyword+"" Address</td><td>:</td><td>""+addressTextField.getText()+""</td><td></td><td></td><td></td><td></td><td></td><td></td><td>Date & Time</td><td>:</td><td>""+dateTextField.getText()+""</td>""
            +""</tr>""
            +""<tr>""
            +""<td>""+keyword+"" Mobile Number</td><td>:</td><td>""+mobileNumberTextField.getText()+""</td>""
            + ""</tr>""
            + ""</table>""
            +""<br>""
            +""<br>""
            +""<br>""
            +""<table width=\""100%\"" style=\""font-size:8px\"" >""
            +""<tr>""
            +""<td>No.</td><td>Product Type</td><td>Product Model Number</td><td style=\""text-align:right\"">Quantity</td><td style=\""text-align:right\"">Unit Price</td><td style=\""text-align:right\"">Payment</td>""
            +""</tr>""
            +""<tr>""
            +""<td>""+serialNo+""</td><td>""+productTypeCombobox.getSelectedItem()+""</td><td>""+modelNumberCombobox.getSelectedItem()+""</td><td style=\""text-align:right\"">""+quantityTextField.getText()+""</td><td style=\""text-align:right\"">""+unitPriceTextField.getText()+""</td><td style=\""text-align:right\"">""+paymentTextField.getText()+""</td>""
            +""</tr>""
               
            ;
        
        rawData = rawData + idTextField.getText() +"",""+ dateTextField.getText() +"",""+ nameTextField.getText() +"",""+ addressTextField.getText() +"",""+ mobileNumberTextField.getText() +"",""+ productTypeCombobox.getSelectedItem() +"",""+ modelNumberCombobox.getSelectedItem() +"",""+ quantityTextField.getText() +"",""+ unitPriceTextField.getText() +"",""+ paymentTextField.getText()+"","" ;
    }
    
    /**
     * This Method Adds HTML Middle Text For Design Purpose
     */
    public void addHTMLmidtext()
    {
        htmlText = htmlText 
                        +""<tr>""
                        +""<td>""+(serialNo=serialNo+1)+""</td><td>""+productTypeCombobox.getSelectedItem()+""</td><td>""+modelNumberCombobox.getSelectedItem()+""</td><td style=\""text-align:right\"">""+quantityTextField.getText()+""</td><td style=\""text-align:right\"">""+unitPriceTextField.getText()+""</td><td style=\""text-align:right\"">""+paymentTextField.getText()+""</td>""
                        +""</tr>""
                        ;
        
        rawData = rawData + productTypeCombobox.getSelectedItem() +"",""+ modelNumberCombobox.getSelectedItem() +"",""+ quantityTextField.getText() +"",""+ unitPriceTextField.getText() +"",""+ paymentTextField.getText()+"","" ;

    }
    
    /**
     * This Method Adds HTML End Text For Design Purpose
     * @param keyword Keyword Determines this is Sales or Purchase Invoice
     */
    public void addHTMLendtext(String keyword)
    {
        htmlText = htmlText 
                        +""<tr>""
                        +""<td></td><td></td><td></td><td></td><td style=\""text-align:right\"">Subtotal</td><td style=\""text-align:right\"">""+subtotalTextField.getText()+""</td>""
                        +""</tr>""
                        +""<tr>""
                        +""<td></td><td></td><td></td><td></td><td style=\""text-align:right\"">Discount ( - )</td><td style=\""text-align:right\"">""+discountTextField.getText()+""</td>""
                        +""</tr>""
                        +""<tr>""
                        +""<td></td><td></td><td></td><td></td><td style=\""text-align:right\"">Total Payment</td><td style=\""text-align:right\"">""+totalPaymentTextField.getText()+""</td>""
                        +""</tr>""
                        +""<tr>""
                        +""<td></td><td></td><td></td><td></td><td style=\""text-align:right\"">Paid Amount</td><td style=\""text-align:right\"">""+totalPaidTextField.getText()+""</td>""
                        +""</tr>""
                        +""<tr>""
                        +""<td></td><td></td><td></td><td></td><td style=\""text-align:right\"">Due Amount</td><td style=\""text-align:right\"">""+totalDueTextField.getText()+""</td>""
                        +""</tr>""
                        + ""</table>""
                        +""<br>""
                        +""<br>""
                        +""<table width=\""100%\"" style=\""font-size:10px\"">""
                        +""<tr>""
                        +""<td>-----------------------</td><td style=\""text-align:right\"">-----------------------</td>""
                        +""</tr>""
                        +""<tr>""
                        +""<td>Owner's Sign</td><td style=\""text-align:right\"">""+keyword+""'s Sign</td>""
                        +""</tr>""
                        + ""</table>""
                        ;
        
        rawData = rawData + totalPaymentTextField.getText() +"",""+totalPaidTextField.getText() +"",""+totalDueTextField.getText();
    }
    
    /**
     * This Method Sets Listeners For All Buttons and TextFields
     * 
     * @param keyword Keyword Determines this is Sales or Purchase Invoice
     * @param fileName Sales or Purchase FileName or Writing Values
     */
    public void setListeners(String keyword,String fileName)
    {
        nameTextField.addKeyListener(new KeyListener()
        {
            public void keyTyped(KeyEvent ke){} 
     
            public void keyPressed(KeyEvent ke) {}

            public void keyReleased(KeyEvent ke) 
            {
                try{
                char demo[] = nameTextField.getText().toCharArray();
                String result="""";
                int i = 0 ;
                
                if(demo[0]>='a'&&demo[0]<='z')
                {
                    demo[0] = (char)(demo[0]-32); 
                }
                
                while(i!=demo.length)
                {
                    if((demo[i]<'a'||demo[i]>'z')&&(demo[i]<'A'||demo[i]>'Z')&&demo[i]!=(char)32&&demo[i]!=(char)45)
                    {
                        JOptionPane.showMessageDialog(null, ""Please Enter Valid Name (not invalid characters)""); 
                        break;
                    }
                    
                    if(demo[i]==(char)32&&demo[i+1]>='a'&&demo[i+1]<='z')
                    {
                        demo[i+1] = (char)(demo[i+1]-32);
                    }
                    
                    result = result + demo[i];
                    i++;
                }
                
                nameTextField.setText(""""+result);
                }catch(Exception e){}
            }
        
        });
        
        addressTextField.addKeyListener(new KeyListener()
        {
            public void keyTyped(KeyEvent ke){}    
           
            public void keyPressed(KeyEvent ke){}    

            public void keyReleased(KeyEvent ke) 
            {
                try{
                char demo[] = addressTextField.getText().toCharArray();
                String result="""";
                int i = 0 ;
                
                if(demo[0]>='a'&&demo[0]<='z')
                {
                    demo[0] = (char)(demo[0]-32); 
                }
                
                while(i!=demo.length)
                {
                    if((demo[i]<'a'||demo[i]>'z')&&(demo[i]<'A'||demo[i]>'Z')&&demo[i]!=(char)32&&demo[i]!=(char)45&&demo[i]!=(char)47&&(demo[i]<'0'||demo[i]>'9'))
                    {
                        JOptionPane.showMessageDialog(null, ""Please Enter Valid Address (not invalid characters)"");
                        break;
                    }
                    
                    if(demo[i]==(char)32&&demo[i+1]>='a'&&demo[i+1]<='z')
                    {
                        demo[i+1] = (char)(demo[i+1]-32);
                    }
                    
                    result = result + demo[i];
                    i++;
                }
                
                addressTextField.setText(""""+result);
                }catch(Exception e){}
            }
        });
        
        mobileNumberTextField.addKeyListener(new KeyListener()
        {
           
            public void keyTyped(KeyEvent ke){}    

            public void keyPressed(KeyEvent ke) {} 
            
            public void keyReleased(KeyEvent ke) 
            {
                mobileNumberTextField.setToolTipText(mobileNumberTextField.getText().length()+"" Digits"");
                        
                if(!isDigit(ke.getKeyChar()))
                {    
                    JOptionPane.showMessageDialog(null, ""Please Enter Valid Digits""); 
                    mobileNumberTextField.setText("""");
                }
                
                if(mobileNumberTextField.getText().length()>11)
                {
                   JOptionPane.showMessageDialog(null, ""Please Enter Valid Mobile Number (not more than 11 digits)"");
                   mobileNumberTextField.setText("""");
                }
            }
        
        });
    
        productTypeCombobox.addActionListener(new ActionListener()
        {
        
            public void actionPerformed(ActionEvent e)
            {
                modelNumberCombobox.setEnabled(true);
                modelNumberCombobox.removeAllItems();
                modelNumberCombobox.addItem("""");
                
                try{                    
                BufferedReader br = new BufferedReader(new FileReader(""ProductType&ModelList.txt""));
                String s,result="""",answer="""";
     
                while((s=br.readLine())!=null)
                {
                    if(productTypeCombobox.getSelectedItem().equals(s.substring(0, s.indexOf("",""))))
                    {
                        result = s.substring(s.indexOf("","")+1, s.length());    
                    }
                }
         
                char demo[] = result.toCharArray();
                int i=0;
                
                while(i!=demo.length)
                {
                    answer = answer + demo[i];
                    if(demo[i]=='.')
                    {
                        modelNumberCombobox.addItem(answer);
                        answer="""";
                    }
                    i++;
                }              
            }catch(Exception ex){}
               
            }
  
        });
        
        modelNumberCombobox.addActionListener(new ActionListener(){
        
        public void actionPerformed(ActionEvent e)
            {
                quantityTextField.setText("""");
            }
        
        });
        
        unitPriceTextField.addKeyListener(new KeyListener()
        { 
            public void keyTyped(KeyEvent ke){}  
            
            public void keyPressed(KeyEvent ke){} 
           
            public void keyReleased(KeyEvent ke) 
            {
                String inputText = unitPriceTextField.getText();
                
                char demo[] = inputText.toCharArray();
                
                int i = 0,count=0;
                
                while(i!=inputText.length())
                {
                    if(demo[i]=='.')
                    {
                        count++;
                    }
                    i++;
                }
             
                if(count>1||(ke.getKeyChar()!='0'&&ke.getKeyChar()!='1'&&ke.getKeyChar()!='2'&&ke.getKeyChar()!='3'&&ke.getKeyChar()!='4'&&ke.getKeyChar()!='5'&&ke.getKeyChar()!='6'&&ke.getKeyChar()!='7'&&ke.getKeyChar()!='8'&&ke.getKeyChar()!='9'&&ke.getKeyChar()!=(char)8&&ke.getKeyChar()!=(char)10&&ke.getKeyChar()!=(char)46))
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Valid Digits"");
                    unitPriceTextField.setText("""");
                } 
                
                else
                {   
                    setPayment();
                    setDue();
                }
             }
        });
        
        discountTextField.addKeyListener(new KeyListener()
        {
            public void keyTyped(KeyEvent ke){}    
          
            public void keyPressed(KeyEvent ke) {} 
            
            public void keyReleased(KeyEvent ke) 
            {
                if(!isDigit(ke.getKeyChar()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Valid Digits"");
                    discountTextField.setText("""");
                }    
                else
                {
                    try{
                    totalPayment = Integer.parseInt(subtotalTextField.getText())-(Integer.parseInt(discountTextField.getText()));
                    
                    if(totalPayment<=0)
                    {
                        JOptionPane.showMessageDialog(null, ""Please Enter Valid Digits"");                        
                        discountTextField.setText("""");
                    }
                    else
                    {
                        totalPaymentTextField.setText(""""+totalPayment);
                        totalPaidTextField.setText("""");
                    }
                    }catch(Exception e) {}
                }
             }
        });
        
        totalPaidTextField.addKeyListener(new KeyListener()
        {
            public void keyTyped(KeyEvent ke){}    
          
            public void keyPressed(KeyEvent ke) {} 
            
            public void keyReleased(KeyEvent ke) 
            {
                if(!isDigit(ke.getKeyChar()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Valid Digits"");
                    totalPaidTextField.setText("""");
                }    
                else
                {    
                    setDue();
                }
             }
        });
        
        getButton(""Home"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if(!"""".equals(cartEditorPane.getText()))
                {
                    setReminder();
                }
                dispose();
                HomePage frame = new HomePage();
                frame.setVisible(true);
            }
        });
        
        getButton(""Create Sales Invoice"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if(!"""".equals(cartEditorPane.getText()))
                {
                    setReminder();
                }
                dispose();             
                CreateSalesInvoicePage frame = new CreateSalesInvoicePage(""Customer"",""SalesDatabase.txt"");
                frame.setVisible(true);
            }
        });
        
        getButton(""Create Purchase Invoice"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if(!"""".equals(cartEditorPane.getText()))
                {
                    setReminder();
                }
                dispose();
                CreatePurchaseInvoicePage frame = new CreatePurchaseInvoicePage(""Company"",""PurchaseDatabase.txt"");
                frame.setVisible(true);  
            }
        });
        
        getButton(""Log Out"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if(!"""".equals(cartEditorPane.getText()))
                {
                    setReminder();
                }
                dispose();
                LoginPage frame = new LoginPage();
                frame.setVisible(true);
            }
        });
        
        getButton(""Clear"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                nameTextField.setText("""");
                addressTextField.setText("""");
                mobileNumberTextField.setText("""");
                productTypeCombobox.setSelectedItem("""");
                modelNumberCombobox.setSelectedItem("""");
                quantityTextField.setText("""");
                unitPriceTextField.setText("""");
                paymentTextField.setText("""");
                subtotalTextField.setText("""");
                discountTextField.setText("""");
                totalPaymentTextField.setText("""");
                totalPaidTextField.setText("""");
                totalDueTextField.setText("""");
                cartEditorPane.setText("""");
                htmlText = """";
                subtotal=0;
                totalPaid=0;
                totalDue=0;
                serialNo=1;
            }
        });
        
        getButton(""Add to Cart"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if(!checkAllFilledUp()||""0"".equals(quantityTextField.getText())||""0"".equals(unitPriceTextField.getText()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter All Valid Information"");
                }
                else 
                { 
                    int choice = JOptionPane.showConfirmDialog(null, ""Are Your Sure?\n\n\n\n\nID : ""+idTextField.getText()+""\nDate : ""+dateTextField.getText()+""\n""+keyword+"" Name : ""+nameTextField.getText()+""\n""+keyword+"" Address : ""+addressTextField.getText()+""\n""+keyword+"" Mobile Number : ""+mobileNumberTextField.getText()+""\nProduct Type : ""+productTypeCombobox.getSelectedItem()+""\nModel Number : ""+modelNumberCombobox.getSelectedItem()+""\nQuantity : ""+quantityTextField.getText()+""\nPer Item Price : ""+unitPriceTextField.getText()+""\nPayment : ""+paymentTextField.getText()+""\n\n\n\n\n\n"",""Confirm"",JOptionPane.YES_NO_OPTION);
                    
                    if(choice == JOptionPane.YES_OPTION)
                    {
                        
                    if(!cartEditorPane.getText().contains(""WALTON""))
                    {
                        addHTMLbegintext(keyword);
                        cartEditorPane.setText(htmlText);
                        addToCart(fileName);
                    }
                    else
                    {
                        addHTMLmidtext();
                        cartEditorPane.setText(htmlText);
                        addToCart(fileName);
                    }
                    
                    }
                }
            }
        });
        
        getButton(""Finish"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if("""".equals(subtotalTextField.getText())||"""".equals(discountTextField.getText())||"""".equals(totalPaymentTextField.getText())||"""".equals(totalPaidTextField.getText())||"""".equals(totalDueTextField.getText())||!cartEditorPane.getText().contains(""WALTON""))
                {
                    JOptionPane.showMessageDialog(null, ""Please Enter Discount and Paid Amount"");
                }
                else 
                {
                        setDue();
                        addHTMLendtext(keyword);
                        cartEditorPane.setText(htmlText);
                        getButton(""Finish"").setEnabled(false);
                        getButton(""Add to Cart"").setEnabled(false);
                        getButton(""Clear"").setEnabled(false);
                        getButton(""Print"").setEnabled(true);
                        
                        
                        try {
                        File f2 = new File(""IncomeCostDatabase.txt"");
                        PrintWriter q = new PrintWriter(new FileOutputStream(f2, true));
                        if (""SalesDatabase.txt"".equals(fileName)) {
                            q.append(""S200000000"" + "","" + dateTextField.getText() + "","" + ""Income By Product Sale "" + "","" + nameTextField.getText() + "","" + addressTextField.getText() + "","" + mobileNumberTextField.getText() + "","" + totalPaidTextField.getText() + ""\n"");
                            q.close();
                        } else {
                            q.append(""P100000000"" + "","" + dateTextField.getText() + "","" + ""Cost By Product Purchase "" + "","" + nameTextField.getText() + "","" + addressTextField.getText() + "","" + mobileNumberTextField.getText() + "","" + totalPaidTextField.getText() + ""\n"");
                            q.close();
                        }
                    } catch (FileNotFoundException ex) {
                    }
            
                    
            try
            {
                File f = new File(fileName);
                   
                PrintWriter p = new PrintWriter(new FileOutputStream(f,true));
                p.append(rawData+""\n"");
                p.close();
                
            } 
            catch (FileNotFoundException ex) {}
                }              
            }
        });
        
        getButton(""Print"").setEnabled(false);
        
        getButton(""Print"").addActionListener(new ActionListener()
        {     
            public void actionPerformed(ActionEvent e)
            {
                if("""".equals(cartEditorPane.getText()))
                {
                    JOptionPane.showMessageDialog(null, ""Please Add Something To The Cart"");
                }
                else 
                {
                    try {
                        cartEditorPane.print();
                    } catch (PrinterException ex) {
                    }   
                }    
            }
        });    
    }
}",1
"
package Templates;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;


public class StartingTemplate extends FrameSetup
{
    public JPanel mainPanel,picturePanel,componentPanel;
    public JLabel pictureLabel,nullLabel;
    
    /**
     *  Starting Template Constructor
     */
    public StartingTemplate()
    {  
        setContainer();
        setPanels();
        setPicturePanel();
    }
    
    /**
     *  Sets Container
     */
    public void setContainer()
    {
        //Method Overriding Contept Used
        
        super.setContainer();  //Here we get setContainer() of parrent class
        
        container.setLayout(new BorderLayout(100,30));
    }
    
    /**
     *  Sets Panels
     */
    public void setPanels()
    { 
        nullLabel = new JLabel();
        container.add(nullLabel,BorderLayout.EAST);
        
        nullLabel = new JLabel();
        container.add(nullLabel,BorderLayout.WEST);
        
        nullLabel = new JLabel();
        container.add(nullLabel,BorderLayout.NORTH);
        
        nullLabel = new JLabel();
        container.add(nullLabel,BorderLayout.SOUTH);
         
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(1,2));
        container.add(mainPanel,BorderLayout.CENTER);
         
        picturePanel = new JPanel();
        picturePanel.setBackground(Color.WHITE);
        mainPanel.add(picturePanel);
         
        componentPanel = new JPanel();
        componentPanel.setBackground(Color.WHITE);
        mainPanel.add(componentPanel);
    }
    
    /**
     * Sets Picture Panel
     */
    public void setPicturePanel()
    {        
        pictureLabel = new JLabel(displayPicture);
        picturePanel.add(pictureLabel);
    }   
}",0
"package IO;

import java.io.File;

public class Filereader {

    public boolean fileEmpty(String path) {
        boolean empty = false;
        File file = new File(path);
        if (file.length() == 0) {
            empty = true;
        } else {
            empty = false;

        }
        return empty;
    }

}",0
"package IO;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;


public class Filewriter {
  
    public String createProcessFile(String filename, String fileContent,String path) throws IOException {
      Path p=Paths.get(path);    
        String newFilename = filename.replaceAll("".{5}$"", "".txt"");
        Path newpath = Paths.get(path);
        BufferedWriter br = new BufferedWriter(new FileWriter(path + ""//"" + newFilename));
        br.write(fileContent);
        br.close();
        return path;
    }

}",0
"package IO;

import console.Command;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.LinkedHashMap;

public class ProjectReader {

    public static int count;
    public static int classCount;
    public static LinkedHashMap<String, String> projectOne = new LinkedHashMap<>();
    public static LinkedHashMap<String, String> projectTwo = new LinkedHashMap<>();
    public static ArrayList<String> filename = new ArrayList<>();

    public static void fileRead(String fullPath, int i) throws IOException {
        Path folderToWalk = Paths.get(fullPath);
        //  ProjectPath = fullPath;
        Files.walkFileTree(folderToWalk, new SimpleFileVisitor<Path>() {
            // int count = 0;

            @Override
            public FileVisitResult visitFile(Path f, BasicFileAttributes attr) throws IOException {
                if (f.getFileName().toString().endsWith("".java"")) {
                    //   count++;
                    byte[] p = Files.readAllBytes(f);
                    String s = new String(p, StandardCharsets.UTF_8).trim();
                    if (i == 0) {
                        classCount++;
                        String dir = f.getParent().toString().substring(f.getParent().toString().lastIndexOf(File.separator) + 1);

                        //  String fileNamewithPackage = f.getFileName().toString() + ""$"" + dir+"".java"";
                        filename.add(f.getParent().toString().trim() + ""\\"" + f.getFileName());
                        String fileNamewithPackage = dir + ""$"" + f.getFileName().toString(); //packagename$filename.java
                       //  System.out.println(""name=""+f.getFileName());
                        projectOne.put(fileNamewithPackage, s);

                    }
                    if (i == 1) {
                        //   project2.add(f.getFileName().toString());
                        String dir = f.getParent().toString().substring(f.getParent().toString().lastIndexOf(File.separator) + 1);
                        String fileNamewithPackage = dir + ""$"" + f.getFileName().toString();// packagename$filename.java
                        projectTwo.put(fileNamewithPackage, s);
                    }
                }
               
                return FileVisitResult.CONTINUE;
            }
 
        }
        );
       
    }

    public static void getFileList(String projectname, String pathname, ArrayList<String> projectFile) throws IOException {
      
        File folder = new File(pathname);
        File[] listOfFiles = folder.listFiles();

        if (listOfFiles.length == 0) {
            // System.out.println(""\tThe prject doesnot have any java file"");
            folder.delete();
            //   new Command().command();
        }
        count = 0;
        for (int i = 0; i < listOfFiles.length; i++) {

            if (listOfFiles[i].toString().endsWith("".txt"")) {
                projectFile.add(listOfFiles[i].getName().replaceAll("".{3}$"", ""java""));
                count++;
            }

        }

    }
}",0
"package code_clone;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;

public class BoxAndWhiskerChart {
    ChartPanel chartPanel;

    JScrollPane scrollPane;

    private List<Double> getInputData(double l[]) {
        ArrayList<Double> list = new ArrayList<>();
        for (int j = 0; j < l.length; j++) {
            double d = l[j];
            //    System.out.println(""k==""+l[j]);
            list.add(l[j]);

        }//System.out.println("""");
        return list;
    }

    public void display() {
        JFrame f = new JFrame(""Clone_Check"");

        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        DefaultBoxAndWhiskerCategoryDataset boxData = new DefaultBoxAndWhiskerCategoryDataset();

        for (int i = 0; i < CosineSimilarity.similarArray.size(); i++) {
            // System.out.println(""p=""+CosineSimilarity.similarArray.g);
            boxData.add(getInputData(CosineSimilarity.similarArray.get(i)), ""First_Project vs Second_Project"", CloneCheck.ProjectFileName1.get(i));
        }
        BoxAndWhiskerRenderer renderer = new BoxAndWhiskerRenderer();
        renderer.setFillBox(true);
        renderer.setUseOutlinePaintForWhiskers(true);

        renderer.setMedianVisible(true);
        renderer.setMeanVisible(false);

        CategoryAxis xAxis = new CategoryAxis(""First_Project_Files"");
        NumberAxis yAxis = new NumberAxis(""Second_Project_Values"");
        CategoryPlot plot = new CategoryPlot(boxData, xAxis, yAxis, renderer);
        final JFreeChart chart = new JFreeChart(
                ""Box-and-Whisker Plot"",
                new Font(""SansSerif"", Font.BOLD, 20),
                plot,
                true
        );
        final ChartPanel chartPanel = new ChartPanel(chart);
        chart.setBackgroundPaint(Color.LIGHT_GRAY);
        //   JFreeChart chart = new JFreeChart(""Test"", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
        f.add(new ChartPanel(chart) {
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(600, 600);
            }
        });
        f.pack();
        f.setLocationRelativeTo(null);
        f.setVisible(true);
    }

    public static void BoxWhisker() {
        EventQueue.invokeLater(new BoxAndWhiskerChart()::display);
    }
}",0
"package code_clone;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;

public class CosineSimilarity {

    public static ArrayList<double[]> similarArray = new ArrayList<double[]>();
   // public static ArrayList<Double> clone = new ArrayList<>();

    public void getCosinesimilarity() {
        double similarity = 0;
        for (int i = 0; i < CloneCheck.ProjectFileName1.size(); i++) {
            System.out.println("""");
            double[] similar;
            //int k = CloneCheck.ProjectFileName2.size();
            similar = new double[CloneCheck.ProjectFileName2.size()];
            int count = 0;
            // similar = new double[TfIdfCalculate.tfidfvectorProject2.size() + 1];
            for (int j = 0; j < CloneCheck.ProjectFileName2.size(); j++) {
                similarity = cosineSimilarity(TfIdfCalculate.tfidfvectorProject1.get(i), TfIdfCalculate.tfidfvectorProject2.get(j));
                BigDecimal bd = new BigDecimal(similarity).setScale(2, RoundingMode.HALF_UP);
                double getSimilar = bd.doubleValue();
                System.out.println(CloneCheck.ProjectFileName1.get(i) + "" vs "" + CloneCheck.ProjectFileName2.get(j) + "" "" + getSimilar + ""%"");
                similar[count] = similarity;
             //   clone.add(similarity);

                count++;
            }
            similarArray.add(similar);
        }

    }

    public double cosineSimilarity(double[] project1, double[] project2) {
        double dotproduct = 0;
        double project1magnitude = 0;
        double project2magnitude = 0;
        double cosinesimilarity = 0;
        for (int i = 0; i < project2.length; i++) {
            dotproduct += project1[i] * project2[i];
            project1magnitude += Math.pow(project1[i], 2);
            project2magnitude += Math.pow(project2[i], 2);

        }
        project1magnitude = Math.sqrt(project1magnitude);
        project2magnitude = Math.sqrt(project2magnitude);
        //   if(project1magnitude!=0 && project2magnitude!=0){
        cosinesimilarity = dotproduct / (project1magnitude * project2magnitude) * 100;
        if (Double.isNaN(cosinesimilarity)) {
            cosinesimilarity = 0.0;
        }
        return cosinesimilarity;

    }

   /* public void getAverage() {
        double sum = 0;
        for (int i = 0; i < clone.size(); i++) {
          //  System.out.println(clone.get(i));
            sum += clone.get(i);
        }
      
        double average = sum /clone.size();
     //   System.out.println(average);

    }*/

}",0
"
package code_clone;

import java.util.Locale;


public class Porter_stemmer {
     public String stemWord(String word) {
        String stem = word.toLowerCase(Locale.getDefault());
        if (stem.length() < 3) return stem;  //m=vc  three  private
        stem = stemStep1a(stem);
        stem = stemStep1b(stem);
        stem = stemStep1c(stem);
        stem = stemStep2(stem);
        stem = stemStep3(stem);
        stem = stemStep4(stem);
        stem = stemStep5a(stem);
        stem = stemStep5b(stem);
        return stem;
    }

    String stemStep1a(String input) {
        // SSES -> SS
        if (input.endsWith(""sses"")) {
            return input.substring(0, input.length() - 2);
        }
        // IES  -> I
        if (input.endsWith(""ies"")) {
            return input.substring(0, input.length() - 2);
        }
        // SS   -> SS
        if (input.endsWith(""ss"")) {
            return input;
        }
        // S    ->
        if (input.endsWith(""s"")) {
            return input.substring(0, input.length() - 1);
        }
        return input;
    }

    String stemStep1b(String input) {
        // (m>0) EED -> EEd agreed
        if (input.endsWith(""eed"")) {
            String stem = input.substring(0, input.length() - 1);
            String letterTypes = getLetterTypes(stem);
            int m = getM(letterTypes);
            if (m > 0) return stem;
            return input;
        }
        // (*v*) ED  ->
        if (input.endsWith(""ed"")) {
            String stem = input.substring(0, input.length() - 2);
            String letterTypes = getLetterTypes(stem);
            if (letterTypes.contains(""v"")) {
                return step1b2(stem);
            }
            return input;
        }
        // (*v*) ING ->
        if (input.endsWith(""ing"")) {
            String stem = input.substring(0, input.length() - 3);
            String letterTypes = getLetterTypes(stem);
            if (letterTypes.contains(""v"")) {
                return step1b2(stem);
            }
            return input;
        }
        return input;
    }

    private String step1b2(String input) {
        // AT -> ATE
        if (input.endsWith(""at"")) {
            return input + ""e"";
        }
        // BL -> BLE
        else if (input.endsWith(""bl"")) {
            return input + ""e"";
        }
        // IZ -> IZE
        else if (input.endsWith(""iz"")) {
            return input + ""e"";
        } else {
            // (*d and not (*L or *S or *Z))
            // -> single letter
            char lastDoubleConsonant = getLastDoubleConsonant(input);
            if (lastDoubleConsonant != 0 &&
                    lastDoubleConsonant != 'l'
                    && lastDoubleConsonant != 's'
                    && lastDoubleConsonant != 'z') {
                return input.substring(0, input.length() - 1);
            }
            // (m=1 and *o) -> E
            else {
                String letterTypes = getLetterTypes(input);
                int m = getM(letterTypes);
                if (m == 1 && isStarO(input)) {
                    return input + ""e"";
                }

            }
        }
        return input;
    }

    String stemStep1c(String input) {
        if (input.endsWith(""y"")) {
            String stem = input.substring(0, input.length() - 1);
            String letterTypes = getLetterTypes(stem);
            if (letterTypes.contains(""v"")) return stem + ""i"";
        }
        return input;
    }

    String stemStep2(String input) {
        String[] s1 = new String[]{
                ""ational"",
                ""tional"",
                ""enci"",
                ""anci"",
                ""izer"",
                ""bli"", // the published algorithm specifies abli instead of bli.
                ""alli"",
                ""entli"",
                ""eli"",
                ""ousli"",
                ""ization"",
                ""ation"",
                ""ator"",
                ""alism"",
                ""iveness"",
                ""fulness"",
                ""ousness"",
                ""aliti"",
                ""iviti"",
                ""biliti"",
                ""logi"", // the published algorithm doesn't contain this
        };
        String[] s2 = new String[]{
                ""ate"",
                ""tion"",
                ""ence"",
                ""ance"",
                ""ize"",
                ""ble"", // the published algorithm specifies able instead of ble
                ""al"",
                ""ent"",
                ""e"",
                ""ous"",
                ""ize"",
                ""ate"",
                ""ate"",
                ""al"",
                ""ive"",
                ""ful"",
                ""ous"",
                ""al"",
                ""ive"",
                ""ble"",
                ""log"" // the published algorithm doesn't contain this
        };
        // (m>0) ATIONAL ->  ATE
        // (m>0) TIONAL  ->  TION
        for (int i = 0; i < s1.length; i++) {
            if (input.endsWith(s1[i])) {
                String stem = input.substring(0, input.length() - s1[i].length());
                String letterTypes = getLetterTypes(stem);
                int m = getM(letterTypes);
                if (m > 0) return stem + s2[i];
                return input;
            }
        }
        return input;
    }

    String stemStep3(String input) {
        String[] s1 = new String[]{
                ""icate"",
                ""ative"",
                ""alize"",
                ""iciti"",
                ""ical"",
                ""ful"",
                ""ness"",
        };
        String[] s2 = new String[]{
                ""ic"",
                """",
                ""al"",
                ""ic"",
                ""ic"",
                """",
                """",
        };
        // (m>0) ICATE ->  IC
        // (m>0) ATIVE ->
        for (int i = 0; i < s1.length; i++) {
            if (input.endsWith(s1[i])) {
                String stem = input.substring(0, input.length() - s1[i].length());
                String letterTypes = getLetterTypes(stem);
                int m = getM(letterTypes);
                if (m > 0) return stem + s2[i];
                return input;
            }
        }
        return input;

    }

    String stemStep4(String input) {
        String[] suffixes = new String[]{
                ""al"",
                ""ance"",
                ""ence"",
                ""er"",
                ""ic"",
                ""able"",
                ""ible"",
                ""ant"",
                ""ement"",
                ""ment"",
                ""ent"",
                ""ion"",
                ""ou"",
                ""ism"",
                ""ate"",
                ""iti"",
                ""ous"",
                ""ive"",
                ""ize"",
        };
        // (m>1) AL    ->
        // (m>1) ANCE  ->
        for(String suffix : suffixes) {
            if (input.endsWith(suffix)) {
                String stem = input.substring(0, input.length() - suffix.length());
                String letterTypes = getLetterTypes(stem);
                int m = getM(letterTypes);
                if (m > 1) {
                    if (suffix.equals(""ion"")) {
                        if (stem.charAt(stem.length() - 1) == 's' || stem.charAt(stem.length() - 1) == 't') {
                            return stem;
                        }
                    } else {
                        return stem;
                    }
                }
                return input;
            }
        }
        return input;
    }

    String stemStep5a(String input) {
        if (input.endsWith(""e"")) {
            String stem = input.substring(0, input.length() - 1);
            String letterTypes = getLetterTypes(stem);
            int m = getM(letterTypes);
            // (m>1) E     ->
            if (m > 1) {
                return stem;
            }
            // (m=1 and not *o) E ->
            if (m == 1 && !isStarO(stem)) {
                return stem;
            }
        }
        return input;
    }

    String stemStep5b(String input) {
        // (m > 1 and *d and *L) -> single letter
        String letterTypes = getLetterTypes(input);
        int m = getM(letterTypes);
        if (m > 1 && input.endsWith(""ll"")) {
            return input.substring(0, input.length() - 1);
        }
        return input;
    }

    private char getLastDoubleConsonant(String input) {
        if (input.length() < 2) return 0;
        char lastLetter = input.charAt(input.length() - 1);
        char penultimateLetter = input.charAt(input.length() - 2);
        if (lastLetter == penultimateLetter && getLetterType((char) 0, lastLetter) == 'c') {
            return lastLetter;
        }
        return 0;
    }

    // *o  - the stem ends cvc, where the second c is not W, X or Y (e.g.
    //                                                              -WIL, -HOP)
    private boolean isStarO(String input) {
        if (input.length() < 3) return false;

        char lastLetter = input.charAt(input.length() - 1);
        if (lastLetter == 'w' || lastLetter == 'x' || lastLetter == 'y') return false;

        char secondToLastLetter = input.charAt(input.length() - 2);
        char thirdToLastLetter = input.charAt(input.length() - 3);
        char fourthToLastLetter = input.length() == 3 ? 0 : input.charAt(input.length() - 4);
        return getLetterType(secondToLastLetter, lastLetter) == 'c'
                && getLetterType(thirdToLastLetter, secondToLastLetter) == 'v'
                && getLetterType(fourthToLastLetter, thirdToLastLetter) == 'c';
    }

    String getLetterTypes(String input) {
        StringBuilder letterTypes = new StringBuilder(input.length());
        for (int i = 0; i < input.length(); i++) {
            char letter = input.charAt(i);
            char previousLetter = i == 0 ? 0 : input.charAt(i - 1);
            char letterType = getLetterType(previousLetter, letter);
            if (letterTypes.length() == 0 || letterTypes.charAt(letterTypes.length() - 1) != letterType) {
                letterTypes.append(letterType);
            }
        }
        return letterTypes.toString();
    }

    int getM(String letterTypes) {
        if (letterTypes.length() < 2) return 0;
        if (letterTypes.charAt(0) == 'c') return (letterTypes.length() - 1) / 2;
        return letterTypes.length() / 2;
    }

    private char getLetterType(char previousLetter, char letter) {
        switch (letter) {
            case 'a':
            case 'e':
            case 'i':
            case 'o':
            case 'u':
                return 'v';
            case 'y':
                if (previousLetter == 0 || getLetterType((char) 0, previousLetter) == 'v') {
                    return 'c';
                }
                return 'v';
            default:
                return 'c';
        }
    }  
}
",1
"package code_clone;

import IO.Filewriter;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

public class PreProcessing {
    //  String stemWord="""";

    public String ProcessFile(String filename, String content,String p) throws IOException {
        String stemWord = """";
        String methodWithotPunctuation = removePunctuation(content);
        String methodWithoutKey = removeKeyword(methodWithotPunctuation);
        String methodWithoutSpace = removeSpace(methodWithoutKey);
        Porter_stemmer stemmer = new Porter_stemmer();
        String[] words = methodWithoutSpace.split("" "");
        for (String word : words) {
            String stem = stemmer.stemWord(word);
            stemWord = stemWord + "" "" + stem;
        }

        //  System.out.println("""" + stemWord.trim());
        Filewriter writer = new Filewriter(); //fileWriter class objeect

        String path = writer.createProcessFile(filename, stemWord.trim(),p);  //filename-filename with package

        return path;
    }

    public String removePunctuation(String p) throws IOException {

        //    for (int i = 0; i < method.size(); i++) {
        //   System.out.println(""""+method.get(i));
        String methodWithoutPunctuation = p.replaceAll(""\\p{Punct}"", "" "");
        // System.out.println("""" + removeMultipleSpaceAndLine(methodWithoutPunctuation));
        return methodWithoutPunctuation;
    }

   
    public String removeSpace(String fileAsString) {
        String newLineRemove = fileAsString.trim().replace(""\n"", "" "").replace(""\r"", """");
        String spaceRemove = newLineRemove.replaceAll(""\\s+"", "" "").trim();

        return spaceRemove;
    }

    public String removeKeyword(String fileAsString) throws FileNotFoundException, IOException {
        ArrayList<String> keyWordList = new ArrayList<>();
        ArrayList<String> methodContentList = new ArrayList<>();
        FileInputStream fis = new FileInputStream(""H:\\2-1\\Coding_Helper\\keyword.java""); //keyword.java is a file which contains all keyword
        byte[] b = new byte[fis.available()];
        fis.read(b);

        String[] keyword = new String(b).trim().split("" "");
        String newString = "" "";
        for (int i = 0; i < keyword.length; i++) {
            keyWordList.add(keyword[i].trim());

        }
        String[] p = fileAsString.split("" "");
        for (int i = 0; i < p.length; i++) {
            if (!(keyWordList.contains(p[i].trim()))) {
                newString = newString + p[i] + "" "";

            }
        }
        return newString;
    }
}",0
"package code_clone;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class TfIdfCalculate {

    ArrayList<String[]> FileWordProject1 = new ArrayList<>();
    ArrayList<String[]> FileWordProject2 = new ArrayList<>();
    static ArrayList<double[]> tfidfvectorProject1 = new ArrayList<>();
    static ArrayList<double[]> tfidfvectorProject2 = new ArrayList<>();
    ArrayList<String> processProjectFile = new ArrayList<>();
    ArrayList<String> combineTerms = new ArrayList<>();
    HashMap<String, Double> idfmap = new HashMap<>();
    ArrayList<String> allterms1 = new ArrayList<>();
    ArrayList<String> allterms2 = new ArrayList<>();

    public String[] fileRead(String path) throws FileNotFoundException, IOException {
        File directoryPath = new File(path);
        StringBuilder sb1 = new StringBuilder();
        File fileList[] = directoryPath.listFiles();
        BufferedReader in = null;

        for (File file : fileList) {
            if (file.getName().endsWith("".txt"")) {
                StringBuilder sb = new StringBuilder();
                in = new BufferedReader(new FileReader(file));
                String s = null;
                while ((s = in.readLine()) != null) {
                    sb.append(s);
                }
                // System.out.println(""sb="" + sb);
                if (path.equals(CloneCheck.path1)) {
                 //  System.out.println(""=""+path);
                    FileWordProject1.add(sb.toString().trim().split("" ""));

                }
                if (path.equals(CloneCheck.path2)) {
                  //  System.out.println(""2=""+path);
                    FileWordProject2.add(sb.toString().trim().split("" ""));
                }
               // System.out.println("""" + sb1);
                sb1.append("" "").append(sb);
                processProjectFile.add(sb.toString().trim());//contains two project file one by one 
            }
        }

        String allterm[] = sb1.toString().trim().split("" "");
        return allterm;
    }

    public void getUniqueWordProject1(String path1) throws IOException {
        String[] allterm = fileRead(path1);

        for (String term : allterm) {
            if (!allterms1.contains(term)) {
                allterms1.add(term); //project1 unique word
            }
        }

    }

    public void getUniqueWordProject2(String path2) throws IOException {
        String[] allterm = fileRead(path2);
        for (String term : allterm) {
            if (!allterms2.contains(term)) {
                allterms2.add(term);//project2 unique word
            }
        }
        //    System.out.println("""" + allterms2);
        //   allterms3.addAll(allterms1);
        //  allterms3.addAll(allterms2);
    }

    public void IdfCal() {
        double idf;
        //ArrayList<String> combine = new ArrayList<>();//combine project1 and project2 arrayList
        combineTerms.addAll(allterms1);
        combineTerms.addAll(allterms2);
        // System.out.println(""p="" + processProjectFile);
        // System.out.println(""combine=""+combine);
        for (String term : combineTerms) {
            idf = new getTfIdf().getIdf(processProjectFile, term);
            idfmap.put(term, idf);
        }
       // System.out.println("""" + idfmap);
    }

    public void tfIdfVectorProject1() {
        double tf;
        double idf;
        double tfidf;
        for (String[] fileword : FileWordProject1) {
            int count = 0;
            double[] tfidfvector;
            tfidfvector = new double[combineTerms.size()];
            for (String term : combineTerms) {
                tf = new code_clone.getTfIdf().getTf(fileword, term);
                if (idfmap.containsKey(term)) {
                    idf = idfmap.get(term);
                    //   System.out.println(term+"" ""+idf);
                } else {
                    idf = 0;
                }
                tfidf = tf * idf;
                //  System.out.println(term+"" 1=""+tfidf);
                tfidfvector[count] = tfidf;
                count++;
                //  System.out.println(term+"" tfidf=""+tfidf);
            }
            tfidfvectorProject1.add(tfidfvector);
        }
       // System.out.println(""""+CloneCheck.ProjectFileName1.size());
       // System.out.println(""f=""+FileWordProject1.size());
      //  System.out.println(""t=""+tfidfvectorProject1.size());
    }

    public void tfIdfVectorProject2() {
        double tf;
        double idf;
        double tfidf;
        for (String[] fileword : FileWordProject2) {
            int count = 0;
            double[] tfidfvector;
            tfidfvector = new double[combineTerms.size()];
            for (String term : combineTerms) {
                tf = new getTfIdf().getTf(fileword, term);
                if (idfmap.containsKey(term)) {
                    idf = idfmap.get(term);
                    //   System.out.println(term+"" ""+idf);
                } else {
                    idf = 0;
                }
                tfidf = tf * idf;
                // System.out.println(term+"" 2=""+tfidf);
                tfidfvector[count] = tfidf;
                count++;
                //  System.out.println(term+"" tfidf=""+tfidf);
            }
            tfidfvectorProject2.add(tfidfvector);
            
        }
    }
}",0
"package code_clone;
import java.util.List;
public class getTfIdf {

    public double getTf(String[] fileContent, String term) {
        double fileLength = fileContent.length;
        int count = 0;
        for (String s : fileContent) {
            if (s.equalsIgnoreCase(term)) {
                count++;
            }
        }
      //  System.out.println(""tf=""+count/fileLength);
        return count / fileLength;
    }

    public double getIdf(List allFile, String term) {
        double count = 0;
        double idf;
  
        for (int i = 0; i < allFile.size(); i++) {

            String[] fileContent;
            fileContent = allFile.get(i).toString().split("" "");
            for (String ss : fileContent) {
            //   System.out.println(""""+ss);
                if (ss.equalsIgnoreCase(term)) {
                    count++;
                    break;

                }
            }
        }
        return 1 + Math.log(allFile.size() / count);
    }
}",0
"package console;

import code_clone.CloneCheck;
import huffman.mainDecode;
import huffman.mainEncode;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import metrices.Average_LOC;
import metrices.FileCount;
import metrices.LineOfCode;
import metrices.MethodCount;
import searching.Search;

public class Command {

    public static String forwardDir;
    String directoryName = null;
    public static String currentPath = null;
    //  boolean pexist = false;
    //String project;

    Scanner scan = new Scanner(System.in);

    public void command() throws IOException {

        String projectSelect = null;
        while (true) {
            if (currentPath != null) {
                System.out.print("""" + currentPath + "">"");
            }
            if (currentPath == null) {
                currentPath = getcurrentPath();
                System.out.print("""" + currentPath + "">"");
            }

            String choice = scan.nextLine().trim();
            Pattern forward = Pattern.compile(""(?i)\\b(cd)\\b\\s+(.+)"");

            Pattern specialChar = Pattern.compile(""[\""*<>\\/://?\\|\\.]+"");
            Matcher m = forward.matcher(choice);

            Matcher special = specialChar.matcher(choice);
            boolean specialvalue = special.find();

            boolean wardval = m.find();

            if (choice.equalsIgnoreCase(""help"")) {
                System.out.println(""\t1.clone"");
                System.out.println(""\t2.File_Compress & File_Decompress"");
                System.out.println(""\t3.Search"");
                System.out.println(""\t4.Matrices\n\t\tFile Count-->fc\n\t\tMethod  Count-->mc\n\t\tLine of Code-->loc\n\t\tAverage line of Code-->a_loc"");
                System.out.println(""\t5.exit"");

            } else if (choice.equalsIgnoreCase(""clone"") | choice.equalsIgnoreCase(""1"")) {

                System.out.println(""\tSelect two project:"");
                projectPath();

            } else if (choice.equalsIgnoreCase(""File_Compress & File_Decompress"") | choice.equalsIgnoreCase(""2"")) {
                System.out.println(""\t\tFor Compress-->fcom"");
                System.out.println(""\t\tFor Decompress-->dcom"");
            } else if (choice.equalsIgnoreCase(""fcom"")) {
                new mainEncode().Compress(currentPath);

            } else if (choice.equalsIgnoreCase(""dcom"")) {
                new mainDecode().Decompress(currentPath);

            } else if (choice.equalsIgnoreCase(""search"") | choice.equalsIgnoreCase(""3"")) {
                System.out.print(""\tWrite \""query\"" and projectname:"");
                //   System.out.println(""x="" + currentPath);
                Search(currentPath);
                //  projectPath();
            } else if (choice.equalsIgnoreCase(""4"")| choice.equalsIgnoreCase(""Metrics"")) {
                System.out.println(""\t4.Metrics\n\t\tJava File Count-->fc\n\t\tMethod  Count-->mc\n\t\tLine of Code-->loc\n\t\tAverage LOC of a class"");

            } else if (choice.equalsIgnoreCase(""mc"") | choice.equalsIgnoreCase(""method_count"")) {
                getMethod(currentPath);

            } else if (choice.equalsIgnoreCase(""Line_Of_Code"") | choice.equalsIgnoreCase(""LOC"")) {
                LineCode(currentPath);

            } else if (choice.equalsIgnoreCase(""a_loc"")|choice.equalsIgnoreCase(""average LOc of a Class"")) {
                average_Line_of_Project(currentPath);

            } else if (choice.equalsIgnoreCase(""fc"")| choice.equalsIgnoreCase(""File_Cunt"")) {
                getTotalClass(currentPath);

            } else if (choice.equalsIgnoreCase(""cd"")) {
                currentPath = getcurrentPath();

            } else if (Pattern.matches(""(?i)\\bcd\\b\\s*\\.\\."", choice)) {
                String result;

                String newPath = currentPath;
                // System.out.println(""newpath="" + newPath);
                result = backDirectory(newPath);
                //   }
            } else if (Pattern.matches(""(?i)\\bcd\\b\\s*\\\\"", choice)) {
                currentPath = currentPath.substring(0, 3);

            } else if (Pattern.matches(""((?i)\\bcdrive\\b\\s+(\\w+[:]))"", choice)) {

                Matcher drv = Pattern.compile(""(?i)\\bcdrive\\b\\s*(\\w+[:])"").matcher(choice);
                if (drv.find()) {
                    checkFileExist(drv.group(1).toUpperCase());
                }
            } else if (choice.equalsIgnoreCase(""dir"")) {
                //  String path;             
                String path;
                if (currentPath == null) {
                    path = FileSystems.getDefault().getPath("""").toAbsolutePath().toString();
                } else {

                    path = currentPath;
                    //    System.out.println(currentPath);
                }
                listDirectory(path + ""\\"");
            } else if (specialvalue == false && wardval == true) {
                forwardDirectory(m.group(2));

            } else if (choice.equalsIgnoreCase(""exit"") | choice.equals(""5"")) {
                System.exit(0);
            } else {
                System.out.println(""'"" + choice + ""' is not recognized as a command"");
            }
        }
    }

    public String getcurrentPath() {
        String path;

        if (currentPath == null) {
            path = FileSystems.getDefault().getPath("""").toAbsolutePath().toString();

        } else {
            path = currentPath;
        }

        return path;

    }

    public void getMethod(String path) throws IOException {      //Count total number of methods of a project/java file
        
        String newpath = pathGenerate(path);
        try {
            System.out.print(""\tProject\\File Name:"");
            String name = Input();
            String projectPath = newpath + ""\\"" + name;
            Path filepath = Paths.get(projectPath);
            if (Files.exists(filepath) && Files.isDirectory(filepath) && !name.isEmpty()) {
              //  System.out.println(""project"");
             new MethodCount().getTotalMethods(projectPath, name);
            } else if (Files.exists(filepath) && !Files.isDirectory(filepath) && !name.isEmpty()) {
                String file = filepath.toString();
                new MethodCount().getTotalMethods(projectPath, name);

            } else {

                System.out.println(""The program cannot find '"" + name + ""'"");
            }
        } catch (Exception e) {
            System.out.println(""Invalid input"");

        }

    }

    public void LineCode(String Currentpath) throws IOException {
        String newpath = pathGenerate(Currentpath);    //count total number of line of a java file
        System.out.print(""\tWrite the file name:"");
       String fileName=Input();
        String p = newpath + ""\\"" + fileName.trim();
        try {
            Path path = Paths.get(p);
            if (Files.exists(path) && !Files.isDirectory(path)) {
                int totalLine = new LineOfCode().countLines(path.toString());
               System.out.println(""\tLine of "" + fileName + "" is "" + totalLine);
            } else {
                System.out.println(""The program cannot find '"" + fileName + ""'"");
            }
        } catch (Exception e) {
            System.out.println(""Invalid filename"");
        }

    }
  

    public String Input() {
        Scanner scan = new Scanner(System.in);
        String projectName = scan.nextLine().trim();
        return projectName;

    }

    public void getTotalClass(String currenctpath) {    //Count total number of class of a projct
        String newpath = pathGenerate(currenctpath);
        System.out.print(""\tWrite Project name:"");
        String projectName = Input();
        String path = newpath + ""\\"" + projectName;
        try {
            Path p = Paths.get(path);
            if (Files.exists(p) && Files.isDirectory(p) && !projectName.isEmpty()) {
             new FileCount().classCount(path);

            } else if (Files.exists(p) && !Files.isDirectory(p)) {
                System.out.println(""Invalid project name"");
            } else {
                System.out.println(""The program cannot find '"" + projectName + ""'"");
            }
        } catch (Exception e) {
            System.out.println(""Invalid project name"");
        }

    }

    public void average_Line_of_Project(String currentpath) { //average line of code of a class
        String newpath = pathGenerate(currentpath);        
        System.out.print(""\tWrite the project name:"");
        String projectName = Input();
        String path = newpath + ""\\"" + projectName;

        try {
            Path p = Paths.get(path);        
            if (Files.exists(p) && Files.isDirectory(p) && !projectName.isEmpty()) {
                new Average_LOC().totalClass(path);

            } else if (Files.exists(p) && !Files.isDirectory(p)) {
                System.out.println(""Invalid project name"");
            } else {
                System.out.println(""The program cannot find '"" + projectName + ""'"");
            }
        } catch (Exception e) {
            System.out.println(""Invalid projectname"");
        }

    }

    public void Search(String path) {
        String newpath = pathGenerate(path);
        String queryWithFile = scan.nextLine().trim();
        try {
            String query = queryWithFile.substring(queryWithFile.indexOf(""\"""") + 1, queryWithFile.lastIndexOf(""\"""")).trim();
            String projectName = queryWithFile.substring(queryWithFile.lastIndexOf(""\"""") + 1).trim();
            String p = newpath + ""\\"" + projectName;
            // System.out.println(p);
            Path filepath = Paths.get(p);
            if ((projectName.isEmpty() && !query.isEmpty()) || (query.isEmpty() && !projectName.isEmpty())) {
                System.out.println(""Wrong Command"");
            } else if (query.isEmpty() && projectName.isEmpty()) {
                System.out.println(""Wrong Command"");
            } 
            else{
              if(Files.exists(filepath)){
                 SearchResult(newpath, projectName, query);
              
              }else {
                    System.out.println(""The program cannot find '"" + projectName + ""'"");
                }
            
            }
        /*    else {
                if (Files.exists(filepath) && Files.isDirectory(filepath)) {
                    SearchResult(newpath, projectName, query);
                } else if (Files.exists(filepath) && !Files.isDirectory(filepath)) {
                    SearchResult(newpath, projectName, query);
                } 
                else {
                    System.out.println(""The program cannot find '"" + projectName + ""'"");
                }
            }*/

        } catch (Exception e) {
            
          System.out.println(""Wrong Command"");
        }//catch (Exception e) {
        //   e.printStackTrace();
        // }

    }

    public void SearchResult(String path, String projectName, String query) throws IOException {
        String projectPath = path + ""\\"" + projectName;
        new Search().processProject(projectPath, projectName);
        new Search().SearchingResult(query, projectPath);  //calculate similarity

    }

    public String pathGenerate(String path) {
        // System.out.println(""p=""+path);          //remove the last backslash from a path 
        String newPath = path;
        if (path.endsWith(""\\"")) {
            newPath = path.substring(0, path.length() - 1);
            //  System.out.println(""new="" + newPath);
        }
        return newPath;

    }

    public void projectPath() throws IOException {         
        ArrayList<String> projectList = new ArrayList<>(2);
        System.out.print(""\t\tFirst Project:"");
       try{
        String Firstproject =Input();
            //  String FirstprojectPath = currentPath + ""\\"" + Firstproject;
          //   File project1=new File(FirstprojectPath);
        if (Firstproject.length() == 0 | Firstproject.contains(""."")) {
            System.out.println(""\tInvalid project name"");
            command();
        }
   
        projectExist(Firstproject);
        System.out.print(""\t\tSecond Project:"");

        String SecondProject = Input();
      //   String SecondprojectPath = currentPath + ""\\"" + SecondProject;
            // File project2=new File(SecondprojectPath);
        if (SecondProject.length() == 0 | SecondProject.contains(""."")) {
            System.out.println(""\tInvalid project name"");
            command();
        }
           
             
        projectExist(SecondProject);
       
        
        if (projectExist(Firstproject) && projectExist(SecondProject) && (!(Firstproject.isEmpty() | SecondProject.isEmpty()))) {

            projectList.add(Firstproject);
            projectList.add(SecondProject);
            CloneCheck ob1 = new CloneCheck();

            ob1.Code_clone(Firstproject, SecondProject);
            projectList.clear();
        }  else {

            System.out.println(""Wrong command"");
        }}catch(Exception e){
        
        }

    }

    public boolean projectExist(String projectName) throws IOException {
        boolean exist = false;
        String projectPath = currentPath + ""\\"" + projectName;
   
        
        try {
            Path path = Paths.get(projectPath);
          
            if (Files.exists(path)) {
               exist = true;
            }      
            else {
                System.out.println(""The program cannot find project '"" + projectName + ""'"");
                //   exist=false;
                command();

            }
        } catch (Exception e) {
            System.out.println(""Invalid Input"");
            command();
        }
        return exist;
    }

    public String backDirectory(String newpath) {
        String result = null;
        if (newpath.length() > 3) {    //show stringIndexoutofboundException
            result = newpath.substring(0, newpath.lastIndexOf(""\\"") + 1);
            if (result.endsWith(""\\"") && result.length() > 3) {
                result = result.substring(0, result.length() - 1);
            }
            currentPath = result;
            forwardDir = result;
        } else {
            currentPath = newpath;
            forwardDir = currentPath;

        }
        return currentPath;
    }

    public void forwardDirectory(String dirName) {
        String forwardPath = null;

        String result = null;
        if (currentPath == null) {
            Path path = FileSystems.getDefault().getPath("""").toAbsolutePath();
            forwardPath = path.toString().concat(""\\"" + dirName);
            checkFileExist(forwardPath);

        } else {
            forwardPath = currentPath + ""\\"" + dirName;

            checkFileExist(forwardPath);

        }

    }

    public void checkFileExist(String path) {
        Path p1 = Paths.get(path);
        try {
            if (Files.exists(p1)) {
                forwardDir = p1.toString();
                currentPath = p1.toString();
                currentPath = setDirectory(forwardDir).toString();
                if (currentPath.length() < 3) {
                    currentPath = setDirectory(forwardDir).toString() + ""\\"";
                } else {
                    currentPath = setDirectory(forwardDir).toString();
                }
                // System.out.println(currentPath);
                forwardDir = currentPath;

            } else {
                System.out.println(""The program cannot find the path specified."");

            }
        } catch (Exception e) {
            System.out.println(""Invalid path"");
        }

    }

    public File setDirectory(String s) {
        File file = new File("""");
        System.setProperty(""user.dir"", ""\\"" + s);
        // System.out.println("""" + file.getAbsolutePath());

        return file.getAbsoluteFile();
    }

    public void listDirectory(String path) throws IOException {
        File f = new File(path);
        Path file = Paths.get(path);
        BasicFileAttributes attr = Files.readAttributes(file, BasicFileAttributes.class);
        int dircount = 0;
        int filecount = 0;
        File[] flist = f.listFiles();
        if (flist.length != 0) {
            for (File filee : flist) {
                if (filee.isDirectory()) {
                    System.out.println(attr.creationTime() + ""\t <DIR>\t\t"" + filee.getName());
                    dircount++;
                } else {
                    System.out.println(attr.creationTime() + ""\t \t\t"" + filee.getName());
                    filecount++;
                }
            }
            System.out.println(""\t"" + dircount + "" Dir(s)"");
            System.out.println(""\t"" + filecount + "" File(s)"");
        } else {
            System.out.print(""Empty directory"");
        }
    }

    public static void main(String[] args) throws IOException {

        Command ob = new Command();
        ob.command();
    }
}",1
"package huffman;

import java.util.ArrayList;
import java.util.Map;
import java.util.Scanner;

public class Compress {

	private String sourceFilePath;
	private String targetFilePath;

	
	public Compress(String sourceFilePath, String targetFilePath) {
		this.sourceFilePath = sourceFilePath;
		this.targetFilePath = targetFilePath;
	}

	
	public void compressFile() {
		
		
		Map<Character, Integer> map = Huffman.createMapFromFile(this.sourceFilePath);
		
		Node rootNode = Huffman.huffman(map);
		
		ArrayList<HuffmanTuple> encodings = Huffman.canonizeHuffmanTree(rootNode);
		
		          System.out.println(encodings);
		System.out.println(""=== Writing Compressed File to "" + this.targetFilePath + "" ===="");
		Huffman.writeEncodedFile(this.sourceFilePath, this.targetFilePath, encodings);
		
	}
              
   
}",0
"package huffman;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;


public class CompressedFileWriteHelper extends FileWriteHelper {

	public Map<Character, String> map;

	
	public CompressedFileWriteHelper(String path, ArrayList<HuffmanTuple> encodings) {
		super(path);
		this.map = new HashMap<>();
		this.initMap(encodings);
	}


	
	private void initMap(ArrayList<HuffmanTuple> encodings) {
		for (HuffmanTuple tuple : encodings) {
			map.put(tuple.letter, tuple.representation);
		}
	}

	
	protected void writeBeginningOfFile(String headerString) {
		for (int i = 0; i < headerString.length(); i += 2) {
			int intRep = Integer.parseInt(headerString.substring(i, i + 2), 16);
			String bin = Integer.toBinaryString(intRep);
			String paddedBin = Huffman.rightPadString(bin, NUM_OF_BITS_TO_WRITE);
			byteBuffer += paddedBin;
			this.writeToFile();
		}
	}

	protected void writeEndOfFile() {
		byteBuffer += map.get((char) 0x00);
		if (byteBuffer.length() != 8) {
			int howManyBytes = byteBuffer.length() / 8;
			byteBuffer = Huffman.leftPadString(byteBuffer, NUM_OF_BITS_TO_WRITE * (howManyBytes + 1));
		}
		this.writeToFile();
	}

	public void writeToFile() {
		try {
			while (byteBuffer.length() >= NUM_OF_BITS_TO_WRITE) {
				int i = Integer.parseInt(byteBuffer.substring(0, NUM_OF_BITS_TO_WRITE), 2);
				fileOutputStream.write(i);
				byteBuffer = byteBuffer.substring(NUM_OF_BITS_TO_WRITE);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	
	@Override
	public void doWork(int currentByte) {
		byteBuffer += map.get((char) currentByte);
		this.writeToFile();
	}
}",0
"package huffman;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;


public class Decompress {
	private String sourceFilePath;
	private String targetFilePath;

	public Decompress(String sourceFilePath, String targetFilePath) {
		this.sourceFilePath = sourceFilePath;
		this.targetFilePath = targetFilePath;
	}

	
	public void decompressFile() {
	         
		Huffman.writeDecodedFile(this.sourceFilePath, this.targetFilePath);
		System.out.println(""==== Write Decompressed File to "" + this.targetFilePath + "" ===="");
		
	}

	
	protected static Map<String, Character> convertTuplesToLookupMap(ArrayList<HuffmanTuple> tuples) {
		Map<String, Character> map = new HashMap<>();
		for (HuffmanTuple t : tuples) {
			map.put(t.representation, t.letter);
		}
		return map;
	}

	
	protected static ArrayList<HuffmanTuple> convertMapToTuples(Map<Character, Integer> map) {
		ArrayList<HuffmanTuple> list = new ArrayList<>();
		for (Map.Entry<Character, Integer> entry : map.entrySet()) {
			
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < entry.getValue(); i++) {
				sb.append(""1"");
			}
			list.add(new HuffmanTuple(entry.getKey(), sb.toString()));
		}
		return list;
	}

	
}",0
"package huffman;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;


public class DecompressedFileWriteHelper extends FileWriteHelper {

	private Map<String, Character> map;
	private Map<Character, Integer> frequencyMap;
	private char charToWrite;
	private int numberOfChars;
	private int currentCodeIndex;
	private boolean readChar;
	private char inputChar;
	private enum State {
		FIRST_BYTE, DICTIONARY, ENCODED_FILE, FINISHED
	};
	private State currentState;

	
	public DecompressedFileWriteHelper(String path) {
		super(path);
		this.charToWrite = (char) 0x00;
		this.numberOfChars = 0;
		this.currentCodeIndex = 0;
		this.readChar = false;
		this.frequencyMap = new HashMap<>();
		this.currentState = State.FIRST_BYTE;
	}

	
	public void writeToFile() {
		try {
			fileOutputStream.write(this.charToWrite);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	private void handleReadDictionary(int currentByte) {
		char currentChar = (char) currentByte;
		if (readChar) {
			frequencyMap.put(currentChar, 0);
			this.inputChar = currentChar;
			this.readChar = false;
		} else {
			frequencyMap.put(this.inputChar, currentByte);
			this.readChar = true;
			currentCodeIndex++;
		}

		if (this.currentCodeIndex >= this.numberOfChars) {
			ArrayList<HuffmanTuple> tuples = Decompress.convertMapToTuples(frequencyMap);
			Huffman.sortHuffmanTuples(tuples);
			Huffman.canonizeEncodings(tuples);
			this.map = Decompress.convertTuplesToLookupMap(tuples);
			
			this.currentState = State.ENCODED_FILE;
		}
	}

	
	private void handleReadFirstByte(int currentByte) {
		
		this.numberOfChars = currentByte;
		this.readChar = true;
		this.currentState = State.DICTIONARY;
	}

	
	private void handleDecodeByByte(int currentByte) {
		this.byteBuffer += Huffman.rightPadString(Integer.toBinaryString(currentByte), NUM_OF_BITS_TO_WRITE);
		int currentLength = 1;

		while (true) {
			try {
				String current = this.byteBuffer.substring(0, currentLength);
				Character possibility = this.map.get(current);
				if (possibility != null) {
					if (possibility == '\u0000') {
						this.currentState = State.FINISHED;
						break;
					}
					this.byteBuffer = this.byteBuffer.substring(currentLength);
					this.charToWrite = possibility;
					this.writeToFile();
					currentLength = 1;
				} else {
					currentLength++;
				}
			} catch (IndexOutOfBoundsException e) {
				break;
			}
		}
	}

	
	@Override
	public void doWork(int currentByte) {
		if (this.currentState == State.FINISHED) {
			return;
		} else if (this.currentState == State.FIRST_BYTE) {
			this.handleReadFirstByte(currentByte);
		} else if (this.currentState == State.DICTIONARY) {
			this.handleReadDictionary(currentByte);
		} else if (this.currentState == State.ENCODED_FILE) {
			this.handleDecodeByByte(currentByte);
		}
	}
}",0
"package huffman;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;


public abstract class FileWriteHelper implements FileContentReader {
	private File file;
	protected FileOutputStream fileOutputStream;
	public String byteBuffer;
	public static final int NUM_OF_BITS_TO_WRITE = 8;

	
	public FileWriteHelper(String path) {
		this.file = new File(path);
		this.byteBuffer = """";
		this.initFile();
	}

	
	private void initFile() {
		try {
			this.fileOutputStream = new FileOutputStream(this.file);
			if (!file.exists()) {
				file.createNewFile();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	
	public abstract void writeToFile();
}",0
"package huffman;

import java.util.HashMap;
import java.util.Map;


public class FrequencyMapCreate implements FileContentReader {

	Map<Character, Integer> map; 

	
	public FrequencyMapCreate() {
		this.map = new HashMap<>();
	}

	
	@Override
	public void doWork(int currentByte) {
		char currentChar = (char) currentByte;

		if (map.get(currentChar) == null) {
			map.put(currentChar, 1);
		} else {
			map.put(currentChar, map.get(currentChar) + 1);
		}
	}
}",0
"package huffman;

import java.io.*;
import java.util.*;


public class Huffman {

	
	public static Node huffman(Map<Character, Integer> map) {
		PriorityQueue<Node> q = new PriorityQueue<>(convertMapToList(map));

		for (int i = 1; i < map.size(); i++) {
			Node z = new Node();
			Node x = q.poll();
			z.left = x;
			Node y = q.poll();
			z.right = y;
			z.freq = x.freq + y.freq;
			z.letter = z.INTERIOR_NODE_CHAR;
			q.add(z);
		}
		return q.poll();
	}

	
	private static void performInorderTraversal(Node current, String representation, ArrayList<HuffmanTuple> list) {
		if (current == null) {
			return;
		}

		performInorderTraversal(current.left, representation + ""0"", list);
		if (current.letter != (char) 0x01) {
			list.add(new HuffmanTuple(current.letter, representation));
		}
		performInorderTraversal(current.right, representation + ""1"", list);
	}

	
	private static ArrayList<Node> convertMapToList(Map<Character, Integer> map) {
		ArrayList<Node> list = new ArrayList<>();
		for (Map.Entry<Character, Integer> entry : map.entrySet()) {
			list.add(new Node(entry.getKey(), entry.getValue()));
		}
		return list;
	}

	
	public static Map<Character, Integer> createMapFromFile(String filePath) {
		FrequencyMapCreate createFrequencyMapWorker = new FrequencyMapCreate();
		
		createFrequencyMapWorker.map.put((char) 0x00, 1);
		Huffman.readFromFileAndDoWork(filePath, createFrequencyMapWorker);
		return createFrequencyMapWorker.map;
	}

	protected static ArrayList<HuffmanTuple> canonizeHuffmanTree(Node root) {
		
		ArrayList<HuffmanTuple> encodings = Huffman.extractEncodings(root);

		
		Huffman.sortHuffmanTuples(encodings);

		
		Huffman.canonizeEncodings(encodings);
		return encodings;
	}

	
	protected static void canonizeEncodings(ArrayList<HuffmanTuple> encodings) {
		int currentNum = 0;
		for (int i = encodings.size() - 1; i >= 0; i--) {
			HuffmanTuple currentTuple = encodings.get(i);
			currentTuple.representation = Huffman.rightPadString(Integer.toBinaryString(currentNum), currentTuple.representation.length());
			if (i > 0) {
				
				currentNum = (currentNum + 1) >> (currentTuple.representation.length() - encodings.get(i - 1).representation.length());
			}
		}
	}

	protected static void sortHuffmanTuples(ArrayList<HuffmanTuple> list) {
		Collections.sort(list, new Comparator<HuffmanTuple>() {
			@Override
			public int compare(HuffmanTuple o1, HuffmanTuple o2) {
				if (o1.representation.length() > o2.representation.length()) {
					return 1;
				} else if (o1.representation.length() < o2.representation.length()) {
					return -1;
				} else {
					
					if (o1.letter < o2.letter) {
						return 1;
					} else if (o1.letter > o2.letter) {
						return -1;
					}
				}
				return 0;
			}
		});
	}

	
	public static String generateLookupCode(ArrayList<HuffmanTuple> encodings) {
		StringBuilder builder = new StringBuilder();
		
		builder.append(Huffman.rightPadString(Integer.toHexString(encodings.size()), 2));
		Collections.sort(encodings, new Comparator<HuffmanTuple>() {
			@Override
			public int compare(HuffmanTuple o1, HuffmanTuple o2) {
				if (o1.letter > o2.letter) {
					return 1;
				} else if (o1.letter < o2.letter) {
					return -1;
				}
				return 0;
			}
		});
		
		for (HuffmanTuple tuple : encodings) {
			builder.append(Huffman.rightPadString(Integer.toHexString((int) tuple.letter), 2));
			builder.append(Huffman.rightPadString(Integer.toHexString(tuple.representation.length()), 2));
		}
		return builder.toString();
	}

	
	protected static void writeEncodedFile(String inputPath, String outputPath, ArrayList<HuffmanTuple> encodings) {
		CompressedFileWriteHelper writeEncodedFile = new CompressedFileWriteHelper(outputPath, encodings);
		writeEncodedFile.writeBeginningOfFile(Huffman.generateLookupCode(encodings));
		Huffman.readFromFileAndDoWork(inputPath, writeEncodedFile);
		writeEncodedFile.writeEndOfFile();
	}

	
	protected static void writeDecodedFile(String inputPath, String outputPath) {
		DecompressedFileWriteHelper writeDecodedFileWorker = new DecompressedFileWriteHelper(outputPath);
		Huffman.readFromBinaryFileAndDoWork(inputPath, writeDecodedFileWorker);
	}

	
	public static String rightPadString(String input, int length) {
		StringBuilder sb = new StringBuilder(length);
		for (int i = 0; i < length; i++) {
			sb.append(""0"");
		}
		try {
			return sb.toString().substring(input.length()) + input;
		} catch (StringIndexOutOfBoundsException e) {
			return input;
		}
	}

	public static String leftPadString(String input, int length) {
		StringBuilder sb = new StringBuilder(length);
		for (int i = 0; i < length; i++) {
			sb.append(""0"");
		}
		try {
			return input + sb.toString().substring(input.length());
		} catch (StringIndexOutOfBoundsException e) {
			return input;
		}
	}

	
	private static ArrayList<HuffmanTuple> extractEncodings(Node root) {
		ArrayList<HuffmanTuple> list = new ArrayList<>();
		Huffman.performInorderTraversal(root, """", list);
		return list;
	}

	
	private static void readFromFileAndDoWork(String filePath, FileContentReader handler) {
		
		try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filePath), ""UTF-8""))) {
			int currentByte;
			while ((currentByte = br.read()) != -1) {
				handler.doWork(currentByte);
			}
		} catch (FileNotFoundException e) {
			System.err.println(""Could not find file with the given path of: "" + filePath);
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static void readFromBinaryFileAndDoWork(String filePath, FileContentReader handler) {
		try (DataInputStream ds = new DataInputStream(new BufferedInputStream(new FileInputStream(filePath)))) {
			int currentByte;
			while((currentByte = ds.read()) != -1) {
				handler.doWork(currentByte);
			}
		} catch (FileNotFoundException e) {
			System.err.println(""Could not find file with the given path of: "" + filePath);
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}",1
"package huffman;


public class HuffmanTuple {
	public char letter;
	public String representation;

	
	public HuffmanTuple(char letter, String representation) {
		this.letter = letter;
		this.representation = representation;
	}

	
	@Override
	public String toString() {
		return this.letter + "" => "" + this.representation;
	}
}",0
"package huffman;


public class Node implements Comparable<Node> {
	public Node left;
	public Node right;
	public int freq;
	public char letter;
	public final char INTERIOR_NODE_CHAR = (char) 0x01;
        
        
         
	
        
	public Node() {
	}

	
	public Node(int freq) {
		this.freq = freq;
	
		this.letter = INTERIOR_NODE_CHAR;
	}

	
	public Node(char letter, int freq) {
		this.left = null;
		this.right = null;
		this.freq = freq;
		this.letter = letter;
	}

	
	@Override
	public String toString() {
		return this.letter + "" => "" + this.freq;
	}

	
	@Override
	public int compareTo(Node o) {
		if (this.freq > o.freq) {
			return 1;
		} else if (this.freq < o.freq) {
			return -1;
		}
		return 0;
	}

	

}",0
"
package metrices;

import IO.ProjectReader;
import java.math.BigDecimal;
import java.math.RoundingMode;

public class Average_LOC {
    public void totalClass(String path){
    double average;
        try{
    ProjectReader.fileRead(path, 0);
     int totalClass=ProjectReader.classCount;
     for(int i=0;i<ProjectReader.filename.size();i++){      
         new LineOfCode().countLines(ProjectReader.filename.get(i));
     
     
     }
     
   average=(float) ((LineOfCode.totalLineOfProject)/(ProjectReader.filename.size()));
    BigDecimal bd = new BigDecimal(average).setScale(2, RoundingMode.HALF_UP);
    double val2 = bd.doubleValue();
            System.out.println(""\tAverage LOC in a class:""+val2);
            ProjectReader.classCount=0;
            ProjectReader.filename.clear();
            LineOfCode.totalLineOfProject=0; 
    }catch(Exception e){
       e.printStackTrace();
        
        
    }}
}",0
"package metrices;

import IO.ProjectReader;

public class FileCount {

    public int classCount(String path) {
        int totalClass=0;

        try {
            ProjectReader.fileRead(path, 0);
            totalClass = ProjectReader.classCount;
            System.out.println(""\tTotal number of file:"" + totalClass);
            ProjectReader.classCount = 0;
        } catch (Exception e) {
            System.out.println(""Invalid Input"");
        }
        return totalClass;
    }
}",0
"package metrices;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

public class LineOfCode {
    public static double totalLineOfProject;
public int countLines(String filename) throws IOException {
    InputStream is = new BufferedInputStream(new FileInputStream(filename));
    try {
        byte[] c = new byte[1024];
        int count = 0;
        int readChars = 0;
        boolean endsWithoutNewLine = false;
        while ((readChars = is.read(c)) != -1) {
            for (int i = 0; i < readChars; ++i) {
                if (c[i] == '\n')
                    ++count;
            }
            endsWithoutNewLine = (c[readChars - 1] != '\n');
        }
        if(endsWithoutNewLine) {
            ++count;
        }
        totalLineOfProject+=count;
        return count;
    } finally {
        is.close();
    }
}}",0
"package metrices;

import IO.ProjectReader;
import java.io.IOException;
import searching.Search;

public class MethodCount {

    public void getTotalMethods(String projectPath, String ProjectName) throws IOException {
        try{
        if (ProjectName.endsWith("".java"")) {
            new Search().getFile(projectPath, ProjectName);
        } else {
            new Search().processProject(projectPath, ProjectName);
        }
        int totalMethods = ProjectReader.count;
        System.out.println(""\tTotal methods:"" + totalMethods);
        ProjectReader.count = 0;
        Search.ProjectFileName.clear();
    }catch(Exception e){
    
    
    }}
}",0
"
package searching;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
public class GrepContent {

    public String findBetweenBraces(int start, String fileContent) throws FileNotFoundException {
        int i = start;
        int openBraces = 0;
        int closedBraces = 0;
        String result;
        try{
        do {
            Character c = fileContent.charAt(i);
            if (c == '{') {
                openBraces++;

            } else if (c == '}') {
                closedBraces++;

            }
            ++i;
        } while (openBraces == 0 || openBraces != closedBraces);
        }catch(Exception e){
        //  System.out.println(e);
        }
        result = fileContent.substring(start, i);

        // System.out.println("""" + result);
        return result;
    }

    /* public int grepLineNumber(String word, String file,int preLine) throws FileNotFoundException, IOException {
        String str;
        int linenumber = 0;
        BufferedReader buf = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(file))));
      
        String line;
        int LineNumber = 0;
        while ((line = buf.readLine()) != null) {
            LineNumber++;
            //     System.out.println(""pop"");
            if (line.contains(word)) {
                //System.out.println(""po"" + LineNumber);
                linenumber = LineNumber;
                break;
               // System.out.println("""" + linenumber);
            }
        }
        //   System.out.println(""""+LineNumber);
        return linenumber;
    }*/
    public int getLineNumber(String word, String file, int preLine) throws FileNotFoundException, IOException {
    //    System.out.println(word);
        int lineNumber = 0;
        try (LineNumberReader reader = new LineNumberReader(new FileReader(file))) {
            
            for (String line; (line = reader.readLine()) != null;) {
                if (reader.getLineNumber() > preLine && line.contains(word)) {
                    // System.out.println(reader.getLineNumber() + "": "" + line);
                    lineNumber = reader.getLineNumber();
                    break;

                }
            }
        }
        return lineNumber;
    }
}",0
"package searching;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MethodFind {

    //  public static ArrayList<String> Methodbody = new ArrayList<>();
    public void getMethod(String filename, String fileContent, String path, String processfilePath) throws FileNotFoundException, IOException {

        Scanner scan = new Scanner(fileContent);
        int linenumber = 0;
        String file = scan.useDelimiter(""\\Z"").next().trim();             //^\w+\W\w+\.(\w+){3}\s*\{?+[^;]$ dotall
        String pattern = ""(public|void|protected|private|static|final|public static|private static|protected static|public final|private final|protective final)+\\s*(\\<.*\\>)*\\s*[a-zA-Z]*\\s*\\b([_$a-zA-Z1-9]+)\\b\\s*\\(.*\\)\\s*[^;].*?$"";
        //  String pattern =""^(public)\\s+[a-zA-Z]*\\s+(\\bmethodName\\b)\\s*\\(\\)[^;]*$"";
        Matcher methodMatcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(file);
        while (methodMatcher.find()) {
            //   Search.count++;
            String method = new GrepContent().findBetweenBraces(methodMatcher.start(), file);
            String methodname = methodMatcher.group().replaceAll(""\\{"", """").replaceAll(""[\r\n]+"", "" "").trim();
            //   System.out.println(""matcher="" + methodname);
            linenumber = new GrepContent().getLineNumber(methodname, path, linenumber);
            String processFilename = methodMatcher.group(3) + ""-"" + linenumber + ""-"" + filename;;

            if (linenumber != 0) {
                new ProcessSearchFile().processMethod(processFilename, method, path, processfilePath);

                //   System.out.println(""group=""+methodMatcher.group());
            }
        }
    }

    public void getConstructor(String filename, String fileContent, String path, String processfilePath) throws FileNotFoundException, IOException {
        int linenumber = 0;
        Pattern classpattern = Pattern.compile(""class\\s+([a-zA-Z]+).*"");
        Matcher classMatcher = classpattern.matcher(fileContent);
        while (classMatcher.find()) {
            String className = classMatcher.group(1);
            //  System.out.println(""DF=""+className);
            String classContent = new GrepContent().findBetweenBraces(classMatcher.start(), fileContent);
            Pattern constructorFind = Pattern.compile(""(\\b"" + classMatcher.group(1) + ""\\b)\\s*\\(.*\\)\\s*[^;].*$"", Pattern.MULTILINE);

            Matcher consMatch = constructorFind.matcher(classContent);
            while (consMatch.find()) {
                String cons = consMatch.group();
                //  Search.count++;
                //   System.out.println(""constructor="" + cons);
                String constructor = new GrepContent().findBetweenBraces(consMatch.start(), classContent);
                String ConsName = consMatch.group().replaceAll(""\\{"", """").replaceAll(""[\r\n]+"", "" "").trim();
                linenumber = new GrepContent().getLineNumber(ConsName, path, linenumber);
                String processFilename = consMatch.group(1) + ""-"" + linenumber + ""-"" + filename;
                //    System.out.println(""pro=="" + processFilename);
                if (linenumber != 0) {
                    new ProcessSearchFile().processMethod(processFilename, constructor, path, processfilePath);
                }

            }
        }
    }
}",0
"package searching;

import IO.Filewriter;
import code_clone.Porter_stemmer;
import code_clone.PreProcessing;
import console.Command;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class ProcessSearchFile {

    public void processMethod(String filename, String fileContent, String filepath, String processfilePath) throws IOException {
        String currentpath = Command.currentPath;
        String current = currentpath.replaceAll(""\\\\"", ""-"").replace("":"", """");//location of current file
        String stemWord = """";
        PreProcessing ob = new PreProcessing();
        String removePuncuation = ob.removePunctuation(fileContent);
        String methodWithoutKey = ob.removeKeyword(removePuncuation);
        String methodWithoutSpace = ob.removeSpace(methodWithoutKey);
        String breakWork = breakWord(methodWithoutSpace);
        Porter_stemmer stemmer = new Porter_stemmer();
        String[] words = breakWork.split("" "");
        for (String word : words) {
            String stem = stemmer.stemWord(word);
            stemWord = stemWord + "" "" + stem;
        }
        Filewriter writer = new Filewriter(); //fileWriter class objeect
        writer.createProcessFile(filename, stemWord.trim(), processfilePath);
    }

    public String queryProcess(String query) throws IOException {
        String stemWord = """";
        PreProcessing ob = new PreProcessing();
        String removePuncuation = ob.removePunctuation(query);
        String methodWithoutKey = ob.removeKeyword(removePuncuation);
        String methodWithoutSpace = ob.removeSpace(methodWithoutKey);
        String breakWork = breakWord(methodWithoutSpace);
        Porter_stemmer stemmer = new Porter_stemmer();
        String[] words = breakWork.split("" "");
        for (String word : words) {
            String stem = stemmer.stemWord(word);
            stemWord = stemWord + "" "" + stem;
        }

        return stemWord;
    }

    public String breakWord(String fileAsString) throws FileNotFoundException, IOException {
        String[] splitString = fileAsString.split("" "");
        String methods = """";
        String allmethod = """";
        //String s = ""BByTTheWay"";
        Pattern p = Pattern.compile(""\\p{Lu}\\p{Ll}*"");
        for (int i = 0; i < splitString.length; i++) {
            String nonbreak = """";
            String lower = splitString[i].toLowerCase();
            if (!splitString[i].equals(lower) && splitString[i].length()!=1 ) {
                methods = Arrays.stream(splitString[i].split(""(?=\\p{Lu})""))
                        .collect(Collectors.joining("" "")) + "" "" + splitString[i];
                allmethod = allmethod + "" "" + methods;
            } else {
                allmethod = allmethod + "" "" + splitString[i];
            }

        }
        return allmethod;
    }

}",0
"package searching;

import code_clone.CosineSimilarity;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import static searching.TfIdfCalculate.queryTfIdfVector;

public class Similarity {

    public static HashMap<String, Double> SortDescending = new HashMap<>();

    public void getCosine() {

        double similarity = 0;
        for (int i = 0; i < Search.ProjectFileName.size(); i++) {
            int count = 0;
            double[] similar;
            similar = new double[TfIdfCalculate.queryTfIdfVector.size()];

            for (int j = 0; j < queryTfIdfVector.size(); j++) {
                similarity = new CosineSimilarity().cosineSimilarity(TfIdfCalculate.tfidfvectorProject.get(i), TfIdfCalculate.queryTfIdfVector.get(j));
               BigDecimal bd = new BigDecimal(similarity).setScale(2, RoundingMode.HALF_UP);
                double getSimilar = bd.doubleValue();
                
//  System.out.println(Search.ProjectFileName.get(i) + ""="" + similarity);
                if (getSimilar > 0) {
                    SortDescending.put(Search.ProjectFileName.get(i), getSimilar);

                }

            }

        }
    }

    public void getResult() {
        if(SortDescending.isEmpty()){
            System.out.println(""\tSearch query not found"");
        }
        LinkedHashMap<String, Double> reverseSorted = new LinkedHashMap<>();
        SortDescending.entrySet()
                .stream()
                .sorted(HashMap.Entry.comparingByValue(Comparator.reverseOrder()))
                .forEachOrdered(x -> reverseSorted.put(x.getKey(), x.getValue()));

        //System.out.println("""");
        // System.out.println("""");
        for (Map.Entry<String, Double> pair : reverseSorted.entrySet()) {

            System.out.println(pair.getKey() + "" "" + pair.getValue()+""%"");
        }
        SortDescending.clear();

    }

}",0
"package ChemistryCalculator.backend;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Compound {
    private final String compound;
    private final CompoundManager compoundManager;
    private ArrayList<HashMap<String, String>> percentageOfCompletion;
    private Double molarMass;

    public Compound(String compound) {
        this.compound = compound;
        this.compoundManager = new CompoundManager(compound);
    }

    // total mass of a compound.Example => H2O
    // MolarMass = (1.00794*2)+ 15.9994
    private void calculateMolarMass() {
        double sum = 0;
        for (Map.Entry<Atom, Integer> entry : compoundManager.getAtomList().entrySet()) {
            Atom atom = entry.getKey();
            Integer v = entry.getValue();
            int totalAtoms = compoundManager.getElementMatrix().get(0).get(v);
            double atomicMass = (double) totalAtoms * atom.getAtomicMass();
            sum += atomicMass;

        }
        this.molarMass = sum;

    }

    //percentage of every atom present in the compound. Based on - mass
    //Example => H2O
    //mass of H => (1.00794*2)
    //mass of O => (15.9994)
    //percentage of H in H2O => (1.00794*2)/molar mass of H2O *100
    //percentage of O in H2O => (15.9994)/molar mass of H2O *100

    private void calculatePercentageOfCompletion() {
        int totalElements = compoundManager.getAtomList().entrySet().size();
        percentageOfCompletion = new ArrayList<>(totalElements);
        for (Map.Entry<Atom, Integer> entry : compoundManager.getAtomList().entrySet()) {
            HashMap<String, String> elementDetails = new HashMap<>();

            Atom atom = entry.getKey();
            Integer v = entry.getValue();
            int totalAtoms = compoundManager.getElementMatrix().get(0).get(v);
            double atomicMass = (double) totalAtoms * atom.getAtomicMass();
            elementDetails.put(""symbol"", atom.getSymbol());
            elementDetails.put(""name"", atom.getName());
            elementDetails.put(""atomicMass"", String.valueOf(atomicMass));
            elementDetails.put(""totalAtoms"", String.valueOf(totalAtoms));

            percentageOfCompletion.add(elementDetails);

        }
        for (HashMap<String, String> element : percentageOfCompletion) {
            double massPercent = (Double.parseDouble(element.get(""atomicMass"")) / this.getMolarMass()) * 100;
            element.put(""massPercent"", String.valueOf(massPercent));
        }

    }


    public ArrayList<HashMap<String, String>> getPercentageOfCompletion() {
        if (percentageOfCompletion == null) {
            this.calculatePercentageOfCompletion();
        }
        return percentageOfCompletion;
    }

    public String getCompound() {
        return compound;
    }

    public double getMolarMass() {
        if (molarMass == null) {
            this.calculateMolarMass();
        }
        return molarMass;
    }
    public Atom[] getAtomList(){
        return compoundManager.getAtomList().keySet().toArray(new Atom[0]);
    }

}",0
"package ChemistryCalculator.backend;

public class Concentration {
    private final Compound compound;
    //gm unit
    private final double givenCompoundMass;
    //ml unit for molarity || gm unit for molality
    private final double volumeOfSolution;

    public Concentration(Compound compound, double givenCompoundMass, double volumeOfSolution) {
        this.compound = compound;
        this.givenCompoundMass = givenCompoundMass;
        this.volumeOfSolution = volumeOfSolution;
    }


    public double getMolarity() {
        return (1000 * givenCompoundMass) / (compound.getMolarMass() * volumeOfSolution);
    }


    public double getMolality() {
        double massOfSolvent = volumeOfSolution - givenCompoundMass;
        return (givenCompoundMass * 1000) / (compound.getMolarMass() * massOfSolvent);
    }

    public double geNormality(double equivalentNumber) {
        return getMolarity() * equivalentNumber;
    }
}",0
"package ChemistryCalculator.backend;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

public class Converter {
    private static final HashMap<String, HashMap<String, Double>> FACTOR_MAP
            = new HashMap<>();


    //registering Factor
    static {
        registerFactor(""molars"", ""decimolars"", 10);
        registerFactor(""molars"", ""centimolars"", 100);
        registerFactor(""molars"", ""millimolars"", 1000);
        registerFactor(""molars"", ""micromolars"", 1000000);
        registerFactor(""molars"", ""nanomolars"", 1000000000);

        registerFactor(""liters"", ""deciliters"", 10);
        registerFactor(""liters"", ""centiliters"", 100);
        registerFactor(""liters"", ""milliliters"", 1000);

        registerFactor(""liters"", ""cubic_decimeters"", 1);
        registerFactor(""liters"", ""cubic_millimeters"", 1000000);
        registerFactor(""liters"", ""cubic_centimeters"", 1000);

        registerFactor(""kilogram"", ""gram"", 1000);
        registerFactor(""kilogram"", ""milligram"", 1000000);
        registerFactor(""kilogram"", ""pound"", 2.205);
    }

    public static double convert(String from, String to, double value) {
        ArrayList<Step> stack = new ArrayList<>();
        HashSet<String> removedItem = new HashSet<>();
        stack.add(new Step(from, value));
        while (!stack.isEmpty()) {
            Step step = stack.remove(0);
            double stepValue = step.value;
            String stepUnit = step.unit;
            removedItem.add(stepUnit);
            if (stepUnit.equals(to)) {
                return stepValue;
            }
            HashMap<String, Double> map = FACTOR_MAP.get(stepUnit);
            if (map != null) {
                map.entrySet().stream().filter(entry -> !removedItem.contains(entry.getKey()))
                        .map(entry -> new Step(entry.getKey(), stepValue * entry.getValue()))
                        .forEach(stack::add);
            }


        }
        //if factors are not registered
        throw new IllegalArgumentException(""Cannot not convert from "" + from
                + "" to "" + to);
    }

    public static void registerFactor(String from, String to, double factor) {
        putFactor(from, to, factor);
        putFactor(to, from, 1.0 / factor);
    }

    private static void putFactor(String from, String to, double factor) {
        HashMap<String, Double> map = FACTOR_MAP.computeIfAbsent(from, k -> new HashMap<>());
        map.put(to, factor);
    }

    private static class Step {
        private final String unit;
        private final double value;

        Step(String unit, double value) {
            this.unit = unit;
            this.value = value;
        }
    }

}",0
"package ChemistryCalculator.backend;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.util.HashMap;


public class Database {
    private HashMap<String, String[]> allAtoms;

    public Database() {

        try {
            InputStream fileInputStream = getClass().getResourceAsStream(""/ChemistryCalculator/database/database.ser"");
            ObjectInputStream objectinputStream = new ObjectInputStream(fileInputStream);
            this.allAtoms = (HashMap<String, String[]>) objectinputStream.readObject();

        } catch (IOException | ClassNotFoundException e) {
            System.out.printf(""Database Error ! %s%n"", e.getMessage());
        }
    }

    public HashMap<String, String[]> getAllAtoms() {
        return allAtoms;
    }
}",0
"package ChemistryCalculator.backend;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.HashMap;


//execute this class if database/database.ser is corrupted or want to change/add new atoms. this will create a new one.
public class DatabaseSerializer {
    public static void main(String[] args) throws IOException {

        HashMap<String, String[]> hashMap = new HashMap<>();
        hashMap.put(""H"", new String[]{""1"", ""Hydrogen"", ""1.00794""});
        hashMap.put(""He"", new String[]{""2"", ""Helium"", ""4.002602""});
        hashMap.put(""Li"", new String[]{""3"", ""Lithium"", ""6.941""});
        hashMap.put(""Be"", new String[]{""4"", ""Beryllium"", ""9.012182""});
        hashMap.put(""B"", new String[]{""5"", ""Boron"", ""10.811""});
        hashMap.put(""C"", new String[]{""6"", ""Carbon"", ""12.0107""});
        hashMap.put(""N"", new String[]{""7"", ""Nitrogen"", ""14.0067""});
        hashMap.put(""O"", new String[]{""8"", ""Oxygen"", ""15.9994""});
        hashMap.put(""F"", new String[]{""9"", ""Fluorine"", ""18.9984032""});
        hashMap.put(""Ne"", new String[]{""10"", ""Neon"", ""20.1797""});
        hashMap.put(""Na"", new String[]{""11"", ""Sodium"", ""22.989769""});

        hashMap.put(""Mg"", new String[]{""12"", ""Magnesium"", ""24.305""});
        hashMap.put(""Al"", new String[]{""13"", ""Aluminium"", ""26.981538""});
        hashMap.put(""Si"", new String[]{""14"", ""Silicon"", ""28.0855""});
        hashMap.put(""P"", new String[]{""15"", ""Phosphorus"", ""30.973762""});
        hashMap.put(""S"", new String[]{""16"", ""Sulphur"", ""32.065""});
        hashMap.put(""Cl"", new String[]{""17"", ""Chlorine"", ""35.453""});
        hashMap.put(""Ar"", new String[]{""18"", ""Argon"", ""39.948""});
        hashMap.put(""K"", new String[]{""19"", ""Potassium"", ""39.0983""});
        hashMap.put(""Ca"", new String[]{""20"", ""Calcium"", ""40.078""});
        hashMap.put(""Sc"", new String[]{""21"", ""Scandium"", ""44.955912""});

        hashMap.put(""Ti"", new String[]{""22"", ""Titanium"", ""47.867""});
        hashMap.put(""V"", new String[]{""23"", ""Vanadium"", ""50.9415""});
        hashMap.put(""Cr"", new String[]{""24"", ""Chromium"", ""51.9961""});
        hashMap.put(""Mn"", new String[]{""25"", ""Manganese"", ""54.938049""});
        hashMap.put(""Fe"", new String[]{""26"", ""Iron"", ""55.845""});
        hashMap.put(""Co"", new String[]{""27"", ""Cobalt"", ""58.9332""});
        hashMap.put(""Ni"", new String[]{""28"", ""Nickel"", ""58.6934""});
        hashMap.put(""Cu"", new String[]{""29"", ""Copper"", ""63.546""});
        hashMap.put(""Zn"", new String[]{""30"", ""Zinc"", ""65.409""});
        hashMap.put(""Ga"", new String[]{""31"", ""Gallium"", ""69.723""});

        hashMap.put(""Ge"", new String[]{""32"", ""Germanium"", ""72.64""});
        hashMap.put(""As"", new String[]{""33"", ""Arsenic"", ""74.9216""});
        hashMap.put(""Se"", new String[]{""34"", ""Selenium"", ""78.96""});
        hashMap.put(""Br"", new String[]{""35"", ""Bromine"", ""79.904""});
        hashMap.put(""Kr"", new String[]{""36"", ""Krypton"", ""83.798""});
        hashMap.put(""Rb"", new String[]{""37"", ""Rubidium"", ""85.4678""});
        hashMap.put(""Sr"", new String[]{""38"", ""Strontium"", ""87.62""});
        hashMap.put(""Y"", new String[]{""39"", ""Yttrium"", ""88.90585""});
        hashMap.put(""Zr"", new String[]{""40"", ""Zirconium"", ""91.224""});
        hashMap.put(""Nb"", new String[]{""41"", ""Niobium"", ""92.90638""});

        hashMap.put(""Mo"", new String[]{""42"", ""Molybdenum"", ""95.94""});
        hashMap.put(""Tc"", new String[]{""43"", ""Technetium"", ""97.9072""});
        hashMap.put(""Ru"", new String[]{""44"", ""Ruthenium"", ""101.07""});
        hashMap.put(""Rh"", new String[]{""45"", ""Rhodium"", ""102.9055""});
        hashMap.put(""Pd"", new String[]{""46"", ""Palladium"", ""106.42""});
        hashMap.put(""Ag"", new String[]{""47"", ""Silver"", ""107.8682""});
        hashMap.put(""Cd"", new String[]{""48"", ""Cadmium"", ""112.411""});
        hashMap.put(""In"", new String[]{""49"", ""Indium"", ""114.818""});
        hashMap.put(""Sn"", new String[]{""50"", ""Tin"", ""118.71""});
        hashMap.put(""Sb"", new String[]{""51"", ""Antimony"", ""121.76""});

        hashMap.put(""Te"", new String[]{""52"", ""Tellurium"", ""127.6""});
        hashMap.put(""I"", new String[]{""53"", ""Iodine"", ""126.90447""});
        hashMap.put(""Xe"", new String[]{""54"", ""Xenon"", ""131.293""});
        hashMap.put(""Cs"", new String[]{""55"", ""Caesium"", ""132.90545""});
        hashMap.put(""Ba"", new String[]{""56"", ""Barium"", ""137.327""});
        hashMap.put(""La"", new String[]{""57"", ""Lanthanum"", ""138.9055""});
        hashMap.put(""Ce"", new String[]{""58"", ""Cerium"", ""140.116""});
        hashMap.put(""Pr"", new String[]{""59"", ""Praseodymium"", ""140.90765""});
        hashMap.put(""Nd"", new String[]{""60"", ""Neodymium"", ""144.24""});
        hashMap.put(""Pm"", new String[]{""61"", ""Promethium"", ""144.9127""});

        hashMap.put(""Sm"", new String[]{""62"", ""Samarium"", ""150.36""});
        hashMap.put(""Eu"", new String[]{""63"", ""Europium"", ""151.964""});
        hashMap.put(""Gd"", new String[]{""64"", ""Gadolinium"", ""157.25""});
        hashMap.put(""Tb"", new String[]{""65"", ""Terbium"", ""158.92534""});
        hashMap.put(""Dy"", new String[]{""66"", ""Dysprosium"", ""162.5""});
        hashMap.put(""Ho"", new String[]{""67"", ""Holmium"", ""164.93032""});
        hashMap.put(""Er"", new String[]{""68"", ""Erbium"", ""167.259""});
        hashMap.put(""Tm"", new String[]{""69"", ""Thulium"", ""168.93421""});
        hashMap.put(""Yb"", new String[]{""70"", ""Ytterbium"", ""173.04""});
        hashMap.put(""Lu"", new String[]{""71"", ""Lutetium"", ""174.967""});

        hashMap.put(""Hf"", new String[]{""72"", ""Hafnium"", ""178.49""});
        hashMap.put(""Ta"", new String[]{""73"", ""Tantalum"", ""180.9479""});
        hashMap.put(""W"", new String[]{""74"", ""Tungsten"", ""183.84""});
        hashMap.put(""Re"", new String[]{""75"", ""Rhenium"", ""186.207""});
        hashMap.put(""Os"", new String[]{""76"", ""Osmium"", ""190.23""});
        hashMap.put(""Ir"", new String[]{""77"", ""Iridium"", ""192.217""});
        hashMap.put(""Pt"", new String[]{""78"", ""Platinum"", ""195.078""});
        hashMap.put(""Au"", new String[]{""79"", ""Gold"", ""196.96655""});
        hashMap.put(""Hg"", new String[]{""80"", ""Mercury"", ""200.59""});
        hashMap.put(""Tl"", new String[]{""81"", ""Thallium"", ""204.3833""});

        hashMap.put(""Pb"", new String[]{""82"", ""Lead"", ""207.2""});
        hashMap.put(""Bi"", new String[]{""83"", ""Bismuth"", ""208.98038""});
        hashMap.put(""Po"", new String[]{""84"", ""Polonium"", ""208.9824""});
        hashMap.put(""At"", new String[]{""85"", ""Astatine"", ""209.9871""});
        hashMap.put(""Rn"", new String[]{""86"", ""Radon"", ""222.0176""});
        hashMap.put(""Fr"", new String[]{""87"", ""Francium"", ""223.0197""});
        hashMap.put(""Ra"", new String[]{""88"", ""Radium"", ""226.0254""});
        hashMap.put(""Ac"", new String[]{""89"", ""Actinium"", ""227.0277""});
        hashMap.put(""Th"", new String[]{""90"", ""Thorium"", ""232.03806""});
        hashMap.put(""Pa"", new String[]{""91"", ""Protactinium"", ""231.03588""});

        hashMap.put(""U"", new String[]{""92"", ""Uranium"", ""238.02891""});
        hashMap.put(""Np"", new String[]{""93"", ""Neptunium"", ""237.0482""});
        hashMap.put(""Pu"", new String[]{""94"", ""Plutonium"", ""244.0642""});
        hashMap.put(""Am"", new String[]{""95"", ""Americium"", ""243.0614""});
        hashMap.put(""Cm"", new String[]{""96"", ""Curium"", ""247.0704""});
        hashMap.put(""Bk"", new String[]{""97"", ""Berkelium"", ""247.0703""});
        hashMap.put(""Cf"", new String[]{""98"", ""Californium"", ""251.0796""});
        hashMap.put(""Es"", new String[]{""99"", ""Einsteinium"", ""252.0830""});
        hashMap.put(""Fm"", new String[]{""100"", ""Fermium"", ""257.0951""});
        hashMap.put(""Md"", new String[]{""101"", ""Mendelevium"", ""258.0984""});

        hashMap.put(""No"", new String[]{""102"", ""Nobelium"", ""259.1010""});
        hashMap.put(""Lr"", new String[]{""103"", ""Lawrencium"", ""262.1097""});
        hashMap.put(""Rf"", new String[]{""105"", ""Rutherfordium"", ""261.1088""});
        hashMap.put(""Db"", new String[]{""105"", ""Dubnium"", ""262.1141""});
        hashMap.put(""Sg"", new String[]{""106"", ""Seaborgium"", ""266.1219""});
        hashMap.put(""Bh"", new String[]{""107"", ""Bohrium"", ""264.12""});
        hashMap.put(""Hs"", new String[]{""108"", ""Hassium"", ""277.0""});
        hashMap.put(""Mt"", new String[]{""109"", ""Meitnerium"", ""268.1388""});
        hashMap.put(""Ds"", new String[]{""110"", ""Darmstadtium"", ""271.0""});
        hashMap.put(""Rg"", new String[]{""111"", ""Roentgenium"", ""272.0""});

        hashMap.put(""Cn"", new String[]{""112"", ""Copernicium"", ""285.0""});
        hashMap.put(""Nh"", new String[]{""113"", ""Nihonium"", ""284.0""});
        hashMap.put(""Fi"", new String[]{""114"", ""Flerovium"", ""285.0""});
        hashMap.put(""Mc"", new String[]{""115"", ""Moscovium"", ""288.0""});
        hashMap.put(""Lv"", new String[]{""116"", ""Livermorium"", ""292.0""});
        hashMap.put(""Ts"", new String[]{""117"", ""Tennessine"", ""294.211""});
        hashMap.put(""Og"", new String[]{""118"", ""Oganesson"", ""294.0""});


        //this path will vary for project location.
        FileOutputStream fileOutputStream = new FileOutputStream(""C:/Users/HP/Desktop/ChemCal/src/ChemistryCalculator/database/databases.ser"");
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
        objectOutputStream.writeObject(hashMap);


//########## printing all element from database.ser##############
//        FileInputStream fileInputStream = new FileInputStream(""atom.ser"");
//        ObjectInputStream objectinputStream = new ObjectInputStream(fileInputStream);
//        HashMap<String, String[]> out = (HashMap<String, String[]>) objectinputStream.readObject();
//
//        out.forEach((k, v)-> System.out.println(k + Arrays.toString(v)));
    }

}",0
"package ChemistryCalculator.backend;


public class EquationBalancer {
    private final String reactants;
    private final String products;

    public EquationBalancer(String reactants, String products) {
        this.reactants = reactants;
        this.products = products;
    }

    public String balance() {
        String balancedEquation;
        //removing all whitespace
        String[] reactants = this.reactants.replaceAll(""\\s+"", """").split(""\\+"");
        String[] products = this.products.replaceAll(""\\s+"", """").split(""\\+"");

        CompoundManager manager = new CompoundManager(reactants[0]);
        for (int i = 1; i < reactants.length; i++) {
            manager.append(reactants[i], i, 1);
        }

        //products should be inputted as negative numbers into our matrix.
        for (int i = 0; i < products.length; i++) {
            manager.append(products[i], i + reactants.length, -1);
        }


        //mapping  ArrayList<ArrayList<Integer>> to int[][] as Matrix class takes int[][].
        int[][] elementsMatrix = manager.getElementMatrix().stream().map(u -> u.stream().mapToInt(i -> i).toArray()).toArray(int[][]::new);

        Matrix matrix = new Matrix(elementsMatrix);
        Fraction[] nullSpace = matrix.transpose().nullSpace();
        if (nullSpace != null) {
            long[] balancedCoefficient = Fraction.normalize(nullSpace);

            StringBuilder result = new StringBuilder();
            for (int i = 0; i < reactants.length; i++) {
                if (i == reactants.length - 1) {
                    if (balancedCoefficient[i] == 1) {
                        result.append(reactants[i]).append("" "");
                    } else {
                        result.append(balancedCoefficient[i]).append(reactants[i]).append("" "");
                    }
                } else {
                    if (balancedCoefficient[i] == 1) {
                        result.append(reactants[i]).append("" + "");
                    } else {
                        result.append(balancedCoefficient[i]).append(reactants[i]).append("" + "");
                    }
                }

            }

            result.append(""= "");


            for (int i = 0; i < products.length; i++) {
                if (i == products.length - 1) {
                    if (balancedCoefficient[i + reactants.length] == 1) {
                        result.append(products[i]).append("" "");
                    } else {
                        result.append(balancedCoefficient[i + reactants.length]).append(products[i]).append("" "");
                    }
                } else {
                    if (balancedCoefficient[i + reactants.length] == 1) {
                        result.append(products[i]).append("" + "");
                    } else {
                        result.append(balancedCoefficient[i + reactants.length]).append(products[i]).append("" + "");
                    }
                }

            }
            balancedEquation = result.toString();


        } else {
            throw new InvalidEquationException(""Error ! given equation is not vaild"");
        }

        return balancedEquation;
    }
}",0
"package ChemistryCalculator.backend;

public class Fraction {

    private int numerator;
    private int denominator;

    public Fraction(int numerator, int denominator) {
        this.numerator = numerator;
        this.denominator = denominator;
        reduce();
    }

    public Fraction(int numr) {
        numerator = numr;
        denominator = 1;
        reduce();
    }

    public int getNumerator() {
        return numerator;
    }

    public void setNumerator(int numerator) {
        this.numerator = numerator;
    }

    public int getDenominator() {
        return denominator;
    }

    public void setDenominator(int denominator) {
        this.denominator = denominator;
    }

    //computing the greatest common divisor.Example => (3 , 6)  == 3
    public int getGCD(int a, int b) {
        if (a < 0) {
            a = -a;
        }
        if (b < 0) {
            b = -b;
        }
        while (b != 0) {
            a %= b;
            if (a == 0) {
                return b;
            }
            b %= a;
        }
        return a;
    }

    //Example => 3/6  == 1/3
    private void reduce() {
        int gcd = getGCD(numerator, denominator);
        numerator /= gcd;
        denominator /= gcd;
    }

    public Fraction add(Fraction fractionTwo) {
        int newNumerator = (numerator * fractionTwo.getDenominator())
                + (fractionTwo.getNumerator() * denominator);
        int newDenominator = denominator * fractionTwo.getDenominator();
        return new Fraction(newNumerator, newDenominator);
    }

    public Fraction subtract(Fraction fractionTwo) {
        int newNumerator = (numerator * fractionTwo.denominator)
                - (fractionTwo.numerator * denominator);
        int newDenominator = denominator * fractionTwo.denominator;
        return new Fraction(newNumerator, newDenominator);
    }

    public Fraction multiply(Fraction fractionTwo) {
        int newNumerator = numerator * fractionTwo.numerator;
        int newDenominator = denominator * fractionTwo.denominator;
        return new Fraction(newNumerator, newDenominator);
    }

    public Fraction divide(Fraction fractionTwo) {
        int newNumerator = numerator * fractionTwo.getDenominator();
        int newDenominator = denominator * fractionTwo.numerator;
        return new Fraction(newNumerator, newDenominator);
    }

    public boolean isAbsGreaterThan(Fraction fractionTwo) {

        double first = Math.abs((double)this.getNumerator() / (double)this.getDenominator());
        double second = Math.abs((double)fractionTwo.getNumerator() / (double)fractionTwo.getDenominator());
        return first > second;

    }

    public boolean isZero() {
        return this.getNumerator() == 0;
    }


    public boolean equals(Fraction fractionTwo) {
        return (this.numerator == fractionTwo.numerator && this.denominator == fractionTwo.denominator) ||
                (this.numerator == -fractionTwo.numerator && this.denominator == -fractionTwo.denominator);

    }

    //computing the lowest common multiple. Example => (3, 4, 1, 2) == 12
    public static long getLCM(long[] a) {
        long lcm = 0, max;
        boolean found;
        if (a.length != 0) {

            max = a[0];
            for (long l : a) {
                if (l > max) {
                    max = l;
                }
            }
            for (long i = max;; i += max) {
                found = true;
                for (long l : a) {
                    if (i % l != 0) {
                        found = false;
                        break;
                    }
                }
                if (found) {
                    lcm = i;
                    break;
                }
            }
        }
        return lcm;
    }

    //Example => (1/3, 1/4, 1, 3) == (4, 3, 12, 36)
    public static long[] normalize(Fraction[] fraction) {
        long[] result = new long[fraction.length];

        long[] denominator = new long[fraction.length];
        for (int i = 0; i < fraction.length; i++) {

            denominator[i] = fraction[i].getDenominator();

        }
        long lcm = getLCM(denominator);
        for (int i = 0; i < result.length; i++) {
            if (fraction[i].getDenominator() != 0) {
                result[i] = (lcm / fraction[i].getDenominator()) * fraction[i].getNumerator();
            }

        }

        return result;

    }

    @Override
    public String toString() {

        return this.denominator == 1 ? Integer.toString(this.numerator) : this.numerator + ""/"" + this.denominator;
    }

}",0
"package ChemistryCalculator.backend;

import javax.swing.filechooser.FileSystemView;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public interface History {
    default void add(String line) throws FileNotFoundException {


        String PATH = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + File.separator;
        String directoryName = PATH.concat(""Chemistry Calculator"");
        String txtFile = ""history.txt"";

        File directory = new File(directoryName);
        if (!directory.exists()){
            directory.mkdir();
        }

        File history = new File(directoryName,txtFile);

        PrintWriter writer;
        if (history.exists() && !history.isDirectory()) {
            writer = new PrintWriter(new FileOutputStream(new File(directoryName, txtFile), true));
        } else {
            writer = new PrintWriter(history);
        }

        //adding date & time
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(""HH:mm:ss, dd/MM/yyyy"");
        LocalDateTime now = LocalDateTime.now();

        line = line.concat(""    ["" + dateTimeFormatter.format(now) +""]"");


        writer.println(line);
        writer.flush();
        writer.close();
    }
}",0
"package ChemistryCalculator.backend;

import java.util.Arrays;

public class Matrix {

    private final Fraction[][] matrix;
    private Fraction[] nullSpaces = null;

    public Matrix(Fraction[][] matrix) {
        this.matrix = matrix;
    }

    public Matrix(int[][] matrix) {
        this.matrix = intToFraction(matrix);
    }

    int getHeight() {
        return matrix.length;
    }

    int getWidth() {
        return matrix[0].length;
    }

    private Fraction[][] intToFraction(int[][] matrix) {
        Fraction[][] newMatrix = new Fraction[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                newMatrix[i][j] = new Fraction(matrix[i][j]);
            }

        }
        return newMatrix;
    }


    //Transforming a matrix into Row Echelon Form using Gaussian elimination method
    //A rectangular matrix is in row echelon form if it has the following three properties:
    //All nonzero rows are above any rows of all zeros
    //Each leading entry of a row is in a column to the right of the leading entry of the row above it
    //All entries of a column below a leading entry are zeros

    //This matrix is in row echelon form:
    //    1   0   3   3
    //    0   1   0   4
    //    0   0   0   1

    //more info => https://en.wikipedia.org/wiki/Gaussian_elimination#Echelon_form

    public Matrix gaussianElimination() {
        int i = 0;
        int j = 0;

        while (i < matrix.length && j < matrix[0].length) {

            int pivot = i;
            for (int k = i + 1; k < matrix.length; k++) {
                if (matrix[k][j].isAbsGreaterThan(matrix[pivot][j])) {
                    pivot = k;
                }
            }

            if (!matrix[pivot][j].isZero()) {
                Fraction[] temp = matrix[i];
                matrix[i] = matrix[pivot];
                matrix[pivot] = temp;

                Fraction div = matrix[i][j];

                for (int idx = 0; idx < matrix[0].length; idx++) {
                    matrix[i][idx] = matrix[i][idx].divide(div);

                }

                for (int u = i + 1; u < matrix.length; u++) {
                    Fraction mult = matrix[u][j];
                    if (!mult.isZero()) {
                        for (int l = 0; l < matrix[0].length; l++) {
                            matrix[u][l] = matrix[u][l].subtract(mult.multiply(matrix[i][l]));

                        }
                    }
                }
            }
            j++;
            i++;
        }

        return new Matrix(matrix);
    }

    //back Substitution is the process of solving a linear system of equations that has been transformed into row-echelon form or reduced row-echelon form
    //The last equation is solved first, then the next-to-last, etc.

    private void backSubstitute(int n, Matrix echelonForm) {

        for (int i = n - 1; i >= 0; i--) {
            Fraction sum = new Fraction(0);
            for (int j = i + 1; j < echelonForm.getWidth(); j++) {
                sum = sum.add(echelonForm.matrix[i][j].multiply(echelonForm.nullSpaces[j]));
            }
            echelonForm.nullSpaces[i] = sum.multiply(new Fraction(-1));

        }
    }

    //In mathematics, more specifically in linear algebra and functional analysis, the kernel of a linear mapping,
    //also known as the null space or nullspace, is the set of vectors in the domain of the mapping which are mapped to the zero vector.

    //But this function returns only one set of vector which is enough for Chemical Equation Balancing.
    //Invalid Chemical Equation has no nullSpace

    public Fraction[] nullSpace() {
        Matrix echelonFormed = gaussianElimination();

        if (echelonFormed.getHeight() > echelonFormed.getWidth()) {
            for (int k = 0; k < echelonFormed.getWidth(); k++) {
                if (k == echelonFormed.getWidth() - 1 && echelonFormed.matrix[k][k].equals(new Fraction(1))) {
                  // ""Has No Null Space""
                    break;
                }

                if (echelonFormed.matrix[k][k].isZero()) {
                    echelonFormed.nullSpaces = new Fraction[echelonFormed.getWidth()];
                    Arrays.fill(echelonFormed.nullSpaces, k, echelonFormed.getWidth(), new Fraction(1));
                    backSubstitute(k, echelonFormed);
                    break;
                }

            }

        } else if (echelonFormed.getHeight() < echelonFormed.getWidth()) {
            for (int k = 0; k < echelonFormed.getHeight(); k++) {
                if (k == echelonFormed.getHeight() - 1 && echelonFormed.matrix[k][k].equals(new Fraction(1))) {
                    echelonFormed.nullSpaces = new Fraction[echelonFormed.getWidth()];
                    Arrays.fill(echelonFormed.nullSpaces, k + 1, echelonFormed.getWidth(), new Fraction(1));
                    backSubstitute(k + 1, echelonFormed);
                    break;
                }

                if (echelonFormed.matrix[k][k].isZero()) {
                    echelonFormed.nullSpaces = new Fraction[echelonFormed.getWidth()];
                    Arrays.fill(echelonFormed.nullSpaces, k, echelonFormed.getWidth(), new Fraction(1));
                    backSubstitute(k, echelonFormed);
                    break;
                }
            }

        } else {
            for (int k = 0; k < echelonFormed.getHeight(); k++) {
                if (echelonFormed.matrix[k][k].isZero()) {
                    echelonFormed.nullSpaces = new Fraction[echelonFormed.getWidth()];
                    Arrays.fill(echelonFormed.nullSpaces, k, echelonFormed.getWidth(), new Fraction(1));
                    backSubstitute(k, echelonFormed);
                    break;
                } else if (k == echelonFormed.getHeight() - 1 && echelonFormed.matrix[k][k].equals(new Fraction(1))) {
                   //""Has No NullSpace""
                    break;
                }
            }

        }
        return echelonFormed.nullSpaces;

    }

    public Matrix transpose() {
        Fraction[][] transposedMatrix = new Fraction[matrix[0].length][matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                transposedMatrix[j][i] = matrix[i][j];
            }
        }

        return new Matrix(transposedMatrix);
    }

    @Override
    public String toString() {
        return ""Matrix{"" + ""matrix="" + Arrays.deepToString(matrix) + '}';
    }

}",0
"package ChemistryCalculator.frontend;

import ChemistryCalculator.backend.Compound;
import ChemistryCalculator.backend.Concentration;
import ChemistryCalculator.backend.Converter;
import ChemistryCalculator.backend.InvalidAtomException;

import javax.swing.*;
import java.awt.*;

public class ConcentrationPanel extends JPanel {
    private static final Font SEGOE_UI = new Font(""Segoe UI"", 1, 14);
    private static final Color MAIN_COLOR = new Color(64, 43, 100);
    private static final Color MAIN_COLOR_LITE = new Color(85, 65, 118);
    private static final Color GRAY = new Color(204, 204, 204);


    private final JPanel errorMessagePanel = new JPanel();
    private final JLabel errorMessageLabel = new JLabel();

    private final JLabel labelForCompoundTextfield = new JLabel();
    private final JTextField compoundTextfield = new JTextField();

    private final JLabel labelForMassTextfield = new JLabel();
    private final JTextField massTextfield = new JTextField();
    private final JComboBox<String> massUnitComboBox = new JComboBox<>();

    private final JLabel labelForVolumeTextfield = new JLabel();
    private final JTextField volumeTextfield = new JTextField();
    private final JComboBox<String> volumeUnitComboBox = new JComboBox<>();

    private final JLabel labelForEquivalentNumTextfield = new JLabel();
    private final JTextField equivalentNumTextfield = new JTextField();

    private final JButton getConcentrationButton = new JButton();
    private final JButton clearButton = new JButton();

    private final JLabel formatLabel = new JLabel();
    private final JCheckBox molarityCheckBox = new JCheckBox();
    private final JCheckBox molalityCheckBox = new JCheckBox();
    private final JCheckBox normalityCheckBox = new JCheckBox();


    private final JPanel ansPanel = new JPanel();

    private final JLabel labelForNormalityAns = new JLabel();
    private final JLabel labelForMolalityAns = new JLabel();
    private final JLabel labelForMolarityAns = new JLabel();
    private final JLabel molalityAnsLabel = new JLabel();
    private final JLabel normalityAnsLabel = new JLabel();
    private final JLabel molarityAnsLabel = new JLabel();


    public ConcentrationPanel() {
        initComponent();
        setComponentLayout();
    }

    private void initComponent() {
        errorMessagePanel.setBackground(Color.red);
        errorMessagePanel.setVisible(false);

        errorMessageLabel.setFont(SEGOE_UI);
        errorMessageLabel.setForeground(Color.white);
        errorMessageLabel.setHorizontalAlignment(SwingConstants.CENTER);

        labelForCompoundTextfield.setFont(SEGOE_UI);
        labelForCompoundTextfield.setForeground(MAIN_COLOR);
        labelForCompoundTextfield.setText(""Compound  :"");

        labelForMassTextfield.setFont(SEGOE_UI);
        labelForMassTextfield.setForeground(MAIN_COLOR);
        labelForMassTextfield.setText(""Compound's mass  :"");

        massUnitComboBox.setFont(SEGOE_UI);
        massUnitComboBox.setForeground(MAIN_COLOR);
        massUnitComboBox.setModel(new DefaultComboBoxModel<>(
                new String[]{
                        ""kilogram"",
                        ""gram"",
                        ""milligram"",
                        ""pound"",
                }
        ));
        massUnitComboBox.setSelectedIndex(2);

        labelForVolumeTextfield.setFont(SEGOE_UI);
        labelForVolumeTextfield.setForeground(MAIN_COLOR);
        labelForVolumeTextfield.setText(""Volume of solution  :"");

        labelForEquivalentNumTextfield.setFont(SEGOE_UI);
        labelForEquivalentNumTextfield.setForeground(MAIN_COLOR);
        labelForEquivalentNumTextfield.setText(""Equivalent Number  :"");

        equivalentNumTextfield.setEnabled(false);

        volumeUnitComboBox.setFont(SEGOE_UI);
        volumeUnitComboBox.setForeground(MAIN_COLOR);
        volumeUnitComboBox.setModel(new DefaultComboBoxModel<>(
                new String[]{
                        ""deciliters"",
                        ""milliliters"",
                        ""centiliters"",
                        ""liters"",
                        ""cubic_decimeters"",
                        ""cubic_millimeters"",
                        ""cubic_centimeters"",
                }
        ));
        volumeUnitComboBox.setSelectedIndex(1);


        ansPanel.setBackground(MAIN_COLOR_LITE);
        ansPanel.setVisible(false);
        ansPanel.setBorder(BorderFactory.createEtchedBorder());

        labelForNormalityAns.setFont(SEGOE_UI);
        labelForNormalityAns.setForeground(GRAY);
        labelForNormalityAns.setText(""Normality  :"");

        labelForMolalityAns.setFont(SEGOE_UI);
        labelForMolalityAns.setForeground(GRAY);
        labelForMolalityAns.setText(""Molality   :"");

        labelForMolarityAns.setFont(SEGOE_UI);
        labelForMolarityAns.setForeground(GRAY);
        labelForMolarityAns.setText(""Molarity   :"");

        molalityAnsLabel.setFont(SEGOE_UI);
        molalityAnsLabel.setForeground(Color.white);
        molalityAnsLabel.setText(""4.5"");

        normalityAnsLabel.setFont(SEGOE_UI);
        normalityAnsLabel.setForeground(Color.white);
        normalityAnsLabel.setText(""5.5"");


        molarityAnsLabel.setFont(SEGOE_UI);
        molarityAnsLabel.setForeground(Color.white);
        molarityAnsLabel.setText(""3.5"");

        formatLabel.setFont(SEGOE_UI);
        formatLabel.setForeground(MAIN_COLOR);
        formatLabel.setText(""Check format  : "");

        molarityCheckBox.setFont(SEGOE_UI);
        molarityCheckBox.setForeground(MAIN_COLOR);
        molarityCheckBox.setText(""Molarity"");

        molalityCheckBox.setFont(SEGOE_UI);
        molalityCheckBox.setForeground(MAIN_COLOR);
        molalityCheckBox.setText(""Molality"");

        normalityCheckBox.setFont(SEGOE_UI);
        normalityCheckBox.setForeground(MAIN_COLOR);
        normalityCheckBox.setText(""Normality"");
        normalityCheckBox.addActionListener(this::normalityCheckBoxActionPerformed);

        getConcentrationButton.setBackground(MAIN_COLOR);
        getConcentrationButton.setFont(SEGOE_UI);
        getConcentrationButton.setForeground(GRAY);
        getConcentrationButton.setText(""Get Concentration"");
        getConcentrationButton.setAutoscrolls(true);
        getConcentrationButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        getConcentrationButton.addActionListener(this::getConcentrationButtonActionPerformed);

        clearButton.setBackground(MAIN_COLOR);
        clearButton.setFont(SEGOE_UI);
        clearButton.setForeground(GRAY);
        clearButton.setText(""Clear"");
        clearButton.setAutoscrolls(true);
        clearButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        clearButton.addActionListener(this::clearButtonActionPerformed);
    }

    private void setComponentLayout() {
        //Layout for Error message panel
        GroupLayout errorMessagePanelLayout = new GroupLayout(errorMessagePanel);
        errorMessagePanel.setLayout(errorMessagePanelLayout);
        errorMessagePanelLayout.setHorizontalGroup(
                errorMessagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, errorMessagePanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(errorMessageLabel, GroupLayout.PREFERRED_SIZE, 654, GroupLayout.PREFERRED_SIZE))
        );
        errorMessagePanelLayout.setVerticalGroup(
                errorMessagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(errorMessagePanelLayout.createSequentialGroup()
                                .addComponent(errorMessageLabel, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );



        //Layout for ans Panel.
        GroupLayout ansPanelLayout = new GroupLayout(ansPanel);
        ansPanel.setLayout(ansPanelLayout);
        ansPanelLayout.setHorizontalGroup(
                ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(ansPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelForNormalityAns, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelForMolalityAns, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelForMolarityAns, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(molalityAnsLabel, GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                                        .addComponent(normalityAnsLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(molarityAnsLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ansPanelLayout.setVerticalGroup(
                ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(ansPanelLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelForMolarityAns, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(molarityAnsLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelForMolalityAns, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(molalityAnsLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelForNormalityAns, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(normalityAnsLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(32, Short.MAX_VALUE))
        );


        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(ansPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(formatLabel)
                                                                .addGap(31, 31, 31)
                                                                .addComponent(molarityCheckBox)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(molalityCheckBox)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(normalityCheckBox))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(getConcentrationButton)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(clearButton))
                                                        .addComponent(errorMessagePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(labelForCompoundTextfield)
                                                        .addComponent(labelForMassTextfield)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(labelForVolumeTextfield)
                                                                        .addComponent(labelForEquivalentNumTextfield))
                                                                .addGap(28, 28, 28)
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(equivalentNumTextfield, GroupLayout.PREFERRED_SIZE, 268, GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                                                        .addComponent(compoundTextfield, GroupLayout.PREFERRED_SIZE, 270, GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(volumeTextfield, GroupLayout.PREFERRED_SIZE, 270, GroupLayout.PREFERRED_SIZE))
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(volumeUnitComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(massTextfield, GroupLayout.PREFERRED_SIZE, 270, GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(massUnitComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))))
                                                .addGap(0, 134, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(errorMessagePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelForCompoundTextfield, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(compoundTextfield, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                .addComponent(massTextfield, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(massUnitComboBox, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(labelForMassTextfield, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(volumeTextfield, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(volumeUnitComboBox, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelForVolumeTextfield, GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelForEquivalentNumTextfield, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(equivalentNumTextfield, GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(formatLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(molarityCheckBox)
                                        .addComponent(molalityCheckBox)
                                        .addComponent(normalityCheckBox))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(getConcentrationButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(clearButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addComponent(ansPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
    }

    private void getConcentrationButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String compound_text = compoundTextfield.getText();
        String givenCompoundMass_text = massTextfield.getText();
        String volumeOfSolution_text = volumeTextfield.getText();


        if (compound_text.isEmpty()) {
            errorMessagePanel.setVisible(true);
            errorMessageLabel.setText(""Please, enter a compound."");
            ansPanel.setVisible(false);
            return;
        } else if (givenCompoundMass_text.isEmpty()) {
            errorMessagePanel.setVisible(true);
            errorMessageLabel.setText(""Please, enter compound mass."");
            ansPanel.setVisible(false);
            return;
        } else if (volumeOfSolution_text.isEmpty()) {
            errorMessagePanel.setVisible(true);
            errorMessageLabel.setText(""Please, enter volume of solution."");
            ansPanel.setVisible(false);
            return;
        }
        if (molarityCheckBox.isSelected() || molalityCheckBox.isSelected() || normalityCheckBox.isSelected()) {
            Compound compound;
            double givenCompoundMass;
            double volumeOfSolution;
            String massUnit = massUnitComboBox.getSelectedItem().toString();
            String volumeUnit = volumeUnitComboBox.getSelectedItem().toString();
            try {
                compound = new Compound(compound_text);
                givenCompoundMass = Converter.convert(massUnit, ""gram"", Double.parseDouble(givenCompoundMass_text));
                volumeOfSolution = Converter.convert(volumeUnit, ""milliliters"", Double.parseDouble(volumeTextfield.getText()));


            } catch (InvalidAtomException e) {
                errorMessagePanel.setVisible(true);
                errorMessageLabel.setText(e.getMessage());
                ansPanel.setVisible(false);
                return;
            } catch (NumberFormatException e) {
                errorMessagePanel.setVisible(true);
                errorMessageLabel.setText(""Mass and volume must be number"");
                ansPanel.setVisible(false);
                return;
            }


            Concentration concentration = new Concentration(compound, givenCompoundMass, volumeOfSolution);
            ansPanel.setVisible(true);
            molarityAnsLabel.setText(""Not Checked !"");
            molalityAnsLabel.setText(""Not Checked !"");
            normalityAnsLabel.setText(""Not Checked !"");
            if (molarityCheckBox.isSelected()) {
                errorMessagePanel.setVisible(false);
                molarityAnsLabel.setText(String.format(""%.5f M"", concentration.getMolarity()));
            }
            if (molalityCheckBox.isSelected()) {
                errorMessagePanel.setVisible(false);
                molalityAnsLabel.setText(String.format(""%.5f m"", concentration.getMolality()));
            }
            if (normalityCheckBox.isSelected()) {
                if (equivalentNumTextfield.getText().isEmpty()) {
                    errorMessagePanel.setVisible(true);
                    errorMessageLabel.setText(""Equivalent Number is required for finding Normality."");
                    ansPanel.setVisible(false);
                    return;
                }
                double equivalentNumber = Double.parseDouble(equivalentNumTextfield.getText());
                errorMessagePanel.setVisible(false);
                normalityAnsLabel.setText(String.format(""%.5f N"", concentration.geNormality(equivalentNumber)));
            }
        } else {
            errorMessagePanel.setVisible(true);
            errorMessageLabel.setText(""Please check at least one format !."");
            ansPanel.setVisible(false);
        }

    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        compoundTextfield.setText(null);
        massTextfield.setText(null);
        volumeTextfield.setText(null);
        equivalentNumTextfield.setText(null);

        molarityCheckBox.setSelected(false);
        molalityCheckBox.setSelected(false);
        normalityCheckBox.setSelected(false);
        equivalentNumTextfield.setEnabled(false);

        errorMessagePanel.setVisible(false);
        ansPanel.setVisible(false);
    }

    private void normalityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        equivalentNumTextfield.setEnabled(normalityCheckBox.isSelected());
    }

}",1
"package ChemistryCalculator.frontend;

import ChemistryCalculator.backend.Atom;
import ChemistryCalculator.backend.InvalidAtomException;

import javax.swing.*;
import java.awt.*;

public class ElectronConfigPanel extends JPanel {

    private final JButton getElectronConfigButton = new JButton();
    private final JButton clearButton = new JButton();

    private final JPanel errorMessagePanel = new JPanel();
    private final JLabel errorMessageLabel = new JLabel();

    private final JLabel labelForNumOrSymbolTextfield = new JLabel();
    private final JTextField numOrSymbolTextfield = new JTextField();

    private final JPanel ansPanel = new JPanel();

    private final JLabel labelForAtomicMassAns = new JLabel();
    private final JLabel labelForAtomicNameAns = new JLabel();
    private final JLabel labelForAtomicNumAns = new JLabel();
    private final JLabel labelForElectronConfigAns = new JLabel();

    private final JLabel atomicNumAnsLabel = new JLabel();
    private final JLabel atomicNameAnsLabel = new JLabel();
    private final JLabel massOfAtomAnsLabel = new JLabel();
    private final JLabel ElectronConfigAnsLabel = new JLabel();

    public ElectronConfigPanel() {
        initComponent();
        setComponentLayout();
    }

    private void initComponent() {
        labelForNumOrSymbolTextfield.setFont(new Font(""Segoe UI"", 1, 14));
        labelForNumOrSymbolTextfield.setForeground(new Color(64, 43, 100));
        labelForNumOrSymbolTextfield.setText(""Enter Atomic Number or Symbol :"");

        getElectronConfigButton.setBackground(new Color(64, 43, 100));
        getElectronConfigButton.setFont(new Font(""Segoe UI"", 1, 14));
        getElectronConfigButton.setForeground(new Color(204, 204, 204));
        getElectronConfigButton.setText(""Get Config."");
        getElectronConfigButton.setAutoscrolls(true);
        getElectronConfigButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        getElectronConfigButton.addActionListener(this::getElectronConfigButtonActionPerformed);

        ansPanel.setBackground(new Color(85, 65, 118));
        ansPanel.setBorder(BorderFactory.createEtchedBorder());
        ansPanel.setVisible(false);

        labelForAtomicMassAns.setFont(new Font(""Segoe UI"", 1, 14));
        labelForAtomicMassAns.setForeground(new Color(204, 204, 204));
        labelForAtomicMassAns.setText(""Atomic Mass :"");

        labelForAtomicNameAns.setFont(new Font(""Segoe UI"", 1, 14));
        labelForAtomicNameAns.setForeground(new Color(204, 204, 204));
        labelForAtomicNameAns.setText(""Atom Name :"");

        labelForAtomicNumAns.setFont(new Font(""Segoe UI"", 1, 14));
        labelForAtomicNumAns.setForeground(new Color(204, 204, 204));
        labelForAtomicNumAns.setText(""Atomic Number :"");

        labelForElectronConfigAns.setFont(new Font(""Segoe UI"", 1, 14));
        labelForElectronConfigAns.setForeground(new Color(204, 204, 204));
        labelForElectronConfigAns.setText(""Electron Config :"");

        atomicNumAnsLabel.setFont(new Font(""Segoe UI"", 1, 14));
        atomicNumAnsLabel.setForeground(new Color(255, 255, 255));

        atomicNameAnsLabel.setFont(new Font(""Segoe UI"", 1, 14));
        atomicNameAnsLabel.setForeground(new Color(255, 255, 255));

        ElectronConfigAnsLabel.setFont(new Font(""Segoe UI"", 1, 14));
        ElectronConfigAnsLabel.setForeground(new Color(255, 255, 255));

        massOfAtomAnsLabel.setFont(new Font(""Segoe UI"", 1, 14));
        massOfAtomAnsLabel.setForeground(new Color(255, 255, 255));


        errorMessagePanel.setBackground(new Color(255, 0, 0));
        errorMessagePanel.setVisible(false);

        errorMessageLabel.setBackground(new Color(255, 0, 0));
        errorMessageLabel.setFont(new Font(""Segoe UI"", 1, 14));
        errorMessageLabel.setForeground(new Color(255, 255, 255));
        errorMessageLabel.setHorizontalAlignment(SwingConstants.CENTER);


        clearButton.setBackground(new Color(64, 43, 100));
        clearButton.setFont(new Font(""Segoe UI"", 1, 14));
        clearButton.setForeground(new Color(204, 204, 204));
        clearButton.setText(""Clear"");
        clearButton.setAutoscrolls(true);
        clearButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        clearButton.addActionListener(this::clearButtonActionPerformed);
    }

    private void setComponentLayout() {
        //Layout for Error message panel
        GroupLayout errorMessagePanelLayout = new GroupLayout(errorMessagePanel);
        errorMessagePanel.setLayout(errorMessagePanelLayout);
        errorMessagePanelLayout.setHorizontalGroup(
                errorMessagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, errorMessagePanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(errorMessageLabel, GroupLayout.PREFERRED_SIZE, 654, GroupLayout.PREFERRED_SIZE))
        );
        errorMessagePanelLayout.setVerticalGroup(
                errorMessagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(errorMessagePanelLayout.createSequentialGroup()
                                .addComponent(errorMessageLabel, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );


        //Layout for ans Panel.
        GroupLayout ansPanelLayout = new GroupLayout(ansPanel);
        ansPanel.setLayout(ansPanelLayout);
        ansPanelLayout.setHorizontalGroup(
                ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(ansPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelForAtomicMassAns, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelForAtomicNumAns, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelForAtomicNameAns, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelForElectronConfigAns, GroupLayout.PREFERRED_SIZE, 115, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(ElectronConfigAnsLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(atomicNameAnsLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(atomicNumAnsLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(massOfAtomAnsLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        ansPanelLayout.setVerticalGroup(
                ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(ansPanelLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(labelForAtomicNameAns, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(atomicNameAnsLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelForAtomicNumAns, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(atomicNumAnsLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelForAtomicMassAns, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(massOfAtomAnsLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelForElectronConfigAns, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(ElectronConfigAnsLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(32, Short.MAX_VALUE))
        );


        //Main panel layout
        GroupLayout Layout = new GroupLayout(this);
        this.setLayout(Layout);
        Layout.setHorizontalGroup(
                Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(Layout.createSequentialGroup()
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(ansPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(Layout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(Layout.createSequentialGroup()
                                                                .addComponent(getElectronConfigButton)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(clearButton))
                                                        .addGroup(Layout.createSequentialGroup()
                                                                .addComponent(labelForNumOrSymbolTextfield)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(numOrSymbolTextfield, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(errorMessagePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 83, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        Layout.setVerticalGroup(
                Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(errorMessagePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(labelForNumOrSymbolTextfield, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numOrSymbolTextfield, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(getElectronConfigButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(clearButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                                .addComponent(ansPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
    }

    private void getElectronConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String atom_text = numOrSymbolTextfield.getText();

        if (!atom_text.isEmpty()) {
            Atom atom;
            try {
                int atomicNumber = Integer.parseInt(atom_text);
                try {
                    atom = Atom.getInstance(atomicNumber);

                    atomicNameAnsLabel.setText(atom.getName());
                    massOfAtomAnsLabel.setText(String.valueOf(atom.getAtomicMass()));
                    labelForAtomicNumAns.setText(""Atomic symbol :"");
                    atomicNumAnsLabel.setText(String.valueOf(atom.getSymbol()));
                    ElectronConfigAnsLabel.setText(atom.getElectronConfig());
                    ansPanel.setVisible(true);

                    errorMessagePanel.setVisible(false);


                } catch (InvalidAtomException e) {
                    errorMessageLabel.setText(e.getMessage());
                    errorMessagePanel.setVisible(true);
                    ansPanel.setVisible(false);

                }


            } catch (NumberFormatException e) {
                try {
                    atom = Atom.getInstance(atom_text);
                    atomicNameAnsLabel.setText(atom.getName());
                    massOfAtomAnsLabel.setText(String.valueOf(atom.getAtomicMass()));
                    labelForAtomicNumAns.setText(""Atomic Number :"");
                    atomicNumAnsLabel.setText(String.valueOf(atom.getAtomicNumber()));
                    ElectronConfigAnsLabel.setText(atom.getElectronConfig());
                    ansPanel.setVisible(true);

                    errorMessagePanel.setVisible(false);
                } catch (InvalidAtomException invalidAtomException) {
                    errorMessageLabel.setText(invalidAtomException.getMessage());
                    errorMessagePanel.setVisible(true);
                    ansPanel.setVisible(false);
                }

            }


        } else {
            errorMessageLabel.setText(""Enter atom's symbol or atomic number!"");
            errorMessagePanel.setVisible(true);
            ansPanel.setVisible(false);
        }
    }


    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        ansPanel.setVisible(false);
        errorMessagePanel.setVisible(false);
        numOrSymbolTextfield.setText(null);
    }
}",1
"package ChemistryCalculator.frontend;

import ChemistryCalculator.backend.EquationBalancer;
import ChemistryCalculator.backend.History;
import ChemistryCalculator.backend.InvalidAtomException;
import ChemistryCalculator.backend.InvalidEquationException;

import javax.swing.*;
import java.awt.*;
import java.io.FileNotFoundException;
import java.io.IOException;

public class EquationBalancePanel extends JPanel {
    private static final Font SEGOE_UI = new Font(""Segoe UI"", 1, 14);
    private static final Color MAIN_COLOR = new Color(64, 43, 100);
    private static final Color MAIN_COLOR_LITE = new Color(85, 65, 118);
    private static final Color GRAY = new Color(204, 204, 204);

    private final JLabel labelForReactantsTextfield = new JLabel();
    private final JTextField reactantsTextfield = new JTextField();
    private final JLabel labelForProductsTextfield = new JLabel();
    private final JTextField productsTextfield = new JTextField();

    private final JButton balanceButton = new JButton();
    private final JButton historyButton = new JButton();
    private final JButton clearButton = new JButton();

    private final JPanel errorMessagePanel = new JPanel();
    private final JLabel errorMessageLabel = new JLabel();

    private final JPanel ansPanel = new JPanel();
    private final JLabel labelForBalancedEquation = new JLabel();
    private final JLabel balancedEquationLabel = new JLabel();
    private final JScrollPane balancedEquationScrollPane = new JScrollPane();
    private final JLabel labelForGivenEquation = new JLabel();
    private final JLabel givenEquationLabel = new JLabel();
    private final JScrollPane givenEquationScrollPane = new JScrollPane();


    public EquationBalancePanel() {
        initComponent();
        setComponentLayout();
    }

    private void initComponent() {

        labelForReactantsTextfield.setFont(SEGOE_UI);
        labelForReactantsTextfield.setForeground(MAIN_COLOR);
        labelForReactantsTextfield.setText(""Reactants : "");


        labelForProductsTextfield.setFont(SEGOE_UI);
        labelForProductsTextfield.setForeground(MAIN_COLOR);
        labelForProductsTextfield.setText(""Products  :"");

        errorMessagePanel.setBackground(Color.red);
        errorMessagePanel.setVisible(false);

        errorMessageLabel.setFont(SEGOE_UI);
        errorMessageLabel.setForeground(Color.white);
        errorMessageLabel.setHorizontalAlignment(SwingConstants.CENTER);

        balanceButton.setBackground(MAIN_COLOR);
        balanceButton.setFont(SEGOE_UI);
        balanceButton.setForeground(GRAY);
        balanceButton.setText(""Balance"");
        balanceButton.setAutoscrolls(true);
        balanceButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        balanceButton.addActionListener(this::balanceButtonActionPerformed);

        historyButton.setBackground(MAIN_COLOR);
        historyButton.setFont(SEGOE_UI);
        historyButton.setForeground(GRAY);
        historyButton.setText(""History"");
        historyButton.setAutoscrolls(true);
        historyButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        historyButton.addActionListener(this::historyButtonActionPerformed);

        clearButton.setBackground(MAIN_COLOR);
        clearButton.setFont(SEGOE_UI); // NOI18N
        clearButton.setForeground(GRAY);
        clearButton.setText(""Clear"");
        clearButton.setAutoscrolls(true);
        clearButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        clearButton.addActionListener(this::clearButtonActionPerformed);

        ansPanel.setBackground(MAIN_COLOR_LITE);
        ansPanel.setVisible(false);

        labelForBalancedEquation.setFont(SEGOE_UI); // NOI18N
        labelForBalancedEquation.setForeground(GRAY);
        labelForBalancedEquation.setText(""Balanced Equation :"");

        labelForGivenEquation.setFont(SEGOE_UI); // NOI18N
        labelForGivenEquation.setForeground(GRAY);
        labelForGivenEquation.setText(""Given Equation :"");

        balancedEquationScrollPane.setBackground(MAIN_COLOR_LITE);
        balancedEquationScrollPane.setBorder(null);
        balancedEquationScrollPane.setForeground(MAIN_COLOR_LITE);
        balancedEquationScrollPane.setAutoscrolls(true);

        balancedEquationLabel.setBackground(MAIN_COLOR_LITE);
        balancedEquationLabel.setFont(SEGOE_UI); // NOI18N
        balancedEquationLabel.setForeground(Color.white);
        balancedEquationLabel.setOpaque(true);
        balancedEquationScrollPane.setViewportView(balancedEquationLabel);

        givenEquationScrollPane.setBackground(MAIN_COLOR_LITE);
        givenEquationScrollPane.setBorder(null);
        givenEquationScrollPane.setForeground(MAIN_COLOR_LITE);
        givenEquationScrollPane.setAutoscrolls(true);

        givenEquationLabel.setBackground(MAIN_COLOR_LITE);
        givenEquationLabel.setFont(SEGOE_UI); // NOI18N
        givenEquationLabel.setForeground(Color.white);
        givenEquationLabel.setOpaque(true);
        givenEquationScrollPane.setViewportView(givenEquationLabel);


    }

    private void setComponentLayout() {
        //Layout for Error message panel
        GroupLayout errorMessagePanelLayout = new GroupLayout(errorMessagePanel);
        errorMessagePanel.setLayout(errorMessagePanelLayout);
        errorMessagePanelLayout.setHorizontalGroup(
                errorMessagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, errorMessagePanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(errorMessageLabel, GroupLayout.PREFERRED_SIZE, 654, GroupLayout.PREFERRED_SIZE))
        );
        errorMessagePanelLayout.setVerticalGroup(
                errorMessagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(errorMessagePanelLayout.createSequentialGroup()
                                .addComponent(errorMessageLabel, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        //Layout for ans Panel.
        GroupLayout ansPanelLayout = new GroupLayout(ansPanel);
        ansPanel.setLayout(ansPanelLayout);
        ansPanelLayout.setHorizontalGroup(
                ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(ansPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(ansPanelLayout.createSequentialGroup()
                                                .addComponent(labelForBalancedEquation)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(balancedEquationScrollPane))
                                        .addGroup(ansPanelLayout.createSequentialGroup()
                                                .addComponent(labelForGivenEquation)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(givenEquationScrollPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                .addGap(20, 20, 20))
        );
        ansPanelLayout.setVerticalGroup(
                ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(ansPanelLayout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelForGivenEquation, GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                        .addComponent(givenEquationScrollPane))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ansPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelForBalancedEquation, GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                        .addComponent(balancedEquationScrollPane))
                                .addContainerGap())
        );


        //Main panel layout
        GroupLayout Layout = new GroupLayout(this);
        this.setLayout(Layout);
        Layout.setHorizontalGroup(
                Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(Layout.createSequentialGroup()
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(ansPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(Layout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                                .addComponent(errorMessagePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addGroup(Layout.createSequentialGroup()
                                                                        .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                                                .addComponent(labelForReactantsTextfield, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(labelForProductsTextfield, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                        .addGap(18, 18, 18)
                                                                        .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                                                .addComponent(reactantsTextfield, GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                                                                                .addComponent(productsTextfield))))
                                                        .addGroup(Layout.createSequentialGroup()
                                                                .addComponent(balanceButton, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(historyButton, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(clearButton, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 134, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        Layout.setVerticalGroup(
                Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(errorMessagePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(reactantsTextfield, GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                                        .addComponent(labelForReactantsTextfield, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(productsTextfield, GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                                        .addComponent(labelForProductsTextfield, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(35, 35, 35)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(balanceButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(clearButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(historyButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                                .addComponent(ansPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
    }



    private void balanceButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String reactants = reactantsTextfield.getText();
        String products = productsTextfield.getText();
        if (!reactants.isEmpty() || !products.isEmpty()) {
            String balancedEquation;
            EquationBalancer balancer = new EquationBalancer(reactants, products);

            try {
                balancedEquation = balancer.balance();
                errorMessagePanel.setVisible(false);
                givenEquationLabel.setText(Formater.formatEquation(reactants) + "" = "" + Formater.formatEquation(products));
                balancedEquationLabel.setText(Formater.formatEquation(balancedEquation));
                ansPanel.setVisible(true);

                new History() {
                }.add(balancedEquation);

            } catch (InvalidAtomException | InvalidEquationException | FileNotFoundException e) {
                errorMessageLabel.setText(e.getMessage());
                errorMessagePanel.setVisible(true);
                ansPanel.setVisible(false);
            }
        } else {
            errorMessageLabel.setText(""Both fields are required !"");
            errorMessagePanel.setVisible(true);
            ansPanel.setVisible(false);
        }

    }


    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        HistoryFrame history;
        try {
            history = new HistoryFrame();

        } catch (IOException e) {
            errorMessageLabel.setText(""History panel is empty"");
            errorMessagePanel.setVisible(true);
            ansPanel.setVisible(false);
            return;
        }

        history.toFront();
        history.requestFocus();
    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        reactantsTextfield.setText(null);
        productsTextfield.setText(null);
        errorMessagePanel.setVisible(false);
        ansPanel.setVisible(false);

    }

}",1
"package ChemistryCalculator.frontend;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Formater {
    public static String formatEquation(String equation) {
        String[] subScript = {""\u2080"", ""\u2081"", ""\u2082"", ""\u2083"", ""\u2084"", ""\u2085"", ""\u2086"", ""\u2087"", ""\u2088"", ""\u2089""};
        String[] segments = equation.split(""(?<=([A-Za-z])|\\))\\d+"");
        Pattern pattern = Pattern.compile(""(?<=([A-Za-z])|\\))\\d+"");
        Matcher matcher = pattern.matcher(equation);

        StringBuilder output = new StringBuilder();
        int i = 0;
        while (matcher.find()) {
            String group = matcher.group();
            if (group.length() == 1) {
                int number = Integer.parseInt(group);
                output.append(segments[i]).append(subScript[number]);
            } else {

                char[] number = group.toCharArray();
                String result = IntStream.range(0, number.length).mapToObj(j -> subScript[Character.getNumericValue(number[j])]).collect(Collectors.joining());

                output.append(segments[i]).append(result);
            }


            i++;
        }

        while (i < segments.length) {
            output.append(segments[i]);
            i++;
        }


        return output.toString();
    }

}",0
"package ChemistryCalculator.frontend;

import javafx.animation.FadeTransition;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.chart.PieChart;
import javafx.util.Duration;

import javax.swing.*;
import java.awt.*;
import java.util.Vector;

public class FxPieChart extends JFrame {
    private static final int PANEL_WIDTH_INT = 730;
    private static final int PANEL_HEIGHT_INT = 460;
    private final JPanel chartTablePanel = new JPanel();
    private final Vector<Vector<String>> percentageOfCompletion;
    private final JFXPanel chartFxPanel = new JFXPanel();

    public FxPieChart(Vector<Vector<String>> percentageOfCompletion) {
        initComponents();
        this.percentageOfCompletion = percentageOfCompletion;
    }


    private void initComponents() {

        chartFxPanel.setPreferredSize(new Dimension(PANEL_WIDTH_INT, PANEL_HEIGHT_INT));
        chartTablePanel.add(chartFxPanel);
        add(chartTablePanel, BorderLayout.CENTER);

        setVisible(true);
        setIconImage(new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_biohazard_120px.png"")).getImage());
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setTitle(""Percent of Completion Pie chart"");
        setResizable(false);
        setBounds(100, 100, 750, 500);


        Platform.setImplicitExit(false);
        //calling JavaFx
        Platform.runLater(this::createScene);


    }


    private void createScene() {
        PieChart chart = createPieChart();

        //adding animation
        FadeTransition fadeTransition = new FadeTransition(Duration.seconds(1), chart);
        fadeTransition.setFromValue(0);
        fadeTransition.setToValue(1);
        fadeTransition.play();

        chartFxPanel.setScene(new Scene(chart));
    }

    private PieChart createPieChart() {

        ObservableList<PieChart.Data> pieData = FXCollections.observableArrayList();
        //percentageOfCompletion vector comes from percentage Of Completion table data model.
        //model : {""Name"", ""Symbol"", ""Total atoms"", ""Atomic mass"", ""Percentage""};
        for (Vector<String> eachElement : percentageOfCompletion) {
            pieData.add(new PieChart.Data(eachElement.get(0) + "" ( "" + eachElement.get(4) + ""% )"",
                    Double.parseDouble(eachElement.get(4))));
        }
        return new PieChart(pieData);

    }

}",0
"package ChemistryCalculator.frontend;

import javax.swing.*;
import javax.swing.filechooser.FileSystemView;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;


public class HistoryFrame extends JFrame {
    private static final Font SEGOE_UI = new Font(""Segoe UI"", 1, 14);
    private static final Color MAIN_COLOR = new Color(64, 43, 100);
    private static final Color GRAY = new Color(204, 204, 204);
    
    private final JPanel mainPanel = new JPanel();
    private final JScrollPane mainScrollPane = new JScrollPane();
    private final JTextArea HistoryTextArea = new JTextArea();
    private final JButton clearButton = new JButton();
    private final String filePath = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + File.separator
            + ""Chemistry Calculator"" + File.separator
            + ""history.txt"";
    

    public HistoryFrame() throws IOException {
        initComponents();
        setComponentLayout();
        collectHistory();
    }

    private void setComponentLayout() {
        //mainpanel Layout
        GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addContainerGap(23, Short.MAX_VALUE)
                                .addComponent(mainScrollPane, GroupLayout.PREFERRED_SIZE, 670, GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(clearButton, GroupLayout.PREFERRED_SIZE, 96, Short.MAX_VALUE)
                                .addGap(20, 20, 20))

        );
        mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(mainScrollPane, GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                        .addGap(20, 20, 20)
                        .addComponent(clearButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
        );

        //adding ainPanel to the frame
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(mainPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)

        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(mainPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)

        );
    }


    private void initComponents() throws IOException {
        mainPanel.setBackground(Color.white);
        mainScrollPane.setBorder(null);


        HistoryTextArea.setFont(new Font(""Segoe UI"", 0, 15));
        HistoryTextArea.setLineWrap(true);

        clearButton.setBackground(MAIN_COLOR);
        clearButton.setFont(SEGOE_UI);
        clearButton.setForeground(GRAY);
        clearButton.setText(""Clear History"");
        clearButton.setAutoscrolls(true);
        clearButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        clearButton.addActionListener(actionEvent -> {
            try {
                clearButtonActionPerformed(actionEvent);
            } catch (IOException e) {
                e.printStackTrace();
            }
        });



        HistoryTextArea.setWrapStyleWord(true);
        HistoryTextArea.setBorder(null);
        HistoryTextArea.setMargin(new Insets(3, 5, 3, 3));
        mainScrollPane.setViewportView(HistoryTextArea);




        setVisible(true);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setResizable(false);
        setBounds(100, 100, 900, 500);
        setIconImage(new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_biohazard_120px.png"")).getImage());
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(""Equation Balance - History"");
    }

    private void clearButtonActionPerformed(ActionEvent actionEvent) throws IOException {
        File file= new File(filePath);
        PrintWriter writer = new PrintWriter(file);
        writer.print("""");
        writer.close();
        HistoryTextArea.setText("""");

    }

    public void collectHistory() throws IOException {
        //sorting by date & time
        ArrayList<String> temp =new ArrayList<>();
        Files.lines(Paths.get(filePath)).forEach(line ->temp.add(line));
        if (temp.isEmpty()){
            clearButton.setVisible(false);
            return;
        }
        for(int i=temp.size()-1;i>=0;i--) {
            HistoryTextArea.append(temp.get(i) +""\n"");
        }
    }





}",0
"package ChemistryCalculator.frontend;

import javax.swing.*;
import java.awt.*;

public class Home extends JFrame {

    private final JPanel backgroundPanel = new JPanel();
    private final JPanel bodyPanel = new JPanel();
    private final Sidebar sidebarPanel = new Sidebar();


    //body panels
    private final JPanel equationBalancePanel = new EquationBalancePanel();
    private final JPanel concentrationPanel = new ConcentrationPanel();
    private final JPanel molarMassPanel = new MolarMassPanel();
    private final JPanel electronConfigPanel = new ElectronConfigPanel();
    private final JPanel needHelpPanel = new NeedHelpPanel();
    private final JPanel percentOfCompletionPanel = new PercentOfCompletionPanel();
    private final JPanel titrationPanel = new TitrationPanel();


    public Home() {
        buildSidebar();
        buildBodyPanels();
        buildBackgroundPanel();
        setFrameProperty();
    }

    public static void main(String[] args) {
        // Set the Nimbus look and feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if (""Nimbus"".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        // Create and display the form
        EventQueue.invokeLater(() -> new Home().setVisible(true));
    }

    private void buildBackgroundPanel() {
        //attaching body panel and sidebar panel to the background panel

        GroupLayout backgroundPanelLayout = new GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
                backgroundPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addComponent(sidebarPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bodyPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        backgroundPanelLayout.setVerticalGroup(
                backgroundPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(sidebarPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bodyPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }

    private void buildBodyPanels() {
        //adding all body panels to a single panel (bodyPanel)

        bodyPanel.setLayout(new CardLayout());

        bodyPanel.add(equationBalancePanel);
        bodyPanel.add(concentrationPanel);
        bodyPanel.add(molarMassPanel);
        bodyPanel.add(electronConfigPanel);
        bodyPanel.add(titrationPanel);
        bodyPanel.add(needHelpPanel);
        bodyPanel.add(percentOfCompletionPanel);
    }

    private void buildSidebar() {
        // creating sidebar. Every single body panel should have a single menu bar for navigation. Don't creates duplicates.

        sidebarPanel.addMenu(
                ""Equation Balance"",
                new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_scales_25px_1.png"")),
                equationBalancePanel
        );
        sidebarPanel.addMenu(
                ""Concentration"",
                new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_dna_helix_25px.png"")),
                concentrationPanel
        );
        sidebarPanel.addMenu(
                ""Electron config"",
                new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_physics_25px.png"")),
                electronConfigPanel
        );
        sidebarPanel.addMenu(
                ""Molar mass"",
                new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_weightlifting_25px.png"")),
                molarMassPanel
        );
        sidebarPanel.addMenu(
                ""Percent of completion"",
                new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_percentage_25px.png"")),
                percentOfCompletionPanel
        );
        sidebarPanel.addMenu(
                ""Titration"",
                new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_test_tube_25px.png"")),
                titrationPanel
        );
        sidebarPanel.addMenu(
                ""Need help ?"",
                new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_inquiry_25px_1.png"")),
                needHelpPanel
        );


        sidebarPanel.build();
    }

    private void setFrameProperty() {
        //attaching background Panel to the main ContentPane.

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(backgroundPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(backgroundPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );


        //setting frame properties

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle(""Chemistry Calculator"");
        setAlwaysOnTop(true);
        setIconImage(new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_biohazard_120px.png"")).getImage());
        setLocationByPlatform(true);
        setResizable(false);
        setAlwaysOnTop(false);
        pack();
        setLocationRelativeTo(null);
    }

}",0
"package ChemistryCalculator.frontend;

import ChemistryCalculator.backend.Atom;
import ChemistryCalculator.backend.Compound;
import ChemistryCalculator.backend.InvalidAtomException;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Arrays;

public class MolarMassPanel extends JPanel {
    private static final Font SEGOE_UI = new Font(""Segoe UI"", 1,  14);
    private static final Color MAIN_COLOR = new Color(64, 43,  100);
    private static final Color GRAY = new Color(204, 204,  204);

    private final JLabel labelForCompoundTextfield = new JLabel();
    private final JTextField compoundTextfield = new JTextField();

    private final JButton getMolarMassButton = new JButton();
    private final JButton clearButton = new JButton();

    private final JLabel errorMessageLabel = new JLabel();
    private final JPanel errorMessagePanel= new JPanel();

    private final JLabel additionalText1 = new JLabel();
    private final JLabel additionalText2 = new JLabel();
    private final JLabel additionalText3 = new JLabel();

    private final JLabel compoundAnsLabel = new JLabel();
    private final JLabel massAnsLabel = new JLabel();

    private final JTable ansTable = new JTable();
    private DefaultTableModel dataTableModel;
    private final JScrollPane ansTableScrollPane = new JScrollPane();



    public MolarMassPanel() {
        initComponent();
        setComponentLayout();
    }

    private void  initComponent() {

        labelForCompoundTextfield.setFont(SEGOE_UI);
        labelForCompoundTextfield.setForeground(MAIN_COLOR);
        labelForCompoundTextfield.setText(""Enter Compound :"");

        ansTable.setBackground(MAIN_COLOR);
        ansTable.setBorder(BorderFactory.createEtchedBorder());
        ansTable.setFont(SEGOE_UI);
        ansTable.setForeground(GRAY);
        dataTableModel = new DefaultTableModel(
                new Object[][]{},
                new String[]{}
        ) {
            Class[] types = new Class[]{
                    String.class, String.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        ansTable.setModel(dataTableModel);
        ansTable.setRowHeight(50);
        ansTableScrollPane.setViewportView(ansTable);
        ansTableScrollPane.setVisible(false);

        getMolarMassButton.setBackground(MAIN_COLOR);
        getMolarMassButton.setFont(SEGOE_UI);
        getMolarMassButton.setForeground(GRAY);
        getMolarMassButton.setText(""Get Molar mass"");
        getMolarMassButton.setAutoscrolls(true);
        getMolarMassButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        getMolarMassButton.addActionListener(this::molarMassButtonActionPerformed);

        additionalText1.setFont(SEGOE_UI);
        additionalText1.setForeground(MAIN_COLOR);
        additionalText1.setText(""Molar mass of given compound "");
        additionalText1.setVisible(false);

        errorMessagePanel.setBackground(Color.red);
        errorMessagePanel.setVisible(false);

        errorMessageLabel.setBackground(Color.red);
        errorMessageLabel.setFont(SEGOE_UI);
        errorMessageLabel.setForeground(Color.white);
        errorMessageLabel.setHorizontalAlignment(SwingConstants.CENTER);
        clearButton.setBackground(MAIN_COLOR);
        clearButton.setFont(SEGOE_UI);
        clearButton.setForeground(GRAY);
        clearButton.setText(""Clear"");
        clearButton.setAutoscrolls(true);
        clearButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        clearButton.addActionListener(this::molerMassClearButtonActionPerformed);

        compoundAnsLabel.setFont(SEGOE_UI);
        compoundAnsLabel.setForeground(new Color(0, 102, 102));
        compoundAnsLabel.setVisible(false);

        massAnsLabel.setFont(SEGOE_UI);
        massAnsLabel.setForeground(new Color(0, 102, 102));
        massAnsLabel.setVisible(false);

        additionalText2.setFont(SEGOE_UI);
        additionalText2.setForeground(MAIN_COLOR);
        additionalText2.setText(""is"");
        additionalText2.setVisible(false);

        additionalText3.setFont(SEGOE_UI);
        additionalText3.setForeground(MAIN_COLOR);
        additionalText3.setText(""gram. Details are given below. "");
        additionalText3.setVisible(false);
    }

    private void setComponentLayout() {
        //Layout for Error message panel
        GroupLayout errorMessagePanelLayout = new GroupLayout(errorMessagePanel);
        errorMessagePanel.setLayout(errorMessagePanelLayout);
        errorMessagePanelLayout.setHorizontalGroup(
                errorMessagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, errorMessagePanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(errorMessageLabel, GroupLayout.PREFERRED_SIZE, 654, GroupLayout.PREFERRED_SIZE))
        );
        errorMessagePanelLayout.setVerticalGroup(
                errorMessagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(errorMessagePanelLayout.createSequentialGroup()
                                .addComponent(errorMessageLabel, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        //Main panel layout
        GroupLayout Layout = new GroupLayout(this);
        this.setLayout(Layout);
        Layout.setHorizontalGroup(
                Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(Layout.createSequentialGroup()
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(ansTableScrollPane, GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE))
                                        .addGroup(Layout.createSequentialGroup()
                                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(Layout.createSequentialGroup()
                                                                .addGap(40, 40, 40)
                                                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addGroup(Layout.createSequentialGroup()
                                                                                .addComponent(getMolarMassButton)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(clearButton))
                                                                        .addGroup(Layout.createSequentialGroup()
                                                                                .addComponent(labelForCompoundTextfield)
                                                                                .addGap(26, 26, 26)
                                                                                .addComponent(compoundTextfield, GroupLayout.PREFERRED_SIZE, 270, GroupLayout.PREFERRED_SIZE))
                                                                        .addComponent(errorMessagePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(Layout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addComponent(additionalText1)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(compoundAnsLabel)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(additionalText2)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(massAnsLabel)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(additionalText3)))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        Layout.setVerticalGroup(
                Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(errorMessagePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(compoundTextfield, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelForCompoundTextfield, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(getMolarMassButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(clearButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(additionalText1, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(compoundAnsLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(additionalText2, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(massAnsLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(additionalText3, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(ansTableScrollPane, GroupLayout.PREFERRED_SIZE, 240, GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29))
        );
    }
    private void molarMassButtonActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String compoundText = compoundTextfield.getText();
        if (!compoundText.isEmpty()) {
            Compound compound;
            try {
                compound = new Compound(compoundText);

            } catch (InvalidAtomException e) {
                errorMessagePanel.setVisible(true);
                errorMessageLabel.setText(e.getMessage());

                additionalText1.setVisible(false);
                compoundAnsLabel.setVisible(false);
                additionalText2.setVisible(false);
                massAnsLabel.setVisible(false);
                additionalText3.setVisible(false);
                ansTableScrollPane.setVisible(false);
                return;
            }


            Atom[] atomList = compound.getAtomList();
            String[] tableHeader = new String[]{""Name"", ""Atomic mass""};
            String[][] tableRow = Arrays.stream(atomList).map(atom -> new String[]{atom.getName(), String.valueOf(atom.getAtomicMass())}).toArray(String[][]::new);
            dataTableModel.setDataVector(tableRow, tableHeader
            );

            compoundAnsLabel.setText(Formater.formatEquation(compound.getCompound()));
            massAnsLabel.setText(String.format(""%.2f"", compound.getMolarMass()));

            additionalText1.setVisible(true);
            compoundAnsLabel.setVisible(true);
            additionalText2.setVisible(true);
            massAnsLabel.setVisible(true);
            additionalText3.setVisible(true);
            ansTableScrollPane.setVisible(true);
            errorMessagePanel.setVisible(false);

        } else {
            errorMessagePanel.setVisible(true);
            errorMessageLabel.setText(""Please enter a compound."");

            additionalText1.setVisible(false);
            compoundAnsLabel.setVisible(false);
            additionalText2.setVisible(false);
            massAnsLabel.setVisible(false);
            additionalText3.setVisible(false);
            ansTableScrollPane.setVisible(false);
        }
    }

    private void molerMassClearButtonActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        errorMessagePanel.setVisible(false);
        compoundTextfield.setText(null);
        additionalText1.setVisible(false);
        compoundAnsLabel.setVisible(false);
        additionalText2.setVisible(false);
        massAnsLabel.setVisible(false);
        additionalText3.setVisible(false);
        ansTableScrollPane.setVisible(false);

    }
}",1
"package ChemistryCalculator.frontend;

import javax.swing.*;
import java.awt.*;

public class NeedHelpPanel extends JPanel {

    private final JPanel contentHolderPanel = new JPanel();
    private final JScrollPane contentHolderScrollPane = new JScrollPane();

    private final JLabel eqBalanceDesLabel =  new JLabel();
    private final JLabel eqBalanceHeaderLabel =  new JLabel();
    private final JSeparator eqBalanceSeparator =  new JSeparator();

    private final JLabel concentrationHeaderLabel =  new JLabel();
    private final JLabel concentrationDesLabel =  new JLabel();
    private final JSeparator concentrationSeparator = new JSeparator();

    private final JLabel mlrMass_elConfig_pOfComDes =  new JLabel();
    private final JLabel mlrMass_elConfig_pOfComDesHeader =  new JLabel();
    private final JSeparator mlrMass_elConfig_pOfComSeparator =  new JSeparator();

    private final JLabel titrationDesLabel =  new JLabel();
    private final JLabel titrationHeaderLabel =  new JLabel();
    private final JSeparator titrationSeparator =  new JSeparator();



    public NeedHelpPanel() {
        initComponent();
        setComponentLayout();
    }

    private void initComponent() {

        contentHolderScrollPane.setBorder(null);
        contentHolderScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        contentHolderScrollPane.setPreferredSize(new Dimension(787, 634));

        eqBalanceHeaderLabel.setFont(new Font(""Segoe UI"", 1, 18)); // NOI18N
        eqBalanceHeaderLabel.setForeground(new Color(64, 43, 100));
        eqBalanceHeaderLabel.setIcon(new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_document_header_30px_1.png""))); // NOI18N
        eqBalanceHeaderLabel.setText(""Equation Balancer : "");

        eqBalanceDesLabel.setFont(new Font(""Segoe UI"", 1, 14)); // NOI18N
        eqBalanceDesLabel.setForeground(new Color(102, 102, 102));
        eqBalanceDesLabel.setText(""<html>\n1. Enter an equation of a chemical reaction and click 'Balance'.The answer will appear below.\n<br/>\n2. Always use the upper case for the first character in the element name and the lower case for the second character.\n<br/><br/>\n<pre>\n\tExamples:  Fe, Au, Co, Br, C, O, N, F.\n\tCompare: Co - cobalt and CO - carbon monoxide.\n</pre>\n<br/><br/>\n3. Compound states [like (s) (aq) or (g)] are not required.\n<br/>\n4. Both Reactants and Products fields are required.\n<br/>\n5. There's support 3 pattern of equation. Such as --\n<pre>\n\n\ti.   H2 + O2 = H2O\n\tii.  Zn + AgNO3 = Zn(NO3)2 +  Ag\n\tiii. CaHPO4*2H2O + NaOH + H2O = Na2HPO4*12H2O + Ca(OH)2 \n</pre>\n</html>"");

        concentrationHeaderLabel.setFont(new Font(""Segoe UI"", 1, 18)); // NOI18N
        concentrationHeaderLabel.setForeground(new Color(64, 43, 100));
        concentrationHeaderLabel.setIcon(new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_document_header_30px_1.png""))); // NOI18N
        concentrationHeaderLabel.setText(""Concentration : "");

        mlrMass_elConfig_pOfComDes.setFont(new Font(""Segoe UI"", 1, 14)); // NOI18N
        mlrMass_elConfig_pOfComDes.setForeground(new Color(102, 102, 102));
        mlrMass_elConfig_pOfComDes.setText(""<html> 1.The description of the compound pattern is similar to the description of the equation balance section. <br/> 2.Click the corresponding button to get the result. </html>"");

        mlrMass_elConfig_pOfComDesHeader.setFont(new Font(""Segoe UI"", 1, 18)); // NOI18N
        mlrMass_elConfig_pOfComDesHeader.setForeground(new Color(64, 43, 100));
        mlrMass_elConfig_pOfComDesHeader.setIcon(new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_document_header_30px_1.png""))); // NOI18N
        mlrMass_elConfig_pOfComDesHeader.setText(""Molar mass, Electron config & Percent of completion: "");

        concentrationDesLabel.setFont(new Font(""Segoe UI"", 1, 14)); // NOI18N
        concentrationDesLabel.setForeground(new Color(102, 102, 102));
        concentrationDesLabel.setText(""<html> 1. Compound , compound's mass, volume of solution these 3 fields are required. \n <br/> 2. Equivalent number is required only for Normality. If you check Molarity and Molality in the format then this field should be blank. <br/> 3. Compound states [like (s) (aq) or (g)] are not required.\n <br/> 4. Click 'Get Concentration' button. The result will appear below.\n</html>"");

        titrationDesLabel.setFont(new Font(""Segoe UI"", 1, 14)); // NOI18N
        titrationDesLabel.setForeground(new Color(102, 102, 102));
        titrationDesLabel.setText(""<html> 1.The description of the compound pattern is similar to the description of the equation balance section. <br/> 2.The Number of moles of acid and base denotes the number of moles of acid or base that are required to neutralize each other.  For example --\n<pre>\t\n\n\tBalanced Equation : <u>1</u> Ba(OH)2  +  <u>2</u> HNO3 = 1 Ba(NO3)2  +  2 H2O\n\n\tHere,   \n\t        The Number of moles of acid = 2\n\t        The Number of moles of base = 1\n</pre>\n </html>"");

        titrationHeaderLabel.setFont(new Font(""Segoe UI"", 1, 18)); // NOI18N
        titrationHeaderLabel.setForeground(new Color(64, 43, 100));
        titrationHeaderLabel.setIcon(new ImageIcon(getClass().getResource(""/ChemistryCalculator/icons/icons8_document_header_30px_1.png""))); // NOI18N
        titrationHeaderLabel.setText(""Titration: "");

        contentHolderScrollPane.setViewportView(contentHolderPanel);

    }

    private void setComponentLayout() {
        //adding all elements to the contentHolderPanel
        GroupLayout contentHolderPanelLayout = new GroupLayout(contentHolderPanel);
        contentHolderPanel.setLayout(contentHolderPanelLayout);
        contentHolderPanelLayout.setHorizontalGroup(
                contentHolderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(contentHolderPanelLayout.createSequentialGroup()
                                .addGroup(contentHolderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(contentHolderPanelLayout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addGroup(contentHolderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(contentHolderPanelLayout.createSequentialGroup()
                                                                .addGap(10, 10, 10)
                                                                .addComponent(eqBalanceDesLabel, GroupLayout.PREFERRED_SIZE, 730, GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(eqBalanceSeparator, GroupLayout.PREFERRED_SIZE, 740, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(eqBalanceHeaderLabel)))
                                        .addGroup(contentHolderPanelLayout.createSequentialGroup()
                                                .addGap(36, 36, 36)
                                                .addGroup(contentHolderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(concentrationHeaderLabel)
                                                        .addComponent(concentrationSeparator, GroupLayout.PREFERRED_SIZE, 754, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(mlrMass_elConfig_pOfComDesHeader)
                                                        .addComponent(mlrMass_elConfig_pOfComSeparator, GroupLayout.PREFERRED_SIZE, 754, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(titrationHeaderLabel)
                                                        .addComponent(titrationSeparator, GroupLayout.PREFERRED_SIZE, 754, GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(contentHolderPanelLayout.createSequentialGroup()
                                                                .addGap(10, 10, 10)
                                                                .addGroup(contentHolderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(concentrationDesLabel, GroupLayout.PREFERRED_SIZE, 730, GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(mlrMass_elConfig_pOfComDes, GroupLayout.PREFERRED_SIZE, 730, GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(titrationDesLabel, GroupLayout.PREFERRED_SIZE, 730, GroupLayout.PREFERRED_SIZE))))))
                                .addContainerGap(46, Short.MAX_VALUE))
        );
        contentHolderPanelLayout.setVerticalGroup(
                contentHolderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(contentHolderPanelLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(eqBalanceHeaderLabel, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eqBalanceSeparator, GroupLayout.PREFERRED_SIZE, 2, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eqBalanceDesLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(concentrationHeaderLabel, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(concentrationSeparator, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(concentrationDesLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(mlrMass_elConfig_pOfComDesHeader, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mlrMass_elConfig_pOfComSeparator, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mlrMass_elConfig_pOfComDes, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(titrationHeaderLabel, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(titrationSeparator, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(titrationDesLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(163, Short.MAX_VALUE))
        );

        //main Layout
        GroupLayout Layout = new GroupLayout(this);
        this.setLayout(Layout);
        Layout.setHorizontalGroup(
                Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 838, Short.MAX_VALUE)
                        .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(contentHolderScrollPane, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Layout.setVerticalGroup(
                Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 634, Short.MAX_VALUE)
                        .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(contentHolderScrollPane, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
    }
}",1
"package ChemistryCalculator.frontend;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.stream.IntStream;

public class Sidebar extends JPanel {
    private final JLabel developer_sign_label = new JLabel();
    private final JLabel logoPanel = new JLabel();
    private final JSeparator logoSeparator = new JSeparator();
    private final JScrollPane menuHolderScrollPane = new JScrollPane();
    private final JPanel menuHolder = new JPanel();

    ArrayList<JPanel> menuPanels = new ArrayList<>();
    ArrayList<JLabel> menuLabels = new ArrayList<>();
    ArrayList<JPanel> bodyPanels = new ArrayList<>();


    Color active_menu_color = new Color(255, 255, 153);
    Font active_menu_font = new Font(""Segoe UI"", 1, 15);
    Color normal_menu_color = new Color(221, 221, 221);
    Font normal_menu_font = new Font(""Segoe UI"", 1,  14);
    Cursor pointer = new Cursor(Cursor.HAND_CURSOR);


    public void addMenu(String name, ImageIcon icon, JPanel mainPanel) {
        JPanel menuPanel = new JPanel();
        JLabel menuIcon = new JLabel();
        JLabel menuLabel = new JLabel();

        menuPanel.setBackground(new Color(64, 43, 100));
        menuPanel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                menuMouseClicked(evt);
            }

            public void mouseEntered(MouseEvent evt) {
                menuMouseEntered(evt);
            }

            public void mouseExited(MouseEvent evt) {
                menuMouseExited(evt);
            }
        });


        menuIcon.setHorizontalAlignment(SwingConstants.CENTER);
        menuIcon.setIcon(icon);

        menuLabel.setFont(normal_menu_font);
        menuLabel.setForeground(new Color(221, 221, 221));
        menuLabel.setText(name);


        GroupLayout menuPanelLayout = new GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
                menuPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(menuPanelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(menuIcon, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(menuLabel)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
                menuPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(menuIcon, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                        .addComponent(menuLabel, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );


        this.menuPanels.add(menuPanel);
        this.bodyPanels.add(mainPanel);
        this.menuLabels.add(menuLabel);
    }

    //after adding all menus, this method must be called to create a sidebar.
    public void build() {
        initComponent();
        setComponentLayout();
    }


    private void initComponent() {
        this.setBackground(new Color(54, 33, 89));
        menuHolderScrollPane.setBorder(null);
        menuHolderScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        menuHolder.setBackground(new Color(54, 33, 89));
        menuHolderScrollPane.setViewportView(menuHolder);

        logoPanel.setFont(new Font(""Segoe UI"", 1, 24));
        logoPanel.setForeground(new Color(221, 221, 221));
        logoPanel.setHorizontalAlignment(SwingConstants.CENTER);
        logoPanel.setText(""ChemCal"");


        developer_sign_label.setFont(new Font(""Segoe UI"", 1, 12));
        developer_sign_label.setForeground(new Color(221, 221, 221));
        developer_sign_label.setHorizontalAlignment(SwingConstants.CENTER);
        developer_sign_label.setText(""Developed by - HumbleFooL"");
    }

    private void setComponentLayout() {


        GroupLayout menuHolderLayout = new GroupLayout(menuHolder);
        menuHolder.setLayout(menuHolderLayout);
        GroupLayout.ParallelGroup parallelGroup = menuHolderLayout.createParallelGroup(GroupLayout.Alignment.LEADING);

        menuPanels.forEach(eachPanel -> {
            parallelGroup.addComponent(eachPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE);
        });


        menuHolderLayout.setHorizontalGroup(parallelGroup);

        GroupLayout.SequentialGroup sequentialGroup = menuHolderLayout.createSequentialGroup();

        menuPanels.forEach(eachPanel -> {
            sequentialGroup.addComponent(eachPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0);
        });

        menuHolderLayout.setVerticalGroup(
                menuHolderLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(sequentialGroup)
        );


        //main layout
        GroupLayout sidebar_panelLayout = new GroupLayout(this);
        this.setLayout(sidebar_panelLayout);
        sidebar_panelLayout.setHorizontalGroup(
                sidebar_panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(developer_sign_label, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(menuHolderScrollPane)
                        .addGroup(sidebar_panelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(sidebar_panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(logoPanel, GroupLayout.PREFERRED_SIZE, 230, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(logoSeparator, GroupLayout.PREFERRED_SIZE, 230, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 8, Short.MAX_VALUE))

        );
        sidebar_panelLayout.setVerticalGroup(
                sidebar_panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(sidebar_panelLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(logoPanel)
                                .addGap(18, 18, 18)
                                .addComponent(logoSeparator, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(menuHolderScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(developer_sign_label, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
        );

    }

    private void menuMouseClicked(MouseEvent evt) {
        // TODO add your handling code here:
        //when a certain menu is clicked , corresponding bodyPanel will be visible.
        IntStream.range(0, menuPanels.size()).forEach(i -> {
            if (evt.getSource().equals(menuPanels.get(i))) {
                bodyPanels.get(i).setVisible(true);
                menuLabels.get(i).setForeground(active_menu_color);
                menuLabels.get(i).setFont(active_menu_font);

            } else {
                bodyPanels.get(i).setVisible(false);
                menuLabels.get(i).setForeground(normal_menu_color);
                menuLabels.get(i).setFont(normal_menu_font);
            }
        });


    }

    private void menuMouseEntered(MouseEvent evt) {
        // TODO add your handling code here:
        JPanel getPanel = (JPanel) evt.getSource();
        getPanel.setBackground(new Color(85, 65, 118));
        getPanel.setCursor(pointer);
    }

    private void menuMouseExited(MouseEvent evt) {
        // TODO add your handling code here:
        JPanel getPanel = (JPanel) evt.getSource();
        getPanel.setBackground(new Color(64, 43, 100));

    }
}",1
"package ChemistryCalculator.frontend;

import ChemistryCalculator.backend.Converter;
import ChemistryCalculator.backend.InsufficientDataException;
import ChemistryCalculator.backend.Titration;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;


public class TitrationPanel extends JPanel {

    private static final Font SEGOE_UI = new Font(""Segoe UI"", 1,  14);
    private static final Color MAIN_COLOR = new Color(64, 43,  100);
    private static final Color GRAY = new Color(204, 204,  204);

    private final JLabel labelForAcidMoleTextfield = new JLabel();
    private final JTextField acidMoleTextfield = new JTextField();

    private final JLabel labelForAcidVolumeTextfield = new JLabel();
    private final JTextField acidVolumeTextfield = new JTextField();

    private final JLabel labelForAcidMolarityTextfield = new JLabel();
    private final JTextField acidMolarityTextfield = new JTextField();

    private final JLabel labelForBaseMoleTextfield = new JLabel();
    private final JTextField baseMoleTextfield = new JTextField();

    private final JLabel labelForBaseVolumeTextfield = new JLabel();
    private final JTextField baseVolumeTextfield = new JTextField();

    private final JLabel labelForBaseMolarityTextfield = new JLabel();
    private final JTextField baseMolarityTextfield = new JTextField();

    private final JButton getUnknownValueButton = new JButton();
    private final JButton clearButton = new JButton();

    private final JComboBox<String> acidMolarityUnitComboBox = new JComboBox<>();
    private final JComboBox<String> acidVolumeUnitComboBox = new JComboBox<>();
    private final JComboBox<String> baseMolarityUnitComboBox = new JComboBox<>();
    private final JComboBox<String> baseVolumeUnitComboBox = new JComboBox<>();

    private final JLabel notificationLabel = new JLabel();
    private final JPanel notificationPanel = new JPanel();

    public TitrationPanel() {
        initComponent();
        setComponentLayout();
    }

    private void initComponent() {
        labelForAcidMolarityTextfield.setFont(SEGOE_UI);
        labelForAcidMolarityTextfield.setForeground(MAIN_COLOR);
        labelForAcidMolarityTextfield.setText(""Molarity of Acid :"");

        labelForAcidVolumeTextfield.setFont(SEGOE_UI);
        labelForAcidVolumeTextfield.setForeground(MAIN_COLOR);
        labelForAcidVolumeTextfield.setText(""Volume of Acid :"");

        labelForBaseVolumeTextfield.setFont(SEGOE_UI);
        labelForBaseVolumeTextfield.setForeground(MAIN_COLOR);
        labelForBaseVolumeTextfield.setText(""Volume of Base :"");

        clearButton.setBackground(MAIN_COLOR);
        clearButton.setFont(SEGOE_UI);
        clearButton.setForeground(GRAY);
        clearButton.setText(""Clear"");
        clearButton.setAutoscrolls(true);
        clearButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        clearButton.addActionListener(this::clearButtonActionPerformed);

        getUnknownValueButton.setBackground(MAIN_COLOR);
        getUnknownValueButton.setFont(SEGOE_UI);
        getUnknownValueButton.setForeground(GRAY);
        getUnknownValueButton.setText(""Get unknown value"");
        getUnknownValueButton.setAutoscrolls(true);
        getUnknownValueButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        getUnknownValueButton.addActionListener(this::getUnknownValueButtonActionPerformed);

        acidMolarityUnitComboBox.setFont(SEGOE_UI);
        acidMolarityUnitComboBox.setForeground(MAIN_COLOR);
        acidMolarityUnitComboBox.setModel(new DefaultComboBoxModel<>(
                new String[]{
                        ""molars"",
                        ""decimolars"",
                        ""centimolars"",
                        ""millimolars"",
                        ""micromolars"",
                        ""nanomolars""
                }));
        acidMolarityUnitComboBox.setSelectedIndex(0);
        acidMolarityUnitComboBox.addActionListener(this::acidMolarityUnitComboBoxActionPerformed);
        acidMolarityUnitComboBox.addItemListener(this::acidMolarityUnitComboBoxItemStateChanged);

        baseMolarityUnitComboBox.setFont(SEGOE_UI);
        baseMolarityUnitComboBox.setForeground(MAIN_COLOR);
        baseMolarityUnitComboBox.setModel(new DefaultComboBoxModel<>(
                new String[]{
                        ""molars"",
                        ""decimolars"",
                        ""centimolars"",
                        ""millimolars"",
                        ""micromolars"",
                        ""nanomolars""
                }));
        baseMolarityUnitComboBox.setSelectedIndex(0);
        baseMolarityUnitComboBox.addActionListener(this::baseMolarityUnitComboBoxActionPerformed);
        baseMolarityUnitComboBox.addItemListener(this::baseMolarityUnitComboBoxItemStateChanged);

        baseVolumeUnitComboBox.setFont(SEGOE_UI);
        baseVolumeUnitComboBox.setForeground(MAIN_COLOR);
        baseVolumeUnitComboBox.setModel(new DefaultComboBoxModel<>(
                new String[]{
                        ""deciliters"",
                        ""milliliters"",
                        ""centiliters"",
                        ""liters"",
                        ""cubic_decimeters"",
                        ""cubic_millimeters"",
                        ""cubic_centimeters"",
                }
        ));
        baseVolumeUnitComboBox.setSelectedIndex(1);
        baseVolumeUnitComboBox.addActionListener(this::baseVolumeUnitComboBoxActionPerformed);
        baseVolumeUnitComboBox.addItemListener(this::baseVolumeUnitComboBoxItemStateChanged);

        acidVolumeUnitComboBox.setFont(SEGOE_UI);
        acidVolumeUnitComboBox.setForeground(MAIN_COLOR);
        acidVolumeUnitComboBox.setModel(new DefaultComboBoxModel<>(
                new String[]{
                        ""deciliters"",
                        ""milliliters"",
                        ""centiliters"",
                        ""liters"",
                        ""cubic_decimeters"",
                        ""cubic_millimeters"",
                        ""cubic_centimeters"",
                }
        ));
        acidVolumeUnitComboBox.setSelectedIndex(1);
        acidVolumeUnitComboBox.addActionListener(this::acidVolumeUnitComboBoxActionPerformed);
        acidVolumeUnitComboBox.addItemListener(this::acidVolumeUnitComboBoxItemStateChanged);

        labelForAcidMoleTextfield.setFont(SEGOE_UI);
        labelForAcidMoleTextfield.setForeground(MAIN_COLOR);
        labelForAcidMoleTextfield.setText(""Number of moles of acid :"");

        labelForBaseMoleTextfield.setFont(SEGOE_UI);
        labelForBaseMoleTextfield.setForeground(MAIN_COLOR);
        labelForBaseMoleTextfield.setText(""Number of moles of base : "");


        notificationPanel.setBackground(new Color(51, 153, 0));
        notificationPanel.setVisible(true);

        notificationLabel.setBackground(Color.red);
        notificationLabel.setFont(SEGOE_UI);
        notificationLabel.setForeground(Color.white);
        notificationLabel.setHorizontalAlignment(SwingConstants.CENTER);
        notificationLabel.setText(""Fill up any 5 fields to get unknown value"");

        labelForBaseMolarityTextfield.setFont(SEGOE_UI);
        labelForBaseMolarityTextfield.setForeground(MAIN_COLOR);
        labelForBaseMolarityTextfield.setText(""Molarity of Base :"");
    }

    private void setComponentLayout() {

        //setting notification Panel Layout
        GroupLayout notificationPanelLayout = new GroupLayout(notificationPanel);
        notificationPanel.setLayout(notificationPanelLayout);
        notificationPanelLayout.setHorizontalGroup(
                notificationPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, notificationPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(notificationLabel, GroupLayout.PREFERRED_SIZE, 654, GroupLayout.PREFERRED_SIZE))
        );
        notificationPanelLayout.setVerticalGroup(
                notificationPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(notificationPanelLayout.createSequentialGroup()
                                .addComponent(notificationLabel, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );


        //main Layout
        GroupLayout Layout = new GroupLayout(this);
        this.setLayout(Layout);
        Layout.setHorizontalGroup(
                Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addGroup(Layout.createSequentialGroup()
                                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(labelForAcidMolarityTextfield, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(labelForAcidMoleTextfield, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(labelForBaseMoleTextfield, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(labelForBaseMolarityTextfield, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(labelForAcidVolumeTextfield, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(labelForBaseVolumeTextfield, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(18, 18, 18)
                                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(acidMoleTextfield, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                                                        .addComponent(baseVolumeTextfield, GroupLayout.Alignment.LEADING)
                                                        .addComponent(baseMolarityTextfield, GroupLayout.Alignment.LEADING)
                                                        .addComponent(acidVolumeTextfield, GroupLayout.Alignment.LEADING)
                                                        .addComponent(acidMolarityTextfield, GroupLayout.Alignment.LEADING)
                                                        .addComponent(baseMoleTextfield))
                                                .addGap(18, 18, 18)
                                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(acidMolarityUnitComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(baseMolarityUnitComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(baseVolumeUnitComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(acidVolumeUnitComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addComponent(notificationPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(Layout.createSequentialGroup()
                                                .addComponent(getUnknownValueButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(clearButton)))
                                .addContainerGap(122, Short.MAX_VALUE))
        );
        Layout.setVerticalGroup(
                Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(notificationPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(labelForAcidMolarityTextfield, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(acidMolarityTextfield, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                                        .addComponent(acidMolarityUnitComboBox))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelForAcidVolumeTextfield, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(acidVolumeUnitComboBox)
                                        .addComponent(acidVolumeTextfield, GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelForBaseMolarityTextfield, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(baseMolarityTextfield, GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                                        .addComponent(baseMolarityUnitComboBox))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(labelForBaseVolumeTextfield, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(baseVolumeTextfield, GroupLayout.Alignment.LEADING)
                                        .addComponent(baseVolumeUnitComboBox, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelForAcidMoleTextfield, GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                                        .addComponent(acidMoleTextfield, GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelForBaseMoleTextfield, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(baseMoleTextfield, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addGroup(Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(getUnknownValueButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(clearButton, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );
    }

    private void getUnknownValueButtonActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
      String molarityOfAcid = null, molarityOfBase = null, volumeOfAcid = null, volumeOfBase = null;
        try {


             molarityOfAcid = acidMolarityTextfield.getText().isEmpty() ? acidMolarityTextfield.getText() :
                    String.valueOf(Converter.convert(acidMolarityUnitComboBox.getSelectedItem().toString(),
                            ""molars"",
                            Double.parseDouble(acidMolarityTextfield.getText())
                    ));
             molarityOfBase = baseMolarityTextfield.getText().isEmpty() ? baseMolarityTextfield.getText() :
                    String.valueOf(Converter.convert(baseMolarityUnitComboBox.getSelectedItem().toString(),
                            ""molars"",
                            Double.parseDouble(baseMolarityTextfield.getText())
                    ));
             volumeOfAcid = acidVolumeTextfield.getText().isEmpty() ? acidVolumeTextfield.getText() :
                    String.valueOf(Converter.convert(acidVolumeUnitComboBox.getSelectedItem().toString(),
                            ""milliliters"",
                            Double.parseDouble(acidVolumeTextfield.getText())
                    ));

             volumeOfBase = baseVolumeTextfield.getText().isEmpty() ? baseVolumeTextfield.getText() :
                    String.valueOf(Converter.convert(baseVolumeUnitComboBox.getSelectedItem().toString(),
                            ""milliliters"",
                            Double.parseDouble(baseVolumeTextfield.getText())
                    ));
        }catch (NumberFormatException e) {
            notificationLabel.setText(""Only numbers are allowed."");
            notificationPanel.setBackground(Color.red);
            notificationPanel.setVisible(true);
        }

        String numOfMolesOfAcid = acidMoleTextfield.getText();
        String numOfMolesOfBase = baseMoleTextfield.getText();

        Titration titration = new Titration(molarityOfAcid, molarityOfBase, volumeOfAcid, volumeOfBase, numOfMolesOfAcid, numOfMolesOfBase);

        if (acidMolarityTextfield.getText().isEmpty()) {
            try {
                acidMolarityTextfield.setText(
                        String.format(""%.5f"",
                                Converter.convert(""molars"",
                                        acidMolarityUnitComboBox.getSelectedItem().toString(),
                                        titration.getUnknownValue())
                        ));
                notificationPanel.setVisible(false);
            } catch (InsufficientDataException e) {
                notificationPanel.setBackground(Color.red);
                notificationLabel.setText(e.getMessage());
                notificationPanel.setVisible(true);
            } catch (NumberFormatException e) {
                notificationLabel.setText(""Only numbers are allowed."");
                notificationPanel.setBackground(Color.red);
                notificationPanel.setVisible(true);
            }
            return;
        }
        if (baseMolarityTextfield.getText().isEmpty()) {
            try {
                baseMolarityTextfield.setText(
                        String.format(""%.5f"",
                                Converter.convert(""molars"",
                                        baseMolarityUnitComboBox.getSelectedItem().toString(),
                                        titration.getUnknownValue())
                        ));
                notificationPanel.setVisible(false);
            } catch (InsufficientDataException e) {
                notificationPanel.setBackground(Color.red);
                notificationLabel.setText(e.getMessage());
                notificationPanel.setVisible(true);
            } catch (NumberFormatException e) {
                notificationLabel.setText(""Only numbers are allowed."");
                notificationPanel.setBackground(Color.red);
                notificationPanel.setVisible(true);
            }
            return;
        }
        if (acidVolumeTextfield.getText().isEmpty()) {
            try {

                acidVolumeTextfield.setText(
                        String.format(""%.5f"",
                                Converter.convert(""milliliters"",
                                        acidVolumeUnitComboBox.getSelectedItem().toString(),
                                        titration.getUnknownValue())
                        ));
                notificationPanel.setVisible(false);
            } catch (InsufficientDataException e) {
                notificationPanel.setBackground(Color.red);
                notificationLabel.setText(e.getMessage());
                notificationPanel.setVisible(true);
            } catch (NumberFormatException e) {
                notificationLabel.setText(""Only numbers are allowed."");
                notificationPanel.setBackground(Color.red);
                notificationPanel.setVisible(true);
            }
            return;
        }
        if (baseVolumeTextfield.getText().isEmpty()) {
            try {
                baseVolumeTextfield.setText(
                        String.format(""%.5f"",
                                Converter.convert(""milliliters"",
                                        baseVolumeUnitComboBox.getSelectedItem().toString(),
                                        titration.getUnknownValue())
                        ));
                notificationPanel.setVisible(false);
            } catch (InsufficientDataException e) {
                notificationPanel.setBackground(Color.red);
                notificationLabel.setText(e.getMessage());
                notificationPanel.setVisible(true);
            } catch (NumberFormatException e) {
                notificationLabel.setText(""Only numbers are allowed."");
                notificationPanel.setBackground(Color.red);
                notificationPanel.setVisible(true);
            }
            return;
        }
        if (acidMoleTextfield.getText().isEmpty()) {
            try {
                acidMoleTextfield.setText(String.format(""%.5f"", titration.getUnknownValue()));
                notificationPanel.setVisible(false);
            } catch (InsufficientDataException e) {
                notificationPanel.setBackground(Color.red);
                notificationLabel.setText(e.getMessage());
                notificationPanel.setVisible(true);
            } catch (NumberFormatException e) {
                notificationLabel.setText(""Only numbers are allowed."");
                notificationPanel.setBackground(Color.red);
                notificationPanel.setVisible(true);
            }
            return;
        }
        if (baseMoleTextfield.getText().isEmpty()) {
            try {
                baseMoleTextfield.setText(String.format(""%.5f"", titration.getUnknownValue()));
                notificationPanel.setVisible(false);
            } catch (InsufficientDataException e) {
                notificationPanel.setBackground(Color.red);
                notificationLabel.setText(e.getMessage());
                notificationPanel.setVisible(true);
            } catch (NumberFormatException e) {
                notificationLabel.setText(""Only numbers are allowed."");
                notificationPanel.setBackground(Color.red);
                notificationPanel.setVisible(true);
            }
        }

    }

    private void clearButtonActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        acidMolarityTextfield.setText(null);
        baseMolarityTextfield.setText(null);
        acidVolumeTextfield.setText(null);
        baseVolumeTextfield.setText(null);
        acidMoleTextfield.setText(null);
        baseMoleTextfield.setText(null);

        notificationPanel.setVisible(false);
    }

    String acidMolarityPreviousItem = null;
    String acidMolarityNewItem = null;
    private void acidMolarityUnitComboBoxItemStateChanged(ItemEvent evt) {
        // TODO add your handling code here:
        String molarityOfAcid = acidMolarityTextfield.getText();
        if (!molarityOfAcid.isEmpty()){
            if(evt.getStateChange() == ItemEvent.DESELECTED)
            {
                acidMolarityPreviousItem =  evt.getItem().toString();
            }
            else if(evt.getStateChange() == ItemEvent.SELECTED)
            {
                acidMolarityNewItem =  evt.getItem().toString();
            }
        }
    }

    private void acidMolarityUnitComboBoxActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String molarityOfAcid = acidMolarityTextfield.getText();
        String convertedValue;
        if (!molarityOfAcid.isEmpty() && acidMolarityPreviousItem != null && acidMolarityNewItem !=null) {

            try {
                convertedValue = String.valueOf(Converter.convert(acidMolarityPreviousItem, acidMolarityNewItem, Double.parseDouble(molarityOfAcid)));
            } catch (NumberFormatException e) {
                notificationLabel.setText(""Molarity of acid must be number"");
                notificationPanel.setBackground(Color.red);
                notificationPanel.setVisible(true);
                return;
            }
            acidMolarityTextfield.setText(convertedValue);

        }
    }

    String acidVolumePreviousItem = null;
    String acidVolumeNewItem = null;
    private void acidVolumeUnitComboBoxItemStateChanged(ItemEvent evt) {
        // TODO add your handling code here:
        String volumeOfAcid = acidVolumeTextfield.getText();
        if (!volumeOfAcid.isEmpty()){
            if(evt.getStateChange() == ItemEvent.DESELECTED)
            {
                acidVolumePreviousItem =  evt.getItem().toString();
            }
            else if(evt.getStateChange() == ItemEvent.SELECTED)
            {
                acidVolumeNewItem =  evt.getItem().toString();
            }
        }
    }

    private void acidVolumeUnitComboBoxActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String volumeOfAcid = acidVolumeTextfield.getText();
        String convertedValue;
        if (!volumeOfAcid.isEmpty() && acidVolumePreviousItem != null && acidVolumeNewItem !=null) {

            try {
                convertedValue = String.valueOf(Converter.convert(acidVolumePreviousItem, acidVolumeNewItem, Double.parseDouble(volumeOfAcid)));
            } catch (NumberFormatException e) {
                notificationLabel.setText(""Volume of acid must be number"");
                notificationPanel.setBackground(Color.red);
                notificationPanel.setVisible(true);
                return;
            }
            acidVolumeTextfield.setText(convertedValue);

        }
    }

    String baseMolarityPreviousItem = null;
    String baseMolarityNewItem = null;
    private void baseMolarityUnitComboBoxItemStateChanged(ItemEvent evt) {
        // TODO add your handling code here:
        String molarityOfBase = baseMolarityTextfield.getText();
        if (!molarityOfBase.isEmpty()){
            if(evt.getStateChange() == ItemEvent.DESELECTED)
            {
                baseMolarityPreviousItem =  evt.getItem().toString();
            }
            else if(evt.getStateChange() == ItemEvent.SELECTED)
            {
                baseMolarityNewItem =  evt.getItem().toString();
            }
        }
    }

    private void baseMolarityUnitComboBoxActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String molarityOfBase = baseMolarityTextfield.getText();
        String convertedValue;
        if (!molarityOfBase.isEmpty() && baseMolarityPreviousItem != null && baseMolarityNewItem !=null) {

            try {
                convertedValue = String.valueOf(Converter.convert(baseMolarityPreviousItem, baseMolarityNewItem, Double.parseDouble(molarityOfBase)));
            } catch (NumberFormatException e) {
                notificationLabel.setText(""Molarity of base must be number"");
                notificationPanel.setBackground(Color.red);
                notificationPanel.setVisible(true);
                return;
            }
            baseMolarityTextfield.setText(convertedValue);

        }
    }

    String baseVolumePreviousItem = null;
    String baseVolumeNewItem = null;

    private void baseVolumeUnitComboBoxItemStateChanged(ItemEvent evt) {
        // TODO add your handling code here:
        String volumeOfBase = baseVolumeTextfield.getText();
        if (!volumeOfBase.isEmpty()){
            if(evt.getStateChange() == ItemEvent.DESELECTED)
            {
                baseVolumePreviousItem =  evt.getItem().toString();
            }
            else if(evt.getStateChange() == ItemEvent.SELECTED)
            {
                baseVolumeNewItem =  evt.getItem().toString();
            }
        }
    }

    private void baseVolumeUnitComboBoxActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String volumeOfBase = baseVolumeTextfield.getText();
        String convertedValue;
        if (!volumeOfBase.isEmpty() && baseVolumePreviousItem != null && baseVolumeNewItem !=null) {

            try {
                convertedValue = String.valueOf(Converter.convert(baseVolumePreviousItem, baseVolumeNewItem, Double.parseDouble(volumeOfBase)));
            } catch (NumberFormatException e) {
                notificationLabel.setText(""Volume of base must be number"");
                notificationPanel.setBackground(Color.red);
                notificationPanel.setVisible(true);
                return;
            }
            baseVolumeTextfield.setText(convertedValue);

        }
    }


}",1
" 
package User;
 
import java.io.Serializable;

public class userstructure implements Serializable {
   private String pwd;
    private String username;
    private String nick;
    private String email;
    private boolean isLoggedIn;
     

    public  userstructure(String pwd, String username, String nick, String email) {
        this.pwd = pwd;
        this.username = username;
        this.nick = nick;
        this.email = email;

        this.isLoggedIn = false;
    }

    public userstructure(String[] info) {
        pwd = info[1];
        username = info[2];
        nick = info[3];
        email = info[4];
    }

    public userstructure() {

    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getNick() {
        return nick;
    }

    public void setNick(String nick) {
        this.nick = nick;
    }

    public String getemail() {
        return email;
    }

    public void setemail(String email) {
        this.email = email;
    }

    public boolean getIsLoggedIn() {
        return isLoggedIn;
    }

    public boolean setIsLoggedIn(boolean status) {
        this.isLoggedIn = status;
        return true;
    }

    public void setAll(String[] tmp) {
        pwd = tmp[1];
        username = tmp[2];
        nick = tmp[3];
        email = tmp[4];
    }

    public String getNameOrNick() {
        return nick != null && !nick.isEmpty() ? nick : username;
    }
    public String toString() {
        return username+"" ""+nick+"" ""+email;
    }
}",0
" 
package filedata;
import User.userstructure;
import java.io.*;
import java.util.ArrayList;

public class accountdata {
    boolean exists,available;
    private ArrayList<userstructure> accounts;
    
      public accountdata() { 
        accounts = new ArrayList<>();
        populateAccounts(""datafile1.txt"");
    }
 

    private void populateAccounts(String filename) {
        try {
            File file = new File(filename);
            if (file.exists()) {
                FileReader fileReader = new FileReader(file);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    String trimmed = line.trim();
                    String[] splitted = trimmed.split("" "");
                    userstructure u = new userstructure(splitted[0], splitted[1], splitted[2], splitted[3]);
                    accounts.add(u);
                }
                fileReader.close();
            } else {
                file.createNewFile();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
  

    public    boolean checkCredentials(String username, String password) {
        for (userstructure acct : accounts) {
          
            if (acct.getUsername().equals(username) && acct.getPwd().equals(password)) {
                exists=true  ;
                break;
            }
        }
        return  exists;
    }
    
    public    boolean checkAvaiability(String username) {
        available=true;
        for (userstructure acct : accounts) {
             
            if (acct.getUsername().equals(username)) {
                available=false;
            }else{
               available=true; 
            }
        }
        return available;
    }

    /**
     * Appends new accounts to file
     */
    private void addNewAccount(String pwd, String name, String nick, String email) {
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(""datafile1.txt"", true));
            bw.write(pwd + "" "" + name + "" "" + nick + "" "" + email);
            bw.newLine();
           
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Looks through the accounts database to find an account that matches the given information
     *
     * @param username the username of the account to find
     * @return true    if the username isn't in the database
     * false if the username is in the database
     */
    public boolean userIsAvailable(String username) {
        for (userstructure acct : accounts) {
            if (acct.getUsername().equals(username)) {
                return false;
            }
        }

        return true;
    }
    
   

    /**
     * Creates an account and adds it to the database.
     */
    public userstructure  createAccount(String pwd, String name, String nick, String email) {
         userstructure newAcct = new  userstructure(pwd, name, nick, email);
         accounts.add(newAcct);
         addNewAccount(pwd, name, nick, email);
         return newAcct;
    }

}",0
"package filedata;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class chathistory {

    String chats;
    boolean availability;

    public void createHistoryFile(String filename) {
        try {
            File chat_history = new File(filename);
            if (!chat_history.exists()) {
                chat_history.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public String getting_chatHIdtory(String filename) {
        try {
            File chat_history = new File(filename);
            if (chat_history.exists()) {
                FileReader fileReader = new FileReader(chat_history);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                chats = """";
                while ((line = bufferedReader.readLine()) != null) {
                    if (chats.equals("""")) {
                        chats = line;
                    } else {
                        chats += ""\n"" + line;
                    }

                }
            }
           
        } catch (Exception e) {
            e.printStackTrace();
        }
        return chats;
    }

    public boolean chatfileavailability(String filename) {
        try {
            File chat_history = new File(filename);
            if (chat_history.exists()) {
                availability = true;
            } else {
                availability = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return availability;
    }

    public void WriteHistory(String filename, String msg) {
        try {
            File chat_history = new File(filename);
            if (chat_history.exists()) {
                BufferedWriter bw = new BufferedWriter(new FileWriter(filename, true));
                bw.write(msg);
                bw.newLine();

                bw.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",0
"package filedata;

import User.userstructure;
import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.net.InetAddress;
import javax.swing.ImageIcon;

public class objectread {

    public String filename, username, nickname, email;
    userstructure user;
    InetAddress inetAddress;

    public objectread(String filename) {
        this.filename = filename;
        readobjectuser();
        readobjectip();
        userallobjectpass();
    }

    public userstructure readobjectuser() {
        try {
            File f = new File(filename);
            FileInputStream file = new FileInputStream(f);
            if (f.exists()) {
                ObjectInputStream objectread = new ObjectInputStream(file);
                user = (userstructure) objectread.readObject();
                objectread.close();
            } 
        } catch (Exception e) {
            System.out.println(e);
        }

        return user;

    }

    public InetAddress readobjectip() {
        try {
            FileInputStream file = new FileInputStream(filename);
            ObjectInputStream objectread = new ObjectInputStream(file);
            user = (userstructure) objectread.readObject();
            inetAddress = (InetAddress) objectread.readObject();
            objectread.close();
        } catch (Exception e) {
            System.out.println(e);
        }

        return inetAddress;

    }

    public String userallobject(String username, String nickname, String email) {

        this.username = username;
        this.nickname = nickname;
        this.email = email;
        return username + nickname + email;

    }

    public void userallobjectpass() {
        userallobject(user.getUsername(), user.getNick(), user.getemail());
    }
}",0
"package ui;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

public class FileShow extends JFrame implements ActionListener {
    String path;
    File folder;
    File[] listOfFiles;
    String[] fileNames;
    JMenuBar menuBar;
    JMenu all_files, photos, docs;
    JMenuItem all_file_list, photos_list, doc_list;

    FileShow(String path) {
        this.path = path;
        folder = new File(path);
        listOfFiles = folder.listFiles();
        fileNames = new String[listOfFiles.length];

    }

    public void display() {
        final JFrame frame = new JFrame(""File Display"");
        frame.setBounds(100, 100, 600, 600);
        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        JPanel p = new JPanel();
        p.setBounds(50, 50, 500, 500);
        p.setBorder(BorderFactory.createLineBorder(Color.BLACK, 3));
        p.add(createMenuBar());
        frame.add(p);
        frame.setVisible(true);
    }
    //Create MENU  

    JMenuBar createMenuBar() {
        for (int i = 0; i < listOfFiles.length; i++) {

            if (listOfFiles[i].isFile()) {
                fileNames[i] = listOfFiles[i].getName(); //store the file names in an array

            }
        }

        menuBar = new JMenuBar();
        photos = new JMenu(""                                     Photos"");
        photos.setPreferredSize(new Dimension(250, 100));
        photos.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));

        docs = new JMenu(""                       Documents"");
        docs.setPreferredSize(new Dimension(250, 100));
        docs.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));

        for (final String list : fileNames) {

            if (list.endsWith("".txt"") || list.endsWith("".TXT"") || list.endsWith("".docx"") || list.endsWith("".doc"") || list.endsWith("".pptx"")) {
                doc_list = new JMenuItem(list);
                doc_list.setPreferredSize(new Dimension(250, 70));
                doc_list.addActionListener(this);

                docs.add(doc_list);
            } else if (list.endsWith("".png"") || list.endsWith("".jpg"")) {
                photos_list = new JMenuItem(list);
                photos_list.setPreferredSize(new Dimension(250, 70));
                photos_list.addActionListener(this);

                photos.add(photos_list);
            }
        }

        menuBar.add(photos);
        menuBar.add(docs);
        menuBar.setBackground(Color.LIGHT_GRAY);

        return menuBar;
    }

    //Open the clicked file
    public void actionPerformed(ActionEvent ae) {
        try {
            File file = new File(path + ""//"" + ae.getActionCommand());
            Desktop desktop = Desktop.getDesktop();
            if (file.exists()) {
                desktop.open(file);
            }

        } catch (IOException ex) {
            Logger.getLogger(FileShow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 
}",0
"package ui;

import clint.file_name_transfer;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class ObjectFileCreate {

    Object object;
    String filename, name;
    InetAddress inetAddress;

    public ObjectFileCreate(Object object, String filename, String name) {
        try {
            this.filename = filename;
            this.object = object;
            this.name = name;
            this.inetAddress = InetAddress.getLocalHost();

            createfile();
            //file_name_transfer file = new file_name_transfer(filename, name);
        } catch (UnknownHostException ex) {
            ex.printStackTrace();
        }
    }

    public String createfile() {

        File file = new File(filename);
        try {
            file.createNewFile();
        } catch (IOException ex) {
           
        }
        if (file.exists()) {
            try {
                ObjectOutputStream objectwrite = new ObjectOutputStream(new FileOutputStream(file));
                objectwrite.writeObject(object);
                objectwrite.writeObject(inetAddress);
                objectwrite.close();

            } catch (IOException ei) {
                ei.printStackTrace();
            }

        }
        return filename;
    }
}",0
"package ui;
//******************************
import User.userstructure;
import filedata.accountdata;
//******************************

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.regex.Pattern;

import javax.swing.border.AbstractBorder;
import javax.swing.border.EmptyBorder;

public class createaccountWindow extends JFrame {

    private JPanel jpanel1, jpanel2;
    private JLabel usernamelabel, nicknamelabel, passwordlabel, emaillabel, logolabel, welcomelabel1, informationlabel;
    JTextField usernameField;
    JTextField nickField;
    JPasswordField passwordField;
    JTextField emailfield;
    private JButton submitButton;
    private accountdata aaccounts; 
    private ObjectFileCreate objectCreate; 
    public loginwindow loginPage;
    public boolean a;

    //private JFileChooser imagechooser;
    @SuppressWarnings(""unused"")

    public createaccountWindow() {
       aaccounts = new accountdata();
        framekeycreatewindow();
        setVisible(true);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(500, 80, 1250, 850);
        setResizable(true);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        Image icon = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/ui/iconlogo.png""));
        setIconImage(icon);

    }

    public void framekeycreatewindow() {

        jpanel1 = new JPanel();
        jpanel2 = new JPanel();

        //design
        Font fieldfont = new Font(""Arial"", Font.BOLD, 20);

        //create components
        //components of jpanel2
        Image backgroundlogo = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/ui/signUPlogo.png""));
        Image logoscaled = backgroundlogo.getScaledInstance(500, 500, Image.SCALE_SMOOTH); //image resizer jonno
        ImageIcon logo = new ImageIcon(logoscaled);

        logolabel = new JLabel();
        logolabel.setIcon(logo);

        //components of jpanel1
        informationlabel = new JLabel();
        informationlabel.setText(""Fill up the Form"");
        informationlabel.setFont(new Font(Font.SERIF, Font.BOLD, 40));
        informationlabel.setForeground(Color.WHITE);

        usernameField = new JTextField();
        usernameField.setFont(fieldfont);
        usernameField.setBackground(Color.white);
        usernameField.setForeground(Color.black);
        usernameField.setColumns(15);
        usernameField.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        nickField = new JTextField();
        nickField.setFont(fieldfont);
        nickField.setBackground(Color.white);
        nickField.setForeground(Color.BLACK);
        nickField.setColumns(15);
        nickField.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        passwordField = new JPasswordField();
        passwordField.setFont(fieldfont);
        passwordField.setBackground(Color.white);
        passwordField.setForeground(Color.black);
        passwordField.setColumns(15);
        passwordField.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        emailfield = new JTextField();
        emailfield.setFont(fieldfont);
        emailfield.setBackground(Color.white);
        emailfield.setForeground(Color.black);
        emailfield.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        submitButton = new JButton(""Signup"");
        submitButton.setFont(new Font(Font.SERIF, Font.BOLD, 20));
        submitButton.setBackground(Color.WHITE);
        submitButton.setForeground(Color.BLACK);
        submitButton.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        //layout of jrrame
        this.setLayout(new GridBagLayout());
        GridBagConstraints gridbagconstrain2 = new GridBagConstraints();
        gridbagconstrain2.weightx = 1;
        gridbagconstrain2.weighty = 1;

        gridbagconstrain2.ipadx = 1000;
        gridbagconstrain2.ipady = 1000;

        gridbagconstrain2.gridx = 0;
        gridbagconstrain2.gridwidth = 1;
        this.add(jpanel2, gridbagconstrain2);

        gridbagconstrain2.gridx = 1;
        gridbagconstrain2.gridwidth = 1;
        // gridbagconstrain2.insets = new Insets(0,0, 0, 0);
        this.add(jpanel1, gridbagconstrain2);

        //layout of jpanel1 
        jpanel1.setLayout(new GridBagLayout());
        GridBagConstraints gridbagconstrain = new GridBagConstraints();
        jpanel1.setBackground(new Color(28, 73, 102));

        gridbagconstrain.ipadx = 100;
        gridbagconstrain.ipady = 15;

        gridbagconstrain.gridy = 0;
        gridbagconstrain.gridwidth = 3;
        gridbagconstrain.fill = GridBagConstraints.CENTER;
        gridbagconstrain.insets = new Insets(30, 250, 10, 10);
        jpanel1.add(informationlabel, gridbagconstrain);

        gridbagconstrain.gridy = 1;
        gridbagconstrain.gridwidth = 1;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(30, 10, 10, 10);
        usernamelabel = new JLabel();
        usernamelabel.setFont(new Font(Font.SERIF, Font.BOLD, 20));
        usernamelabel.setText(""Username"");
        usernamelabel.setForeground(Color.WHITE);
        jpanel1.add(usernamelabel, gridbagconstrain);

        gridbagconstrain.gridy = 1;
        gridbagconstrain.gridwidth = 3;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(30, 10, 10, 10);
        jpanel1.add(usernameField, gridbagconstrain);

        gridbagconstrain.gridy = 2;
        gridbagconstrain.gridwidth = 1;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(10, 10, 10, 10);
        nicknamelabel = new JLabel();
        nicknamelabel.setFont(new Font(Font.SERIF, Font.BOLD, 20));
        nicknamelabel.setText(""Nickname"");
        nicknamelabel.setForeground(Color.WHITE);
        jpanel1.add(nicknamelabel, gridbagconstrain);

        gridbagconstrain.gridy = 2;
        gridbagconstrain.gridwidth = 3;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(5, 10, 10, 10);
        jpanel1.add(nickField, gridbagconstrain);

        gridbagconstrain.gridy = 3;
        gridbagconstrain.gridwidth = 1;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(10, 10, 10, 10);
        passwordlabel = new JLabel();
        passwordlabel.setFont(new Font(Font.SERIF, Font.BOLD, 20));
        passwordlabel.setText(""Password"");
        passwordlabel.setForeground(Color.WHITE);
        jpanel1.add(passwordlabel, gridbagconstrain);

        gridbagconstrain.gridy = 3;
        gridbagconstrain.gridwidth = 3;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(5, 10, 10, 10);
        jpanel1.add(passwordField, gridbagconstrain);

        gridbagconstrain.gridy = 4;
        gridbagconstrain.gridwidth = 1;
        gridbagconstrain.insets = new Insets(10, 10, 10, 10);
        emaillabel = new JLabel();
        emaillabel.setFont(new Font(Font.SERIF, Font.BOLD, 20));
        emaillabel.setText("" Email"");
        emaillabel.setForeground(Color.WHITE);
        jpanel1.add(emaillabel, gridbagconstrain);

        gridbagconstrain.gridy = 4;
        gridbagconstrain.gridwidth = 3;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(5, 10, 0, 10);
        jpanel1.add(emailfield, gridbagconstrain);

        gridbagconstrain.gridy = 5;
        gridbagconstrain.gridwidth = 4;
        gridbagconstrain.fill = GridBagConstraints.CENTER;
        gridbagconstrain.insets = new Insets(5, 150, 30, 10);
        jpanel1.add(submitButton, gridbagconstrain);

        //layout of jpanel2
        jpanel2.setLayout(new GridBagLayout());
        GridBagConstraints gridbagconstrain3 = new GridBagConstraints();

        jpanel2.setBackground(new Color(237, 234, 222));

        gridbagconstrain3.gridy = 0;
        gridbagconstrain3.gridwidth = 3;
        gridbagconstrain3.insets = new Insets(0, 0, 40, 0);
        jpanel2.add(logolabel, gridbagconstrain3);

        gridbagconstrain3.gridy = 1;
        gridbagconstrain3.gridwidth = 3;
        welcomelabel1 = new JLabel(""WElcome to SignUP page"");
        welcomelabel1.setForeground(new Color(28, 73, 102));
        welcomelabel1.setFont(new Font(Font.SERIF, Font.BOLD, 60));
        gridbagconstrain3.insets = new Insets(0, 0, 20, 0);
        jpanel2.add(welcomelabel1, gridbagconstrain3);

        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//*******************************************************************
               email_validation(emailfield.getText());
                if (usernameField.getText().equalsIgnoreCase("""") || nickField.getText().equalsIgnoreCase("""") || passwordField.getText().equalsIgnoreCase("""") || emailfield.getText().equalsIgnoreCase("""")) {
                    JOptionPane.showMessageDialog(jpanel1, ""Fill all the information"");
                } else if (!a) {
                    JOptionPane.showMessageDialog(jpanel1, ""Invalid Email Address"");
                    emailfield.setText("""");

               }else if(usernameField.getText().contains("" "")){
                   JOptionPane.showMessageDialog(jpanel1, ""You can not give space in user name"");
                   usernameField.setText("""");
                }
                else {

                    boolean available = aaccounts.checkAvaiability(usernameField.getText());

                    if (available == false) {
                        JOptionPane.showMessageDialog(jpanel1, ""This username is not Available"");
                       usernameField.setText("""");

                    } else {
                        userstructure newUser = aaccounts.createAccount(String.valueOf(passwordField.getPassword()), usernameField.getText(),
                                nickField.getText(), emailfield.getText());
                        String name = usernameField.getText();
                        String filename = name + "".txt"";
                        objectCreate = new ObjectFileCreate(newUser, filename, name);
                        File f = new File(""E:\\"" + usernameField.getText() + "" "" + nickField.getText());
                        f.mkdir();
                        setVisible(false);
                        loginPage = new loginwindow();

                    }
                }
//****************************************************************************************************
            }
        });

    }
    
    public boolean email_validation(String  text){
        if(Pattern.matches(""^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^-]+(?:\\.[a-zA-Z0-9_!#$%&'*+/=?`{|}~^-]+)*@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"", text)){
           a=true; 
        }
 
        return a;
        
    }

//design of the borders 
    private static class CustomeBorder extends AbstractBorder {

        public void paintBorder(Component c, Graphics g, int x, int y,
                int width, int height) {
            // TODO Auto-generated method stubs
            super.paintBorder(c, g, x, y, width, height);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setStroke(new BasicStroke(20));
            g2d.setColor(new Color(28, 73, 102));
            g2d.drawRoundRect(x, y, width - 1, height - 1, 30, 30);

        }
    }

}",1
"package ui;
import User.userstructure; 

import filedata.accountdata;
//import filedata.objectread; 
//import  server.serversocket;
import clint.clintsocket;
import filedata.objectread;
import javax.swing.*;
import java.awt.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.border.AbstractBorder;
import javax.swing.border.EmptyBorder;

public class loginwindow extends JFrame {

    private JPanel jpanel1, jpanel2;
    private JLabel usernamelabel, passwordlabel, loginlabel, newherelabel, backgroundlabel ,welcomelabel1;
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton submitButton, createButton;

    public loginwindow() {

        framekeyloginwindow();
        setVisible(true);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(500, 80, 1250, 850);//upor nich weight hight
        setResizable(true);
        Image iconlogo = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/ui/iconlogo.png""));
        Image icon = iconlogo.getScaledInstance(500, 500, Image.SCALE_SMOOTH);
        setIconImage(icon);
        setExtendedState(JFrame.MAXIMIZED_BOTH); 
//        setUndecorated(true);

    }

    public void framekeyloginwindow() {

        this.getContentPane().setBackground(Color.BLACK);
        jpanel1 = new JPanel();
        jpanel2 = new JPanel();

        Font fieldfont = new Font(""Arial"", Font.PLAIN, 20);
        Font fontbutton = new Font(Font.SERIF, Font.BOLD, 15);
        Font fieldfont2 = new Font(Font.SERIF, Font.BOLD, 20);
        Image backgroundlogo = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/ui/logo.png""));

        //elements
        usernameField = new JTextField();
        usernameField.setFont(fieldfont);
        usernameField.setBackground(Color.white);
        usernameField.setForeground(Color.black);
        //usernameField.setColumns(15);
        usernameField.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        passwordField = new JPasswordField();
        passwordField.setFont(fieldfont);
        passwordField.setBackground(Color.white);
        passwordField.setForeground(Color.black);
        //passwordField.setColumns(15);
        passwordField.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        submitButton = new JButton(""Log In"");
        submitButton.setFont(fontbutton);
        submitButton.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        createButton = new JButton(""Sign up"");
        createButton.setFont(fontbutton);
        createButton.setForeground(Color.BLACK);
        //createButton.setBackground(new Color(191, 230, 255));
        createButton.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        //layout for total jframe
        this.setLayout(new GridBagLayout());
        GridBagConstraints gridbagconstrain2 = new GridBagConstraints();
        gridbagconstrain2.weightx=1;
        gridbagconstrain2.weighty=1;
        
         gridbagconstrain2.ipadx=1000;
         gridbagconstrain2.ipady=1000;
          

        gridbagconstrain2.gridx = 0;
        gridbagconstrain2.gridwidth = 1;
        this.add(jpanel2, gridbagconstrain2);

        gridbagconstrain2.gridx = 1;
        gridbagconstrain2.gridwidth = 1;
       // gridbagconstrain2.insets = new Insets(0,0, 0, 0);
        this.add(jpanel1, gridbagconstrain2);

        //<<<<<<<<<<<<<<<<<<<<<<<<<layout of jpanel login sight
        jpanel1.setLayout(new GridBagLayout());
        GridBagConstraints gridbagconstrain = new GridBagConstraints();
 
        jpanel1.setBackground(new Color(28, 73, 102));//new Color(int,int,int) -rgb new mix color hoi
        
        
        gridbagconstrain.gridy = 0;
        gridbagconstrain.gridx = 2;
        gridbagconstrain.gridwidth = 2;
        gridbagconstrain.insets = new Insets(140, 0, 40, 0);
        loginlabel = new JLabel(""Log in"");
        loginlabel.setForeground(Color.white);
        loginlabel.setFont(new Font(Font.SERIF, Font.BOLD, 40));
        jpanel1.add(loginlabel, gridbagconstrain);
 
        gridbagconstrain.gridy = 1;
        gridbagconstrain.gridx = 1;
        gridbagconstrain.gridwidth = 1;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(50, 50, 20, 0);
         
        usernamelabel = new JLabel();
        usernamelabel.setFont(fieldfont2);
        usernamelabel.setText(""Username"");
        usernamelabel.setForeground(Color.WHITE);
 
        jpanel1.add(usernamelabel, gridbagconstrain);

        gridbagconstrain.gridy = 1;
        gridbagconstrain.gridwidth = 3;
        gridbagconstrain.gridx = 2;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(50, 15, 20, 50);
        gridbagconstrain.ipadx=10;
        gridbagconstrain.ipady=10;
        
        jpanel1.add(usernameField, gridbagconstrain);

        gridbagconstrain.gridy = 2;
        gridbagconstrain.gridwidth = 1;
        gridbagconstrain.gridx = 1;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(10, 50, 20, 05);
        passwordlabel = new JLabel();
        passwordlabel.setFont(fieldfont2);
        passwordlabel.setText(""Password"");
        passwordlabel.setForeground(Color.WHITE);
 
        jpanel1.add(passwordlabel, gridbagconstrain);

        gridbagconstrain.gridy = 2;
        gridbagconstrain.gridx = 2;
        gridbagconstrain.gridwidth = 3;
        gridbagconstrain.fill = GridBagConstraints.BOTH;
        gridbagconstrain.insets = new Insets(10, 15, 20, 50);
        jpanel1.add(passwordField, gridbagconstrain);

        gridbagconstrain.gridy = 3;
        gridbagconstrain.gridx = 2;
        gridbagconstrain.gridwidth = 1;
        gridbagconstrain.insets = new Insets(20, 40, 250, 40);//uldr upur theke,left theke,nich theke,right theke.
        gridbagconstrain.ipadx = 60;
        jpanel1.add(submitButton, gridbagconstrain);

        gridbagconstrain.gridy = 3;
        gridbagconstrain.gridx = 3;
        gridbagconstrain.gridwidth = 1;
        gridbagconstrain.insets = new Insets(20, 0, 250, 0);//uldr upur theke,left theke,nich theke,right theke
        newherelabel = new JLabel();
        newherelabel.setText(""New here ?"");
        newherelabel.setForeground(Color.WHITE);
        gridbagconstrain.ipadx = 5;
        jpanel1.add(newherelabel, gridbagconstrain);

        gridbagconstrain.gridy = 3;
        gridbagconstrain.gridx = 4;
        gridbagconstrain.gridwidth = 1;
        gridbagconstrain.ipadx = 0;
        gridbagconstrain.ipady = 5;
        gridbagconstrain.insets = new Insets(20, 0, 250, 50);
        jpanel1.add(createButton, gridbagconstrain);

        //label2 logo layout 
        jpanel2.setLayout(new GridBagLayout());
        GridBagConstraints gridbagconstrain3 = new GridBagConstraints();
        
        jpanel2.setBackground(new Color(237, 234, 222));
        
        gridbagconstrain3.gridy = 0;
        gridbagconstrain3.gridwidth = 3;
        backgroundlabel = new JLabel();
        Image logoscaled = backgroundlogo.getScaledInstance(350, 350, Image.SCALE_SMOOTH); //image resizer jonno
        ImageIcon logo = new ImageIcon(logoscaled);
        backgroundlabel.setIcon(logo);
        gridbagconstrain3.insets = new Insets(0, 0,40, 0);
        jpanel2.add(backgroundlabel, gridbagconstrain3);

        gridbagconstrain3.gridy = 1;
        gridbagconstrain3.gridwidth = 3;
        welcomelabel1 = new JLabel("" Welcome Back!"");
        welcomelabel1.setForeground(new Color(28, 73, 102));
        welcomelabel1.setFont(new Font(Font.SERIF, Font.BOLD, 60));
        gridbagconstrain3.insets = new Insets(0, 0,20, 0);
        jpanel2.add(welcomelabel1, gridbagconstrain3);
 

        createButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                createaccountWindow crw = new createaccountWindow();
                setVisible(false);
            }
        });
        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//*****************************************************************************************************************************

                accountdata aaccountdata = new accountdata();
                boolean exist;

                exist = aaccountdata.checkCredentials(usernameField.getText(), String.valueOf(passwordField.getPassword()));

                if (exist != false) {
                    File filepath = new File(usernameField.getText() + "".txt"");
                    if(filepath.exists()){
                    objectread user = new objectread(filepath.getAbsolutePath());
                    personalchatroomui userchatroom = new personalchatroomui(user.username + "" "" + user.nickname, filepath);
                    //Sharefilechatroomui userchatroom=new Sharefilechatroomui( user.dp,user.username+"" ""+user.nickname,filepath );
                    //clintsocket clint=new clintsocket(user.dp,user.username+"" ""+user.nickname,filepath); 
                    setVisible(false);
                    //clintsocket clint=new clintsocket(usernameField.getText(),filepath); 
                    //serversocket serve=new serversocket(null);
                    }else{
                        JOptionPane.showMessageDialog(jpanel1, ""This account doesnot exits!Please create new account with no space in username""); 
                    }
                    

                } else {
                    JOptionPane.showMessageDialog(jpanel1, ""Incorrect username or password."");
                }
//************************************************************************************************************************************************************
            }
        });
    }

    //design of the borders
    private static class CustomeBorder extends AbstractBorder {

        public void paintBorder(Component c, Graphics g, int x, int y,
                int width, int height) {
            // TODO Auto-generated method stubs
            super.paintBorder(c, g, x, y, width, height);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setStroke(new BasicStroke(12));
            g2d.setColor(new Color(28, 73, 102));
            g2d.drawRoundRect(x, y, width - 1, height - 1, 25, 25);
        }
    }

}",1
"package ui;

import clint.clintsocket;
import filedata.chathistory;
import tictactoy.TictacMainFrame;
import dictionary.DictionaryMainFrame;
import static clint.clintsocket.sendingstream;
import clint.clintthread;
import javax.swing.*;
import java.awt.*;
import static java.awt.Component.CENTER_ALIGNMENT;
import java.io.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Objects;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javafx.application.Platform.exit;
import javax.swing.border.AbstractBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicMenuBarUI;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;

public class personalchatroomui extends clintsocket {
    //frame elements

    private JPanel jpanel1, jpanel2, jpanel301;
    private JLabel logolabel, connectedfriendslabel, clintnamelabel;
    private JButton gamingzonebutton, filebutton, picturebutton, sendbutton, logout_button, friendship_statusbutton, shareditemmenu_button, dictionary_Button;
    private JScrollPane allmsgscrollpane, usermsgscrollpane, connectedfriendsscrollpane;
    // private JMenuBar shareditemmenubar;
    // private JMenu shareditemmenu;
    // private JMenuItem file, picture, object1, object2;
    private JTextPane allmsgtextpane, usermsgtextpane;
    public ImageIcon dp, dpclint;
    public File file_of_friend, selected_picture_tosend, selected_file_tosend;
    public JFileChooser Picture_Chooser, file_chooser;
    public Image picture_tosend;
    public ImageIcon picture_tosend_icon;

    //imp other data type
    public String nameclint, clintname, clint, previousclint, previousmsg, personwhosent_numberstring, actualmsg, clintnumber_string, personwhosent_name, friendrequestname, filename, filelenth_string;
    public int clintnumber, current_clintnumber = -1, personwhosent_number, friendrequestnumber, fileLength;
    public Thread clintlist, clintchathead, msgchecker, threadclint;
    //File objectfilepath;
    //public clintsocket clintname;
    //public clintthread threadclass; //which will be created with clint name
    public static Vector<clintthread> clint_listofclintthreadclass = new Vector<>();
    public ArrayList<String> Friend_list = new ArrayList<String>();
    boolean logout;
    public boolean clintnamebuttton_clicked = false, flag, button_createfalg = true, isfile = false;

    chathistory history_chats = new chathistory();

    //frame  and global images
    JFrame frame = new JFrame();

    Image logobackground = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/ui/user.png""));
    Image logobackgroundscaled = logobackground.getScaledInstance(200, 200, Image.SCALE_SMOOTH); //image resizer jonno
    ImageIcon logo = new ImageIcon(logobackgroundscaled);

    Image serverdp = logobackground.getScaledInstance(50, 100, Image.SCALE_SMOOTH);

    public personalchatroomui(String name, File objectfilepath) {

        //super(name,objectfilepath); //if clitnsocket class has perameter
        this.name = name;
        System.out.println(name);

        this.objectfilepath = objectfilepath;
        dpclint = new ImageIcon(serverdp);

        nameclint = new String();
        file_of_friend = new File(""friendlistof "" + name + "".txt"");

        setconnectiontoserver();
        fromFile_toFriendlist();
        framekeypersonalchatroom();

        //setting frame
        frame.setVisible(true);
        // frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE);
        frame.setBounds(0, 20, 1035, 1050);
        frame.setResizable(true);
        Image icon = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/ui/iconlogo.png""));
        frame.setIconImage(icon);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
               loggingout();
            }
        });

        //frame.pack(); 
    }

    //gets the clintname after clintbutton is clicked
    public String getclintname(String nameclint) {
        return this.nameclint = nameclint;
    }

    public int getclintnumber(int clintnumber) {
        return this.current_clintnumber = current_clintnumber;
    }

    //file recieve method
    public void recievefile() {
        try { //file recieve

            recievingstream = new DataInputStream(socket.getInputStream());

            fileLength = recievingstream.readInt();
            if (fileLength > 0) {
                byte[] fileContentBytes = new byte[fileLength];
                recievingstream.readFully(fileContentBytes, 0, fileContentBytes.length);
                File saveFile = new File(""E:\\"" + name + ""\\"" + filename);
                FileOutputStream fout = new FileOutputStream(saveFile);
                fout.write(fileContentBytes);
            }
            JOptionPane.showMessageDialog(null, ""You have just recieved a File named :"" + filename + "" from "" + personwhosent_name);
            allmsgtextpane.setText(allmsgtextpane.getText().trim() + ""\n"" + "" you have recieved File "" + filename);

            isfile = false;
        } catch (Exception ex) {
            System.out.println(""file recieve"" + ex);
        }
    }

    //frame key elements and socket work 
    public void framekeypersonalchatroom() {

        logout =false;
        frame.getContentPane().setBackground(Color.BLACK);

        jpanel1 = new JPanel();

        jpanel2 = new JPanel();

        jpanel2.setBackground(Color.WHITE);
 

        jpanel301 = new JPanel();
        BoxLayout box = new BoxLayout(jpanel301, BoxLayout.PAGE_AXIS);
        jpanel301.setLayout(box);

        //create components 
        //jpanel1 component      
//        namelabel = new JLabel(name);
//        namelabel.setFont(new Font(Font.SERIF, Font.BOLD, 40));
//        namelabel.setForeground(new Color(28, 73, 102));
        logout_button = new JButton(""Log out"");
        logout_button.setFont(new Font(Font.SERIF, Font.BOLD, 30));
        logout_button.setForeground(Color.white);
        logout_button.setBackground(new Color(28, 73, 102));
        logout_button.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder1(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        shareditemmenu_button = new JButton(""Shared Item"");
        shareditemmenu_button.setFont(new Font(Font.SERIF, Font.BOLD, 30));
        shareditemmenu_button.setForeground(Color.white);
        shareditemmenu_button.setBackground(new Color(28, 73, 102));
        shareditemmenu_button.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder1(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        connectedfriendslabel = new JLabel(""Connected People"");
        connectedfriendslabel.setFont(new Font(Font.DIALOG_INPUT, Font.BOLD, 30));
        connectedfriendslabel.setForeground(new Color(28, 73, 102));

        connectedfriendsscrollpane = new JScrollPane(jpanel301);
        connectedfriendsscrollpane.setPreferredSize(new Dimension(150, 400));

        gamingzonebutton = new JButton(""TicTocTOe"");
        gamingzonebutton.setFont(new Font(Font.SERIF, Font.BOLD, 30));
        gamingzonebutton.setForeground(Color.white);
        gamingzonebutton.setBackground(new Color(28, 73, 102));
        gamingzonebutton.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder1(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        dictionary_Button = new JButton(""Dictionary"");
        dictionary_Button.setFont(new Font(Font.SERIF, Font.BOLD, 30));
        dictionary_Button.setForeground(Color.white);
        dictionary_Button.setBackground(new Color(28, 73, 102));
        dictionary_Button.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder1(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        logolabel = new JLabel(logo);

        allmsgtextpane = new JTextPane();
        allmsgtextpane.setFont(new Font(Font.SERIF, Font.BOLD, 20));
        allmsgtextpane.setEditable(false);

        usermsgtextpane = new JTextPane();
        usermsgtextpane.setEditable(false);

        allmsgscrollpane = new JScrollPane(allmsgtextpane);
        allmsgscrollpane.setPreferredSize(new Dimension(500, 500));

        usermsgscrollpane = new JScrollPane(usermsgtextpane);
        usermsgscrollpane.setPreferredSize(new Dimension(300, 30));

        //send buutton background image
        Image sendbackground = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/ui/sendlogo.png""));
        Image sendbackgroundscaled = sendbackground.getScaledInstance(50, 50, Image.SCALE_SMOOTH); //image resizer jonno
        ImageIcon sendlogo = new ImageIcon(sendbackgroundscaled);
        sendbutton = new JButton(sendlogo);
        sendbutton.setBackground(new Color(28, 73, 102));
        sendbutton.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));
        //image buutton background image
        Image picturebackground = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/ui/picturelogo.png""));
        Image picturebackgroundscaled = picturebackground.getScaledInstance(75, 75, Image.SCALE_SMOOTH); //image resizer jonno
        ImageIcon picturelogo = new ImageIcon(picturebackgroundscaled);
        picturebutton = new JButton(picturelogo);
        picturebutton.setBackground(new Color(28, 73, 102));
        picturebutton.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));
        Picture_Chooser = new JFileChooser();
        file_chooser = new JFileChooser();

        //file buutton background image
        Image filebackground = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/ui/filelogo.png""));
        Image filebackgroundscaled = filebackground.getScaledInstance(65, 65, Image.SCALE_SMOOTH); //image resizer jonno
        ImageIcon filelogo = new ImageIcon(filebackgroundscaled);
        filebutton = new JButton(filelogo);
        filebutton.setBackground(new Color(28, 73, 102));
        filebutton.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        //layout of jpanel1
        jpanel1.setLayout(new GridBagLayout());
        GridBagConstraints gridbagconstrain1 = new GridBagConstraints();
        jpanel1.setBackground(new Color(237, 234, 222));
        gridbagconstrain1.ipadx =300;

        gridbagconstrain1.gridy = 1;
        gridbagconstrain1.ipady = 20;
        gridbagconstrain1.insets = new Insets(0, 0, 5, 0);

        jpanel1.add(logolabel, gridbagconstrain1);

//        gridbagconstrain1.gridy = 1;
//        //gridbagconstrain1.gridx = 1;
//       // gridbagconstrain1.ipady = 20;
//        gridbagconstrain1.gridwidth = 1; 
//        gridbagconstrain1.insets = new Insets(0,0, 5, 0);
//
//        jpanel1.add(namelabel, gridbagconstrain1);
        gridbagconstrain1.gridy = 2;
        gridbagconstrain1.insets = new Insets(0, 0, 0, 0);

        jpanel1.add(connectedfriendslabel, gridbagconstrain1);

        gridbagconstrain1.fill = GridBagConstraints.BOTH;
        gridbagconstrain1.gridy = 3;
        gridbagconstrain1.insets = new Insets(0, 0, 0, 0);
         
        jpanel1.add(connectedfriendsscrollpane, gridbagconstrain1);

        gridbagconstrain1.gridy = 4;
        gridbagconstrain1.ipady = 0;
        gridbagconstrain1.insets = new Insets(5, 0, 10, 0);

        jpanel1.add(shareditemmenu_button, gridbagconstrain1);

        gridbagconstrain1.gridy = 5;
        gridbagconstrain1.insets = new Insets(0, 0, 0, 0);

        jpanel1.add(gamingzonebutton, gridbagconstrain1);

        gridbagconstrain1.gridy = 6;        
        gridbagconstrain1.insets = new Insets(0, 0, 0, 0);

        jpanel1.add(dictionary_Button, gridbagconstrain1);

        gridbagconstrain1.gridy = 7;
        gridbagconstrain1.insets = new Insets(0, 0, 20, 0);

        jpanel1.add(logout_button, gridbagconstrain1);

        //layout of jpanel2 
        jpanel2.setLayout(new GridBagLayout());
        GridBagConstraints gridbagconstrain2 = new GridBagConstraints();
        jpanel2.setBackground(new Color(28, 73, 102));

        gridbagconstrain2.ipadx = 800;

        gridbagconstrain2.gridy = 1;
        gridbagconstrain2.ipady = 650;//this changes the hole hight;
        gridbagconstrain2.gridwidth = 0;
        gridbagconstrain2.fill = GridBagConstraints.BOTH;
        gridbagconstrain2.insets = new Insets(0, 0, 20, 0);

        jpanel2.add(allmsgscrollpane, gridbagconstrain2);

        gridbagconstrain2.gridy = 2;
        gridbagconstrain2.ipady = 30;
        gridbagconstrain2.gridwidth = 6;
        gridbagconstrain2.fill = GridBagConstraints.BOTH;
        gridbagconstrain2.insets = new Insets(0, 0, 10, 0);

        jpanel2.add(usermsgscrollpane, gridbagconstrain2);

        gridbagconstrain2.gridy = 3; 
        gridbagconstrain2.ipadx = 0;
        gridbagconstrain2.ipady = 0;
        gridbagconstrain2.gridwidth = 1;
        gridbagconstrain2.fill = GridBagConstraints.BOTH;
        gridbagconstrain2.insets = new Insets(0, 0, 0, 0);

        jpanel2.add(sendbutton, gridbagconstrain2);

        //layout of main jframe
        frame.setLayout(new GridBagLayout());
        GridBagConstraints gridbagconstrain = new GridBagConstraints();
        gridbagconstrain.weightx = 1;
        gridbagconstrain.weighty = 1;

        gridbagconstrain.ipadx = 1000;
        gridbagconstrain.ipady = 1000;

        gridbagconstrain.gridx = 1;
        gridbagconstrain.gridwidth = 1; 
        
        frame.add(jpanel1, gridbagconstrain);

        gridbagconstrain.gridx = 0;
        gridbagconstrain.gridwidth = 1; 
        
        frame.add(jpanel2, gridbagconstrain);

        //end of frame work
        //starting of functional code
        //creating thread for msg or clint list recieve  //and creating clint socket
        //sending msg
        readMessage = new Thread(new Runnable() {
            @Override
            public void run() {

                while (true) {
                    if (logout==false) {
                        try {
                            msg = recievingstream.readUTF();

                            //for checking either its new clintname or the main msg
                            if (msg.contains(""%c@"")) {

                                //deciding the messege as token 
                                StringTokenizer token = new StringTokenizer(msg, ""%c@"", false); //c%@ is token delimeter
                                clintnumber_string = token.nextToken();//clintnumber comes as string
                                clintname = token.nextToken();
                                clintnumber = Integer.parseInt(clintnumber_string);//converting string clintnumber into int for better matching

                                //this part is for checking if the incoming clint is already frind or not 
                                //if friend it makes friend flag true and clint is added to clint_listofclintthreadclass 
                                boolean friend_flag=false;
                                if (clintname != null) {
                                    for (String friend : Friend_list) {                                      
                                        if (friend.equals(clintname)) {
                                            friend_flag = true;
                                            break;                                             
                                        }  
                                    }
                                    

                                    // calling thread class for clint && creating object for thread to handle each clint msg
                                    clintthread clintthreadclass = new clintthread(clintname, clintnumber, friend_flag);
                                    clint_listofclintthreadclass.add(clintthreadclass);

                                    //checks for history of the frinds chat
                                    boolean exists;
//***************************************************************************************************************************
                                    exists = history_chats.chatfileavailability(""Chat of"" + clintname+name + "".txt"");

                                    //if the friends chat list is available gets the chat from the history
                                    if (exists == true) {
                                        String chats;
                                        chats = history_chats.getting_chatHIdtory(""Chat of"" + clintname+name + "".txt"");
                                        for (clintthread clint : clint_listofclintthreadclass) {
                                            if (clint.number == clintnumber) {
                                                clint.msgelist.add(chats);
                                            }
                                        }

                                    }
//*******************************************************************************************************************************

                                    JButton button = new JButton(clintname);
                                    button.setAlignmentX(CENTER_ALIGNMENT);
                                    button.setFont(new Font(Font.SERIF, Font.BOLD, 30));
                                    button.setForeground(Color.white);
                                    button.setBackground(new Color(28, 73, 102));
                                    frame.setVisible(false);//refresh starts                                 
                                    jpanel301.add(button);
                                    frame.setVisible(true);//refresh ends

                                    //after clintname cliclicked chatbox will get clint name and dp and other options basis of friendship
                                    button.addActionListener(new ActionListener() {

                                        @Override
                                        public void actionPerformed(ActionEvent e) {
                                            //
                                            usermsgtextpane.setEditable(true);
                                            //getting clintname
                                            nameclint = button.getText();
                                            getclintname(nameclint);

                                            for (clintthread clint : clint_listofclintthreadclass) {
                                                if (clint.name.equals(nameclint)) {
                                                    current_clintnumber = clint.number;
                                                    getclintnumber(current_clintnumber);
                                                    flag = clint.friend;//checks if the clicked clint is friend or not
                                                    System.out.println(flag);
                                                    //flag is used later for providing friends special option(showing button)
                                                    //or providing friend req option
                                                }
                                            }
//
                                            if (clintnamebuttton_clicked == true) {//if any clintbutton is already clicked on we have to remove its elements from frame
                                                frame.setVisible(false);//refresh start
                                                jpanel2.remove(clintnamelabel);

                                                if (flag == true) {//if the clint is friend
                                                    jpanel2.remove(friendship_statusbutton);
                                                    dpandnamelabel(gridbagconstrain2, flag);//this methods sets the frame according to frindship flag

                                                } else {//if the clint is not friend
                                                    dpandnamelabel(gridbagconstrain2, flag);//^
                                                    jpanel2.remove(picturebutton);
                                                    jpanel2.remove(filebutton);
                                                }

                                                frame.setVisible(true);//refresh ends
                                            } else {// for first time login frame
                                                usermsgtextpane.setEditable(true);
                                                //refresh start
                                                frame.setVisible(false);
                                                dpandnamelabel(gridbagconstrain2, flag);//^
                                                //refresh ends
                                                frame.setVisible(true);
                                            }
                                            clintnamebuttton_clicked = true;

                                            //another thread for checking msg of current clints by checking previous created clintthread class
                                            msgchecker = new Thread(new Runnable() {
                                                @Override
                                                public void run() {
                                                    //System.out.println(nameclint);
                                                    for (clintthread clint : clint_listofclintthreadclass) {

                                                        if (clintnumber == current_clintnumber) {

                                                            for (String oldmsg : clint.msgelist) {
                                                                //setting style         
                                                                SimpleAttributeSet attributeSet = new SimpleAttributeSet();
                                                                StyleConstants.setBold(attributeSet, true);
                                                                StyleConstants.setForeground(attributeSet, Color.BLACK);
                                                                // StyleConstants.setBackground(attributeSet, new Color(1, 51, 20));
                                                                allmsgtextpane.setCharacterAttributes(attributeSet, true);

                                                                allmsgtextpane.setText(allmsgtextpane.getText().trim() + ""\n"" + oldmsg);
                                                            }
                                                        }
                                                    }
                                                }
                                            });
                                            msgchecker.setDaemon(true);
                                            msgchecker.start();

                                        }
                                    });

                                }
                            } //if the  clint goes offline ,removes the clint from clintlist
                            else if (msg.contains("",_(:);)("")) {

                                StringTokenizer token = new StringTokenizer(msg, "",_(:);)( "", false);
                                clintnumber_string = token.nextToken();
                                clintnumber = Integer.parseInt(clintnumber_string);

                                for (clintthread clint : clint_listofclintthreadclass) {

                                    if (clint.number == clintnumber) {
                                        for (int i = 0;; i++) {
                                            frame.setVisible(false);
                                            JButton button = (JButton) jpanel301.getComponent(i);
                                            String name = button.getText();
                                            if (clint.name.equals(name)) {
                                                jpanel301.remove(i);
                                                frame.setVisible(true);
                                                break;
                                            }
                                        }
                                        clint_listofclintthreadclass.remove(clint);
                                        break;
                                    }
                                }
                                //if current chathead clint goes offline 
                                if (clintnumber == current_clintnumber) {
                                    frame.setVisible(false);
                                    jpanel2.remove(clintnamelabel);
                                    jpanel2.remove(friendship_statusbutton);
                                    jpanel2.remove(picturebutton);
                                    jpanel2.remove(filebutton);
                                    allmsgtextpane.setText(null);
                                    usermsgtextpane.setEditable(false);
                                    frame.setVisible(true);
                                }

                            }//if new friend request comes
                            else if (msg.contains(""&&&&&&&&"")) {

                                StringTokenizer token = new StringTokenizer(msg, "" &&&&&&&&"", false);
                                String friendclintnumber_string = token.nextToken();
                                friendrequestname = token.nextToken();
                                friendrequestnumber = Integer.parseInt(friendclintnumber_string);

                                int decission = JOptionPane.showConfirmDialog(frame, ""Do you want to be friends with "" + friendrequestname + "" ?"");
                                if (decission == JOptionPane.YES_OPTION) {
                                    sendingstream.writeUTF(friendrequestnumber + "" ^^^^^^^^"");
                                    String friend_name = new String();
                                    for (clintthread clint : clint_listofclintthreadclass) {
                                        if (clint.number == friendrequestnumber) {
                                            clint.friend = true;
                                            friend_name = clint.name;
                                        }
                                    }

                                    //creates chat history file for the new friend
                                   history_chats.createHistoryFile(""Chat of"" + friend_name+name + "".txt"");

                                    FileOfFriendLsit(friend_name);
                                    if (friendrequestnumber == current_clintnumber) {
                                        frame.setVisible(false);
                                        jpanel2.remove(friendship_statusbutton);
                                        option(gridbagconstrain2);
                                        frame.setVisible(true);

                                    }
                                }

                            }//if previously send friend request's reply comes
                            else if (msg.endsWith(""^^^^^^^^"")) {

                                StringTokenizer token = new StringTokenizer(msg, "" ^^^^^^^^"", false);
                                String friendclintnumber_string = token.nextToken();

                                String friend_name = new String();
                                friendrequestnumber = Integer.parseInt(friendclintnumber_string);

                                for (clintthread clint : clint_listofclintthreadclass) {
                                    if (clint.number == friendrequestnumber) {
                                        clint.friend = true;
                                        friend_name = clint.name;
                                    }
                                }
                                //creates chat history file for the new friend
                                history_chats.createHistoryFile(""Chat of"" + friend_name+name + "".txt"");

                                FileOfFriendLsit(friend_name);//this method add new frind name to the friend list file
                                frame.setVisible(false);
                                jpanel2.remove(friendship_statusbutton);
                                option(gridbagconstrain2);
                                frame.setVisible(true);

                            }//if a file is coming 
                            else if (msg.endsWith(""~%~~"")) {
                                StringTokenizer token = new StringTokenizer(msg, ""#"", false);

                                filename = token.nextToken();
                                System.out.println(filename);
                                personwhosent_numberstring = token.nextToken();
                                personwhosent_name = token.nextToken();
                                personwhosent_number = Integer.parseInt(personwhosent_numberstring);
                                recievefile();
                                isfile = true;

                            } //if its actual msg 
                            else {
                                StringTokenizer st = new StringTokenizer(msg, ""#"", false);
                                actualmsg = st.nextToken();
                                personwhosent_numberstring = st.nextToken();
                                personwhosent_name = st.nextToken();
                                personwhosent_number = Integer.parseInt(personwhosent_numberstring);

                                //if the person chathead is on
                                if (personwhosent_number == current_clintnumber) {
                                    //setting msg to chatbox 
                                    allmsgtextpane.setText(allmsgtextpane.getText().trim() + ""\n("" + nameclint + ""):------->"" + actualmsg);

                                }
                                //saves msg in history
                               history_chats.WriteHistory(""Chat of"" +personwhosent_name+name + "".txt"", ""("" + personwhosent_name + "")------->"" + actualmsg);
                                for (clintthread clint : clint_listofclintthreadclass) {
                                    if (clint.number == personwhosent_number) {
                                        clint.msgelist.add(personwhosent_name + "": "" + actualmsg);
                                    }
                                }

                            }

                        } catch (IOException ex) {
                            System.out.println(ex + "" personalchatroom readmsgthread"");
                        }
                    } else {

                        break;
                    }

                }
            }
        }
        );
        //starting msg or clint name recieve thread
        readMessage.start();

        sendbutton.addActionListener(
                new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e
            ) {
                //getting msg from textpane
                msg = usermsgtextpane.getText();
                if (msg.equals("""") == false) {
                    try {
                        if (!msg.contains(""%c@"") && !msg.contains("",_(:);)("") && !msg.contains(""&&&&&&&&"") && !msg.endsWith(""^^^^^^^^"") && !msg.endsWith(""~%~~"")) {
                            sendingstream.writeUTF(msg + ""#"" + current_clintnumber);
                            allmsgtextpane.setText(allmsgtextpane.getText().trim() + ""\n"" + msg + "" <------:("" + name + "")"");
                            usermsgtextpane.setText(null);

                            //saves msh in history
                            //history_chats.WriteHistory(""Chat of"" +nameclint+name + "".txt"", msg + "" <------:("" + name + "")"");**********************************************************************

                            //sendingstream.writeUTF(msg);
                            //System.out.println(nameclint+""lol"");
                        } else {
                            JOptionPane.showMessageDialog(null, ""Sorry! some combinations of signs in this msg are not allowed to be paased for functional reason"");
                            usermsgtextpane.setText(null);
                        }
                    } catch (Exception ex) {
                        System.out.println(""personalchatroomui sendbutton"" + ex);
                    }
                }
            }
        }
        );

        logout_button.addActionListener(
                new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e
            ) {
                 
               loggingout();
            }
        }
        );

        picturebutton.addActionListener(
                new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e
            ) {
                picture_selection();
            }
        }
        );

        filebutton.addActionListener(
                new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e
            ) {
                file_selection();
            }
        }
        ); 
        shareditemmenu_button.addActionListener(
                new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e
            ) {
                FileShow show = new FileShow(""E:\\"" + name + ""\\"");
                show.display();
            }
        }
        );
//*********************************************************************************

        gamingzonebutton.addActionListener(
                new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e
            ) {
                TictacMainFrame titocgame = new TictacMainFrame();

            }
        }
        );

        dictionary_Button.addActionListener(
                new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e
            ) {
                DictionaryMainFrame dictionary = new DictionaryMainFrame();
            }
        }
        );
        
//************************************************************************************8

    }

    public void loggingout() {
        try {      
            sendingstream.writeUTF(""logged out ,_(:);)(""); 
            logout =true;
            System.exit(0);

        } catch (Exception ex) {
            System.out.println(""personalchatroomui loggingout"" + ex);
        }
    }
   
    //shows dp and name for each clint name clicked
    public void dpandnamelabel(GridBagConstraints gridbagconstrain2, boolean flag) {

        allmsgtextpane.setText(null);

        //creating element to set current clits cheat head 
        clintnamelabel = new JLabel(nameclint);
        clintnamelabel.setFont(new Font(Font.SERIF, Font.BOLD, 30));
        clintnamelabel.setForeground(Color.WHITE);
        clintnamelabel.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        Image friendrequest = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/ui/friendlogo.png""));
        Image friendrequestscaled = friendrequest.getScaledInstance(50, 50, Image.SCALE_SMOOTH); //image resizer jonno
        ImageIcon friendrequestlogo = new ImageIcon(friendrequestscaled);
        friendship_statusbutton = new JButton(friendrequestlogo);
        friendship_statusbutton.setBackground(new Color(28, 73, 102));
        friendship_statusbutton.setBorder(BorderFactory.createCompoundBorder(
                new CustomeBorder(), new EmptyBorder(new Insets(10, 10, 10, 10)
                )));

        //adding elements to jpanel2    with existing created gridbagcontant
        //this has problem as it takes maximum time to load have to wait for it 
        gridbagconstrain2.gridy = 0;
        gridbagconstrain2.gridx = 0;
        // gridbagconstrain2.gridwidth=1;
        gridbagconstrain2.fill = GridBagConstraints.HORIZONTAL;
        //gridbagconstrain1.insets = new Insets(0,0,0,0);

        jpanel2.add(clintnamelabel, gridbagconstrain2);

        if (flag == false) {
            gridbagconstrain2.gridy = 0;
            gridbagconstrain2.gridx = 1;
            //gridbagconstrain2.gridwidth=1;
            gridbagconstrain2.fill = GridBagConstraints.HORIZONTAL;
            //gridbagconstrain1.insets = new Insets(0,0,0,0);

            jpanel2.add(friendship_statusbutton, gridbagconstrain2);
        } else {
            option(gridbagconstrain2);
        }

        friendship_statusbutton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    sendingstream.writeUTF(current_clintnumber + "" &&&&&&&&"");
                } catch (Exception ex) {
                    System.out.println(""personalchatroomui sendbutton"" + ex);
                }
            }
        });

    }

    public void option(GridBagConstraints gridbagconstrain2) {

        gridbagconstrain2.gridy = 3;
        gridbagconstrain2.gridx = 2;

        gridbagconstrain2.gridwidth = 1;
        gridbagconstrain2.fill = GridBagConstraints.NONE;
        gridbagconstrain2.insets = new Insets(0, 0, 20, 10);

        jpanel2.add(picturebutton, gridbagconstrain2);

        gridbagconstrain2.gridy = 3;
        gridbagconstrain2.gridx = 3;

        gridbagconstrain2.gridwidth = 1;
        gridbagconstrain2.fill = GridBagConstraints.BOTH;
        gridbagconstrain2.insets = new Insets(0, 0, 20, 0);

        jpanel2.add(filebutton, gridbagconstrain2);

    }

    //frinds name to file of frinedlist to frienlist array
    public void fromFile_toFriendlist() {
        try {
            if (file_of_friend.exists()) {
                FileReader fileReader = new FileReader(file_of_friend);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    Friend_list.add(line);
                     
                }
                fileReader.close();

            } else {
                file_of_friend.createNewFile();
            }
        } catch (IOException e) {
            e.printStackTrace();

        }
    }

    //add friend name to the file of friendlist
    public void FileOfFriendLsit(String friendname) {
        try {

            if (file_of_friend.exists()) {
                BufferedWriter bw = new BufferedWriter(new FileWriter(file_of_friend, true));
                bw.write(friendname);
                Friend_list.add(friendname);
                bw.newLine();

                bw.close();
            } else {
                file_of_friend.createNewFile();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    //select picture from file
    public void picture_selection() {
        try {
            Picture_Chooser.setFileFilter(new FileNameExtensionFilter(""Open Image"", ""jpg"", ""png"", ""jpeg""));
            int returnVal = Picture_Chooser.showOpenDialog(allmsgtextpane);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                selected_picture_tosend = Picture_Chooser.getSelectedFile();

                int decission = JOptionPane.showConfirmDialog(frame, ""Do you want to send the file "" + selected_picture_tosend.getName() + "" ?"");
                if (decission == JOptionPane.YES_OPTION) {
                    sendingstream.writeUTF(current_clintnumber + ""#"" + selected_picture_tosend.getName() + ""#"" + "" $$@^"");

                    byte[] bytearray = new byte[(int) selected_picture_tosend.length()];
                    FileInputStream in = new FileInputStream(selected_picture_tosend);
                    in.read(bytearray);
                    sendingstream.writeInt(bytearray.length);
                    sendingstream.write(bytearray);
                }
                allmsgtextpane.setText(allmsgtextpane.getText().trim() + ""\n"" + "" "" + selected_picture_tosend.getName());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    //select specific file from files
    public void file_selection() {
        try {
            file_chooser.setFileFilter(new FileNameExtensionFilter(""Files"", ""txt"", ""TXT"", ""doc"", ""docx"",""pptx""));
            int returnVal = file_chooser.showOpenDialog(allmsgtextpane);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                selected_file_tosend = file_chooser.getSelectedFile();

                int decission = JOptionPane.showConfirmDialog(frame, ""Do you want to send the file "" + selected_file_tosend.getName() + "" ?"");
                if (decission == JOptionPane.YES_OPTION) {
                    sendingstream.writeUTF(current_clintnumber + ""#"" + selected_file_tosend.getName() + ""#"" + "" $$@^"");

                    byte[] bytearray = new byte[(int) selected_file_tosend.length()];
                    FileInputStream in = new FileInputStream(selected_file_tosend);
                    in.read(bytearray);
                    sendingstream.writeInt(bytearray.length);
                    sendingstream.write(bytearray);
//                    int count;
//                    while ((count = in.read(bytearray)) > 0) {
//                        sendingstream.write(bytearray, 0, count);
//                    }
//                    sendingstream.write(0);
                }
                allmsgtextpane.setText(allmsgtextpane.getText().trim() + ""\n"" + "" "" + selected_file_tosend.getName());

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //design of the borders
    private static class CustomeBorder extends AbstractBorder {

        public void paintBorder(Component c, Graphics g, int x, int y,
                int width, int height) {
            // TODO Auto-generated method stubs
            super.paintBorder(c, g, x, y, width, height);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setStroke(new BasicStroke(12));
            g2d.setColor(new Color(28, 73, 102));//dark blue
            g2d.drawRoundRect(x, y, width - 1, height - 1, 25, 25);
        }
    }

    private static class CustomeBorder1 extends AbstractBorder {

        public void paintBorder(Component c, Graphics g, int x, int y,
                int width, int height) {
            // TODO Auto-generated method stubs
            super.paintBorder(c, g, x, y, width, height);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setStroke(new BasicStroke(15));
            g2d.setColor(new Color(237, 234, 222));//white
            g2d.drawRoundRect(x, y, width - 1, height - 1, 30, 30);
        }
    }

    @Override
    public int hashCode() {
        int hash = 3;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final personalchatroomui other = (personalchatroomui) obj;
        if (!Objects.equals(this.nameclint, other.nameclint)) {
            return false;
        }
        if (!Objects.equals(this.clintname, other.clintname)) {
            return false;
        }
        if (!Objects.equals(this.clint, other.clint)) {
            return false;
        }
        if (!Objects.equals(this.previousclint, other.previousclint)) {
            return false;
        }
        if (!Objects.equals(this.previousmsg, other.previousmsg)) {
            return false;
        }
        if (!Objects.equals(this.personwhosent_numberstring, other.personwhosent_numberstring)) {
            return false;
        }
        if (!Objects.equals(this.actualmsg, other.actualmsg)) {
            return false;
        }
        if (!Objects.equals(other.name, other.clintname)) {
            return false;
        }
        return true;
    }

}",1
"
package dictionary;

import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class DeleteListedWord extends JFrame{
    
    //private static final long serial= 5L;
    private JTextField tfWord;
    private JButton delBtn;
   // private JFrame frm;

    public DeleteListedWord() {
        //frm = new JFrame(""Delete Word"");
        
        super(""Delete Word"");
        tfWord = new JTextField(20);
        delBtn = new JButton(""Delete"");
        delBtn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                if(tfWord.getText().length() >0){
                    boolean done = Dictionary.deleteWord(tfWord.getText());
                    if(!done){
                        JOptionPane.showMessageDialog(DeleteListedWord.this, ""Word not found! Please try again."",""Delete Word"",JOptionPane.INFORMATION_MESSAGE);
                    }
                        else {
                        JOptionPane.showMessageDialog(DeleteListedWord.this, ""Word deleted successfully!"",""Delete Word"",JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                else {
                    JOptionPane.showMessageDialog(DeleteListedWord.this,""Please Enter word from dictionary!"",""Add Word"",JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        
        Container c = getContentPane();
        c.setLayout(new FlowLayout());
        c.add(new JLabel(""Word to Delete : ""));
        c.add(tfWord);
        c.add(delBtn);
        pack();
        
        //For checking only from next
       setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
       setVisible(true);
    }
    /*
    public static void main(String[] args) {
        DeleteListedWord a = new DeleteListedWord();
    }
    */
    
}",0
"
package dictionary;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;


public class Dictionary {
    
    private static boolean modified = false;
    private static String dictionaryfile;
    private static String message="""";
    
    private static TreeMap<String,String> words= new TreeMap<String,String>();
    
    static {
        dictionaryfile=System.getProperty(""user.dir"") + 
            ""/dictionary.ser"";
    }
    
    public static boolean isModified(){
        return modified;
    }
    
    public String getMessage(){
        return message;
    }
    
    public static void setMessage(String message){
        Dictionary.message=message;
    }
    
    public static TreeMap<String,String>getWords(){
        return words;
    }
    
    public static String searchWord(String word){
        return words.get(word);
    }
    
    public static void addWord(String Word,String meaning){
        words.put(Word.toLowerCase(), meaning);
        modified = true;
    }
    
    public static boolean deleteWord(String word){
                Object done = words.remove(word);
                if(done==null)
                    return false;
                else
                    return true;
    }
    
    public static boolean saveToDisk(){
        try {
            FileOutputStream fs= null;
            fs = new FileOutputStream(dictionaryfile);
             ObjectOutputStream os = new ObjectOutputStream(fs);
             
            os.writeObject(words);    ////////////////////////write to file///////////////
            os.close();
            fs.close();
            modified = false;
            return true;
        } catch (Exception ex) {
             message=ex.getMessage();
            return false;
        }
           
        }
    
    public static boolean loadFromDisc(){
        try {
            FileInputStream fs = new FileInputStream(dictionaryfile);
            ObjectInputStream is = new ObjectInputStream(fs);
            words = (TreeMap<String,String>) is.readObject();
            is.close();
            fs.close();
            modified = false;
            return true;
        } catch (Exception ex) {
            message=ex.getMessage();
            return false;
        }
        
    }
    }
            
            ",0
"
package dictionary;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public class DictionaryMainFrame extends JFrame{
   // private static final long serial = 5L;
    

    public DictionaryMainFrame() {
        //JFrame frm= new JFrame();
        super(""Dictionary"");
        
        JMenuBar menub= new JMenuBar();
        
        JMenu menu= new JMenu(""Dictionary"");
        menub.add(menu);
        
        
        // Option Add
        JMenuItem itm= new JMenuItem(""Add Word..."");
        itm.setIcon(getImage(""add.gif""));
        itm.setAccelerator(KeyStroke.getKeyStroke(""F7""));
        menu.add(itm);
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           addWord();
            }
        });
        
       
        
        //Delete Option
        itm= new JMenuItem(""Delete Word..."");
        itm.setIcon(getImage(""delete.gif""));
        itm.setAccelerator(KeyStroke.getKeyStroke(""F8""));
        menu.add(itm);
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           delWord();
            }
        });
        
        menu.addSeparator(); //separate using single line
        
        //Search option
        itm= new JMenuItem(""Search Meaning"");
        itm.setIcon(getImage(""search.gif""));
        itm.setAccelerator(KeyStroke.getKeyStroke(""F9""));
        menu.add(itm);
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
            searchWord();
            }
        });
        
        //List Option
        itm= new JMenuItem(""Word List"");
        itm.setIcon(getImage(""list.gif""));
        itm.setAccelerator(KeyStroke.getKeyStroke(""F10""));
        menu.add(itm);
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           wordsList();
            }
        });
        
        menu.addSeparator();
        
        //Exit from this menu
        itm= new JMenuItem(""Exit"");
        menu.add(itm);
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           exit();
            }
        });

        
        this.addStorageMenu(menub);
        this.setJMenuBar(menub);
        this.addContactMenu(menub);
        this.addHelpMenu(menub);

        
        JPanel p=new JPanel();
        JLabel label=new JLabel(""<html> <i><u><h1 color=red> Instructions :</h1></u></i><br/> 1) To find a meaning of a word, click 'Search Meaning' icon <br/>""
                + ""                from 'Dictionary' menu or from the given toolber.<br/>""
                + ""              2) To add a word, click 'Add Word' icon & go to option 3.<br/>""
                + ""              3) By clicking the 'Add Button' you have to click the 'Save to Disc' icon <br/>""
                + ""                 from 'Storage' menu or from the given toolber.<br/> ""
                + ""              4) To delete a word, click 'Delete Word' icon .<br/>""
                + ""              5) You can see the full list of word by clicking the 'Word List' icon.<br/>"");
        p.add(label,BorderLayout.CENTER);
        this.add(p);
        //getContentPane().add(c,BorderLayout.CENTER);
        
        this.optionToolBar();
        
        Dictionary.loadFromDisc();   //Load dictionary from disc
        
        setVisible(true);
        setDefaultCloseOperation(DictionaryMainFrame.HIDE_ON_CLOSE);
        setBounds(300,100,500,350);
        setResizable(false);
                
        
    }
    
    public void centerToParent(JFrame parent,JFrame child){
        Dimension pr= parent.getSize();
        Dimension ch= child.getSize();
        int x= (int) (pr.getWidth()-ch.getWidth())/2;
        int y= (int) (pr.getHeight() - ch.getHeight())/2;
        child.setLocation(x,y);
    }
    public void addWord(){
            
        ImplementWord i= new ImplementWord();
        centerToParent(DictionaryMainFrame.this,i);
        i.setVisible(true);
        }
    
    public void delWord(){
        DeleteListedWord d= new DeleteListedWord();
        centerToParent(DictionaryMainFrame.this,d);
        d.setVisible(true);
    }
    
    public void searchWord(){
        WordSearch s= new WordSearch();
        centerToParent(DictionaryMainFrame.this,s);
        s.setVisible(true);
    }
    
    public void wordsList(){
        ListOfWord dw= new ListOfWord();
        dw.setVisible(true);
        centerToParent(DictionaryMainFrame.this,dw);
    }
    
    public ImageIcon getImage(String filename){
        return new ImageIcon(this.getClass().getResource(filename));
    }
    
    public void exit(){
        if(Dictionary.isModified()){
            int optn= JOptionPane.showConfirmDialog(DictionaryMainFrame.this, ""Do you want to write all pending changes to disc and then exit?"",""Save"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
            if(optn==JOptionPane.YES_OPTION){ //Exit after Save
                Dictionary.saveToDisk();
                System.exit(0);
            }
            else if(optn==JOptionPane.NO_OPTION){ //Exit without Save
                System.exit(0);
            }
            else {    //if Cancel then do not Exit
                System.exit(0);
            }
        }
    }
    
    public void optionToolBar(){
        JToolBar tlb= new JToolBar();
        
        JButton j= new JButton(getImage(""add.gif""));
        j.setPreferredSize(new Dimension(40,40));
        tlb.add(j);
        j.setToolTipText(""Add Word"");
        j.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           addWord();
            }
        });
        
        j= new JButton(getImage(""delete.gif""));
        j.setPreferredSize(new Dimension(40,40));
        tlb.add(j);
        j.setToolTipText(""Delete Word"");
        j.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           delWord();
            }
        });
        
        j= new JButton(getImage(""search.gif""));
        j.setPreferredSize(new Dimension(40,40));
        tlb.add(j);
        j.setToolTipText(""Search Meaning"");
        j.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                searchWord();
            }
        });
        
        j= new JButton(getImage(""list.gif""));
        j.setPreferredSize(new Dimension(40,40));
        tlb.add(j);
        j.setToolTipText(""Word List"");
        j.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                wordsList();
            }
        });
        
        tlb.addSeparator();
        tlb.addSeparator();
        
        j= new JButton(getImage(""save1.gif""));
        j.setToolTipText(""Save to Disc"");
        tlb.add(j);
        j.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                   Dictionary.saveToDisk();
            }
        });
        
        j= new JButton(getImage(""load.gif""));
        j.setToolTipText(""Load from Disc"");
        tlb.add(j);
        j.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           Dictionary.loadFromDisc();
            }
        });
        
        getContentPane().add(tlb,BorderLayout.SOUTH);
    }
    
    public void addStorageMenu(JMenuBar jmb){
        
        JMenu mnu= new JMenu(""Storage"");
        JMenuItem itm= new JMenuItem(""Save Dictionary"");
        itm.setIcon(getImage(""save1.gif""));
        itm.setAccelerator(KeyStroke.getKeyStroke(""F11""));
        mnu.add(itm);
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           boolean save= Dictionary.saveToDisk();
           if(save){
               JOptionPane.showMessageDialog(DictionaryMainFrame.this,""Saved dictionary successfully!"",""Save Dictonary"",JOptionPane.INFORMATION_MESSAGE);
           }
           else {
               JOptionPane.showMessageDialog(DictionaryMainFrame.this, ""Error! "" , ""Save Word"",JOptionPane.ERROR_MESSAGE);
           }
            }
        });
        
        itm= new JMenuItem(""Load Dictionary"");
        itm.setIcon(getImage(""load.gif""));
        mnu.add(itm);
        itm.setAccelerator(KeyStroke.getKeyStroke(""F12""));
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           boolean load= Dictionary.loadFromDisc();
           if(load){
               JOptionPane.showMessageDialog(DictionaryMainFrame.this, ""Loaded dictionary successfully!"",""Load Dictionary"",JOptionPane.INFORMATION_MESSAGE);
           }
           else {
               JOptionPane.showMessageDialog(DictionaryMainFrame.this, ""Error! "",""Load Dictionary"",JOptionPane.ERROR_MESSAGE);
           }
            }
        });
        
        jmb.add(mnu);
    }
    
    public void addContactMenu(JMenuBar jmb){
        
        JMenu mnu= new JMenu(""Contact"");
        JMenuItem itm= new JMenuItem(""Cell Phone"");
        itm.setIcon(getImage(""phone.gif""));
        itm.setAccelerator(KeyStroke.getKeyStroke(""F1""));
        mnu.add(itm);
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           
               JOptionPane.showMessageDialog(DictionaryMainFrame.this,""+88 01930-878889"",""Cell Phone Number"",JOptionPane.INFORMATION_MESSAGE);
          
            }
        });
        
        itm= new JMenuItem(""WhatsApp"");
        itm.setIcon(getImage(""wapp.jpeg""));
        itm.setAccelerator(KeyStroke.getKeyStroke(""F2""));
        mnu.add(itm);
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           
               JOptionPane.showMessageDialog(DictionaryMainFrame.this,""+88 01930-878889"",""WhatsApp Number"",JOptionPane.INFORMATION_MESSAGE);
          
            }
        });
        
        itm= new JMenuItem(""E-mail"");
        itm.setIcon(getImage(""email.gif""));
        itm.setAccelerator(KeyStroke.getKeyStroke(""F3""));
        mnu.add(itm);
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           
               JOptionPane.showMessageDialog(DictionaryMainFrame.this,""ranaswe2@gmail.com"",""E-mail Address"",JOptionPane.INFORMATION_MESSAGE);
          
            }
        });
        
        jmb.add(mnu);
    }
    
    public void addHelpMenu(JMenuBar jmb){
        
        JMenu mnu= new JMenu(""Help"");
        JMenuItem itm= new JMenuItem(""Question Section"");
       // itm.setIcon(getImage(""save1.gif""));
        itm.setAccelerator(KeyStroke.getKeyStroke(""F4""));
        mnu.add(itm);
        itm.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
           
               JOptionPane.showMessageDialog(DictionaryMainFrame.this,""<html>If you face any problem,<br/> please, contact with the team Squadron.<br/> "",""Information"",JOptionPane.INFORMATION_MESSAGE);
          
            }
        });
        
        jmb.add(mnu);
    }
    
    public static void main(String[] args) {
        DictionaryMainFrame a=new DictionaryMainFrame();
        
    }
}",1
"
package dictionary;

import java.awt.Container;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class ImplementWord extends JFrame{
    
    //private static final long serial=5L;
    
    private JTextField tfWord;
    private JTextArea taMeaning;
    private JButton addBtn;
    private JFrame frm;
    private GridBagLayout gbl;
    private GridBagConstraints gbc;
    
    public ImplementWord() {
      /* frm=new JFrame();      
       frm.setTitle(""Add Word""); */
        
        super(""Add Word"");
       
       gbl = new GridBagLayout();
       gbc = new GridBagConstraints();
       gbc.insets=new Insets(5,5,10,5);
       gbc.fill=GridBagConstraints.BOTH;
       
       tfWord= new JTextField(25);
       
       /*
       tfWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfWord.addKeyListener(new KeyAdapter(){

            public void keyTyped(KeyEvent e){

                char ch= e.getKeyChar();
                if(!(Character.isAlphabetic(ch) || ch== ' ' || ch=='\b' || ch==KeyEvent.VK_DELETE)){
                    e.consume();
                    JOptionPane.showMessageDialog(null,""<html>Only A-Z, a-z, Space character<br/> will be allowed!"");
                }
            }
        });
            }
        });*/
       
       taMeaning= new JTextArea();
       addBtn = new JButton(""Add Button"");
       addBtn.addActionListener(new ActionListener() {
           
           @Override
           public void actionPerformed(ActionEvent ae) {
               
               
               
               if(tfWord.getText().length() >0 && taMeaning.getText().length() >0){
                   Dictionary.addWord(tfWord.getText(),taMeaning.getText());
                   JOptionPane.showMessageDialog(ImplementWord.this,""Added Word Successfully!"",""Add Word"",JOptionPane.INFORMATION_MESSAGE);
                   tfWord.setText("" "");
                   taMeaning.setText("" "");
                   tfWord.requestFocus();
               }
               else{
                   JOptionPane.showMessageDialog(ImplementWord.this,""Please enter Word and meaning!"",""Add Word"",JOptionPane.INFORMATION_MESSAGE);
               }
           }
                   
       });
       
       Container c= getContentPane();
       c.setLayout(gbl);
       
       // for Add Word
       gbc.anchor=GridBagConstraints.EAST;
       c.add(new JLabel(""Enter Word : ""),gbc);
       gbc.anchor=GridBagConstraints.WEST;
       c.add(tfWord);
       
       //for add Meaning
       gbc.gridx=0;
       gbc.anchor=GridBagConstraints.EAST;
       c.add(new JLabel(""Add Meaning : ""),gbc);
       gbc.anchor=GridBagConstraints.WEST;
       gbc.gridx=1;
       gbc.gridwidth=2;
       gbc.gridheight=2;
       taMeaning.setRows(3);
       taMeaning.setColumns(30);
       JScrollPane sp=new JScrollPane(taMeaning,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
       c.add(sp,gbc);
       
       //for add Button
       gbc.gridx=0;
       gbc.gridwidth=3;
       gbc.anchor=GridBagConstraints.CENTER;
       gbc.fill=GridBagConstraints.NONE;
       c.add(addBtn,gbc);
       
       pack();
       
       //For checking only from next
       setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
       setVisible(true);
    }
    /*
    public static void main(String[] args) {
        ImplementWord a=new ImplementWord();
        
    }
    */           
    
}",0
"
package dictionary;

import java.awt.*;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.*;

public class ListOfWord extends JFrame{
    //private static final long serial = 5L;

    public ListOfWord() {
        //JFrame frm = new JFrame(""Word Display"");
        super(""Word List"");
        Container c= getContentPane();
        Vector < String > headings = new Vector < String >();
        headings.add(""Phrase"");
        headings.add(""Note/Meaning"");
        
        Vector < Vector < String > > rows = new Vector < Vector < String > >();
        
        TreeMap< String, String> words = Dictionary.getWords();
        for(String word : words.keySet()){
            Vector <String> row = new Vector<String>();
            row.add(word);
            row.add(words.get(word));
            rows.add(row);
        }
        
        JTable table = new JTable(rows,headings);
        
        JScrollPane s = new JScrollPane(table,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        
        c.add(s);
        
        pack();
        
        //For checking only
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        setSize(500,400);
        setResizable(true);
       // setBounds(300,150,500,400);
        
        setVisible(true);
    }
    /*
    public static void main(String[] args) {
        ListOfWord a= new ListOfWord();
    }
    */
}",0
"
package dictionary;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;


public class WordSearch extends JFrame{
   // private static final long serial= 5L;
    private JTextField tfword;
    private JTextArea meaning;
    private JButton btn;

    public WordSearch() {
       // JFrame frm = new JFrame(""Search Word"");
        super(""Search Word"");
        GridBagLayout gbl = new GridBagLayout();
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5,5,10,5);
        gbc.fill = GridBagConstraints.BOTH;
        
        tfword = new JTextField(20);
        meaning = new JTextArea();
        btn = new JButton(""Search"");
        btn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                if(tfword.getText().length() >0){
                    String mean = Dictionary.searchWord(tfword.getText().toLowerCase());   ///////////////Search Word///////////////////
                    if(mean != null){ 
                        meaning.setText(mean);
                    }
                    else {
                        JOptionPane.showMessageDialog(WordSearch.this, ""Word not found!"", ""Search Word"", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                else {
                    JOptionPane.showMessageDialog(WordSearch.this, ""Please Enter Word from Dictionary"", ""Search Message"",JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        
       Container c = getContentPane();
       c.setLayout(gbl);
       
       //Add Word
       gbc.anchor = GridBagConstraints.EAST;
       c.add(new JLabel(""Search Word : ""),gbc);
       gbc.anchor = GridBagConstraints.WEST;
       c.add(tfword);
       gbc.anchor = GridBagConstraints.EAST;
       c.add(btn);
       
       //Add Meaning
       gbc.gridx = 0;
       gbc.anchor = GridBagConstraints.EAST;
       c.add(new JLabel(""Meaning : ""),gbc);
       gbc.anchor = GridBagConstraints.WEST;
       
       gbc.gridx = 1;
       gbc.gridwidth = 2;
       gbc.gridheight = 2;
       
        meaning.setRows(3);
        meaning.setColumns(30);
        
        JScrollPane p = new JScrollPane(meaning,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        c.add(p,gbc);
        pack();
       
        //For Test only
        setVisible(true);
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
//        add(c);
        setSize(500,200);
    }
    /*
    public static void main(String[] args) {
        WordSearch a= new WordSearch();
    }
    */
    
}",0
"package server;

import java.io.*;
import java.net.*;
import java.util.StringTokenizer;

public class clinthandaler2 implements Runnable {

    public Socket socketclint, socket;
    public DataInputStream recievingstream;
    public DataOutputStream sendingstream;
    public String msg, name, actualmsg, recievingclint, clintname, filename;
    public serversocket server;
    public final int clintnumber;
    public int clintnumber_tosent, fileLength;
    public boolean logout = false, its_afile = false;

    public clinthandaler2(serversocket server, int clintnumber, Socket socket, DataInputStream recievingstream,
            DataOutputStream sendingstream) {
        this.server = server;
        this.clintnumber = clintnumber;
        this.recievingstream = recievingstream;
        //this.msg=msg;
        this.sendingstream = sendingstream;
        this.name = name;
        this.socket = socket;
        clintname = new String();
        // System.out.println(clintnumber);

    }

    //file recieving  section and sending section
    public void file_receiving_sendin() {
        try {

            for (clinthandaler2 clint : server.allclint_object) {
                ////sending incoming file notice
                if (clint.clintnumber == clintnumber_tosent) {
                    clint.sendingstream.writeUTF(filename + ""#"" + clintnumber + ""#"" + clintname + ""#"" + "" ~%~~"");

                    //file recieve
                    fileLength = recievingstream.readInt();
                    if (fileLength > 0) {
                        byte[] fileContentBytes = new byte[fileLength];
                        recievingstream.readFully(fileContentBytes, 0, fileContentBytes.length);

                        //send file
                        clint.sendingstream.writeInt(fileContentBytes.length);
                        clint.sendingstream.write(fileContentBytes);
//                File saveFile = new File(""E:\\"" + filename);
//                FileOutputStream fout = new FileOutputStream(saveFile);
//                fout.write(fileContentBytes);
                    }
//            //file send
//            File f=new File(""D:\\2\\2.1\\All about project\\project\\ chitchat\\friendlistof ikra jojo.txt"");
//            byte[] fileContentBytes = new byte[(int)f.length()];
//            FileInputStream in = new FileInputStream(f);
//            in.read(fileContentBytes);
//            sendingstream.writeInt(fileContentBytes.length);
//            sendingstream.write(fileContentBytes);
                }
            }
            its_afile = false;

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {

        while (true) {
            if (logout == false) {
                try {
                    if (its_afile == true) {
                        file_receiving_sendin();
                    } else {
                        msg = recievingstream.readUTF();
                        allfunction();
                        // System.out.println(msg);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else {
                break;
            }
        }

    }

    public void closingresourece() {
        try {
            //closing resources   
            this.recievingstream.close();
            this.sendingstream.close();

        } catch (IOException e) {
        }

    }

    public void allfunction() {
        if (msg.endsWith(""%c@"")) {
            msg_to_actualmsg();
            toall();
            alreadyconnectedpeoplelist();
        } //for first time registering mesg
        else if (msg.endsWith(""**%#@*"")) {
            createregisteredclintlist(msg);
        } //for logout indication
        else if (msg.endsWith("",_(:);)("")) {
            logged_out();
        } //for incoming friend request
        else if (msg.endsWith(""&&&&&&&&"")) {
            msg_to_actualmsg();
            send_friendrequest();
        } //for outgoing friend request ans
        else if (msg.endsWith(""^^^^^^^^"")) {
            msg_to_actualmsg();
            friendrequest_ans();
        } //if its a incominf file
        else if (msg.endsWith(""$$@^"")) {
            its_afile = true;
            msg_to_actualmsg();
        } //if not breaks the msg
        else {
            msg_to_actualmsg();
            sendtoclint();
        }
    }

    public void createregisteredclintlist(String registeredclint) {
        try {
            msg = registeredclint;

            StringTokenizer token = new StringTokenizer(msg, ""**%#@*"", false);
            String clintnameregistered = token.nextToken();
            System.out.println(clintnameregistered);
            File file = new File(""D:\\2\\2.1\\project\\chitchat\\REGISTERED_PEOPLE.txt"");

            if (file.exists()) {
                BufferedWriter bw = new BufferedWriter(new FileWriter(""REGISTERED_PEOPLE.txt"", true));
                bw.write(clintnameregistered);
                bw.newLine();
                bw.close();
            } else {
                file.mkdirs();
            }
        } catch (IOException ex) {
            System.out.println(""serversocket createregisteredclintlist"" + ex);
        }
    }

    public String msg_to_actualmsg() {

        try {
            if (msg.endsWith(""%c@"")) {
                StringTokenizer token = new StringTokenizer(msg, ""%c@"", false);

                this.clintname = token.nextToken();

            } else if (msg.endsWith(""&&&&&&&&"")) {

                StringTokenizer token = new StringTokenizer(msg, "" &&&&&&&&"", false);
                recievingclint = token.nextToken();
                clintnumber_tosent = Integer.parseInt(recievingclint);

            } else if (msg.endsWith(""^^^^^^^^"")) {

                StringTokenizer token = new StringTokenizer(msg, "" ^^^^^^^^"", false);
                recievingclint = token.nextToken();
                clintnumber_tosent = Integer.parseInt(recievingclint);
            } else if (msg.endsWith(""$$@^"")) {

                StringTokenizer token = new StringTokenizer(msg, ""#"", false);

                recievingclint = token.nextToken();
                clintnumber_tosent = Integer.parseInt(recievingclint);
                filename = token.nextToken();

            } else {
                // break the string into message and recipient part 
                StringTokenizer token = new StringTokenizer(msg, ""#"", false);

                actualmsg = token.nextToken();
                recievingclint = token.nextToken();
                clintnumber_tosent = Integer.parseInt(recievingclint);

            }
        } catch (Exception ex) {
            System.out.println(""serversocket  createconnectedclintlist"" + ex);
        }
        return this.clintname + actualmsg + recievingclint + clintnumber_tosent;

    }

    public void toall() {
        try {
            for (clinthandaler2 clint : server.allclint_object) {

                if (clint.clintnumber != clintnumber) {
                    clint.sendingstream.writeUTF(clintnumber + ""%c@"" + clintname);
                    //clint.sendingstream.writeUTF(clintnumber+""%c@"");
                }

            }
        } catch (IOException e) {

        }
    }

    public void alreadyconnectedpeoplelist() {
        try {

            for (String alreadyconnected : server.clint_list) {
                sendingstream.writeUTF(alreadyconnected);
                //sendingstream.writeUTF(clintname+""%c@"");
            }
            server.clint_list.add(clintnumber + ""%c@"" + clintname);
            //server.clint_list.add(clintname+""%c@"");

        } catch (IOException e) {

        }

    }

    public void sendtoclint() {
        try {

            for (clinthandaler2 clint : server.allclint_object) {

                if (clint.clintnumber == clintnumber_tosent) {
                    clint.sendingstream.writeUTF(actualmsg + ""#"" + clintnumber + ""#"" + clintname);
                }
            }
        } catch (IOException e) {

        }

    }

    public void logged_out() {

        try {

            logout = true;
            
             for (clinthandaler2 clint : server.allclint_object) {

                if (clint.clintnumber == clintnumber) {

                    server.allclint_object.remove(clint);
                    break;
                }
            }
            for (clinthandaler2 clint : server.allclint_object) {
            
               clint.sendingstream.writeUTF("",_(:);)( "" + clintnumber);
            }

            server.clint_list.remove(clintnumber + ""%c@"" + clintname);

          //  closingresourece();

        } catch (IOException e) {
            System.out.println(e + "" clinthandaler logged_out"");
        }
    }

    public void send_friendrequest() {
        try {

            for (clinthandaler2 clint : server.allclint_object) {

                if (clint.clintnumber == clintnumber_tosent) {
                    clint.sendingstream.writeUTF(clintnumber + "" &&&&&&&& "" + clintname);
                }
            }
        } catch (IOException e) {

        }
    }

    public void friendrequest_ans() {
        try {

            for (clinthandaler2 clint : server.allclint_object) {

                if (clint.clintnumber == clintnumber_tosent) {
                    clint.sendingstream.writeUTF(clintnumber + "" ^^^^^^^^"");
                }
            }
        } catch (IOException e) {

        }
    }
}",1
"package server;

import java.io.*;  
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList; 

public class serversocket extends Thread {

    public ArrayList<clinthandaler2> allclint_object = new ArrayList();
    public static ArrayList<String> clint_list = new ArrayList<String>();

    public ServerSocket sserversocket;
    public Socket socketclint;
    public DataInputStream recievingstream; 
    public DataOutputStream sendingstream; 
    public Thread threadforeachclint, incommingsocketthread, clintlistcreatethread;
    public int clintnumber = 0;

    public ArrayList<clinthandaler2> gethandalerlist() {
        return allclint_object;
    }

    public serversocket() {
        try {
            sserversocket = new ServerSocket(666);

        } catch (IOException e) { 
        }

    }

    @Override

    public void run() {

        while (true) {
            try { 
                
                socketclint = sserversocket.accept();//ps this while loop is for new incoming socket not in comming msg
                sendingstream = new DataOutputStream(socketclint.getOutputStream());        //the new incomming msg is handaled by clinthandaler handaler thread class for each socket
                recievingstream =new DataInputStream(socketclint.getInputStream());  
                clinthandaler2 clint = new clinthandaler2(this, clintnumber, socketclint, recievingstream, sendingstream); 
                threadforeachclint = new Thread(clint);
                allclint_object.add(clint);
                threadforeachclint.start();
                clintnumber++;

            } catch (Exception e) {
                System.out.println(e + ""incommingsocketthread"");
            }
        }
    }

}",0
"
package Spl_project;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

//this class shows the admin panel 
//whre the election commissioner will have to give the necessary information on voting
//after giving all the necessary information the election commissioner will press the next button
//then the election commissioner will come to the starting page
public class Admin_panel extends JFrame{
    //Container variable to store the whole frame
    Container c;
    //Jlabel variables for printing the text lines
    JLabel label1,label2,label3,label4,label5,label6,label7,label8,nullLabel;
    //JtextField variables for the textbox
    JTextField textbox1,textbox2,textbox3,textbox4,textbox5;
    //Jpanel varibales for storing multiple portion of the whole frame
    JPanel outputPanel,innerpanel;
    //Font variables to create various types of fonts 
    Font f,f2,f3;
    //String varibales to store strings
    String str1,str2,str3,str4,str5,str6=""G:\\output.jpg"",str7=""G:\\output1.jpg"",str8=""G:\\output2.jpg"";
    // This varibales helps to see if all the information is given correctly
    int test_number=0;
    // Constructor of the class
    public  Admin_panel()
    {
        //calling the component function in the constructor
         components();
    
    }
    
    //components functions contains all components as well as logic for the entire class
    public void components()
    {
        //String the frame in the container
        c=this.getContentPane();
        c.setBackground(Color.white);
        //Setting up the layout of the whole container
        c.setLayout(new BorderLayout(150,45));
        
        //Creating null label and adding to container to show  empty space in east side
        nullLabel = new JLabel();        
        c.add(nullLabel,BorderLayout.EAST);
        
        //Creating null label and adding to container to show  empty space in east side
        JLabel nullLabel = new JLabel();
        c.add(nullLabel,BorderLayout.WEST);
        
        //Null label to print a text line at the upper side of frame
        nullLabel = new JLabel(""Hello Election Commissioner"");
        nullLabel.setFont(new Font(""Arial"",Font.BOLD,25));
        //Setting the horizontal allignment  of the JLabel 
        nullLabel.setHorizontalAlignment(JLabel.CENTER);
        //Adding the JLabel to the container
        c.add(nullLabel,BorderLayout.NORTH);
        
        //Null label to show empty space  at the lower side of frame
        nullLabel = new JLabel();
        //Adding the JLabel to the container
        c.add(nullLabel,BorderLayout.SOUTH);
        
        //Creating a Jpanel to store the JLabel which prints Hello commissioner text line
        outputPanel = new JPanel();
        //setting up the layout of the Jpanel
        outputPanel.setLayout(new GridLayout(9,2,6,6));
        outputPanel.setBackground(Color.white);
        //Adding this JPanel to the container
        c.add(outputPanel,BorderLayout.CENTER);
    
        //Setting the icon the frame 
        ImageIcon icon1=new ImageIcon(getClass().getResource(""icon2.png""));
        this.setIconImage(icon1.getImage());
        
        //creating the objects of font class
        f=new Font(""Arial"", Font.BOLD, 18);
        f2=new Font(""Arial"", Font.BOLD, 15);
        f3=new Font(""Arial"", Font.BOLD, 15);
    
        //Creating the label for printing  (Image folder location) text line
        label3=new JLabel(""Image folder location : "");;
        label3.setOpaque(true);
        //Setting up the font of the text of the JLabel
        label3.setFont(f2);
        //Setting up foreground and the background colour of the JLabel
        label3.setBackground(Color.white);
        label3.setForeground(Color.black);
        //Storing the Jlabel in outputPanel
        outputPanel.add(label3);
        
        //creating a textbox for the above JLabel
        textbox1=new JTextField();
        textbox1.setForeground(Color.black);
        //setting up the border colur of the textbox
        textbox1.setBorder(BorderFactory.createLineBorder(Color.black));
        //Adding the textbox in the outputPanel
        outputPanel.add(textbox1);

        //Creating a Jlabel to print (""Password : "") text line
        label4=new JLabel(""Password : "");
        label4.setOpaque(true);
        //setting up the font
        label4.setFont(f2);
        //Settng up the foreground and background colour
        label4.setBackground(Color.white);
        label4.setForeground(Color.black);
        //Storing the JLabel in outputPanel
        outputPanel.add(label4);

        //creating a JPasswordField  for the label4
        JPasswordField textbox2=new JPasswordField();
        //Setting up the background and foreground colour
        textbox2.setBackground(Color.white);
        textbox2.setForeground(Color.black);
         //setting up the border colur of the textbox
        textbox2.setBorder(BorderFactory.createLineBorder(Color.black));
        //storing the textbox in the outputPanel
        outputPanel.add(textbox2);

        //Creating a null label to fulfil the layout of outputPanel
        nullLabel=new JLabel();
        outputPanel.add(nullLabel);
        
        //Creating a null label to fulfil the layout of outputPanel
        nullLabel=new JLabel();
        outputPanel.add(nullLabel);
        
        //creating JLabel to print the (""Location of photos"") text
        nullLabel=new JLabel(""Location of photos"");
        //Setting the font of the JLabel
        nullLabel.setFont(new Font(""Arial"",Font.BOLD,20));
        //Storing the JLabel in the outputPanel
        outputPanel.add(nullLabel);

        //Creating a null label to fulfil the layout of outputPanel
        nullLabel=new JLabel();
        outputPanel.add(nullLabel);
        
        //creating a JLabel for printing (""Candidate 1:"") text line
        label5=new JLabel(""Candidate 1:"");
        //setting up the font of the JLabel
        label5.setFont(f2);
        label5.setOpaque(true);
        //Setting up the background and foreground colour
        label5.setBackground(Color.white);
        label5.setForeground(Color.black);
        //Storing the JLabel in the outputPanel 
        outputPanel.add(label5);

       //creating a JTextbox for the label5
       textbox3=new JTextField();
       //setting up the background and foregroung colour
       textbox3.setBackground(Color.white);
       textbox3.setForeground(Color.black);
       //Setting up the border colour of the textbox
       textbox3.setBorder(BorderFactory.createLineBorder(Color.black));
       //Storing the textbox in the outputPanel
       outputPanel.add(textbox3);

       //creating a JLabel to print (""Candidate 2:"") text line 
       label5=new JLabel(""Candidate 2:"");
       label5.setOpaque(true);
       label5.setFont(f2);
       //Setting the background and foreground colour
       label5.setBackground(Color.white);
       label5.setForeground(Color.black);
       //Storing the JLabel in the outputPanel
       outputPanel.add(label5);
       
       //creating textbox for the above JLabel
       textbox4=new JTextField();
       //Setting p the banckground and foreground colour
       textbox4.setBackground(Color.white); 
       textbox4.setForeground(Color.black);
       //setting up the border colour
       textbox4.setBorder(BorderFactory.createLineBorder(Color.black));
       //storing the textbox in the outputpanel
       outputPanel.add(textbox4);
       
       //Creating a JLabel to print the (""Candidate 3:"") text line
       label5=new JLabel(""Candidate 3:"");
       label5.setOpaque(true);
       //setting up the font of the JLabel
       label5.setFont(f2);
       //Setting up the background and foreground colour
       label5.setBackground(Color.white);
       label5.setForeground(Color.black);
       //storing the label in outputpnael
       outputPanel.add(label5);

       //creating textbox for the above JLabel
       textbox5=new JTextField();
       //setting up the background and the foreground colour
       textbox5.setBackground(Color.white);
       textbox5.setForeground(Color.black);
       //setting up the colour of border
       textbox5.setBorder(BorderFactory.createLineBorder(Color.black));
       //storing the textbox in the outputpanel
       outputPanel.add(textbox5);
       
       //creating a nullLabel to fullfill the layout of the outputpanel
       nullLabel = new JLabel();
       nullLabel.setOpaque(true);
       //setting thr background colour
       nullLabel.setBackground(Color.white);
       //storing the JLabel
       outputPanel.add(nullLabel);
       
       //creating a nullLabel to fullfill the layout of the outputpanel
       nullLabel = new JLabel();
       nullLabel.setOpaque(true);
       //setting thr background colour
       nullLabel.setBackground(Color.white);
       //storing the JLabel
       outputPanel.add(nullLabel);

       //creating a nullLabel to fullfill the layout of the outputpanel     
       nullLabel = new JLabel();
       nullLabel.setOpaque(true);
       //setting thr background colour
       nullLabel.setBackground(Color.white);
       //Storing the JLabel
       outputPanel.add(nullLabel);

       //creating a new JPanel to show the next Button in the perfect place of JFram 
       innerpanel = new JPanel();
       //setting up the layout of the panel
       innerpanel.setLayout(new GridLayout(1,3));
       //Setting up the background colour
       innerpanel.setBackground(Color.white);
       //soting the JPanel in Outputpanel
       outputPanel.add(innerpanel); 

       //creating nulllabel to fulfill the layout of the innerpanel
       nullLabel = new JLabel();
       nullLabel.setOpaque(true);
       //setting the backgroung colour
       nullLabel.setBackground(Color.white);
       //Storing the JLabel
       innerpanel.add(nullLabel);


       //creating a JButton
       JButton button=new JButton(""NEXT"");
       //setting up the background and foreground colour
       button.setForeground(Color.YELLOW);
       button.setBackground(Color.blue);
       //Storing the JButton
       innerpanel.add(button);

    //file keeping the image file location and password
        try
        {
        File Voting_info= new File(""E:\\voting_info.txt"");
        // checking if the file is present in the desktop
        if(!Voting_info.createNewFile())
        {  
            //delete the file
            Voting_info.delete();
            //create the file
            Voting_info.createNewFile();
        }
        else
        {
            //create the new file
            Voting_info.createNewFile();
        }


        }
        //catching the IOException
        catch(Exception e)
        {
            System.out.println(""An error is occured."");
        }
        
    //file keeping the number of webacme image
        try
        {
            File image_number_file= new File(""E:\\web_image_number.txt"");
            //check the file is present or not
            if(!image_number_file.createNewFile())
            {
                //delete the file
                image_number_file.delete();
                //create the file
                image_number_file.createNewFile();
            }
            else
            {
                //create the file
                image_number_file.createNewFile();
                        }    
        }
        //catcing the IOException
        catch(Exception e)
        {
            System.out.println(""An error is occured."");
        }

        //Checking the webcame image folder
        try{
        File folder= new File(""E:\\webcame images"");
        // checking the folder is it present or not 
             if(!folder.isDirectory())
             {
                 //if not present  then create one 
                 folder.mkdir();
             }
             else
             {
                 //if folder is present  then delete all the files present in the folder
                 for (File file: folder.listFiles()) 
                  {
                      //deleting files
                     file.delete();         
                  }
             }

        }
        //catching the Exception
        catch(Exception e){
                System.out.println(""An error is occured."");

                }
        //Checking the face_recognition test image folder
        try{
        File folder2= new File(""E:\\Face recognition test"");
        // checking the folder is present or not 
             if(!folder2.isDirectory())
             {
                 //if not present then create the folder
                 folder2.mkdir();
             }
             else
             {
                 //if the folder is present then delete all the files of the folder
                 for (File file: folder2.listFiles()) 
                  {
                      //deleting files
                     file.delete();         
                  }
             }

        }
        //catching the exception
        catch(Exception e){
                System.out.println(""An error is occured."");

                }


        //deleting vote_end file    
        File Vote_End= new File(""E:\\Vote_End.txt"");
        // checking is the file is present  
            if(Vote_End.isFile())
            {
                //if the file is present then delete the file
                Vote_End.delete();
            }  

            //deleting vote_start file    
            File Vote_Start= new File(""E:\\Vote_start.txt"");
            //checking if the the file is present or not  
            if(Vote_Start.isFile())
            {
                //if the file is present then delete the file
                Vote_Start.delete();
            }  


        //file of votes of candidate 1
        try{
        File newfile= new File(""E:\\file1.txt"");
        //checking the file file is present or not 
        if(!newfile.createNewFile())
         { 
             //if present then delete the file
             newfile.delete();
             //creating the file
             newfile.createNewFile();    
         }
        else
        {
            //creating the file
            newfile.createNewFile();}
        }
       //Catching the IOException
        catch(IOException e){
                System.out.println(""An error is occured."");
                }
        
        //file of votes of candidate 2
        try{
        File newfile2= new File(""E:\\file2.txt"");
        //checking the file is present or not 
        if(!newfile2.createNewFile())
         { 
             //if present then delete the file
            newfile2.delete();
            //creating the file
            newfile2.createNewFile();      
         }
        else
        {
             //creating the file
             newfile2.createNewFile();}
        }
        //catching the IOException
        catch(IOException e){
                System.out.println(""An error is occured."");
                }
       //file of votes of candidate 2
        try{
        File newfile3= new File(""E:\\file3.txt"");
        //checking the file is present or not 
        if(!newfile3.createNewFile())
         { 
             //if present then delete the file
            newfile3.delete();
            //creating the file
            newfile3.createNewFile();   
         }
        else
        {
            //creating the file
            newfile3.createNewFile();}
        }
        //catching the IOException 
        catch(IOException e){
                System.out.println(""An error is occured."");
                }
        
        //ActionListener for the next button
        button.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
           test_number=0;
           //storing all the input given in all the textbox
           str1=textbox1.getText();
           str2=textbox2.getText();
           str3=textbox3.getText();
           str4=textbox4.getText();
           str5=textbox5.getText();

           //Condition for all textboxes are not empty 
           if(!"" "".equals(str1) && !"""".equals(str2) && !"""".equals(str3) && !"""".equals(str4) && !"""".equals(str5) ){
           
           int scaledWidth =100;int scaledHeight=100;
            // if the folder of voter  is valid or not 
            File folder_of_voter_photo=new File(str1);
                if(folder_of_voter_photo.isDirectory())
                {
                    test_number++;
                }
                else
                {
                    //showing the error message
                    JOptionPane.showMessageDialog(null, ""folder location is not right"", ""Error"", JOptionPane.ERROR_MESSAGE);
                }



           try{  
              // resizing the photo of canditate 1 
              File input_file=new File(str3);
              BufferedImage image= ImageIO.read(input_file);
              test_number++;
               BufferedImage outputImage = new BufferedImage(scaledWidth,
                        scaledHeight, image.getType());

                // scales the input image to the output image
                Graphics2D g2d = outputImage.createGraphics();
                g2d.drawImage(image, 0, 0, scaledWidth, scaledHeight, null);
                g2d.dispose();

                // extracts extension of output file
                String formatName = str6.substring(str6
                        .lastIndexOf(""."") + 1);

                // writes to output file
                ImageIO.write(outputImage, formatName, new File(str6));

              }
           //showing the error message
           catch(IOException ex){JOptionPane.showMessageDialog(null, ""Give the address of photo of candidte 1 rightly"", ""Error"", JOptionPane.ERROR_MESSAGE);}

           try{      
               //resizing the photo of canditate 2
               File input_file2=new File(str4); 
               BufferedImage image1= ImageIO.read(input_file2); 
               test_number++;
               BufferedImage outputImage1 = new BufferedImage(scaledWidth,
                        scaledHeight, image1.getType());

                // scales the input image to the output image
                Graphics2D g2d = outputImage1.createGraphics();
                g2d.drawImage(image1, 0, 0, scaledWidth, scaledHeight, null);
                g2d.dispose();

                // extracts extension of output file
                String formatName = str7.substring(str7
                        .lastIndexOf(""."") + 1);

                // writes to output file
                ImageIO.write(outputImage1, formatName, new File(str7));

              }
           //showing the error message
           catch(IOException ex){JOptionPane.showMessageDialog(null, ""Give the address of photo of candidte 2 rightly"", ""Error"", JOptionPane.ERROR_MESSAGE);}

            try{ 
                //resizing the photo of canditate 1 
                File input_file3=new File(str5);
                BufferedImage image2= ImageIO.read(input_file3);
                test_number++;
                BufferedImage outputImage2 = new BufferedImage(scaledWidth,
                        scaledHeight, image2.getType());

                // scales the input image to the output image
                Graphics2D g2d = outputImage2.createGraphics();
                g2d.drawImage(image2, 0, 0, scaledWidth, scaledHeight, null);
                g2d.dispose();

                // extracts extension of output file
                String formatName = str8.substring(str8
                        .lastIndexOf(""."") + 1);

                // writes to output file
                ImageIO.write(outputImage2, formatName, new File(str8));
               }
            //showing the error message
            catch(IOException ex){JOptionPane.showMessageDialog(null, ""Give the address of photo of candidte 3 rightly"", ""Error"", JOptionPane.ERROR_MESSAGE);}



            if( test_number == 4)
            {
               try
            {
                //storing the folder name of voters and the password in a text file
                FileWriter newfile= new FileWriter(""E:\\voting_info.txt"");
                newfile.write(str1+""\n"");
                newfile.write(str2);
                newfile.close();
            }
            catch (IOException ex) {

               }


               test_number=0;
               //disposing the current frame
               dispose();
              // creating the object of the  Starting_page
                Starting_page frame=new Starting_page();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setSize(700, 500);
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
                frame.setTitle(""Starting Page""); 

           }
            str1=""""; str2=""""; str3=""""; str4=""""; str5="""";
           }
           //showing the error message
           else JOptionPane.showMessageDialog(null, ""Fill all the information box rightly"", ""Error"", JOptionPane.ERROR_MESSAGE);
           }

                });
    }
    
    
 
        
      
}",1
"/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Spl_project;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

// this class shows the ending page of voting
public class Ending_page extends JFrame
{
    //container variable for storing frame
    Container c;
    //creating JPanel variables  
    JPanel outputPanel,innerpanel1;
    //creating the JLabel
    JLabel label1,nullLabel;
    //creating the JButton
    JButton button; 
    //constructor
    public Ending_page()
    {
        //calling the method
        components();
    }
    //components method
    public void components()
    {
        //storing the frame in the container
        c=this.getContentPane();
        //setting the background colour
        c.setBackground(Color.white);
        //setting the layout of the container
        c.setLayout(new BorderLayout(150,100));
        
        //setting the icon of the frame
        ImageIcon icon1=new ImageIcon(getClass().getResource(""icon2.png""));
        this.setIconImage(icon1.getImage());
        
        //creating the JLabel to show empty place at east side
        nullLabel = new JLabel();         
        c.add(nullLabel,BorderLayout.EAST);
        
        //creating the JLabel to show empty place at west side
        nullLabel = new JLabel();
        c.add(nullLabel,BorderLayout.WEST);
        
        //creating the JLabel to show empty place at north side
        nullLabel = new JLabel(); 
        c.add(nullLabel,BorderLayout.NORTH);
        
        //creating the JLabel to show empty place at south side
        nullLabel = new JLabel();
        c.add(nullLabel,BorderLayout.SOUTH);
        
        //creating a JPanel to store the contents of the frame
        outputPanel = new JPanel();
        //setting the layout of the Jpanel
        outputPanel.setLayout(new GridLayout(5,1));
        //setting the backgroung colour
        outputPanel.setBackground(Color.white);
        //adding the JPanel in container
        c.add(outputPanel,BorderLayout.CENTER);
        
        // creating a JLabel to print the (""Vo text lineting is  started"")
        label1=new JLabel(""Voting is  started"");
        label1.setOpaque(true);
        //setting the font of the text of JLabel
        label1.setFont(new Font(""Arial"",Font.BOLD,18));
        //setting the alignment of the text
        label1.setHorizontalAlignment(JLabel.CENTER);
        //setting foreground and background colour
        label1.setBackground(Color.white);
        label1.setForeground(Color.black);
        //adding the label1 with outputPanel
        outputPanel.add(label1);
        
        //nulllabel creating for outpanel
        nullLabel = new JLabel();
        nullLabel.setBackground(Color.white);
        outputPanel.add(nullLabel);
        
        //creating a innerpanel as a part of outputpanel
        innerpanel1=new JPanel();
        //setting the layout of innerpanel
        innerpanel1.setLayout(new GridLayout(1,3));
        innerpanel1.setBackground(Color.white);
        //adding the innerpanel with the outputpanel
        outputPanel.add(innerpanel1);
        
        //creating null label
        nullLabel = new JLabel();
        nullLabel.setBackground(Color.white);
        //adding the label with innerpanel1
        innerpanel1.add(nullLabel);
        
        //creating a button
        button=new JButton(""End"");
        //setting the background and foreground colour
        button.setForeground(Color.YELLOW);
        button.setBackground(Color.blue);
        //setting the font of button
        button.setFont(new Font(""Arial"",Font.BOLD,15));
        //adding the button
        innerpanel1.add(button);
        
        //creating a label
        nullLabel = new JLabel();
        nullLabel.setBackground(Color.white);
        //adding the label with innerpanel
        innerpanel1.add(nullLabel);
        
        //creating a label
        nullLabel = new JLabel();
        nullLabel.setBackground(Color.white);
        //adding the panel with outputpanel
        outputPanel.add(nullLabel);
        
        //creating a label
        nullLabel = new JLabel();
        nullLabel.setBackground(Color.white);
        //adding the panel with outputpanel
        outputPanel.add(nullLabel);
        
        //actionlistener for the button end
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            
               //disposing the current frame 
               dispose();
               //creating a object for the Password_check class
               Password_check frame=new Password_check();
               frame.setVisible(true);
               frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
               frame.setSize(280,150);
               frame.setLocationRelativeTo(null);
               frame.setResizable(false);
               //setting the title of the frame
               frame.setTitle(""Password Check""); 
                
 

            }
        });
        
    }
    
   
}",0
" package Spl_project;


import java.util.ArrayList;
import java.util.List;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

 // this class helps in the histogram equilization of the image
public class Histo_equi {
  
  //constructor   
  public Histo_equi( String location){
  //calling the method
  components(location);
  }  
     //components method which contains all the works done by this class
      public  void components  (String location) {
    // Loading the OpenCV core library
      System.loadLibrary( Core.NATIVE_LIBRARY_NAME );

      // Reading the Image from the file and storing it in to a Matrix object
      String file =location;

      // Load the image
      Mat img = Imgcodecs.imread(file);

      // Creating an empty matrix
      Mat equ = new Mat();
      img.copyTo(equ);

      // Applying blur
      Imgproc.blur(equ, equ, new Size(3, 3));

      // Applying color
      Imgproc.cvtColor(equ, equ, Imgproc.COLOR_BGR2YCrCb);
      List<Mat> channels = new ArrayList<Mat>();

      // Splitting the channels
      Core.split(equ, channels);

      // Equalizing the histogram of the image
      Imgproc.equalizeHist(channels.get(0), channels.get(0));
      Core.merge(channels, equ);
      Imgproc.cvtColor(equ, equ, Imgproc.COLOR_YCrCb2BGR);
      
      // converting equalised image into gray image
     Mat gray = new Mat();
      Imgproc.cvtColor(equ, gray, Imgproc.COLOR_BGR2GRAY);
      
     String s=location;
     //writing the Processed image 
      Imgcodecs.imwrite(""E:\\Face recognition test\\image2.jpg"", gray);
      System.out.println(""Image Processed"");
   }
    
}
",0
"/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Spl_project;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;

// this class will shoe the result of the vote 
public class Result_panel extends JFrame{
    //varibales for JLabel
    JLabel label,label1,label2,label3,nullLabel;
    //varibales for Container
    Container c;
    //varibales for JPanel
    JPanel outputPanel,innerpanel1;
    //varibales for JTextArea
    JTextArea button1,button2,button3;
    //varibales for JButton 
    JButton button;
    //varibales to count the number of votes of the candidates
    int number1=0,number2=0,number3=0;
   
    //comstructor
   public Result_panel()
   {
       //calling the method
    components();
   } 
    
   //components method contains all the capabilities of the class 
    public void components()
    {
            //storing the whole frame in the container
            c=this.getContentPane();
            c.setBackground(Color.white);

           //setting the layout of the container
            c.setLayout(new BorderLayout(50,100));
            //creating the object of font class
            Font f=new Font(""SansSerif"", Font.BOLD, 18);
            
            //setting the icon of the frame
            ImageIcon icon1=new ImageIcon(getClass().getResource(""icon2.png""));
            this.setIconImage(icon1.getImage());

            //vote counting of candidate 1

                        try (BufferedReader br = new BufferedReader(new FileReader(""E:\\file1.txt""))) {

                                while (( br.readLine()) != null) {
                                     //icrementing 1 for each vote
                                        number1=number1+1;
                                }
                        } catch (IOException e) {
                                e.printStackTrace();
                        }
                        //ends vote counting of candidate 1

            //vote counting of candidate 2

                        try (BufferedReader br = new BufferedReader(new FileReader(""E:\\file2.txt""))) {

                                while (( br.readLine()) != null) {
                                    //incrementing 1 for 1 vote
                                        number2=number2+1;
                                }
                        } catch (IOException e) {
                                e.printStackTrace();
                        }//ends vote counting of candidate 2

            //vote counting of candidate 3

                        try (BufferedReader br = new BufferedReader(new FileReader(""E:\\file3.txt""))) {

                                while (( br.readLine()) != null) {
                                    //incrementing 1 for 1 vote
                                        number3=number3+1;
                                }
                        } catch (IOException e) {
                                e.printStackTrace();


                        }//ends vote counting of candidate 3

                        //converting votes into string for printing
                        String str1=String.valueOf(number1);
                        String str2=String.valueOf(number2);
                         String str3=String.valueOf(number3);
                         //ends converting
               //nulllabel to show empty in the  EAST side of the frame         
               nullLabel = new JLabel();        
                c.add(nullLabel,BorderLayout.EAST);
                
                //nulllabel to show empty in the  west side of the frame    
                nullLabel = new JLabel();        
                c.add(nullLabel,BorderLayout.WEST);
                
                //nulllabel to show empty in the  south side of the frame    
                nullLabel = new JLabel();        
                c.add(nullLabel,BorderLayout.SOUTH);

                //creating a Jpanel to store the contents of the frame
                outputPanel = new JPanel();
                //setting the layout of the JPanel
                outputPanel.setLayout(new GridLayout(3,1));
                outputPanel.setBackground(Color.white);
                //adding the outputpanel 
                c.add(outputPanel,BorderLayout.CENTER);

                
          //creating JLabel to shoe the ""Result of voting"" text
          label=new JLabel(""Result of voting"");
          label.setOpaque(true);
          //setting the font of JLabel
          label.setFont(new Font(""SansSerif"", Font.BOLD, 20));
          //setting the backgroung colour
          label.setBackground(Color.white);  
          //setting the alignment
          label.setHorizontalAlignment(JLabel.CENTER);
          //adding the outputpanel
          outputPanel.add(label);
          
           //creating an JPAnel as a part of outputpanel
           innerpanel1 =new JPanel();
           //setting the layout of the Panel
           innerpanel1.setLayout(new GridLayout(1,3));
           //setting the background colour
           innerpanel1.setBackground(Color.white);
           //adding the panel
           outputPanel.add(innerpanel1);

          //creating a JLabel to show the image of candidate 1
          label1=new JLabel();
          label1.setOpaque(true); 
          //selecting the image of the candidate 1
          label1.setIcon(new ImageIcon(""G:/output.jpg""));
          label1.setBackground(Color.white);
          //adding the JLabel
          innerpanel1.add(label1);

         //Creating the JLabel to show the photo of candidate 2
          label2=new JLabel();
          label2.setOpaque(true); 
          //selecting the image 
          label2.setIcon(new ImageIcon(""G:/output1.jpg""));
          //setting the backgroung colour
          label2.setBackground(Color.white);
          //adding the JLAbel
          innerpanel1.add(label2);

          //creating JLabel to show the uimage of candidate 3
          label3=new JLabel();
          label3.setOpaque(true);
          //selecting the image
          label3.setIcon(new ImageIcon(""G:/output2.jpg""));
          //setting the backgroung colour
          label3.setBackground(Color.white);
          //adding the JLabel
          innerpanel1.add(label3);
          
          //creating a JPanel as a part of the outoutpanel
          JPanel innerpanel2=new JPanel();
          //setting the layout  of the panel
          innerpanel2.setLayout(new GridLayout(3,6));
          innerpanel2.setBackground(Color.white);
          //adding the panel
          outputPanel.add(innerpanel2);
          


          //creating a JTextArea to show the result of votes of candidate 1
          button1=new JTextArea();
          //setting editable false
          button1.setEditable(false);
          button1.setOpaque(true);
          //printing the result in the textarea
          button1.setText(str1);
          //setting the font 
          button1.setFont(new Font(""Arial"",Font.BOLD,24));
          button1.setForeground(Color.red);
          button1.setBackground(Color.yellow);
          //adding the button
          innerpanel2.add(button1);

          //creating nulllabel to fulfill the layout of innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);

          //creating a JTextArea to show the result of votes of candidate 2
          button2=new JTextArea();
          //can not able to edit the textarea
          button2.setEditable(false);
          button2.setOpaque(true);
          //setting the font
          button2.setFont(new Font(""Arial"",Font.BOLD,24));
          //setting the foreground and background colour
          button2.setForeground(Color.red);
          button2.setBackground(Color.yellow);
          //setting the text
          button2.setText(str2);
          //adding the text area
          innerpanel2.add(button2);

          //creating null label to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);


          //creating a JTextArea to show the result of votes of candidate 3
          button3=new JTextArea();
          //can not edit the textarea
          button3.setEditable(false);
          button3.setOpaque(true);
          //setting the text
          button3.setText(str3);
          //setting the font
          button3.setFont(new Font(""Arial"",Font.BOLD,24));
          //setting the foregroung and backgroung colour
          button3.setForeground(Color.red);
          button3.setBackground(Color.yellow);
          //adding the textarea 
          innerpanel2.add(button3);

          //creating nulllabel to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);

          //creating nulllabel to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);
          
          //creating nulllabel to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);
          
          //creating nulllabel to fulfill the layout of the innerpanel2
         
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);
          //creating nulllabel to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);
          //creating nulllabel to fulfill the layout of the innerpanel2
          
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);
          //creating nulllabel to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);

          //creating nulllabel to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);
          //creating nulllabel to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);
          //creating nulllabel to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);
          //creating nulllabel to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);
          //creating nulllabel to fulfill the layout of the innerpanel2
          nullLabel=new JLabel();
          innerpanel2.add(nullLabel);



          //creating button named back
          button=new JButton(""back"");
          button.setOpaque(true);
          //setting background nad foreground colour 
          button.setForeground(Color.yellow);
          button.setBackground(Color.blue);
          //setting the font
          button.setFont(f);
          //adding the button
          innerpanel2.add(button);

          //actionlistener for the button back
         button.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                //disposing the current frame
                        dispose();   

                File Voting_info= new File(""E:\\voting_info.txt"");
                //file deleting
                Voting_info.delete();

                File folder= new File(""E:\\webcame images"");
                //folder deleting
                for (File file: folder.listFiles()) 
                  {
                      //file deleting
                     file.delete();         
                  }
                //folder deleting
                folder.delete();

                File image_number_file= new File(""E:\\web_image_number.txt"");
                //file deleting
                image_number_file.delete();

                File newfile= new File(""E:\\file1.txt"");
                //file deleting
                newfile.delete();

                File newfile2= new File(""E:\\file2.txt"");
                //file deleting
                newfile2.delete();

                File newfile3= new File(""E:\\file3.txt"");
                //file deleting
                newfile3.delete();


                       //creating the object of the admin panel
                        Admin_panel frame2=new Admin_panel();
                         frame2.setVisible(true);
                         frame2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                         frame2.setSize(700,500);
                         frame2.setLocationRelativeTo(null);
                         //seeting the title
                         frame2.setTitle(""Admin Panel"");


                    }
                });
    
    }
    
   
    
 
 
  
}",1
"
package Spl_project;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

//this class is the 1st interface for the voter 
//here face recognition of hte voters will take place
public class User_panel extends JFrame{
    //varibale of Container
    Container c;
    //varibale of JPanel
    JPanel outputPanel,innerpanel1,innerpanel2;
    //varibale of JLabel
    JLabel label1,label2,nullLabel,label3;
    //varibale of Font
    Font f,f1;
    
    //comstructor
    public User_panel()
    {
        //calling the method
       components();
    }

  //this method contents all the capabilities of the class
    public void components()
    {
        //storing the frame in the container
        c=this.getContentPane();
        //setting the backgroung colour
        c.setBackground(Color.white);
        //setting the icon of the frame
        ImageIcon icon1=new ImageIcon(getClass().getResource(""icon2.png""));
        this.setIconImage(icon1.getImage());
        //setting the layout of the container
        c.setLayout(new BorderLayout(150,100));
    
       // creating nulllabel to show empty space in the east part of the frame
        nullLabel = new JLabel();         
        c.add(nullLabel,BorderLayout.EAST);
        
        // creating nulllabel to show empty space in the west part of the frame
        nullLabel = new JLabel();       
        c.add(nullLabel,BorderLayout.WEST);
        
        // creating nulllabel to show empty space in the north part of the frame
        nullLabel = new JLabel();
        c.add(nullLabel,BorderLayout.NORTH);
        
        // creating nulllabel to show empty space in the south part of the frame
        nullLabel = new JLabel();
        c.add(nullLabel,BorderLayout.SOUTH);
        
        //creating a jPnael to show the contents of the frame
        outputPanel = new JPanel();
        //setting the layout of the conatiner
        outputPanel.setLayout(new GridLayout(6,1)); 
        //setting the background colour
        outputPanel.setBackground(Color.white);
        //adding the outputPanel in the container
        c.add(outputPanel,BorderLayout.CENTER);
        
    
        //creating objects of font class
        f=new Font(""SansSerif"", Font.BOLD, 18);
        f1=new Font(""SansSerif"", Font.BOLD, 14);
     
        //creating JLabel to show the text ""If you want to give vote then press ""
        label1=new JLabel(""If you want to give vote then press "");
        label1.setOpaque(true);
        //setting the font
        label1.setFont(f);
        //setting the horizontal alignment
        label1.setHorizontalAlignment(JLabel.CENTER);
        //setting the foreground and background colour
        label1.setBackground(Color.white);
        label1.setForeground(Color.black);
        //adding the JLabel
        outputPanel.add(label1);

    
    
        //creating a JLabel to show the text  ""The following button ""
        label2=new JLabel(""The following button "");  
        label2.setOpaque(true);
        //setting the font
        label2.setFont(f);
        //setting the horizontal alignment
        label2.setHorizontalAlignment(JLabel.CENTER);
        //setting the foreground and background colour
        label2.setBackground(Color.white);
        label2.setForeground(Color.black);
        //adding the JLabel
        outputPanel.add(label2);

        //creating a JPanel as a part of outputpanel 
        innerpanel1=new JPanel();
        //setting the layout of the JPanel
        innerpanel1.setLayout(new GridLayout(1,3));
        //settting up the background colour
        innerpanel1.setBackground(Color.white);
        //adding the JPanel
        outputPanel.add(innerpanel1);
        
        //creating null label to fulfill the layout of innerpanel1
        nullLabel = new JLabel();
        nullLabel.setBackground(Color.white);
        //adding the nulllabel
        innerpanel1.add(nullLabel);
 

        //creating a button named vote
        JButton button=new JButton(""Vote"");
        //setting the fore ground and background colour
        button.setForeground(Color.YELLOW);
        button.setBackground(Color.blue);
        //setting the font 
        button.setFont(f1);
        //adding the button
        innerpanel1.add(button);

         //creating null label to fulfill the layout of innerpanel1
          nullLabel = new JLabel();
          nullLabel.setBackground(Color.white);
          //adding the nulllabel
          innerpanel1.add(nullLabel);

           //creating null label to fulfill the layout of outputPanel
          nullLabel = new JLabel();
          outputPanel.add(nullLabel);

           //creating null label to fulfill the layout of outputPanel
          nullLabel = new JLabel();
          outputPanel.add(nullLabel);

           //creating null label to fulfill the layout of outputPanel
          nullLabel = new JLabel();
          outputPanel.add(nullLabel);
  

  
          //actionlistener for the button named vote
         button.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                       // two file denote is the vote is started or ended 
                     File newfile3= new File(""E:\\Vote_start.txt"");
                     File newfile4= new File(""E:\\Vote_End.txt"");
                     //1stly checking if the voting is ended or not 
                       if(newfile4.isFile())
                       {
                           //disposing the current frame
                           dispose();
                           //showing an error message that the voting is ended
                           JOptionPane.showMessageDialog(null, ""Voting is ended"", ""Error"", JOptionPane.ERROR_MESSAGE);

                       }
                       else{


                           //checking if the voting is started or not
                          if(newfile3.isFile()){
                              //ift started then creating the object of Image_load_in_java
                           Image_load_in_java load= new Image_load_in_java();

                                try {     
                                    //storing the max percentage after comparing with all image 
                                    double count=load.work();
                                    //checking if the percentage is greater or equal to threesold
                                    if(count>=5.68){
                                    //disposing the current frame    
                                    dispose();

                                    //creating object of Voter_panel
                                     Voter_panel frame=new Voter_panel(); 
                                     frame.setVisible(true);
                                     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                                     frame.setSize(700,500);
                                     frame.setLocationRelativeTo(null);
                                     //setting the title
                                     frame.setTitle(""Voter panel"");
                                    }
                                    else
                                    {
                                        //showing an error message if percentage is less than threesold
                                         JOptionPane.showMessageDialog(null, ""Your image is not matched"", ""Error"", JOptionPane.ERROR_MESSAGE);
                                    } 

                                } catch (IOException ex) {

                                }}

                          else
                          {
                              //showing the error  message Voting is not started
                         JOptionPane.showMessageDialog(null, ""Voting is not started"", ""Error"", JOptionPane.ERROR_MESSAGE);
                          }
                       }



                            }
                });
 
 
 
    }
    
            
  
}",0
"
package Spl_project;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;

//this class contains the voter interface where voters can give votes
public class Voter_panel extends JFrame{
    //variable of Container
    Container c;
    //variable of JPanel
    JPanel outputPanel,innerpanel1;
    //variable of JLabel
    JLabel label,label1,label2,label3,nullLabel;
    //variable of JButton
    JButton button1,button2,button3,button4;
    
   
    //constructor
     public Voter_panel(){
         //calling the method
     components();
    }
     //this methos contains all the capabilities of the class
    public void components()
    {
        //storing the frame in the container
        c=this.getContentPane();
        //setting the background colour
        c.setBackground(Color.white);
        //setting the layout of the container
        c.setLayout(new BorderLayout(50,100));
    
        //creating a nulllabel to show empty space in the east side
        nullLabel = new JLabel();        
        c.add(nullLabel,BorderLayout.EAST);
        
        //creating a nulllabel to show empty space in the west side
        nullLabel = new JLabel();        
        c.add(nullLabel,BorderLayout.WEST);
        
        //creating a nulllabel to show empty space in the south side
        nullLabel = new JLabel();        
        c.add(nullLabel,BorderLayout.SOUTH);
        
        
        
        
        //creating a JPanel to store the contents of the frame
        outputPanel = new JPanel();
        //setting the layout of the JPanel
        outputPanel.setLayout(new GridLayout(3,1));
        //setting the backgroung colour
        outputPanel.setBackground(Color.white);
        //adding the JPanel in the container
        c.add(outputPanel,BorderLayout.CENTER);
    
        //creating a font object
        Font f=new Font(""SansSerif"", Font.BOLD, 18);

        //setting the icon of frame
        ImageIcon icon1=new ImageIcon(getClass().getResource(""icon2.png""));
        this.setIconImage(icon1.getImage());
    

   
 
        //creating a JLabel to show ""Candidates of voting"" text
          label=new JLabel(""Candidates of voting"");
          label.setOpaque(true);
          //setting the font 
          label.setFont(new Font(""SansSerif"", Font.BOLD, 20));
          //setting the backgroung colour
          label.setBackground(Color.white);
          //setting the horizontal alignment
          label.setHorizontalAlignment(JLabel.CENTER);
          //adding the JLabel 
          outputPanel.add(label); 
   
   
   
        //creating a Jpanel as a part of the outputpanel  
        innerpanel1 =new JPanel();
        //setting the layout of the Jpanel
        innerpanel1.setLayout(new GridLayout(1,3));
        //setting the background colour
        innerpanel1.setBackground(Color.white);
        //adding the Jpanel
        outputPanel.add(innerpanel1);
   
        //creating jlabel to show the photo of candidate 1
        label1=new JLabel();
        label1.setOpaque(true); 
        //giving the location of the image 
        label1.setIcon(new ImageIcon(""G:/output.jpg""));
        label1.setBackground(Color.white);
        //adding the JLabel 
        innerpanel1.add(label1);
  
  
  
        //creating a JLabel to show the photo of candidate 2
        label2=new JLabel();
        label2.setOpaque(true); 
        //giving the location of the image
        label2.setIcon(new ImageIcon(""G:/output1.jpg""));
        label2.setBackground(Color.white); 
        //adding the JLabel
        innerpanel1.add(label2);
  
        //creating a JLabel to show the photo of candidate 2
        label3=new JLabel();
        label3.setOpaque(true);
        //giving the location of the image
        label3.setIcon(new ImageIcon(""G:/output2.jpg""));
        label3.setBackground(Color.white);
        //adding the JLabel
        innerpanel1.add(label3);
  
        //creating a JPanel as a part of outputpanel
        JPanel innerpanel2=new JPanel();
        //setting the layout 
        innerpanel2.setLayout(new GridLayout(3,6));
        //setting the background colour
        innerpanel2.setBackground(Color.white);
        //adding the JPanel
        outputPanel.add(innerpanel2);
  
  
  
        //creating button named vote
        button1=new JButton("" vote"");
        button1.setOpaque(true); 
       //adding button
        innerpanel2.add(button1);

        //creating null label to fulfill the layout of the innerpanel2 
        nullLabel=new JLabel();
        innerpanel2.add(nullLabel);

        //creating button named vote        
        button2=new JButton("" vote"");
        button2.setOpaque(true);  
        //adding button
        innerpanel2.add(button2);
  
  
         //creating null label to fulfill the layout of the innerpanel2 
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);

      //creating button named vote
      button3=new JButton(""vote"");
      button3.setOpaque(true);
      //adding button
      innerpanel2.add(button3);
      

          //creating null label to fulfill the layout of the innerpanel2 
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);


      //creating null label to fulfill the layout of the innerpanel2 
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);
      
      //creating null label to fulfill the layout of the innerpanel2
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);
      
      //creating null label to fulfill the layout of the innerpanel2
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);
      
      //creating null label to fulfill the layout of the innerpanel2
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);
      
      //creating null label to fulfill the layout of the innerpanel2
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);
      
      //creating null label to fulfill the layout of the innerpanel2
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);

      //creating null label to fulfill the layout of the innerpanel2
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);
      
      //creating null label to fulfill the layout of the innerpanel2
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);
      
      //creating null label to fulfill the layout of the innerpanel2
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);
      
      //creating null label to fulfill the layout of the innerpanel2
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);
      
      //creating null label to fulfill the layout of the innerpanel2
      nullLabel=new JLabel();
      innerpanel2.add(nullLabel);

      //creating a button named back
      button4=new JButton(""back"");
      button4.setOpaque(true);
      button4.setEnabled(false);
      //setting background and foreground colour
      button4.setForeground(Color.yellow);
      button4.setBackground(Color.blue);
      //adding the button
      innerpanel2.add(button4);

  
   
  
      //actionlistener of vote button of candidate 1
      button1.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
           
                 //setting all the vote button false   
                 button1.setEnabled(false);
                  button2.setEnabled(false);
                 button3.setEnabled(false);
                 //setting the back button true
                  button4.setEnabled(true);



              try{

                  //writing a line for each vote
                 Writer output;
                 output = new BufferedWriter(new FileWriter(""E:\\file1.txt"", true));
                 output.append(""1\n"");
                 output.close();
              }

              catch(IOException ex){}
               }




            });
      //actionlistener for vote button of candidate 2

       button2.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {

                    //setting all the vote button false
                 button1.setEnabled(false);
                 button2.setEnabled(false);
                 button3.setEnabled(false);
                 //setting the back button true
                 button4.setEnabled(true);
                      try{

                          //writing a line for eac vote
                       Writer output;
                       output = new BufferedWriter(new FileWriter(""E:\\file2.txt"", true));
                       output.append(""1\n"");
                       output.close();
                        }

              catch(IOException ex){}

                }
            });

       //actionlistener for vote button of candidate 3
        button3.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {

                    //setting all the vote button false
                 button1.setEnabled(false);
                 button2.setEnabled(false);
                 button3.setEnabled(false);
                 //setting the back button true
                 button4.setEnabled(true);
                   try{
                      //writing a line for each vote                       
                    Writer output;
                    output = new BufferedWriter(new FileWriter(""E:\\file3.txt"", true));
                    output.append(""1\n"");
                    output.close();
                  }

              catch(IOException ex){}

                }

            });
        
        //actionlistener for the back button
        button4.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {

                    //disposing the current frame
                   dispose();
                   //creating object of the User_panel
                   User_panel frame=new User_panel();
                   frame.setVisible(true);
                   frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                   //setting the size of frame
                   frame.setSize(700,500);
                   frame.setLocationRelativeTo(null);
                   //setting the title
                   frame.setTitle(""User panel"");

                }
            });
    }
    
}",1
"import java.awt.*;
import java.util.Observable;
import java.util.Observer;
import java.util.Random;
//pirate ships observer
public class PirateShip implements Observer{
    private SeaAndIslandMap seaAndIslandMap;
    private Point shipLocation;
    private Point location;

    public PirateShip(SeaAndIslandMap seaAndIslandMap){
        //links ocean to ship
        this.seaAndIslandMap = seaAndIslandMap;
        //initially assigns pirates ship random point
        while(true)
        {
            Random random = new Random();
            int x = random.nextInt(seaAndIslandMap.getDimensions());
            int y = random.nextInt(seaAndIslandMap.getDimensions());
            //initial point can't be an island
            if(seaAndIslandMap.getMap()[x][y] != 1)
            {
                location = new Point(x,y);
                break;
            }
        }
    }
    //get set method for pirates ships location
    public Point getLocation() {
        return location;
    }

    public void setLocation(Point location) {
        this.location = location;
    }

    @Override
    //each pirate ship moves based on the obervable ship's current location
    public void update(Observable o, Object arg)
    {
        //instanceof is used to test whether the object is an instance of the specified type
        if(o instanceof Ship)
        {
            shipLocation = ((Ship)o).getLocation();
            followShip();
        }
    }

    private void followShip()
    {   //movement of X axis
        if(location.x - shipLocation.x < 0)
        { //checks for boundaries AND for islands (can't go through islands)
            if(location.x< seaAndIslandMap.getDimensions()-1 && seaAndIslandMap.getLocationStatus(location.x+1, location.y)!=1)
                location.x++;
        }

        else if(location.x - shipLocation.x > 0)
        {
            if(location.x>0 && seaAndIslandMap.getLocationStatus(location.x-1, location.y)!=1)
                location.x--;
        }


        //movement of Y axis
        if(location.y - shipLocation.y < 0){
            //checks for boundaries AND for islands
            if(location.y< seaAndIslandMap.getDimensions()-1 && seaAndIslandMap.getLocationStatus(location.x, location.y+1)!=1)
                location.y++;
        }
        else if(location.y - shipLocation.y > 0){
            if(location.y>0 && seaAndIslandMap.getMap()[location.x][location.y-1]!=1)
                location.y--;
        }
    }

}",0
"package com.TeamEnigma.Gui;

import com.TeamEnigma.cognito.CheckAttendance;
import com.TeamEnigma.cognito.Tester;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.Map;

public class TeacherPanel extends Button_templete {
    private Font font;
    private JComboBox<String> course;
    private JButton start, close, home, confirmAttendance, backButton;
    private String courseCode;
    Tester tester;
    //CheckAttendance checkAttendance;
    JLabel ShowingResult, instructionLabel;
    String dateCourse;

    String courses[] = {""CSE 2101"", ""CSE 2102"", ""CSE 2103"", ""CSE 2104""};


    public TeacherPanel() {
        font = new Font(""Arial"", Font.BOLD, 18);
        super.frame();
        super.setTitle(""Teacher's Panel"");
        super.container();
        super.setBounds(250, 180, 600, 600);
        display.setText(""Teacher's Panel"");
        speak.setVisible(false);
        studentLogin.setVisible(false);
       // login.setVisible(false);

        start = new JButton();
        start = new JButton(""Start"");
        start.setBounds(90, 250, 93, 50);
        container.add(start);

        backButton = new JButton();
        backButton = new JButton(""Back"");
        backButton.setBounds(450, 50, 100, 40);
        backButton.setVisible(false);
        container.add(backButton);

        ShowingResult = new JLabel();
        ShowingResult.setBounds(200, 330, 150, 50);
        ShowingResult.setFont(font);
        container.add(ShowingResult);
        ShowingResult.setVisible(false);

        instructionLabel = new JLabel(""Use Student LogIn if Voice identification fails"");
        instructionLabel.setBounds(70, 450, 500, 50);

        instructionLabel.setFont(font);
        container.add(instructionLabel);
        instructionLabel.setVisible(false);


        home = new JButton(""Home"");
        home.setBounds(250, 250, 93, 50);
        container.add(home);

        confirmAttendance = new JButton(""Confirm"");
        confirmAttendance.setBounds(200, 400, 150, 50);
        container.add(confirmAttendance);
        confirmAttendance.setVisible(false);

        close = new JButton();
        close = new JButton(""Close"");
        close.setBounds(410, 250, 93, 50);
        close.setVisible(false);
        container.add(close);


        course = new JComboBox<>(courses);
        course.setBounds(390, 150, 120, 50);
        container.add(course);


        speak.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {


                Thread thread = new Thread() {
                    public void run() {
                        tester = new Tester();
                    }
                };
                thread.start();
                display.setText(""Recording...."");
                try {
                    thread.join();
                } catch (InterruptedException interruptedException) {
                    interruptedException.printStackTrace();
                }
                start.setVisible(false);
                home.setVisible(false);
                close.setVisible(false);
                speak.setVisible(false);
                course.setVisible(false);
                studentLogin.setVisible(false);
                instructionLabel.setVisible(false);
                Map<String, Double> result = tester.getFeq();
                String finalResult = tester.getResult();
                System.out.println(finalResult);
                ShowingResult.setText(finalResult);

                display.setText(""Result...."");
                resultToHome.setVisible(true);
                ShowingResult.setVisible(true);
                if (!finalResult.equals(""No match"")) {
                    resultToHome.setVisible(false);
                    confirmAttendance.setVisible(true);
                    backButton.setVisible(true);

                } else {
                    resultToHome.setVisible(false);
                    backButton.setVisible(true);
                }

            }
        });

        studentLogin.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                StudentLogIn studentLogIn = new StudentLogIn(courseCode);
                studentLogIn.setVisible(true);
                instructionLabel.setVisible(false);
                dispose();
            }
        });

        home.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Main main = new Main();
                main.setVisible(true);
                dispose();
            }
        });


        start.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                start.setVisible(false);
                speak.setVisible(true);
                courseCode = course.getSelectedItem().toString();
                LocalDate localDate = LocalDate.now();
                dateCourse = String.valueOf(localDate) + ""\t Course: "" + courseCode;
                System.out.println(dateCourse);
                display.setText(dateCourse);
                System.out.println(""Course : "" + courseCode);
                studentLogin.setVisible(true);
                close.setVisible(true);
                home.setVisible(false);
                course.setVisible(false);
                instructionLabel.setVisible(true);


            }
        });


        close.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                start.setVisible(true);
                course.setVisible(true);
                home.setVisible(true);
                speak.setVisible(false);
                studentLogin.setVisible(false);
                close.setVisible(false);
                instructionLabel.setVisible(false);
                display.setText(""Teacher's Panel"");
            }
        });


        confirmAttendance.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Map<String, Double> result = tester.getFeq();
                String finalResult = tester.getResult();
                try {
                    new CheckAttendance().checkAttendance(courseCode, finalResult);
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
                close.setVisible(true);
                speak.setVisible(true);
                studentLogin.setVisible(true);
                display.setText(dateCourse);
                ShowingResult.setVisible(false);
                confirmAttendance.setVisible(false);
                resultToHome.setVisible(false);
                backButton.setVisible(false);
            }
        });

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                close.setVisible(true);
                speak.setVisible(true);
                studentLogin.setVisible(true);
                display.setText(dateCourse);
                ShowingResult.setVisible(false);
                confirmAttendance.setVisible(false);
                backButton.setVisible(false);
            }
        });


    }

    public String getCourseCode() {
        return courseCode;
    }

    public void setCourseCode(String courseCode) {
        this.courseCode = courseCode;
    }

    public static void main(String[] args) {
        TeacherPanel tp = new TeacherPanel();
        tp.setVisible(true);
    }
}",1
"package SkyForce_MainFrame;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Random;

public class Bullet {
	private int x;
	private int y;
	private static int motion;
	public Bullet(int x,int y){
		this.x=x;
		this.y=y;
		motion=4 ;
	}
	public int getX() {
		return x;
	}
	public int getY() {
		return y;
	}
	
	public void setMotion(int Bylabel) {
		motion=Bylabel;
	}
	
	public void init() {
		
	}
	public void tick() {
		y-=motion;
		
	}
	public void render(Graphics g) {		
		g.setColor(randomColor());
		g.fillRect(x, y, 6, 10);
	}
	
	private Color randomColor() {
		Random random=new Random();
		int r = random.nextInt(255);
		int g = random.nextInt(255);
		int b = random.nextInt(255);
		return new Color(r, g, b);
	}

}",0
"package SkyForce_MainFrame;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;

public class Enemy {
	   public static BufferedImage enemy=null;
	   private static gameManager manager;
	   private Game_Maintaining maintain;;
	    private int x ;
	    private int y;
	    public Enemy(int x, int y){
	       this.x = x;
	       this.y = y;
	    }
	    public void setY(int val) {
	    	this.y=val;
	    }
	    public int getX() {
	    	return x;
	    }
	    public int getY() {
	    	return y;
	    }
	    public void init() {
	    	
	    }
	    public void tick(){
	    y += 1;
	    }
	    public void render(Graphics g){
	    	
		if(y>=50 && y<=93) {
	   		enemy = ImageClass.enemy1;
	   		
	   	 }else if(y>=94 && y<=137) {
	   		enemy = ImageClass.enemy6;
	   		
	   	 }else if(y>=138 && y<=181) {
	   		enemy = ImageClass.enemy3;
	   		
	   	 }else if(y>=182 && y<=225) {
	   		enemy = ImageClass.enemy4;
	   		
	   	 }else if(y>=226 && y<=313) {
	   		enemy = ImageClass.enemy5;
	   		
	   	 }else {
	   		enemy = ImageClass.enemy2;
	   		
	   	 }
		g.drawImage(enemy,x,y,40,44,null);
	 
	    }
}

	
",0
"package SkyForce_MainFrame;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.util.Random;

public class Game_Maintaining implements Runnable {

	private String title;
	private int width;
	private int height;
	private Thread thread;
	private boolean running;
	private BufferStrategy buffer;
	private Graphics g;
	private int y;
	private boolean start;
	private gameManager manager;
  private BufferedImage image;
	public static SkyForce_Frame display;
	public static final int gameWidth = 400;
	public static final int gameHeight = 400;

	public Game_Maintaining(String title, int width, int height) {

		this.title = title;
		this.width = width;
		this.height = height;

	}

	public void init() {

		display = new SkyForce_Frame(title, width, height);

		manager = new gameManager();
		manager.init();
	}

	public synchronized void start() {
		if (running)
			return;
		running = true;
		if (thread == null) {
			thread = new Thread(this);
			thread.start();
			
			
		}

	}

	public synchronized void stop() {
		if (!(running))
			return;
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public void tick() {
		manager.tick();
	}

	public void render() {

		buffer = display.getCanvas().getBufferStrategy();
		if (buffer == null) {
			display.getCanvas().createBufferStrategy(3);
			return;
		}

		g = buffer.getDrawGraphics();

		g.clearRect(0, 0, width, height);
		// draw
		// g.setColor(Color.GRAY);
		// g.fillRect(50, 50, gameWidth, gameHeight);
		Random ran=new Random();
		int b=ran.nextInt(5);
		if(manager.score<=100) {
			image=ImageClass.bag1;
		}else if(manager.score>100 && manager.score<=200) {
			image=ImageClass.bag5;
		}else if(manager.score>200 && manager.score<=300) {
			image=ImageClass.bag3;
		}else if(manager.score>300 && manager.score<=400) {
			image=ImageClass.bag4;
		}else {
			image=ImageClass.bag2; 
		}
		g.drawImage(image, 50, 50, gameWidth, gameHeight, null);
		manager.render(g);
		// menu

		// end of draw

		buffer.show();
		g.dispose();

	}

	public void run() {
		init();

		int fps = 50;
		double timePerTick = 1000000000 / fps;
		double delta = 0;
		long current = System.nanoTime();

		while (running) {

			delta = delta + (System.nanoTime() - current) / timePerTick;
			current = System.nanoTime();
			if (delta >= 1) {
				tick();
				render();
				delta--;
			}

		}
	}
}",1
"package SkyForce_MainFrame;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JLabel;
import java.awt.Font;
import java.awt.event.WindowFocusListener;

public class Help{

	private JFrame frame;
	
	public Help() {
		initialize();
	}
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 450, 300);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JLabel lblNewLabel = new JLabel(""Move Left--> press Left Arrow"");
		lblNewLabel.setFont(new Font(""Tahoma"", Font.BOLD, 15));
		lblNewLabel.setBounds(22, 26, 311, 30);
		frame.getContentPane().add(lblNewLabel);
		
		JLabel lblNewLabel_1 = new JLabel(""Move Right> press Right Arrow"");
		lblNewLabel_1.setFont(new Font(""Tahoma"", Font.BOLD, 15));
		lblNewLabel_1.setBounds(22, 67, 311, 30);
		frame.getContentPane().add(lblNewLabel_1);
		
		JLabel lblNewLabel_2 = new JLabel(""Move down> press Down Arrow"");
		lblNewLabel_2.setFont(new Font(""Tahoma"", Font.BOLD, 15));
		lblNewLabel_2.setBounds(22, 108, 311, 30);
		frame.getContentPane().add(lblNewLabel_2);
		
		JLabel lblNewLabel_3 = new JLabel(""Move Up> press Up Arrow"");
		lblNewLabel_3.setFont(new Font(""Tahoma"", Font.BOLD, 15));
		lblNewLabel_3.setBounds(22, 149, 311, 30);
		frame.getContentPane().add(lblNewLabel_3);
		
		JLabel lblNewLabel_4 = new JLabel(""Throw Bullet--> Space KEy or B "");
		lblNewLabel_4.setFont(new Font(""Tahoma"", Font.BOLD, 15));
		lblNewLabel_4.setBounds(22, 190, 313, 30);
		frame.getContentPane().add(lblNewLabel_4);
		frame.setVisible(true);
	}

}",0
"package SkyForce_MainFrame;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.Font;

public class HelpAbout {

	private JFrame frame;
	public HelpAbout() {
		initialize();
	}
	private void initialize() {
		frame = new JFrame();
		frame.getContentPane().setBackground(new Color(244, 164, 96));
		frame.setBounds(100, 100, 450, 300);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JButton btnNewButton = new JButton(""Help"");
		btnNewButton.setFont(new Font(""Tahoma"", Font.BOLD, 20));
		btnNewButton.setForeground(new Color(0, 0, 255));
		btnNewButton.setBackground(new Color(255, 0, 255));
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				new Help();
			}
		});
		btnNewButton.setBounds(161, 45, 124, 48);
		frame.getContentPane().add(btnNewButton);
		
		JButton btnNewButton_1 = new JButton(""About"");
		btnNewButton_1.setFont(new Font(""Tahoma"", Font.BOLD, 20));
		btnNewButton_1.setForeground(new Color(0, 0, 255));
		btnNewButton_1.setBackground(new Color(255, 0, 255));
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				new About();
			}
		});
		btnNewButton_1.setBounds(161, 115, 124, 48);
		frame.getContentPane().add(btnNewButton_1);
		frame.setVisible(true);
	}
}",0
"package SkyForce_MainFrame;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public class Player implements KeyListener {
	private int xPos;
	private int yPos;
	
	private boolean isLeft, isRight;
	private boolean isUp, isDown;
	private boolean attack;
	
	private SkyForce_Frame display;
	private gameManager manager;
	
	private long present;
	private long late;
	private static int strength;
	
	public Player(int xPoint, int yPoint) {
		this.xPos = xPoint;
		this.yPos = yPoint;
	}
	
	public int getX() {
		return x;
	}
	
	public int getY() {
		return y;
	}
	
	public void init() {
		present=System.nanoTime();
		late = 100;
		strength = 2;
		
		display.frame.addKeyListener(this);
		ImageClass.init();
	}
	
	public void tick() {
		if(!(strength<=0)) {
			if(left) {
				if(x>50) {
					x = x - 5;
				}
			}
			
			if(right) {
				if(x<Game_Maintaining.gameWidth-5) {
					x = x + 3;
				}
			}
			
			if(up) {
				if(y>50) {
					y=y-3;
				}
			}
			
			if(down) {
				if(y<393) {
					y+=5;
				}
			}
			
			if(attack) {
				long wait=(System.nanoTime()-present)/1000000;
				if(wait>late) {
					manager.bullet.add(new Bullet(x+25,y));
				}

				present=System.nanoTime();
			}
		}
	}
	
	public void render(Graphics g) {
		if(!(strength<=0)) {
		//g.drawImage(ImageClass.player,x, y, 50, 50, null);
			g.drawImage(ImageClass.player,x,y-5,60,60,null);
		//}
	}
	}
	
	@Override
	public void keyPressed(KeyEvent e) {
		int key=e.getKeyCode();
		if(key==KeyEvent.VK_LEFT) {
			left=true;
		}
		if(key==KeyEvent.VK_RIGHT) {
			right=true;
		}
		if(key==KeyEvent.VK_B) {
			attack=true;
		}
		if(key==KeyEvent.VK_SPACE) {
			attack=true;
		}
		if(key==KeyEvent.VK_UP) {
			up=true;
		}
		if(key==KeyEvent.VK_DOWN) {
			down=true;
		}
	}
	
	@Override
	public void keyReleased(KeyEvent e) {
		int key=e.getKeyCode();
		if(key==KeyEvent.VK_LEFT) {
			left=false;
		}
		if(key==KeyEvent.VK_RIGHT) {
			right=false;
		}
		if(key==KeyEvent.VK_B) {
			attack=false;
		}
		if(key==KeyEvent.VK_SPACE) {
			attack=false;
		}
		if(key==KeyEvent.VK_UP) {
			up=false;
		}
		if(key==KeyEvent.VK_DOWN) {
			down=false;
		}
	}
	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}
	public void setStrength(int s) {
		this.strength=s;
	}
	public int getStrength() {
		return this.strength;
	}
	
         
}",1
"package SkyForce_MainFrame;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JOptionPane;

public class gameManager {
	private Player player;
	private Enemy eny;
	private static Bullet blt;
	public static ArrayList<Bullet> bullet;
	public static ArrayList<Enemy> enemy;
	private long current_time;
	private long late;
	private SkyForce_Frame f;
	private Home home;
	public static int score = 0;
	private static int isupdate = 0;
	private static Main_Class mainclass;
	private static FileOutputStream file;
	private int strength;
	public static int ex, ey;
	private int label = 2;
	public static Game_Maintaining maintain;

	public void init() {
		player = new Player((Game_Maintaining.gameWidth / 2) + 40, (Game_Maintaining.gameHeight - 50) + 50);
		player.init();
		bullet = new ArrayList<Bullet>();
		enemy = new ArrayList<Enemy>();
		current_time = System.nanoTime();
		late = 2000;
		strength = player.getStrength();
	}

	public void tick() {

		player.tick();
		for (int i = 0; i < bullet.size(); i++) {
			bullet.get(i).tick();
		}
		long wait = (System.nanoTime() - current_time) / 1000000;
		if (wait > late) {

			for (int i = 0; i < label; i++) {
				Random random = new Random();
				int x_ran = random.nextInt(450);
				int y_ran = random.nextInt(450);
				if (strength > 0) {

					enemy.add(new Enemy(x_ran, -y_ran));

				}
			}
			current_time = System.nanoTime();
		}

		for (int i = 0; i < enemy.size(); i++) {
			enemy.get(i).tick();
		}
	}

	// starting render method
	public void render(Graphics g) {

		player.render(g);
		for (int i = 0; i < bullet.size(); i++) {
			if (bullet.get(i).getY() > 50) {
				bullet.get(i).render(g);
			} else {
				bullet.remove(bullet);
			}
		}
		for (int i = 0; i < enemy.size(); i++) {
			if (enemy.get(i).getX() >= 55 && enemy.get(i).getX() <= 450 - 33 && enemy.get(i).getY() >= 52
					&& enemy.get(i).getY() <= 450) {
				enemy.get(i).render(g);
			}

		}
		// bullet and enemy collision
		for (int e = 0; e < enemy.size(); e++) {
			int ex = enemy.get(e).getX();
			int ey = enemy.get(e).getY();
			this.ey = ey;
			for (int b = 0; b < bullet.size(); b++) {
				int bx = bullet.get(b).getX();
				int by = bullet.get(b).getY();

				// if(ex<bx+6 && ex+40>bx && ey<by+10 && ey+40>by)
				// if(ex<bx+6 && ex+40>bx && ey<by+10 && ey>by)
				if (ey >= 55 && ey <= 450) {
					if (ex < bx + 10 && ex + 40 > bx && ey < by + 10 && ey + 44 > by) {
						enemy.remove(e);
						e--;
						bullet.remove(b);
						b--;
						score += 5;
					}
				}

			}

		}
		// player and enemy collision

		for (int e = 0; e < enemy.size(); e++) {
			int ex = enemy.get(e).getX();
			int ey = enemy.get(e).getY();

			int px = player.getX();
			int py = player.getY();

			if (px < ex + 40 && px + 60 > ex && py < ey + 40 && py + 60 > ey) {
//				enemy.removeAll(enemy);
//				f.frame.dispose();
//				home = new Home();
//				home.frame.setVisible(true);
				// finished();
				enemy.remove(e);
				strength--;
				if (strength <= 0) {
					enemy.removeAll(enemy);
					player.setStrength(0);

					f.frame.dispose();
					score = 0;
					home = new Home();
					home.frame.setVisible(true);
					// maintain.stop();
				}

			}
		}
		g.setColor(Color.BLUE);
		g.setFont(new Font(""arial"", Font.BOLD, 30));
		g.drawString(""Score: "" + score, 20, 550);
		g.drawString(""Life: "" + strength, 320, 550);
		g.setColor(Color.RED);
		g.drawLine(50, 495, 450, 495);
		if (score % 100 == 0 && score != 0) {
			g.setColor(Color.GREEN);
			g.drawString(""Congratulation "" + score, 160, 40);
		}
		if (score >= 0 && score <= 99) {
			label = 2;
			g.drawString(""Level 1"", 160, 40);
		} else if (score >= 100 && score <= 199) {
			try {
				for (Bullet b : bullet) {
					b.setMotion(6);
				}

			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
			g.drawString(""Level 2"", 160, 40);
			label = 5;

		} else if (score >= 200 && score <= 500) {
			try {
				for (Bullet b : bullet) {
					b.setMotion(8);
				}

			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
			g.drawString(""Level 3"", 160, 40);
			label = 7;
		} else if (score >= 501 && score <= 1000) {
			try {
				for (Bullet b : bullet) {
					b.setMotion(10);
				}

			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
			g.drawString(""Level 4"", 160, 40);
			label = 11;
		}
		try {

			String s = Integer.toString(score);
			byte[] b = s.getBytes();
			file.write(b);
			file.close();

		} catch (Exception e2) {
			// TODO: handle exception
		}

	}

	// end render method
}",1
"package SkyForce_MainFrame;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;

public class ImageClass {

    public static BufferedImage image,bag1,bag2,bag3,bag4,bag5;
    public static BufferedImage CombineImg;
    public static BufferedImage player,enemy1,enemy2,enemy3,enemy4
    ,enemy5,enemy6,enemy11,enemy22,enemy33,enemy44,enemy55,enemy66;
    public static BufferedImage enemy=null;
    private static gameManager manager;
    public static void init()
    {
   // image=imageLoader(""/background.jpg"");
    CombineImg=imageLoader(""/sky-airplane.png"");
   // enemy=CombineImg.getSubimage(0, 0, 115, 95);
    
    //open enemies image
    enemy1=imageLoader(""/plane1.png"");
    enemy2=imageLoader(""/plane2.png"");
    enemy3=imageLoader(""/plane3.png"");
    enemy4=imageLoader(""/plane4.png"");
    enemy5=imageLoader(""/plane5.png"");
    enemy6=imageLoader(""/plane6.png"");
    
    //open background image
    bag1=imageLoader(""/background1.jpg"");
    bag2=imageLoader(""/background2.jpg"");
    bag3=imageLoader(""/background3.jpg"");
    bag4=imageLoader(""/background4.jpg"");
    bag5=imageLoader(""/background5.jpg"");

	 player=CombineImg.getSubimage(115, 0, 115, 95);
    }
   
     public static BufferedImage imageLoader(String path){
           try {
           return 
ImageIO.read(ImageClass.class.
getResource(path));
       } catch (IOException e) {
           e.printStackTrace();
           System.exit(1);
       }
           return null;     
     }
  
}",0
"package flappyBird;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class BirdImage extends BirdSet{
	private BufferedImage img = null;
	private static int bird_dia = 36; //bird accurate width
	public static int x = (GamePanel.WIDTH/2)-(bird_dia/2);
	public static int y = (GamePanel.HEIGHT)/2;
	
	private static int speed = 2;
	private int accelaration = 1;
	
	public BirdImage() {
		LoadImage();
	}

	private void LoadImage() {
		//Settings s = new Settings();
		try {
			 img = ImageIO.read(new File(""G:\\\\Project\\\\Flappy Bird\\\\flappy-bird2\\\\Images\\\\1.png""));
		}
		catch(Exception ex) {
			ex.printStackTrace();
		}
	}
	
	public void drawBird(Graphics g) {
		g.drawImage(img, x, y, null);
	}
	
	public void birdMovement() {
		if(y>=0 && y<=GamePanel.HEIGHT) {
			speed+=accelaration;//3,4,5
			y+=speed;//400+3,400+3+4,400+3+4+5
		}
		else {
			boolean option = GamePanel.popUpMessage();
			if(option) {
				try {
					Thread.sleep(500);
				}
				catch(Exception ex) {
					ex.printStackTrace();
				}
				
				reset();
				
			}	
			else {
				
				JFrame frame = MainBird.getWindow();
				frame.dispose();
				MainBird.timer.stop();
			}
			
			
		}
	}
	
	public void goUpwards() {
		speed = -17;
	}

	public static void reset() {
		speed = 2;
		y = GamePanel.HEIGHT/2;
		GamePanel.score=0;
	}
	public static Rectangle getBirdRect() {
		Rectangle birdRect = new Rectangle(x,y,bird_dia,35);
		return birdRect;
	}

}",0
"package project;
//package chess_package_1;
import java.util.*;
import javax.swing.*;
public class AlphaBetaChess {
    static String chessBoard[][]={
        {""r"",""k"",""b"",""q"",""a"",""b"",""k"",""r""},
        {""p"",""p"",""p"",""p"",""p"",""p"",""p"",""p""},
        {"" "","" "","" "","" "","" "","" "","" "","" ""},
        {"" "","" "","" "","" "","" "","" "","" "","" ""},
        {"" "","" "","" "","" "","" "","" "","" "","" ""},
        {"" "","" "","" "","" "","" "","" "","" "","" ""},
        {""P"",""P"",""P"",""P"",""P"",""P"",""P"",""P""},
        {""R"",""K"",""B"",""Q"",""A"",""B"",""K"",""R""}};
    static int kingPositionC, kingPositionL;
    static int humanAsWhite=-1;//1=human as white, 0=human as black
    static int globalDepth;
    
    
    AlphaBetaChess(int depth)
    {
    	globalDepth=depth;
    }
    
    public static void main(String[] args) {
    	
    	setup();  
    }
    
    
    public static void setup() {
    	
    	while (!""A"".equals(chessBoard[kingPositionC/8][kingPositionC%8])) {kingPositionC++;}//get King's location
        while (!""a"".equals(chessBoard[kingPositionL/8][kingPositionL%8])) {kingPositionL++;}//get king's location
        /*
         * PIECE=WHITE/black
         * pawn=P/p
         * kinght (horse)=K/k
         * bishop=B/b
         * rook (castle)=R/r
         * Queen=Q/q
         * King=A/a
         * 
         * My strategy is to create an alpha-beta tree diagram wich returns
         * the best outcome
         * 
         * (1234b represents row1,column2 moves to row3, column4 which captured
         * b (a space represents no capture))
         */
        JFrame f=new JFrame(""Chess"");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        UserInterface ui=new UserInterface();
        f.add(ui);
        f.setSize(1043, 1060);
        f.setVisible(true);
        System.out.println(sortMoves(posibleMoves()));
        Object[] option={""Computer"",""Human""};
        humanAsWhite=JOptionPane.showOptionDialog(null, ""Who will move first?"", ""ABC Options"", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, option, option[1]);
        if (humanAsWhite==0) {
            long startTime=System.currentTimeMillis();
            makeMove(alphaBeta(globalDepth, 1000000, -1000000, """", 0));
            long endTime=System.currentTimeMillis();
            System.out.println(""That took ""+(endTime-startTime)+"" milliseconds"");
            flipBoard();
            f.repaint();
        }
        makeMove(""7655 "");
        undoMove(""7655 "");
        for (int i=0;i<8;i++) {
            System.out.println(Arrays.toString(chessBoard[i]));
        }
    	
    }
    
    
    public static void flipBoard() {
        String temp;
        for (int i=0;i<32;i++) {
            int r=i/8, c=i%8;
            if (Character.isUpperCase(chessBoard[r][c].charAt(0))) {
                temp=chessBoard[r][c].toLowerCase();
            } else {
                temp=chessBoard[r][c].toUpperCase();
            }
            if (Character.isUpperCase(chessBoard[7-r][7-c].charAt(0))) {
                chessBoard[r][c]=chessBoard[7-r][7-c].toLowerCase();
            } else {
                chessBoard[r][c]=chessBoard[7-r][7-c].toUpperCase();
            }
            chessBoard[7-r][7-c]=temp;
        }
        int kingTemp=kingPositionC;
        kingPositionC=63-kingPositionL;
        kingPositionL=63-kingTemp;
    }
    public static void makeMove(String move) {
        if (move.charAt(4)!='P') {
            chessBoard[Character.getNumericValue(move.charAt(2))][Character.getNumericValue(move.charAt(3))]=chessBoard[Character.getNumericValue(move.charAt(0))][Character.getNumericValue(move.charAt(1))];
            chessBoard[Character.getNumericValue(move.charAt(0))][Character.getNumericValue(move.charAt(1))]="" "";
            if (""A"".equals(chessBoard[Character.getNumericValue(move.charAt(2))][Character.getNumericValue(move.charAt(3))])) {
                kingPositionC=8*Character.getNumericValue(move.charAt(2))+Character.getNumericValue(move.charAt(3));
            }
        } else {
            //if pawn promotion
            chessBoard[1][Character.getNumericValue(move.charAt(0))]="" "";
            chessBoard[0][Character.getNumericValue(move.charAt(1))]=String.valueOf(move.charAt(3));
        }
    }
    public static void undoMove(String move) {
        if (move.charAt(4)!='P') {
            chessBoard[Character.getNumericValue(move.charAt(0))][Character.getNumericValue(move.charAt(1))]=chessBoard[Character.getNumericValue(move.charAt(2))][Character.getNumericValue(move.charAt(3))];
            chessBoard[Character.getNumericValue(move.charAt(2))][Character.getNumericValue(move.charAt(3))]=String.valueOf(move.charAt(4));
            if (""A"".equals(chessBoard[Character.getNumericValue(move.charAt(0))][Character.getNumericValue(move.charAt(1))])) {
                kingPositionC=8*Character.getNumericValue(move.charAt(0))+Character.getNumericValue(move.charAt(1));
            }
        } else {
            //if pawn promotion
            chessBoard[1][Character.getNumericValue(move.charAt(0))]=""P"";
            chessBoard[0][Character.getNumericValue(move.charAt(1))]=String.valueOf(move.charAt(2));
        }
    }
    public static String posibleMoves() {
        String list="""";
        for (int i=0; i<64; i++) {
            switch (chessBoard[i/8][i%8]) {
                case ""P"": list+=posibleP(i);
                    break;
                case ""R"": list+=posibleR(i);
                    break;
                case ""K"": list+=posibleK(i);
                    break;
                case ""B"": list+=posibleB(i);
                    break;
                case ""Q"": list+=posibleQ(i);
                    break;
                case ""A"": list+=posibleA(i);
                    break;
            }
        }
        return list;//x1,y1,x2,y2,captured piece
    }
    public static String posibleP(int i) {
        String list="""", oldPiece;
        int r=i/8, c=i%8;
        for (int j=-1; j<=1; j+=2) {
            try {//capture
                if (Character.isLowerCase(chessBoard[r-1][c+j].charAt(0)) && i>=16) {
                    oldPiece=chessBoard[r-1][c+j];
                    chessBoard[r][c]="" "";
                    chessBoard[r-1][c+j]=""P"";
                    if (kingSafe()) {
                        list=list+r+c+(r-1)+(c+j)+oldPiece;
                    }
                    chessBoard[r][c]=""P"";
                    chessBoard[r-1][c+j]=oldPiece;
                }
            } catch (Exception e) {}
            try {//promotion && capture
                if (Character.isLowerCase(chessBoard[r-1][c+j].charAt(0)) && i<16) {
                    String[] temp={""Q"",""R"",""B"",""K""};
                    for (int k=0; k<4; k++) {
                        oldPiece=chessBoard[r-1][c+j];
                        chessBoard[r][c]="" "";
                        chessBoard[r-1][c+j]=temp[k];
                        if (kingSafe()) {
                            //column1,column2,captured-piece,new-piece,P
                            list=list+c+(c+j)+oldPiece+temp[k]+""P"";
                        }
                        chessBoard[r][c]=""P"";
                        chessBoard[r-1][c+j]=oldPiece;
                    }
                }
            } catch (Exception e) {}
        }
        try {//move one up
            if ("" "".equals(chessBoard[r-1][c]) && i>=16) {
                oldPiece=chessBoard[r-1][c];
                chessBoard[r][c]="" "";
                chessBoard[r-1][c]=""P"";
                if (kingSafe()) {
                    list=list+r+c+(r-1)+c+oldPiece;
                }
                chessBoard[r][c]=""P"";
                chessBoard[r-1][c]=oldPiece;
            }
        } catch (Exception e) {}
        try {//promotion && no capture
            if ("" "".equals(chessBoard[r-1][c]) && i<16) {
                String[] temp={""Q"",""R"",""B"",""K""};
                for (int k=0; k<4; k++) {
                    oldPiece=chessBoard[r-1][c];
                    chessBoard[r][c]="" "";
                    chessBoard[r-1][c]=temp[k];
                    if (kingSafe()) {
                        //column1,column2,captured-piece,new-piece,P
                        list=list+c+c+oldPiece+temp[k]+""P"";
                    }
                    chessBoard[r][c]=""P"";
                    chessBoard[r-1][c]=oldPiece;
                }
            }
        } catch (Exception e) {}
        try {//move two up
            if ("" "".equals(chessBoard[r-1][c]) && "" "".equals(chessBoard[r-2][c]) && i>=48) {
                oldPiece=chessBoard[r-2][c];
                chessBoard[r][c]="" "";
                chessBoard[r-2][c]=""P"";
                if (kingSafe()) {
                    list=list+r+c+(r-2)+c+oldPiece;
                }
                chessBoard[r][c]=""P"";
                chessBoard[r-2][c]=oldPiece;
            }
        } catch (Exception e) {}
        return list;
    }
    public static String posibleR(int i) {
        String list="""", oldPiece;
        int r=i/8, c=i%8;
        int temp=1;
        for (int j=-1; j<=1; j+=2) {
            try {
                while("" "".equals(chessBoard[r][c+temp*j]))
                {
                    oldPiece=chessBoard[r][c+temp*j];
                    chessBoard[r][c]="" "";
                    chessBoard[r][c+temp*j]=""R"";
                    if (kingSafe()) {
                        list=list+r+c+r+(c+temp*j)+oldPiece;
                    }
                    chessBoard[r][c]=""R"";
                    chessBoard[r][c+temp*j]=oldPiece;
                    temp++;
                }
                if (Character.isLowerCase(chessBoard[r][c+temp*j].charAt(0))) {
                    oldPiece=chessBoard[r][c+temp*j];
                    chessBoard[r][c]="" "";
                    chessBoard[r][c+temp*j]=""R"";
                    if (kingSafe()) {
                        list=list+r+c+r+(c+temp*j)+oldPiece;
                    }
                    chessBoard[r][c]=""R"";
                    chessBoard[r][c+temp*j]=oldPiece;
                }
            } catch (Exception e) {}
            temp=1;
            try {
                while("" "".equals(chessBoard[r+temp*j][c]))
                {
                    oldPiece=chessBoard[r+temp*j][c];
                    chessBoard[r][c]="" "";
                    chessBoard[r+temp*j][c]=""R"";
                    if (kingSafe()) {
                        list=list+r+c+(r+temp*j)+c+oldPiece;
                    }
                    chessBoard[r][c]=""R"";
                    chessBoard[r+temp*j][c]=oldPiece;
                    temp++;
                }
                if (Character.isLowerCase(chessBoard[r+temp*j][c].charAt(0))) {
                    oldPiece=chessBoard[r+temp*j][c];
                    chessBoard[r][c]="" "";
                    chessBoard[r+temp*j][c]=""R"";
                    if (kingSafe()) {
                        list=list+r+c+(r+temp*j)+c+oldPiece;
                    }
                    chessBoard[r][c]=""R"";
                    chessBoard[r+temp*j][c]=oldPiece;
                }
            } catch (Exception e) {}
            temp=1;
        }
        return list;
    }
    public static String posibleK(int i) {
        String list="""", oldPiece;
        int r=i/8, c=i%8;
        for (int j=-1; j<=1; j+=2) {
            for (int k=-1; k<=1; k+=2) {
                try {
                    if (Character.isLowerCase(chessBoard[r+j][c+k*2].charAt(0)) || "" "".equals(chessBoard[r+j][c+k*2])) {
                        oldPiece=chessBoard[r+j][c+k*2];
                        chessBoard[r][c]="" "";
                        if (kingSafe()) {
                            list=list+r+c+(r+j)+(c+k*2)+oldPiece;
                        }
                        chessBoard[r][c]=""K"";
                        chessBoard[r+j][c+k*2]=oldPiece;
                    }
                } catch (Exception e) {}
                try {
                    if (Character.isLowerCase(chessBoard[r+j*2][c+k].charAt(0)) || "" "".equals(chessBoard[r+j*2][c+k])) {
                        oldPiece=chessBoard[r+j*2][c+k];
                        chessBoard[r][c]="" "";
                        if (kingSafe()) {
                            list=list+r+c+(r+j*2)+(c+k)+oldPiece;
                        }
                        chessBoard[r][c]=""K"";
                        chessBoard[r+j*2][c+k]=oldPiece;
                    }
                } catch (Exception e) {}
            }
        }
        return list;
    }
    public static String posibleB(int i) {
        String list="""", oldPiece;
        int r=i/8, c=i%8;
        int temp=1;
        for (int j=-1; j<=1; j+=2) {
            for (int k=-1; k<=1; k+=2) {
                try {
                    while("" "".equals(chessBoard[r+temp*j][c+temp*k]))
                    {
                        oldPiece=chessBoard[r+temp*j][c+temp*k];
                        chessBoard[r][c]="" "";
                        chessBoard[r+temp*j][c+temp*k]=""B"";
                        if (kingSafe()) {
                            list=list+r+c+(r+temp*j)+(c+temp*k)+oldPiece;
                        }
                        chessBoard[r][c]=""B"";
                        chessBoard[r+temp*j][c+temp*k]=oldPiece;
                        temp++;
                    }
                    if (Character.isLowerCase(chessBoard[r+temp*j][c+temp*k].charAt(0))) {
                        oldPiece=chessBoard[r+temp*j][c+temp*k];
                        chessBoard[r][c]="" "";
                        chessBoard[r+temp*j][c+temp*k]=""B"";
                        if (kingSafe()) {
                            list=list+r+c+(r+temp*j)+(c+temp*k)+oldPiece;
                        }
                        chessBoard[r][c]=""B"";
                        chessBoard[r+temp*j][c+temp*k]=oldPiece;
                    }
                } catch (Exception e) {}
                temp=1;
            }
        }
        return list;
    }
    public static String posibleQ(int i) {
        String list="""", oldPiece;
        int r=i/8, c=i%8;
        int temp=1;
        for (int j=-1; j<=1; j++) {
            for (int k=-1; k<=1; k++) {
                if (j!=0 || k!=0) {
                    try {
                        while("" "".equals(chessBoard[r+temp*j][c+temp*k]))
                        {
                            oldPiece=chessBoard[r+temp*j][c+temp*k];
                            chessBoard[r][c]="" "";
                            chessBoard[r+temp*j][c+temp*k]=""Q"";
                            if (kingSafe()) {
                                list=list+r+c+(r+temp*j)+(c+temp*k)+oldPiece;
                            }
                            chessBoard[r][c]=""Q"";
                            chessBoard[r+temp*j][c+temp*k]=oldPiece;
                            temp++;
                        }
                        if (Character.isLowerCase(chessBoard[r+temp*j][c+temp*k].charAt(0))) {
                            oldPiece=chessBoard[r+temp*j][c+temp*k];
                            chessBoard[r][c]="" "";
                            chessBoard[r+temp*j][c+temp*k]=""Q"";
                            if (kingSafe()) {
                                list=list+r+c+(r+temp*j)+(c+temp*k)+oldPiece;
                            }
                            chessBoard[r][c]=""Q"";
                            chessBoard[r+temp*j][c+temp*k]=oldPiece;
                        }
                    } catch (Exception e) {}
                    temp=1;
                }
            }
        }
        return list;
    }
    public static String posibleA(int i) {
        String list="""", oldPiece;
        int r=i/8, c=i%8;
        for (int j=0;j<9;j++) {
            if (j!=4) {
                try {
                    if (Character.isLowerCase(chessBoard[r-1+j/3][c-1+j%3].charAt(0)) || "" "".equals(chessBoard[r-1+j/3][c-1+j%3])) {
                        oldPiece=chessBoard[r-1+j/3][c-1+j%3];
                        chessBoard[r][c]="" "";
                        chessBoard[r-1+j/3][c-1+j%3]=""A"";
                        int kingTemp=kingPositionC;
                        kingPositionC=i+(j/3)*8+j%3-9;
                        if (kingSafe()) {
                            list=list+r+c+(r-1+j/3)+(c-1+j%3)+oldPiece;
                        }
                        chessBoard[r][c]=""A"";
                        chessBoard[r-1+j/3][c-1+j%3]=oldPiece;
                        kingPositionC=kingTemp;
                    }
                } catch (Exception e) {}
            }
        }
        //need to add casting later
        return list;
    }
    
    public static boolean kingSafe() {
        //bishop/queen
        int temp=1;
        for (int i=-1; i<=1; i+=2) {
            for (int j=-1; j<=1; j+=2) {
                try {
                    while("" "".equals(chessBoard[kingPositionC/8+temp*i][kingPositionC%8+temp*j])) {temp++;}
                    if (""b"".equals(chessBoard[kingPositionC/8+temp*i][kingPositionC%8+temp*j]) ||
                            ""q"".equals(chessBoard[kingPositionC/8+temp*i][kingPositionC%8+temp*j])) {
                        return false;
                    }
                } catch (Exception e) {}
                temp=1;
            }
        }
        //rook/queen
        for (int i=-1; i<=1; i+=2) {
            try {
                while("" "".equals(chessBoard[kingPositionC/8][kingPositionC%8+temp*i])) {temp++;}
                if (""r"".equals(chessBoard[kingPositionC/8][kingPositionC%8+temp*i]) ||
                        ""q"".equals(chessBoard[kingPositionC/8][kingPositionC%8+temp*i])) {
                    return false;
                }
            } catch (Exception e) {}
            temp=1;
            try {
                while("" "".equals(chessBoard[kingPositionC/8+temp*i][kingPositionC%8])) {temp++;}
                if (""r"".equals(chessBoard[kingPositionC/8+temp*i][kingPositionC%8]) ||
                        ""q"".equals(chessBoard[kingPositionC/8+temp*i][kingPositionC%8])) {
                    return false;
                }
            } catch (Exception e) {}
            temp=1;
        }
        //knight
        for (int i=-1; i<=1; i+=2) {
            for (int j=-1; j<=1; j+=2) {
                try {
                    if (""k"".equals(chessBoard[kingPositionC/8+i][kingPositionC%8+j*2])) {
                        return false;
                    }
                } catch (Exception e) {}
                try {
                    if (""k"".equals(chessBoard[kingPositionC/8+i*2][kingPositionC%8+j])) {
                        return false;
                    }
                } catch (Exception e) {}
            }
        }
        //pawn
        if (kingPositionC>=16) {
            try {
                if (""p"".equals(chessBoard[kingPositionC/8-1][kingPositionC%8-1])) {
                    return false;
                }
            } catch (Exception e) {}
            try {
                if (""p"".equals(chessBoard[kingPositionC/8-1][kingPositionC%8+1])) {
                    return false;
                }
            } catch (Exception e) {}
            //king
            for (int i=-1; i<=1; i++) {
                for (int j=-1; j<=1; j++) {
                    if (i!=0 || j!=0) {
                        try {
                            if (""a"".equals(chessBoard[kingPositionC/8+i][kingPositionC%8+j])) {
                                return false;
                            }
                        } catch (Exception e) {}
                    }
                }
            }
        }
        return true;
    }
}",1
"package project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;

public class boardchoice extends JFrame {

	private JButton b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11;
	private Container c;
	private Font f;
	private ImageIcon img1,img2,img3,img4,img5;
	private static FileWriter file;
	private static int choice;
	public int getChoice() {
		return choice;
	}
	boardchoice()
	{
		
	   try {
		file = new FileWriter(""D:\\choice1.txt"");
		//file.write(""0"");
	
	} catch (IOException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	} 
		c=this.getContentPane();
		c.setBackground(Color.CYAN);
		c.setLayout(null);
		f=new Font(""Arial"",Font.BOLD,18);
		img1=new ImageIcon(""image/board5.JPG"");
		img2=new ImageIcon(""image/board1.JPG"");
		img3=new ImageIcon(""image/board3.JPG"");
		img4=new ImageIcon(""image/board4.JPG"");
		img5=new ImageIcon(""image/board2.JPG"");
		
		b1=new JButton(img1);
		b1.setBounds(500,300,250,60);
		b1.setForeground(Color.black);
		b1.setBackground(Color.lightGray);
		b1.setFont(f);
		//imglabel.add(b1);
	// img1 = new ImageIcon(""image/board1.JPG"");
	    //JButton button = new JButton(icon1);
	   // frame.add(button);
		c.add(b1);
		
		b1.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				//dispose();
			mainboard1 s1=new mainboard1 ();
			//s1.setBounds(50,20,1042, 1065);
			s1.setVisible(true);}
			
				
			});
		
		b2=new JButton(img2);
		b2.setBounds(500, 400,250,60);
		b2.setForeground(Color.black);
		b2.setBackground(Color.LIGHT_GRAY);
		b2.setFont(f);
		//imglabel.add(b2);
		c.add(b2);
		//c.add(imglabel);
		
		b2.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				//dispose();
			mainboard2 s1=new mainboard2 ();
			//s1.setBounds(50,20,1042, 1065);
			s1.setVisible(true);}
			
				
			});
		b3=new JButton(img4);
		b3.setBounds(500, 500,250,60);
		b3.setForeground(Color.black);
		b3.setBackground(Color.LIGHT_GRAY);
		b3.setFont(f);
		//imglabel.add(b2);
		c.add(b3);
		//c.add(imglabel);
		b3.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				//dispose();
			mainboard3 s1=new mainboard3 ();
			//s1.setBounds(50,20,1042, 1065);
			s1.setVisible(true);}
			
				
			}); 
		
		b4=new JButton(img3);
		b4.setBounds(500, 600,250,60);
		b4.setForeground(Color.black);
		b4.setBackground(Color.LIGHT_GRAY);
		b4.setFont(f);
		//imglabel.add(b2);
		c.add(b4);
		//c.add(imglabel);
		b4.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				//dispose();
			mainboard4 s1=new mainboard4 ();
			//s1.setBounds(50,20,1042, 1065);
			s1.setVisible(true);}
			
				
			});
		
		b5=new JButton(img5);
		b5.setBounds(500, 700,250,60);
		b5.setForeground(Color.black);
		b5.setBackground(Color.LIGHT_GRAY);
		b5.setFont(f);
		//imglabel.add(b2);
		c.add(b5);
		//c.add(imglabel);
		b5.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				//dispose();
			mainboard5 s1=new mainboard5();
			//s1.setBounds(50,20,1042, 1065);
			s1.setVisible(true);}
			
				
			});
		
		b6=new JButton(""Accept-Board1"");
		b6.setBounds(200, 300,250,60);
		b6.setForeground(Color.black);
		b6.setBackground(Color.LIGHT_GRAY);
		b6.setFont(f);
		c.add(b6);
		
		b6.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				choice=1;
				try {
					file.write(""1"");
					file.close();
				} catch (Exception e2) {
					// TODO: handle exception
					e2.printStackTrace();
				}
				
			}
			
				
			});
		
		b7=new JButton(""Accept-Board2"");
		b7.setBounds(200, 400,250,60);
		b7.setForeground(Color.black);
		b7.setBackground(Color.LIGHT_GRAY);
		b7.setFont(f);
		c.add(b7);
		
		b7.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				choice=2;
				try {
					file.write(""2"");
					file.close();
				} catch (Exception e2) {
					// TODO: handle exception
				}
				
			}
			
				
			});
		
		b8=new JButton(""Accept-Board3"");
		b8.setBounds(200, 500,250,60);
		b8.setForeground(Color.black);
		b8.setBackground(Color.LIGHT_GRAY);
		b8.setFont(f);
		c.add(b8);
		
		b8.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				choice=3;
				try {
					file.write(""3"");
					file.close();
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
			
			
				
			});
		
		b9=new JButton(""Accept-Board4"");
		b9.setBounds(200, 600,250,60);
		b9.setForeground(Color.black);
		b9.setBackground(Color.LIGHT_GRAY);
		b9.setFont(f);
		c.add(b9);
		
		b9.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				choice=4;
				try {
					file.flush();
					file.write(""4"");
					file.close();
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
			
			
			
			
				
			});
		
		b10=new JButton(""Accept-Board5"");
		b10.setBounds(200, 700,250,60);
		b10.setForeground(Color.black);
		b10.setBackground(Color.LIGHT_GRAY);
		b10.setFont(f);
		c.add(b10);
		
		b10.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				
				try {
					file.write(""5"");
					file.close();
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
			
			
				
			});

		b11=new JButton(""Back"");
		b11.setBounds(300,800,250,60);
		b11.setForeground(Color.black);
		b11.setBackground(Color.LIGHT_GRAY);
		b11.setFont(f);
		
		c.add(b11);
		b11.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				dispose();
				chessfont s1=new chessfont();
			s1.setBounds(50,20,1000,1000);
			s1.setVisible(true);
			
				
			}
			
			
			
		});
		
	}
	

	public static void main(String[] args) {
		
		
		boardchoice frame =new boardchoice();
		//UserInterface f=new UserInterface(frame);
		frame.setBounds(50,50,1000,1000);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}

}",1
"package Clientdemo;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.TableView.TableRow;
import Populate.*;
public class Home1 extends JFrame implements ActionListener, MouseListener, KeyListener, ItemListener {

    public static int a = 0, q = 0, r = 1;
    public static int i = 0, j = 0, t;
    public static int flag = 0;
    public static int k = 1;
    private Container c;
    JTable table[] = new JTable[10];
    DefaultTableModel model = new DefaultTableModel();
    JPanel p[] = new JPanel[10];
    JLabel jl[] = new JLabel[16];
    JTextField jtf[] = new JTextField[30];
    JTextArea jta[] = new JTextArea[30];
    JButton btn[] = new JButton[20];
    JScrollPane pane;
    TitledBorder border[] = new TitledBorder[10];
    JFrame frame;
    JComboBox jcb[] = new JComboBox[10];
    JScrollPane srp[] = new JScrollPane[10];
    Font f[] = new Font[30];
    String colms[] = {""Serial No."", ""Customer Name"", ""Type"", ""Description""};
    String rows[][] = new String[100][4];
    String item[] = {""Software"", ""Hardware"",""Charger"",""Sim"",""Others""};
    JMenuBar mb;
    JMenu menu;
    JMenuItem mitem[] = new JMenuItem[20];
    LogTable lt = new LogTable();
    Recivethread rt;
    Popupclass pop;

    Home1(Recivethread rt) {

        this.rt = rt;
        initcomponents();
        panel();
        label();
        combobox();
        textfield();
        menu();
        Button();
        table();
        popupmenu();
        font();

    }

    public void initcomponents() {
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setBounds(500, 100, 1300, 900);
        c = this.getContentPane();
        c.setLayout(null);
        f[3] = new Font(""Arial"", Font.BOLD, 25);

        border[1] = new TitledBorder(""Client SERVICE"");
        border[1].setTitleJustification(TitledBorder.LEFT);
        border[1].setTitlePosition(TitledBorder.TOP);
        border[1].setTitleColor(Color.RED);
        border[1].setTitleFont(f[3]);

        border[2] = new TitledBorder(""RUNNING SERVICE DESK"");
        border[2].setTitleJustification(TitledBorder.LEFT);
        border[2].setTitlePosition(TitledBorder.TOP);
        border[2].setTitleFont(f[3]);
        border[2].setTitleColor(Color.RED);
        border[3] = new TitledBorder(""LIST OF SERVICES"");
        border[3].setTitleJustification(TitledBorder.LEFT);
        border[3].setTitlePosition(TitledBorder.TOP);
        border[3].setTitleColor(Color.RED);
        border[3].setTitleFont(f[3]);
    }

    public void panel() {

        
        p[1] = new JPanel();
        c.add(p[1]);
        p[1].setBounds(800, 100, 350, 200);
       // p[1].setBackground(new Color(204, 255, 153));
        
        
        //panel(2)
        p[2] = new JPanel();
        c.add(p[2]);
        p[2].setBounds(250, 20, 450, 300);
        p[2].setBackground(new Color(204, 255, 153));
        p[2].setBorder(border[2]);
        //panel(3)
        p[3] = new JPanel();
        c.add(p[3]);
        p[3].setBounds(20, 350, 930, 450);
        p[3].setBackground(Color.lightGray);
        p[3].setBorder(border[3]);
        p[3].setLayout(null);
        //panel[4] 

    }

    public void label() {
        
        //panel 1
        p[1].setLayout(null);
        jl[1] = new JLabel(""Send Message To Server"");
        p[1].add(jl[1]);
        jl[1].setBounds(22,30,400,200);
        

        //panel(2)
        p[2].setLayout(null);
        jl[4] = new JLabel(""Name"");
        p[2].add(jl[4]);
        jl[4].setBounds(20, 30, 100, 50);
        jl[5] = new JLabel(""Type"");
        p[2].add(jl[5]);
        jl[5].setBounds(20, 90, 100, 50);
        jl[6] = new JLabel(""Description"");
        p[2].add(jl[6]);
        jl[6].setBounds(20, 150, 100, 50);
        jl[7] = new JLabel(""Serial"");
        p[2].add(jl[7]);
        jl[7].setBounds(20, 210, 100, 50);
        //panel3
        jl[8] = new JLabel(""Client Search"");
        p[3].add(jl[8]);
        jl[8].setBounds(350, 30, 150, 35);
        jl[8].setFont(f[3]);

    }

    public void textfield() {
        //panel 1
        
        jta[1]=new JTextArea();
        srp[1]=new JScrollPane(jta[1]);
        jta[1].setWrapStyleWord(true);
        jta[1].setLineWrap(true);
        srp[1].setBounds(20,50,200,60);
        p[1].add(srp[1]);

        //panel(2)
        jtf[3] = new JTextField();
        jtf[3].setEditable(false);
        jta[2] = new JTextArea();
        jta[2].setLineWrap(true);
        jta[2].setEditable(false);
        jta[2].setWrapStyleWord(true);
        p[2].add(jtf[3]);
        jtf[3].setBounds(105, 37, 210, 40);
        srp[2] = new JScrollPane(jta[2]);
        p[2].add(srp[2]);
        srp[2].setBounds(105, 157, 210, 40);
        jtf[4] = new JTextField();
        jtf[4].setEditable(false);
        p[2].add(jtf[4]);
        jtf[4].setBounds(105, 94, 210, 40);
        jtf[5] = new JTextField();
        jtf[5].setEditable(false);
        p[2].add(jtf[5]);
        jtf[5].setBounds(105, 220, 100, 30);

        //panel3
        jtf[6] = new JTextField();
        p[3].add(jtf[6]);
        jtf[6].setBounds(700, 30, 150, 40);
        jtf[6].setFont(f[2]);
        jtf[6].addKeyListener(this);

    }

    public void combobox() {
        jcb[2] = new JComboBox();
        jcb[2].addItem(""none"");
        jcb[2].addItem(""Software"");
        jcb[2].addItem(""Hardware"");
        p[3].add(jcb[2]);
        jcb[2].setBounds(460, 30, 210, 40);
        jcb[2].addItemListener(this);
    }

    public void Button() {
    //panel 1
      btn[1]=new JButton(""SEND"");
      p[1].add(btn[1]);
      btn[1].setBounds(240,50,80,60);
   
        //panel(2);
        btn[2] = new JButton();
        p[2].add(btn[2]);
        btn[2].setText(""Complete"");
        btn[2].setBounds(215, 220, 100, 30);
        btn[3] = new JButton();
        p[2].add(btn[3]);
        btn[3].setText(""Start"");
        btn[3].setBounds(125, 260, 150, 30);
        //Actionlistener

        // btn[1].addActionListener(this);
        btn[1].addActionListener(this);
        btn[2].addActionListener(this);
        btn[3].addActionListener(this);

    }

    public void menu() {
        // System.out.println(""1111"");
        mb = new JMenuBar();
        //  c.setJMenuBar(mb);
        p[4] = new JPanel();
        p[4].setBounds(100, 30, 100, 70);
        p[4].add(mb);
        c.add(p[4]);

        menu = new JMenu(""MENU"");
        mitem[1] = new JMenuItem(""History Log Table"");
        mitem[2] = new JMenuItem(""Priority Call"");
        mitem[3] = new JMenuItem(""Delete Queue Member"");
        mitem[4] = new JMenuItem(""Reset"");
        mb.add(menu);

        for (int l = 1; l <= 1; l++) {
            menu.add(mitem[l]);
        }
        mitem[1].addActionListener(this);
        mitem[2].addActionListener(this);

    }

    public void populate(String sn, String cn, String ty, String des) {
        String rows[] = {sn, cn, ty, des};
        model.addRow(rows);

    }

    public void table() {

        table[1] = new JTable();
        srp[3] = new JScrollPane(table[1]);

        p[3].add(srp[3]);
        srp[3].setBounds(50, 90, 800, 300);
        table[1].setBackground(Color.decode(""#058dc7""));
        table[1].setForeground(Color.WHITE);
        f[4] = new Font(""Arial"", Font.BOLD, 14);
        table[1].setFont(f[4]);
        table[1].setEnabled(false);
        table[1].setRowHeight(table[1].getRowHeight() + 15);
        model = (DefaultTableModel) table[1].getModel();
        for (int l = 0; l < 4; l++) {
            model.addColumn(colms[l]);
        }
        TableColumn column = null;

        // column = table[1].getColumnModel().getColumn(0);
        for (int t = 0; t < 4; t++) {
            column = table[1].getColumnModel().getColumn(t);
            if (t == 0) {
                column.setPreferredWidth(80);
            }
            if (t == 1) {
                column.setPreferredWidth(220);
            }
            if (t == 2) {
                column.setPreferredWidth(200);
            }
            if (t == 3) {
                column.setPreferredWidth(300);
            }

        }
        cellallignment();

    }

    public void popupmenu() {
      //  pop = new Popupclass(table[1], this);
       // table[1].addMouseListener(this);

    }

    public void setrunningservice(String sn, String n, String type, String des) {
        jtf[5].setText("""" + sn);
        jtf[3].setText("""" + n);
        jtf[4].setText("""" + type);
        jta[2].setText("""" + des);

    }

    public void cellallignment() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table[1].getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table[1].getColumnModel().getColumn(2).setCellRenderer(centerRenderer);

    }

    public void filter(String query) {
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        table[1].setRowSorter(tr);
        if (query != ""none"") {
            tr.setRowFilter(RowFilter.regexFilter(query));
        } else {
            table[1].setRowSorter(tr);
        }
    }

    public void update(int r) {

        model.removeRow(r);
        int temp = model.getRowCount();
        System.out.println("""" + r);
        // System.out.println(""""+temp+"" ""+k);
        for (int i = r; i < temp; i++) {
            table[1].setValueAt("""" + (i + 1), i, 0);

        }

    }

    public void font() {
        //panel(1)
        f[1] = new Font(""Arial"", Font.BOLD, 16);
        f[2] = new Font(""Arial"", Font.BOLD, 14);
        f[3] = new Font(""Arial"", Font.BOLD, 20);
        jta[1].setFont(f[1]);
        jl[1].setFont(f[3]);
        //panel(2)
        jtf[3].setFont(f[1]);
        jta[2].setFont(f[2]);
        jtf[4].setFont(f[1]);
        jtf[5].setFont(f[1]);
        menu.setFont(f[1]);
        for (int l = 1; l <= 4; l++) {
            mitem[l].setFont(f[1]);
        }
        //panel2
        jl[8].setFont(f[1]);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        
        
        if(e.getSource()==btn[1])
        {
           
            try {
            String str=jta[1].getText().toString();
            jta[1].setText("""");
            Populate t1=new Populate(""""+model.getRowCount(),""Updated Msg"",""Running"",""""+str);          
            rt.send(t1);
            } catch (IOException ex) {
                System.out.println(""Exception Home Class"");
            }
        }

        if (e.getSource() == btn[3]) {
            if (table[1].getRowCount() == 0) {

                JOptionPane.showMessageDialog(null, ""NO PENDING SERVICES"");
            } else if (flag == 0) {
                // jtf[5].setText("""" +table[1].getValueAt(0,0));
                //jtf[3].setText("""" + table[1].getValueAt(0,1));
                // jtf[4].setText("""" +table[1].getValueAt(0,2));
                // jta[2].setText("""" + table[1].getValueAt(0,3));
                setrunningservice(table[1].getValueAt(0, 0).toString(), table[1].getValueAt(0, 1).toString(), table[1].getValueAt(0, 2).toString(), table[1].getValueAt(0, 3).toString());
                model.removeRow(0);
                try {
                  Populate t1=new Populate(""""+model.getRowCount(),""Remove"",""Running"","""");
                    rt.send(t1);
                } catch (IOException ex) {
                    Logger.getLogger(Home1.class.getName()).log(Level.SEVERE, null, ex);
                }
                flag = 1;
            } else {
                JOptionPane.showMessageDialog(null, ""YOU ALREADY STARTED THE SERVICES"");
            }

        } else if (e.getSource() == btn[2]) {

            if (table[1].getRowCount() == 0) {

                JOptionPane.showMessageDialog(null, ""NO PENDING SERVICES"");

            } else {

                // jtf[5].setText("""" +table[1].getValueAt(0,0));
                // jtf[3].setText("""" + table[1].getValueAt(0,1));
                // jtf[4].setText("""" +table[1].getValueAt(0,2));
                // jta[2].setText("""" + table[1].getValueAt(0,3));
                setrunningservice(table[1].getValueAt(0, 0).toString(), table[1].getValueAt(0, 1).toString(), table[1].getValueAt(0, 2).toString(), table[1].getValueAt(0, 3).toString());
                try {
                   Populate t1=new Populate(""""+model.getRowCount(),""Remove"",""Running"","""");
                    rt.send(t1);
                } catch (IOException ex) {
                    Logger.getLogger(Home1.class.getName()).log(Level.SEVERE, null, ex);
                }
                model.removeRow(0);

            }
        } else if (e.getSource() == mitem[1]) {
            lt.setVisible(true);
        } else if (e.getSource() == mitem[2]) {
            String name = JOptionPane.showInputDialog(""Enter Client Name"");
            filter(name);
        }
    }

    public static void main(String[] args) {
        //Home frame = new Home1();

    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (SwingUtilities.isRightMouseButton(e)) {
            pop.show(e.getComponent(), e.getX(), e.getY());
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getSource() == jtf[6]) {
            filter(jtf[6].getText().toString());

        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() == jcb[2]) {
            this.filter(jcb[2].getSelectedItem().toString());

        }
    }

}",1
"package Mserverdemo;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import MediPopulate.*;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Admin_Panel extends JFrame implements ActionListener {

    private Container c;
    JPanel jp[] = new JPanel[10];
    JLabel jlabel[] = new JLabel[16];
    JButton jl[] = new JButton[16];
    JTextField jtf[] = new JTextField[30];
    JTextArea jta[] = new JTextArea[30];
    JButton bt[] = new JButton[20];
    JFrame frame;
    Font ft[] = new Font[30];
    int arr[] = {1, 1, 1, 1, 1};
    Medipopulate t1;
    Admin_Panel ad;
    Msendthread st;
    Admin_info f;
    Runservices rs = new Runservices();
    JMenuBar mb;
    JMenu menu;
    JMenuItem mitem[] = new JMenuItem[20];
    LogTable lt = new LogTable();

    public Admin_Panel() {
        components();
        panel();
        button();
        jlabel();
        menu();
        font();
        this.ad = this;
        st = new Msendthread(this);
        st.start();
    }

    public void components() {
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setBounds(200, 100, 1350, 800);
        c = this.getContentPane();
        c.setLayout(null);
        ft[3] = new Font(""Arial"", Font.BOLD, 35);

    }

    public void panel() {
        jp[1] = new JPanel();
        c.add(jp[1]);
        jp[1].setBounds(20, 20, 400, 300);
        //   jp[1].setBackground(new Color(57, 44, 99));
        jp[1].setLayout(null);

        jp[2] = new JPanel();
        //  c.add(jp[2]);
        jp[2].setBounds(450, 20, 400, 300);
        //jp[2].setBackground(new Color(57, 44, 99));
        jp[2].setLayout(null);

        jp[3] = new JPanel();
        c.add(jp[3]);
        jp[3].setBounds(450, 20, 400, 300);
        // jp[3].setBackground(new Color(57, 44, 99));
        jp[3].setLayout(null);

        jp[4] = new JPanel();
        c.add(jp[4]);
        jp[4].setBounds(20, 350, 400, 300);
        // jp[4].setBackground(new Color(57, 44, 99));
        jp[4].setLayout(null);

        jp[5] = new JPanel();
        c.add(jp[5]);
        jp[5].setBounds(500, 350, 400, 300);
        //    jp[5].setBackground(new Color(57, 44, 99));
        jp[5].setLayout(null);

//        jp[6] = new JPanel();
//        c.add(jp[6]);
//        jp[6].setBounds(900, 50, 100, 70);
//       // jp[6].setBackground(new Color(57, 44, 99));
//        jp[6].setLayout(null);
    }

    public void button() {
        Font f1 = new Font(""Arial"", Font.BOLD, 30);

        jl[1] = new JButton(""Heart Disease"");
        jl[1].setBounds(0, 0, 400, 300);
        jp[1].add(jl[1]);
        jl[1].setFont(f1);
        jl[1].setForeground(new Color(237, 180, 226));
        jl[1].setBackground(new Color(57, 44, 99));
        jl[1].addActionListener(this);

//        jl[2] = new JButton(""Diabetes"");
//        jl[2].setBounds(0, 0, 400, 300);
//        jp[2].add(jl[2]);
//        jl[2].setFont(f1);
//        jl[2].setForeground(new Color(237, 180, 226));
        jl[3] = new JButton(""Eyesight"");
        jl[3].setBounds(0, 0, 400, 300);
        jp[3].add(jl[3]);
        jl[3].setFont(f1);
        jl[3].setForeground(new Color(237, 180, 226));
        jl[3].setBackground(new Color(57, 44, 99));
        jl[3].addActionListener(this);

        jl[4] = new JButton(""Liver"");
        jl[4].setBounds(0, 0, 400, 300);
        jp[4].add(jl[4]);
        jl[4].setFont(f1);
        jl[4].setForeground(new Color(237, 180, 226));
        jl[4].setBackground(new Color(57, 44, 99));
        jl[4].addActionListener(this);

//        jl[5] = new JButton(""Lungs"");
//        jl[5].setBounds(0, 0, 400, 300);
//        jp[5].add(jl[5]);
//        jl[5].setFont(f1);
//        jl[5].setForeground(new Color(237, 180, 226));
//
//        jl[6] = new JButton(""Urology"");
//        jl[5].setBounds(0, 0, 400, 300);
//        jp[6].add(jl[6]);
//        jl[6].setFont(f1);
//        jl[6].setForeground(new Color(237, 180, 226));
    }

    public void menu() {
        ft[5] = new Font(""Arial"", Font.BOLD, 16);
        System.out.println(""1111"");
        mb = new JMenuBar();
        jp[6] = new JPanel();
        c.add(jp[6]);
        // c.add(mb);
        jp[6].setBounds(900, 30, 100, 70);
        //  jp[6].setBackground(new Color(57, 44, 99));
        //  jp[6].setLayout(null);
        // c.add(jp[6]);
        jp[6].add(mb);
        menu = new JMenu(""MENU"");
        mb.add(menu);
        mitem[1] = new JMenuItem(""History Log Table"");
        mitem[2] = new JMenuItem(""Running Services"");
        // mitem[3] = new JMenuItem(""Delete Queue Member"");
        mitem[3] = new JMenuItem(""Reset"");
        menu.setFont(ft[5]);

        for (int l = 1; l <= 3; l++) {
            mitem[l].setFont(ft[5]);
            menu.add(mitem[l]);
        }
        mitem[1].addActionListener(this);
        mitem[2].addActionListener(this);

    }

    public void jlabel() {
        jlabel[1] = new JLabel(""Heart Disease Desk :"");
        jp[5].add(jlabel[1]);
        jlabel[1].setBounds(30, 30, 200, 90);
        jlabel[2] = new JLabel(""     EyeSight Desk    :"");
        jp[5].add(jlabel[2]);
        jlabel[2].setBounds(30, 90, 200, 90);
        jlabel[3] = new JLabel(""          Liver       :"");
        jp[5].add(jlabel[3]);
        jlabel[3].setBounds(70, 145, 200, 90);

        jlabel[4] = new JLabel(""Disconnected"");
        jp[5].add(jlabel[4]);
        jlabel[4].setBounds(235, 30, 200, 90);
        jlabel[4].setForeground(Color.red);

        jlabel[5] = new JLabel(""Disconnected"");
        jp[5].add(jlabel[5]);
        jlabel[5].setBounds(235, 90, 200, 90);
        jlabel[5].setForeground(Color.red);

        jlabel[6] = new JLabel(""Disconnected"");
        jp[5].add(jlabel[6]);
        jlabel[6].setBounds(235, 145, 200, 90);
        jlabel[6].setForeground(Color.red);
    }

    public void font() {
        ft[2] = new Font(""Arial"", Font.BOLD, 20);
        jlabel[1].setFont(ft[2]);
        jlabel[2].setFont(ft[2]);
        jlabel[3].setFont(ft[2]);
        jlabel[4].setFont(ft[2]);
        jlabel[5].setFont(ft[2]);
        jlabel[6].setFont(ft[2]);
    }

    public void populate_run_services(int desk) {
        Medipopulate t1 = new Medipopulate(rs.table[desk].getValueAt(0, 0).toString(), rs.table[desk].getValueAt(0, 1).toString(), """", """");
        if (desk == 1) {
            rs.populate_desk_1(t1);
        } else if (desk == 2) {
            rs.populate_desk_2(t1);
        } else if (desk == 3) {
            rs.populate_desk_3(t1);
        }
        rs.model[desk].removeRow(0);
    }

    public void setpopulate(Medipopulate t1) {
        System.out.println(""admin panel"");
        this.t1 = t1;

        System.out.println("""" + this.t1.gen);
    }

    public static void main(String args[]) {
        Admin_Panel f = new Admin_Panel();
        f.setTitle(""Admin Panel"");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == jl[1])//heart Disease
        {

            try {
                System.out.println(""hello"");
                Admin_info f = new Admin_info(ad, """" + jl[1].getText(), 0, arr[0]++);

            } catch (Exception ex) {
                System.out.println(ex);
            }
        }

        if (e.getSource() == jl[3])//eyesight
        {
            try {
                f = new Admin_info(this, """" + jl[3].getText().toString(), 1, arr[1]++);

            } catch (Exception ex) {
                System.out.println("""" + ex);
            }

        }

        if (e.getSource() == jl[4])//liver
        {
            try {
                Admin_info f = new Admin_info(this, """" + jl[4].getText().toString(), 2, arr[2]++);

            } catch (Exception ex) {
                System.out.println(""Exception"");
            }
        }

        if (e.getSource() == mitem[1]) {
            lt.setVisible(true);
        }
        if (e.getSource() == mitem[2]) {
            rs.setVisible(true);
        }

    }

}",1
"package MediClientdemo;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.TableView.TableRow;
import MediPopulate.*;

public class Home1 extends JFrame implements ActionListener, MouseListener, KeyListener, ItemListener {

    public static int flag = 0;
    public static int k = 1;
    private Container c;
    JTable table[] = new JTable[10];
    DefaultTableModel model = new DefaultTableModel();
    JPanel p[] = new JPanel[10];
    JLabel jl[] = new JLabel[16];
    JTextField jtf[] = new JTextField[30];
    JTextArea jta[] = new JTextArea[30];
    JButton btn[] = new JButton[20];
    JScrollPane pane;
    TitledBorder border[] = new TitledBorder[10];
    JFrame frame;
    JComboBox jcb[] = new JComboBox[10];
    JScrollPane srp[] = new JScrollPane[10];
    Font f[] = new Font[30];
    String colms[] = {""Serial No."", ""Customer Name"", ""Gender"", ""Description""};
    // String rows[][] = new String[100][4];
    String item[] = {""Male"",""Female""};
    JMenuBar mb;
    JMenu menu;
    String Tborder=""RUNNING SERVICES"";
    JMenuItem mitem[] = new JMenuItem[20];
    LogTable lt = new LogTable();
    Mrecivethread rt;
    //  Popupclass pop;

    Home1(Mrecivethread rt) {

        this.rt = rt;
        initcomponents();
        panel();
        label();
        combobox();
        textfield();
        menu();
        Button();
        table();
        popupmenu();
        font();

    }

    public void initcomponents() {
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setBounds(500, 100, 1300, 900);
        c = this.getContentPane();
        c.setLayout(null);
        f[3] = new Font(""Arial"", Font.BOLD, 25);

        border[1] = new TitledBorder(""Client SERVICE"");
        border[1].setTitleJustification(TitledBorder.LEFT);
        border[1].setTitlePosition(TitledBorder.TOP);
        border[1].setTitleColor(Color.RED);
        border[1].setTitleFont(f[3]);

        border[2] = new TitledBorder(Tborder);
        border[2].setTitleJustification(TitledBorder.LEFT);
        border[2].setTitlePosition(TitledBorder.TOP);
        border[2].setTitleFont(f[3]);
        border[2].setTitleColor(Color.RED);
        border[3] = new TitledBorder(""LIST OF SERVICES"");
        border[3].setTitleJustification(TitledBorder.LEFT);
        border[3].setTitlePosition(TitledBorder.TOP);
        border[3].setTitleColor(Color.RED);
        border[3].setTitleFont(f[3]);
    }

    public void panel() {

        p[1] = new JPanel();
        c.add(p[1]);
        p[1].setBounds(800, 100, 350, 200);
        // p[1].setBackground(new Color(204, 255, 153));

        //panel(2)
        p[2] = new JPanel();
        c.add(p[2]);
        p[2].setBounds(250, 20, 450, 300);
        p[2].setBackground(new Color(204, 255, 153));
        p[2].setBorder(border[2]);
        //panel(3)
        p[3] = new JPanel();
        c.add(p[3]);
        p[3].setBounds(20, 350, 930, 450);
        p[3].setBackground(new Color(57, 44, 99));
        p[3].setBorder(border[3]);
        p[3].setLayout(null);
        //panel[4] 

    }

    public void label() {

        //panel 1
        p[1].setLayout(null);
        jl[1] = new JLabel(""Send Message To Server"");
        p[1].add(jl[1]);
        jl[1].setBounds(22, 30, 400, 200);

        //panel(2)
        p[2].setLayout(null);
        jl[4] = new JLabel(""Name"");
        p[2].add(jl[4]);
        jl[4].setBounds(20, 30, 100, 50);
        jl[5] = new JLabel(""Gender"");
        p[2].add(jl[5]);
        jl[5].setBounds(20, 90, 100, 50);
        jl[6] = new JLabel(""Description"");
        p[2].add(jl[6]);
        jl[6].setBounds(20, 150, 100, 50);
        jl[7] = new JLabel(""Serial"");
        p[2].add(jl[7]);
        jl[7].setBounds(20, 210, 100, 50);
        //panel3
        jl[8] = new JLabel(""Client Search"");
        p[3].add(jl[8]);
        jl[8].setBounds(350, 30, 150, 35);
        jl[8].setFont(f[3]);

    }

    public void textfield() {
        //panel 1

        jta[1] = new JTextArea();
        srp[1] = new JScrollPane(jta[1]);
        jta[1].setWrapStyleWord(true);
        jta[1].setLineWrap(true);
        srp[1].setBounds(20, 50, 200, 60);
        p[1].add(srp[1]);

        //panel(2)
        jtf[3] = new JTextField();
        jtf[3].setEditable(false);
        jta[2] = new JTextArea();
        jta[2].setLineWrap(true);
        jta[2].setEditable(false);
        jta[2].setWrapStyleWord(true);
        p[2].add(jtf[3]);
        jtf[3].setBounds(105, 37, 210, 40);
        srp[2] = new JScrollPane(jta[2]);
        p[2].add(srp[2]);
        srp[2].setBounds(105, 157, 210, 40);
        jtf[4] = new JTextField();
        jtf[4].setEditable(false);
        p[2].add(jtf[4]);
        jtf[4].setBounds(105, 94, 210, 40);
        jtf[5] = new JTextField();
        jtf[5].setEditable(false);
        p[2].add(jtf[5]);
        jtf[5].setBounds(105, 220, 100, 30);

        //panel3
        jtf[6] = new JTextField();
        p[3].add(jtf[6]);
        jtf[6].setBounds(700, 30, 150, 40);
        jtf[6].setFont(f[2]);
        jtf[6].addKeyListener(this);

    }

    public void combobox() {
        jcb[2] = new JComboBox();
        jcb[2].addItem(""none"");
        jcb[2].addItem(""Female"");
        jcb[2].addItem(""Male"");
        p[3].add(jcb[2]);
        jcb[2].setBounds(460, 30, 210, 40);
        jcb[2].addItemListener(this);
    }

    public void Button() {
        //panel 1
        btn[1] = new JButton(""SEND"");
        p[1].add(btn[1]);
        btn[1].setBounds(240, 50, 80, 60);

        //panel(2);
        btn[2] = new JButton();
        p[2].add(btn[2]);
        btn[2].setText(""Complete"");
        btn[2].setBounds(215, 220, 100, 30);
        btn[3] = new JButton();
        p[2].add(btn[3]);
        btn[3].setText(""Start"");
        btn[3].setBounds(125, 260, 150, 30);
        //Actionlistener

        // btn[1].addActionListener(this);
        btn[1].addActionListener(this);
        btn[2].addActionListener(this);
        btn[3].addActionListener(this);

    }

    public void menu() {
        // System.out.println(""1111"");
        mb = new JMenuBar();
        //  c.setJMenuBar(mb);
        p[4] = new JPanel();
        p[4].setBounds(100, 30, 100, 70);
        p[4].add(mb);
        c.add(p[4]);

        menu = new JMenu(""MENU"");
        mitem[1] = new JMenuItem(""History Log Table"");
        mitem[2] = new JMenuItem(""Priority Call"");
        mitem[3] = new JMenuItem(""Delete Queue Member"");
        mitem[4] = new JMenuItem(""Reset"");
        mb.add(menu);

        for (int l = 1; l <= 1; l++) {
            menu.add(mitem[l]);
        }
        mitem[1].addActionListener(this);
        mitem[2].addActionListener(this);

    }

    public void populate(String sn, String cn, String gen, String des) {
        String rows[] = {sn, cn, gen, des};
        model.addRow(rows);

    }

    public void table() {

        table[1] = new JTable();
        srp[3] = new JScrollPane(table[1]);

        p[3].add(srp[3]);
        srp[3].setBounds(50, 90, 800, 300);
        table[1].setBackground(Color.decode(""#058dc7""));
        table[1].setForeground(Color.WHITE);
        f[4] = new Font(""Arial"", Font.BOLD, 14);
        table[1].setFont(f[4]);
        table[1].setEnabled(false);
        table[1].setRowHeight(table[1].getRowHeight() + 15);
        model = (DefaultTableModel) table[1].getModel();
        for (int l = 0; l < 4; l++) {
            model.addColumn(colms[l]);
        }
        TableColumn column = null;

        // column = table[1].getColumnModel().getColumn(0);
        for (int t = 0; t < 4; t++) {
            column = table[1].getColumnModel().getColumn(t);
            if (t == 0) {
                column.setPreferredWidth(80);
            }
            if (t == 1) {
                column.setPreferredWidth(220);
            }
            if (t == 2) {
                column.setPreferredWidth(200);
            }
            if (t == 3) {
                column.setPreferredWidth(300);
            }

        }
        cellallignment();

    }

    public void popupmenu() {
        //  pop = new Popupclass(table[1], this);
        // table[1].addMouseListener(this);

    }

    public void setrunningservice(String sn, String n, String type, String des) {
        jtf[5].setText("""" + sn);
        jtf[3].setText("""" + n);
        jtf[4].setText("""" + type);
        jta[2].setText("""" + des);

    }

    public void cellallignment() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table[1].getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table[1].getColumnModel().getColumn(2).setCellRenderer(centerRenderer);

    }

    public void filter(String query) {
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        table[1].setRowSorter(tr);
        if (query != ""none"") {
            tr.setRowFilter(RowFilter.regexFilter(query));
        } else {
            table[1].setRowSorter(tr);
        }
    }

    public void update(int r) {

        model.removeRow(r);
        int temp = model.getRowCount();
        System.out.println("""" + r);
        // System.out.println(""""+temp+"" ""+k);
        for (int i = r; i < temp; i++) {
            table[1].setValueAt("""" + (i + 1), i, 0);

        }

    }

    public void font() {
        //panel(1)
        f[1] = new Font(""Arial"", Font.BOLD, 16);
        f[2] = new Font(""Arial"", Font.BOLD, 14);
        f[3] = new Font(""Arial"", Font.BOLD, 20);
        jta[1].setFont(f[1]);
        jl[1].setFont(f[3]);
        //panel(2)
        jtf[3].setFont(f[1]);
        jta[2].setFont(f[2]);
        jtf[4].setFont(f[1]);
        jtf[5].setFont(f[1]);
        menu.setFont(f[1]);
        for (int l = 1; l <= 4; l++) {
            mitem[l].setFont(f[1]);
        }
        //panel2
        jl[8].setFont(f[1]);
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getSource() == btn[1]) {

            try {
                String str = jta[1].getText().toString();
                Medipopulate t1 = new Medipopulate("""", ""Updated Msg"", ""Running"", """" + str);
                rt.senddata(t1);
                jta[1].setText("""");
            } catch (IOException ex) {
                Logger.getLogger(Home1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (e.getSource() == btn[3]) {

            if (flag == 0) {

                try {
                    this.setrunningservice(table[1].getValueAt(0, 0).toString(), table[1].getValueAt(0, 1).toString(), table[1].getValueAt(0, 2).toString(), table[1].getValueAt(0, 2).toString());
                    model.removeRow(0);
                    Medipopulate t1 = new Medipopulate("""", """", ""Running"", ""Remove"");
                    rt.senddata(t1);
                } catch (IOException ex) {
                    Logger.getLogger(Home1.class.getName()).log(Level.SEVERE, null, ex);
                }
                flag = 1;

            } else {
                JOptionPane.showMessageDialog(null, ""YOU ALREADY START THE SERVICE"");
            }

        } else if (e.getSource() == btn[2]) {

            if (flag != 1) {
                JOptionPane.showMessageDialog(null, ""Please First Start The Service"");
            } else {

                try {
                    this.setrunningservice(table[1].getValueAt(0, 0).toString(), table[1].getValueAt(0, 1).toString(), table[1].getValueAt(0, 2).toString(), table[1].getValueAt(0, 2).toString());
                    model.removeRow(0);
                    Medipopulate t1 = new Medipopulate("""", """", ""Running"", ""Remove"");
                    rt.senddata(t1);
                } catch (IOException ex) {
                    Logger.getLogger(Home1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else if (e.getSource() == mitem[1]) {
            lt.setVisible(true);

        } else if (e.getSource() == mitem[2]) {

        }
    }

    public static void main(String[] args) {
        //Home1 frame = new Home1();

    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (SwingUtilities.isRightMouseButton(e)) {
            // pop.show(e.getComponent(), e.getX(), e.getY());
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getSource() == jtf[6]) {
            filter(jtf[6].getText().toString());

        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() == jcb[2]) {
            this.filter(jcb[2].getSelectedItem().toString());

        }
    }

}",1
"package Mserverdemo;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import MediPopulate.*;
public class Runservices extends JFrame {

    public JPanel p[] = new JPanel[10];
    public Container c;
    public Font f[] = new Font[10];
    public JTextField jtf[] = new JTextField[30];
    public JLabel jl[] = new JLabel[30];
    TitledBorder border[] = new TitledBorder[10];
    public JTable table[] = new JTable[10];
    public JScrollPane scrp[] = new JScrollPane[10];
    DefaultTableModel model[] = new DefaultTableModel[10];
    String colms[] = {""Serial No."", ""Customer Name"", ""Gender"", ""Description""};

    public Runservices() {
        initcomponents();
        panel();
        border();
        textfield();
        table(); 

    }

    public void initcomponents() {
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setBounds(100, 60, 1800, 900);
        c = this.getContentPane();
        
        c.setLayout(null);
    }

    public void panel() {
        p[1] = new JPanel();
        c.add(p[1]);
        p[1].setBounds(150, 30, 310, 300);
        p[1].setBackground(new Color(204, 204, 255));
        p[1].setLayout(null);
        jl[1] = new JLabel(""Client Name"");
        p[1].add(jl[1]);
        jl[1].setBounds(100, 30, 100, 50);
        jl[2] = new JLabel(""Serial No:"");
        p[1].add(jl[2]);
        jl[2].setBounds(20, 120, 100, 50);
        jl[3] = new JLabel(""Updated Message:"");
        p[1].add(jl[3]);
        jl[3].setBounds(80, 180, 150, 50);

        p[2] = new JPanel();
        c.add(p[2]);
        p[2].setBounds(730, 30, 310, 300);
        p[2].setBackground(new Color(204, 204, 255));
        p[2].setLayout(null);
        jl[4] = new JLabel(""Client Name"");
        p[2].add(jl[4]);
        jl[4].setBounds(100, 30, 100, 50);
        jl[5] = new JLabel(""Serial No:"");
        p[2].add(jl[5]);
        jl[5].setBounds(20, 120, 100, 50);
        jl[6] = new JLabel(""Updated Message:"");
        p[2].add(jl[6]);
        jl[6].setBounds(80, 180, 150, 50);

        p[3] = new JPanel();
        c.add(p[3]);
        p[3].setBounds(1300, 30, 310, 300);
        p[3].setBackground(new Color(204, 204, 255));
        p[3].setLayout(null);
        jl[7] = new JLabel(""Client Name"");
        p[3].add(jl[7]);
        jl[7].setBounds(100, 30, 100, 50);
        jl[8] = new JLabel(""Serial No:"");
        p[3].add(jl[8]);
        jl[8].setBounds(20, 120, 100, 50);
        jl[9] = new JLabel(""Updated Message:"");
        p[3].add(jl[9]);
        jl[9].setBounds(80, 180, 150, 50);

        p[4] = new JPanel();
        c.add(p[4]);
        p[4].setBounds(30, 370, 550, 400);
        // p[1].setBackground(Color.red);

        p[5] = new JPanel();
        c.add(p[5]);
        p[5].setBounds(600, 370, 550, 400);
        //p[2].setBackground(Color.red);

        p[6] = new JPanel();
        c.add(p[6]);
        p[6].setBounds(1170, 370, 550, 400);
    }

    public void border() {
        f[3] = new Font(""Arial"", Font.BOLD, 18);
        border[1] = new TitledBorder(""HEART DISEASE "");
        border[1].setTitleJustification(TitledBorder.LEFT);
        border[1].setTitlePosition(TitledBorder.TOP);
        border[1].setTitleColor(Color.RED);
        border[1].setTitleFont(f[3]);
        p[1].setBorder(border[1]);

        border[2] = new TitledBorder(""EYESIGHT "");
        border[2].setTitleJustification(TitledBorder.LEFT);
        border[2].setTitlePosition(TitledBorder.TOP);
        border[2].setTitleColor(Color.RED);
        border[2].setTitleFont(f[3]);
        p[2].setBorder(border[2]);

        border[3] = new TitledBorder(""LIVER "");
        border[3].setTitleJustification(TitledBorder.LEFT);
        border[3].setTitlePosition(TitledBorder.TOP);
        border[3].setTitleColor(Color.RED);
        border[3].setTitleFont(f[3]);
        p[3].setBorder(border[3]);

        f[4] = new Font(""Arial"", Font.BOLD, 25);
        border[4] = new TitledBorder(""SERVICE DESK 1"");
        border[4].setTitleJustification(TitledBorder.LEFT);
        border[4].setTitlePosition(TitledBorder.TOP);
        border[4].setTitleColor(Color.RED);
        border[4].setTitleFont(f[4]);
        p[4].setBorder(border[4]);

        border[5] = new TitledBorder(""SERVICE DESK 2"");
        border[5].setTitleJustification(TitledBorder.LEFT);
        border[5].setTitlePosition(TitledBorder.TOP);
        border[5].setTitleColor(Color.RED);
        border[5].setTitleFont(f[4]);
        p[5].setBorder(border[5]);

        border[6] = new TitledBorder(""SERVICE DESK 3"");
        border[6].setTitleJustification(TitledBorder.LEFT);
        border[6].setTitlePosition(TitledBorder.TOP);
        border[6].setTitleColor(Color.RED);
        border[6].setTitleFont(f[4]);
        p[6].setBorder(border[6]);

    }

    public void textfield() {
        //panel 1
        f[5] = new Font(""Arial"", Font.BOLD, 16);
        jtf[1] = new JTextField();
        jtf[1].setFont(f[5]);
        p[1].add(jtf[1]);
        jtf[1].setEditable(false);
        jtf[1].setBounds(50, 70, 200, 40);

        jtf[2] = new JTextField();
        jtf[2].setFont(f[5]);
        p[1].add(jtf[2]);
        jtf[2].setEditable(false);
        jtf[2].setBounds(100, 125, 50, 40);

        jtf[3] = new JTextField();
        jtf[3].setFont(f[5]);
        p[1].add(jtf[3]);
        jtf[3].setEditable(false);
        jtf[3].setBounds(40, 235, 220, 60);

        //panel 2
        jtf[4] = new JTextField();
        jtf[4].setFont(f[5]);
        p[2].add(jtf[4]);
        jtf[4].setEditable(false);
        jtf[4].setBounds(50, 70, 200, 40);

        jtf[5] = new JTextField();
        jtf[5].setFont(f[5]);
        p[2].add(jtf[5]);
        jtf[5].setEditable(false);
        jtf[5].setBounds(100, 125, 50, 40);

        jtf[6] = new JTextField();
        jtf[6].setFont(f[5]);
        p[2].add(jtf[6]);
        jtf[6].setEditable(false);
        jtf[6].setBounds(40, 235, 220, 60);

        //panel 3
        jtf[7] = new JTextField();
        jtf[7].setFont(f[5]);
        p[3].add(jtf[7]);
        jtf[7].setEditable(false);
        jtf[7].setBounds(50, 70, 200, 40);

        jtf[8] = new JTextField();
        jtf[8].setFont(f[5]);
        p[3].add(jtf[8]);
        jtf[8].setEditable(false);
        jtf[8].setBounds(100, 125, 50, 40);

        jtf[9] = new JTextField();
        jtf[9].setFont(f[5]);
        p[3].add(jtf[9]);
        jtf[9].setEditable(false);
        jtf[9].setBounds(40, 235, 220, 60);
    }

    public void table() {
        table[1] = new JTable();
        scrp[1] = new JScrollPane(table[1]);
        p[4].setLayout(null);
        p[4].add(scrp[1]);
        scrp[1].setBounds(20, 30, 510, 350);
        table[1].setRowHeight(table[1].getRowHeight() + 15);
        model[1] = (DefaultTableModel) table[1].getModel();
        for (int i = 0; i < 4; i++) {
            model[1].addColumn(colms[i]);
        }
        table[1].setBackground(Color.decode(""#058dc7""));
        table[1].setForeground(Color.WHITE);
        f[1] = new Font(""Arial"", Font.BOLD, 12);
        table[1].setFont(f[1]);

        table[2] = new JTable();
        scrp[2] = new JScrollPane(table[2]);
        p[5].setLayout(null);
        p[5].add(scrp[2]);
        scrp[2].setBounds(20, 30, 510, 350);
        table[2].setRowHeight(table[2].getRowHeight() + 15);
        model[2] = (DefaultTableModel) table[2].getModel();
        for (int i = 0; i < 4; i++) {
            model[2].addColumn(colms[i]);
        }
        table[2].setBackground(Color.decode(""#058dc7""));
        table[2].setForeground(Color.WHITE);
        table[2].setFont(f[1]);

        table[3] = new JTable();
        scrp[3] = new JScrollPane(table[3]);
        p[6].setLayout(null);
        p[6].add(scrp[3]);
        scrp[3].setBounds(20, 30, 510, 350);
        table[3].setRowHeight(table[1].getRowHeight() + 15);
        model[3] = (DefaultTableModel) table[3].getModel();
        for (int i = 0; i < 4; i++) {
            model[3].addColumn(colms[i]);
        }
        table[3].setBackground(Color.decode(""#058dc7""));
        table[3].setForeground(Color.WHITE);
        table[3].setFont(f[1]);
        
        
        TableColumn column = null;
      
        // column = table[1].getColumnModel().getColumn(0);
        for (int i = 1; i <=3; i++) {
        for (int t = 0; t < 4; t++) {
            column = table[i].getColumnModel().getColumn(t);
            if (t == 0) {
                column.setPreferredWidth(80);
            }
            if (t == 1) {
                column.setPreferredWidth(220);
            }
            if (t == 2) {
                column.setPreferredWidth(200);
            }
            if (t == 3) {
                column.setPreferredWidth(300);
            }

        }
        }
         cellallignment();
    }

      public void cellallignment() {
         for (int i = 1; i <=3; i++) {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table[i].getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table[i].getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
          }
      
    }
    public void populate(int tableno,Medipopulate t1)
    {
        String ar[]={t1.sn.toString(),t1.cn.toString(),t1.gen.toString(),t1.d.toString()};
        model[tableno].addRow(ar);
    }
   public void populate_desk_1(Medipopulate t1) {
        jtf[1].setText("""");
        jtf[2].setText("""");
        jtf[3].setText("""");
        ////
        jtf[1].setText(t1.cn);
        jtf[2].setText(t1.sn);
    }

    public void populate_desk_2(Medipopulate t1) {
        jtf[4].setText("""");
        jtf[5].setText("""");
        jtf[6].setText("""");
        ////
        jtf[4].setText(t1.cn);
        jtf[5].setText(t1.sn);
    }

    public void populate_desk_3(Medipopulate t1) {
        jtf[7].setText("""");
        jtf[8].setText("""");
        jtf[9].setText("""");
        ////
        jtf[7].setText(t1.cn);
        jtf[8].setText(t1.sn);
    }

    public static void main(String[] args) {
        Runservices f = new Runservices();
        f.setVisible(true);
    }
}",1
"
package class_project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class Second_layout extends JFrame implements ActionListener{
    private Container con;
    private Font f,bo,ns;
    private JComboBox type;
    private String item [] = {""Medicine"",""Arthopedic""};
    private ButtonGroup grp;
    private JRadioButton male,fe,sm;
    private DefaultTableModel model;
    private static int  i =1;
    
    JPanel panel [] = new JPanel[3];
    JLabel label [] = new JLabel[16];
    JTextField jtf[] = new JTextField[30];
    JTextArea jta[] = new JTextArea[30];
    JButton btn[] = new JButton[20];
    JScrollPane pane;
    JButton button[] = new JButton[10];
    String colms[] = {""Serial No."", ""Name"", ""Age"",""Sex"",""Description""};
    String rows[][] = new String[100][100];
    JTable table [] = new JTable[100];
    
    Second_layout()
    {
        setcom();
        label();
        field();
        area();
        button(); 
        table();
    }
    
    public void setcom()
    {
        con = this.getContentPane();
        con.setBackground(new Color(146,156,175));
        con.setLayout(null);
        
        f = new Font(""Arial"",Font.PLAIN,20);
        bo = new Font(""Arial"",Font.BOLD,20);
        ns = new Font(""Arial"",Font.BOLD,40);
        
        //panel for new services panel 1//
        panel[1] = new JPanel();
        panel[1].setBounds(20,120,400,400);
        panel[1].setBackground(new Color(213,215,252));
        panel[1].setLayout(null);
        con.add(panel[1]);
        
        // panel for list of servics//
        panel[2] = new JPanel();
        panel[2].setBounds(460,50,800,500);
        panel[2].setBackground(new Color(155,193,233));
        panel[2].setLayout(null);
        con.add(panel[2]);
        
        // Combobox panel 1//
        type = new JComboBox(item);
        //type.setBounds(170,50,200,30);
        type.setFont(bo);
        panel[1].add(type);  
    }
    
    public void button()
    {
         //add Button panel 1//
        button[1] = new JButton(""Add Queue"");
        button[1].setFont(bo);
        button[1].setBounds(130,340,150,50);
        panel[1].add(button[1]);
        button[1].addActionListener(this);
        
         //label for Menu panel 1//
        button[2] = new JButton(""Menu"");
        button[2].setFont(ns);
        button[2].setBounds(20,40,140,50);
        con.add(button[2]);
    }
    
    public void label()
    {
        //name,age,sex,description,type,new services,list of services//
        
        //label for name panel 1//
        label[1] = new JLabel(""Name : "");
        label[1].setBounds(5,80,100,30);
        label[1].setFont(f);
        panel[1].add(label[1]);
        
        //label for age panel 1//
        label[2] = new JLabel(""Age    : "");
        label[2].setBounds(5,120,110,30);
        label[2].setFont(f);
        panel[1].add(label[2]);
        
        //label for sex panel 1//
        label[3] = new JLabel(""Sex    : "");
        label[3].setBounds(5,160,150,30);
        label[3].setFont(f);
        panel[1].add(label[3]);
        
        //label for Description panel 1//
        label[4] = new JLabel(""Description: "");
        label[4].setFont(f);
        label[4].setBounds(5,200,150,30);
        panel[1].add(label[4]);
        
        //label for new services//
        label[3] = new JLabel(""New Services"");
        label[3].setFont(ns);
        label[3].setBounds(5,5,300,50);
        panel[1].add(label[3]);
        
    }
    
    public void area()
    {
        //TextArea for Age panel 1//
        jta[1] = new JTextArea();
        jta[1].setBounds(120,120,260,30);
        jta[1].setFont(f);
        panel[1].add(jta[1]);
        
        //TextArea for Description panel 1//
        jta[2] = new JTextArea();
        jta[2].setBounds(120,200,260,110);
        jta[2].setFont(f);
        jta[2].setLineWrap(true);
        jta[2].setWrapStyleWord(true);
        panel[1].add(jta[2]);
    }
    
    public void field()
    {
        //field for name panel 1//
        jtf[1] = new JTextField();
        jtf[1].setBounds(120,80,260,30);
        jtf[1].setFont(f);
        panel[1].add(jtf[1]);
        
        grp = new ButtonGroup();
        //button for male,female,ot, panel 1//
        male = new JRadioButton(""Male"");
        male.setBounds(120,160,70,30);
        male.setFont(bo);
        panel[1].add(male);
        
        fe = new JRadioButton(""Female"");
        fe.setBounds(200,160,95,30);
        fe.setFont(bo);
        panel[1].add(fe);
        
        sm = new JRadioButton(""Other"");
        sm.setBounds(300,160,80,30);
        sm.setFont(bo);
        panel[1].add(sm);
        
        grp.add(male);
        grp.add(fe);
        grp.add(sm);
        
        
    }
   
    
    private void table()
    {
        model = new DefaultTableModel();
        model.setColumnIdentifiers(colms);
        
        table[1] = new JTable(rows,colms);
        table[1].setFont(f);
        table[1].setModel(model);
        pane = new JScrollPane(table[1]);
        pane.setBounds(5,5,790,490);
        panel[2].add(pane);
        model=(DefaultTableModel)table[1].getModel();
        
        
    }
     public void populate(String sn,String n,String a, String d)
     {
         String row[]={sn,n,a,d};
          model.addRow(row);
     }
    public void actionPerformed(ActionEvent e )
    {
        if(e.getSource()==button[1])
        {
            String g = "" ""+i;
             populate(g,jtf[1].getText().toString(),jta[1].getText().toString(),jta[2].getText().toString());
             i++;
      
        }
        
    }
    public static void main(String[] args) {
        
        Second_layout demo = new Second_layout();
        demo.setVisible(true);
        demo.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        demo.setBounds(50,20,1300,600);
        demo.setResizable(false);
       
    }
    
}",1
"package Serverdemo;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.TableView.TableRow;

public class Home extends JFrame implements ActionListener {
    public static int a= 0, q = 0, r=1;
    public static int i = 0, j = 0, t;
    public static int flag = 0;
    public static int k = 1;
    private Container c;
    JTable table[] = new JTable[10];
    DefaultTableModel model=new DefaultTableModel();
    JPanel p[] = new JPanel[10];
    JLabel jl[] = new JLabel[16];
    JTextField jtf[] = new JTextField[30];
    JTextArea jta[] = new JTextArea[30];
    JButton btn[] = new JButton[20];
    JScrollPane pane;
    TitledBorder border[] = new TitledBorder[10];
    JFrame frame;
    JComboBox jcb[] = new JComboBox[10];
    JScrollPane srp[] = new JScrollPane[10];
    Font f[] = new Font[30];
    String colms[] = {""Serial No."", ""Customer Name"", ""Type"", ""Description""};
    String rows[][] = new String[100][4];
    String item[] = {""Software"", ""Hardware""};
    JMenuBar mb;
     JMenu menu;
    JMenuItem mitem[]=new  JMenuItem[20];
    LogTable lt=new LogTable();
     Sendthread st;
     //Home h1;
    // Thread t1=new Thread(st);
   // LogTable lt = new LogTable();
    Home() throws IOException {
    
        initcomponents();
        panel();
        label();
        textfield();
        combobox();
        Button();
        table();
        font();
        menu();
       st=new Sendthread(this);
      // Sendthread st=new Sendthread();
       st.Connect();
       st.start();
    }

    public void initcomponents() {
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setBounds(500, 100, 1300, 800);
        c = this.getContentPane();
        c.setLayout(null);
        f[3] = new Font(""Arial"", Font.BOLD, 25);

        border[1] = new TitledBorder(""Server SERVICE"");
        border[1].setTitleJustification(TitledBorder.LEFT);
        border[1].setTitlePosition(TitledBorder.TOP);
        border[1].setTitleColor(Color.RED);
        border[1].setTitleFont(f[3]);
    
        border[2] = new TitledBorder(""RUNNING SERVICE"");
        border[2].setTitleJustification(TitledBorder.LEFT);
        border[2].setTitlePosition(TitledBorder.TOP);
        border[2].setTitleFont(f[3]);
        border[2].setTitleColor(Color.RED);
        border[3] = new TitledBorder(""LIST OF SERVICES"");
        border[3].setTitleJustification(TitledBorder.LEFT);
        border[3].setTitlePosition(TitledBorder.TOP);
        border[3].setTitleColor(Color.RED);
        border[3].setTitleFont(f[3]);
    }

    public void panel() {
        // p[4] = new JPanel();
        // c.add(p[4]);
        //  p[4].setBounds(0, 00, 900, 700);
        // p[4].setBorder(border[3]);
        //panel(1)
        p[1] = new JPanel();
        c.add(p[1]);
        p[1].setBounds(20, 20, 450, 300);
        p[1].setBackground(new Color(204, 204, 255));

        p[1].setBorder(border[1]);
        //panel(2)
        p[2] = new JPanel();
        c.add(p[2]);
        p[2].setBounds(580, 20, 450, 300);
        p[2].setBackground(new Color(204, 255, 153));
        p[1].setBorder(border[1]);
        p[2].setBorder(border[2]);
        //panel(3)
        p[3] = new JPanel();
        c.add(p[3]);
        p[3].setBounds(20, 350, 930, 400);
        p[3].setBackground(Color.lightGray);
        p[3].setBorder(border[3]);
    }

    public void label() {
        // panel(1)
        jl[1] = new JLabel(""Name"");
        p[1].setLayout(null);
        p[1].add(jl[1]);
        jl[1].setBounds(20, 30, 100, 50);
        jl[2] = new JLabel(""Type"");
        p[1].add(jl[2]);
        jl[2].setBounds(20, 90, 100, 50);
        jl[3] = new JLabel(""Description"");
        p[1].add(jl[3]);
        jl[3].setBounds(20, 150, 100, 50);

        //panel(2)
        p[2].setLayout(null);
        jl[4] = new JLabel(""Name"");
        p[2].add(jl[4]);
        jl[4].setBounds(20, 30, 100, 50);
        jl[5] = new JLabel(""Type"");
        p[2].add(jl[5]);
        jl[5].setBounds(20, 90, 100, 50);
        jl[6] = new JLabel(""Description"");
        p[2].add(jl[6]);
        jl[6].setBounds(20, 150, 100, 50);
        jl[7] = new JLabel(""Serial"");
        p[2].add(jl[7]);
        jl[7].setBounds(20, 210, 100, 50);

    }

    public void textfield() {
        //panel(1)
        jtf[1] = new JTextField();
        jta[1] = new JTextArea();
        jta[1].setLineWrap(true);
        jta[1].setWrapStyleWord(true);
        p[1].add(jtf[1]);
        jtf[1].setBounds(105, 37, 210, 40);
        srp[1] = new JScrollPane(jta[1]);
        p[1].add(srp[1]);
        srp[1].setBounds(105, 157, 210, 60);
        //panel(2)
        jtf[3] = new JTextField();
        jta[2] = new JTextArea();
        jta[2].setLineWrap(true);
        jta[2].setWrapStyleWord(true);
        p[2].add(jtf[3]);
        jtf[3].setBounds(105, 37, 210, 40);
        srp[2] = new JScrollPane(jta[2]);
        p[2].add(srp[2]);
        srp[2].setBounds(105, 157, 210, 40);
        jtf[4] = new JTextField();
        p[2].add(jtf[4]);
        jtf[4].setBounds(105, 94, 210, 40);
        jtf[5] = new JTextField();
        p[2].add(jtf[5]);
        jtf[5].setBounds(105, 220, 100, 30);

    }

    public void combobox() {
        jcb[1] = new JComboBox(item);
        p[1].add(jcb[1]);
        jcb[1].setBounds(105, 94, 210, 40);
    }

    public void Button() {
        //panel(1);
        btn[1] = new JButton();
        p[1].add(btn[1]);
        btn[1].setText(""Add Queue"");
        btn[1].setBounds(110, 235, 200, 35);

        //panel(2);
        btn[2] = new JButton();
        p[2].add(btn[2]);
        btn[2].setText(""Complete"");
        btn[2].setBounds(215, 220, 100, 30);
        btn[3] = new JButton();
        p[2].add(btn[3]);
        btn[3].setText(""Start"");
        btn[3].setBounds(125, 260, 150, 30);
        //Actionlistener

        btn[1].addActionListener(this);
        btn[2].addActionListener(this);
        btn[3].addActionListener(this);

    }
     public void menu() {
         System.out.println(""1111"");
         mb=new JMenuBar();
        //  c.setJMenuBar(mb);
        p[4]=new JPanel();
         p[4].setBounds(490,30,80,70);
         p[4].add(mb);
         c.add(p[4]);

         menu=new JMenu(""MENU"");
         mitem[1]=new JMenuItem(""History Log Table"");
         mitem[2]=new JMenuItem(""Priority Search"");
         mitem[3]=new JMenuItem(""Delete Queue Member"");
         mitem[4]=new JMenuItem(""Reset"");
         mb.add(menu);
        
         for (int l = 1; l <=4; l++) {
             menu.add(mitem[l]);
         }
        mitem[1].addActionListener(this);
        mitem[2].addActionListener(this);
       
    }
   public void populate(String sn,String cn,String ty,String des )
   {
       String rows[]={sn,cn,ty,des};
       model.addRow(rows);
       
          }
    public void table() {
        
        table[1] = new JTable();
        srp[3] = new JScrollPane(table[1]);
        p[3].setLayout(null);
        p[3].add(srp[3]);
        srp[3].setBounds(50, 50, 800, 300);
        table[1].setBackground(Color.decode(""#058dc7""));
        table[1].setForeground(Color.WHITE);
        f[4] = new Font(""Arial"", Font.BOLD, 14);
        table[1].setFont(f[4]);
        table[1].setRowHeight(table[1].getRowHeight()+15);
        model=(DefaultTableModel)table[1].getModel();
        for (int l = 0; l <4; l++) {
            model.addColumn(colms[l]);     
        }
            TableColumn column = null;
      
        // column = table[1].getColumnModel().getColumn(0);

        for (int t = 0; t < 4; t++) {
            column = table[1].getColumnModel().getColumn(t);
            if (t == 0) {
                column.setPreferredWidth(80);
            }
            if (t == 1) {
                column.setPreferredWidth(220);
            }
            if (t == 2) {
                column.setPreferredWidth(200);
            }
            if (t == 3) {
                column.setPreferredWidth(300);
            }

        }
        cellallignment();
      
    }
public void cellallignment()
{
  DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
  centerRenderer.setHorizontalAlignment( JLabel.CENTER );
  table[1].getColumnModel().getColumn(0).setCellRenderer( centerRenderer );   
  table[1].getColumnModel().getColumn(2).setCellRenderer( centerRenderer );   
   
   
}
  public void filter(String query)
     {
         TableRowSorter<DefaultTableModel> tr=new TableRowSorter<DefaultTableModel>(model);
         table[1].setRowSorter(tr);
         tr.setRowFilter(RowFilter.regexFilter(query));
     }
    public void font() {
        //panel(1)
        f[1] = new Font(""Arial"", Font.BOLD, 16);
        f[2] = new Font(""Arial"", Font.BOLD, 14);

        jtf[1].setFont(f[1]);
        jta[1].setFont(f[2]);
        jcb[1].setFont(f[2]);

        //panel(2)
        jtf[3].setFont(f[1]);
        jta[2].setFont(f[2]);
        jtf[4].setFont(f[1]);
        jtf[5].setFont(f[1]);
    }

    public void delete() {
        int p = 1;
        for (int l = 0; l <= i; l++) {
            for (int m = 0; m <= 3; m++) {
                rows[l][m] = rows[p][m];

            }
            p++;

        }
        if (i != 0) {
            i--;
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getSource() == btn[1]) {

            if (jtf[1].getText().isEmpty()) {

                JOptionPane.showMessageDialog(null, ""ENTER CUSTOMER NAME"");

            } else if (jta[1].getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, ""ENTER SHORT DESCRIPTION"");
            } else { 
                
                String s=""""+k;
               populate(s,jtf[1].getText().toString(),jcb[1].getSelectedItem().toString(),jta[1].getText().toString());
               
              lt.populate(s,jtf[1].getText().toString(),jcb[1].getSelectedItem().toString(),jta[1].getText().toString());
             // lt.filewriter(s,jtf[1].getText().toString(),jcb[1].getSelectedItem().toString(),jta[1].getText().toString());
              st.Senddata(jtf[1].getText().toString(),jcb[1].getSelectedItem().toString(),jta[1].getText().toString());
             
            ///   jtf[1].setText("""");
             //  jta[1].setText("""");
                k++;
          
            }

        } else if (e.getSource() == btn[3]) {
            if (table[1].getRowCount()==0) {

                JOptionPane.showMessageDialog(null, ""NO PENDING SERVICES"");
            } else if (flag == 0) {
                jtf[5].setText("""" +table[1].getValueAt(0,0));
                jtf[3].setText("""" + table[1].getValueAt(0,1));
                jtf[4].setText("""" +table[1].getValueAt(0,2));
                jta[2].setText("""" + table[1].getValueAt(0,3));
                 model.removeRow(0);
                 flag=1;
            } else {
                JOptionPane.showMessageDialog(null, ""YOU ALREADY STARTED THE SERVICES"");
            }

        } else if (e.getSource() == btn[2]) {

            if (table[1].getRowCount()==0) {

                JOptionPane.showMessageDialog(null, ""NO PENDING SERVICES"");

            } else {

                jtf[5].setText("""" +table[1].getValueAt(0,0));
                jtf[3].setText("""" + table[1].getValueAt(0,1));
                jtf[4].setText("""" +table[1].getValueAt(0,2));
                jta[2].setText("""" + table[1].getValueAt(0,3));
                 model.removeRow(0);
            //    delete();
               // table();
             // LogTable lt = new  LogTable();
              
             
            }
        }
        else if(e.getSource()==mitem[1])
        {
             lt.setVisible(true);
        }
        else if(e.getSource()==mitem[2])
        {
            String name=JOptionPane.showInputDialog(""Enter Client Name"");
            filter(name);
        }
    }

    public static void main(String[] args) throws IOException {
        Home frame = new Home();
            frame.setVisible(true);
    }

  
}",1
"package MediClientdemo;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.TableView.TableRow;
import MediPopulate.*;

public class Home1 extends JFrame implements ActionListener, MouseListener, KeyListener, ItemListener {

    public static int flag = 0;
    public static int k = 1;
    private Container c;
    JTable table[] = new JTable[10];
    DefaultTableModel model = new DefaultTableModel();
    JPanel p[] = new JPanel[10];
    JLabel jl[] = new JLabel[16];
    JTextField jtf[] = new JTextField[30];
    JTextArea jta[] = new JTextArea[30];
    JButton btn[] = new JButton[20];
    JScrollPane pane;
    TitledBorder border[] = new TitledBorder[10];
    JFrame frame;
    JComboBox jcb[] = new JComboBox[10];
    JScrollPane srp[] = new JScrollPane[10];
    Font f[] = new Font[30];
    String colms[] = {""Serial No."", ""Customer Name"", ""Gender"", ""Description""};
    // String rows[][] = new String[100][4];
    String item[] = {""Male"",""Female""};
    JMenuBar mb;
    JMenu menu;
    String Tborder=""RUNNING SERVICES"";
    JMenuItem mitem[] = new JMenuItem[20];
    LogTable lt = new LogTable();
    Mrecivethread rt;
    //  Popupclass pop;

    Home1(Mrecivethread rt) {

        this.rt = rt;
        initcomponents();
        panel();
        label();
        combobox();
        textfield();
        menu();
        Button();
        table();
        popupmenu();
        font();

    }

    public void initcomponents() {
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setBounds(500, 100, 1300, 900);
        c = this.getContentPane();
        c.setLayout(null);
        f[3] = new Font(""Arial"", Font.BOLD, 25);

        border[1] = new TitledBorder(""Client SERVICE"");
        border[1].setTitleJustification(TitledBorder.LEFT);
        border[1].setTitlePosition(TitledBorder.TOP);
        border[1].setTitleColor(Color.RED);
        border[1].setTitleFont(f[3]);

        border[2] = new TitledBorder(Tborder);
        border[2].setTitleJustification(TitledBorder.LEFT);
        border[2].setTitlePosition(TitledBorder.TOP);
        border[2].setTitleFont(f[3]);
        border[2].setTitleColor(Color.RED);
        border[3] = new TitledBorder(""LIST OF SERVICES"");
        border[3].setTitleJustification(TitledBorder.LEFT);
        border[3].setTitlePosition(TitledBorder.TOP);
        border[3].setTitleColor(Color.RED);
        border[3].setTitleFont(f[3]);
    }

    public void panel() {

        p[1] = new JPanel();
        c.add(p[1]);
        p[1].setBounds(800, 100, 350, 200);
        // p[1].setBackground(new Color(204, 255, 153));

        //panel(2)
        p[2] = new JPanel();
        c.add(p[2]);
        p[2].setBounds(250, 20, 450, 300);
        p[2].setBackground(new Color(204, 255, 153));
        p[2].setBorder(border[2]);
        //panel(3)
        p[3] = new JPanel();
        c.add(p[3]);
        p[3].setBounds(20, 350, 930, 450);
        p[3].setBackground(new Color(57, 44, 99));
        p[3].setBorder(border[3]);
        p[3].setLayout(null);
        //panel[4] 

    }

    public void label() {

        //panel 1
        p[1].setLayout(null);
        jl[1] = new JLabel(""Send Message To Server"");
        p[1].add(jl[1]);
        jl[1].setBounds(22, 30, 400, 200);

        //panel(2)
        p[2].setLayout(null);
        jl[4] = new JLabel(""Name"");
        p[2].add(jl[4]);
        jl[4].setBounds(20, 30, 100, 50);
        jl[5] = new JLabel(""Gender"");
        p[2].add(jl[5]);
        jl[5].setBounds(20, 90, 100, 50);
        jl[6] = new JLabel(""Description"");
        p[2].add(jl[6]);
        jl[6].setBounds(20, 150, 100, 50);
        jl[7] = new JLabel(""Serial"");
        p[2].add(jl[7]);
        jl[7].setBounds(20, 210, 100, 50);
        //panel3
        jl[8] = new JLabel(""Client Search"");
        p[3].add(jl[8]);
        jl[8].setBounds(350, 30, 150, 35);
        jl[8].setFont(f[3]);

    }

    public void textfield() {
        //panel 1

        jta[1] = new JTextArea();
        srp[1] = new JScrollPane(jta[1]);
        jta[1].setWrapStyleWord(true);
        jta[1].setLineWrap(true);
        srp[1].setBounds(20, 50, 200, 60);
        p[1].add(srp[1]);

        //panel(2)
        jtf[3] = new JTextField();
        jtf[3].setEditable(false);
        jta[2] = new JTextArea();
        jta[2].setLineWrap(true);
        jta[2].setEditable(false);
        jta[2].setWrapStyleWord(true);
        p[2].add(jtf[3]);
        jtf[3].setBounds(105, 37, 210, 40);
        srp[2] = new JScrollPane(jta[2]);
        p[2].add(srp[2]);
        srp[2].setBounds(105, 157, 210, 40);
        jtf[4] = new JTextField();
        jtf[4].setEditable(false);
        p[2].add(jtf[4]);
        jtf[4].setBounds(105, 94, 210, 40);
        jtf[5] = new JTextField();
        jtf[5].setEditable(false);
        p[2].add(jtf[5]);
        jtf[5].setBounds(105, 220, 100, 30);

        //panel3
        jtf[6] = new JTextField();
        p[3].add(jtf[6]);
        jtf[6].setBounds(700, 30, 150, 40);
        jtf[6].setFont(f[2]);
        jtf[6].addKeyListener(this);

    }

    public void combobox() {
        jcb[2] = new JComboBox();
        jcb[2].addItem(""none"");
        jcb[2].addItem(""Female"");
        jcb[2].addItem(""Male"");
        p[3].add(jcb[2]);
        jcb[2].setBounds(460, 30, 210, 40);
        jcb[2].addItemListener(this);
    }

    public void Button() {
        //panel 1
        btn[1] = new JButton(""SEND"");
        p[1].add(btn[1]);
        btn[1].setBounds(240, 50, 80, 60);

        //panel(2);
        btn[2] = new JButton();
        p[2].add(btn[2]);
        btn[2].setText(""Complete"");
        btn[2].setBounds(215, 220, 100, 30);
        btn[3] = new JButton();
        p[2].add(btn[3]);
        btn[3].setText(""Start"");
        btn[3].setBounds(125, 260, 150, 30);
        //Actionlistener

        // btn[1].addActionListener(this);
        btn[1].addActionListener(this);
        btn[2].addActionListener(this);
        btn[3].addActionListener(this);

    }

    public void menu() {
        // System.out.println(""1111"");
        mb = new JMenuBar();
        //  c.setJMenuBar(mb);
        p[4] = new JPanel();
        p[4].setBounds(100, 30, 100, 70);
        p[4].add(mb);
        c.add(p[4]);

        menu = new JMenu(""MENU"");
        mitem[1] = new JMenuItem(""History Log Table"");
        mitem[2] = new JMenuItem(""Priority Call"");
        mitem[3] = new JMenuItem(""Delete Queue Member"");
        mitem[4] = new JMenuItem(""Reset"");
        mb.add(menu);

        for (int l = 1; l <= 1; l++) {
            menu.add(mitem[l]);
        }
        mitem[1].addActionListener(this);
        mitem[2].addActionListener(this);

    }

    public void populate(String sn, String cn, String gen, String des) {
        String rows[] = {sn, cn, gen, des};
        model.addRow(rows);

    }

    public void table() {

        table[1] = new JTable();
        srp[3] = new JScrollPane(table[1]);

        p[3].add(srp[3]);
        srp[3].setBounds(50, 90, 800, 300);
        table[1].setBackground(Color.decode(""#058dc7""));
        table[1].setForeground(Color.WHITE);
        f[4] = new Font(""Arial"", Font.BOLD, 14);
        table[1].setFont(f[4]);
        table[1].setEnabled(false);
        table[1].setRowHeight(table[1].getRowHeight() + 15);
        model = (DefaultTableModel) table[1].getModel();
        for (int l = 0; l < 4; l++) {
            model.addColumn(colms[l]);
        }
        TableColumn column = null;

        // column = table[1].getColumnModel().getColumn(0);
        for (int t = 0; t < 4; t++) {
            column = table[1].getColumnModel().getColumn(t);
            if (t == 0) {
                column.setPreferredWidth(80);
            }
            if (t == 1) {
                column.setPreferredWidth(220);
            }
            if (t == 2) {
                column.setPreferredWidth(200);
            }
            if (t == 3) {
                column.setPreferredWidth(300);
            }

        }
        cellallignment();

    }

    public void popupmenu() {
        //  pop = new Popupclass(table[1], this);
        // table[1].addMouseListener(this);

    }

    public void setrunningservice(String sn, String n, String type, String des) {
        jtf[5].setText("""" + sn);
        jtf[3].setText("""" + n);
        jtf[4].setText("""" + type);
        jta[2].setText("""" + des);

    }

    public void cellallignment() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table[1].getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table[1].getColumnModel().getColumn(2).setCellRenderer(centerRenderer);

    }

    public void filter(String query) {
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        table[1].setRowSorter(tr);
        if (query != ""none"") {
            tr.setRowFilter(RowFilter.regexFilter(query));
        } else {
            table[1].setRowSorter(tr);
        }
    }

    public void update(int r) {

        model.removeRow(r);
        int temp = model.getRowCount();
        System.out.println("""" + r);
        // System.out.println(""""+temp+"" ""+k);
        for (int i = r; i < temp; i++) {
            table[1].setValueAt("""" + (i + 1), i, 0);

        }

    }

    public void font() {
        //panel(1)
        f[1] = new Font(""Arial"", Font.BOLD, 16);
        f[2] = new Font(""Arial"", Font.BOLD, 14);
        f[3] = new Font(""Arial"", Font.BOLD, 20);
        jta[1].setFont(f[1]);
        jl[1].setFont(f[3]);
        //panel(2)
        jtf[3].setFont(f[1]);
        jta[2].setFont(f[2]);
        jtf[4].setFont(f[1]);
        jtf[5].setFont(f[1]);
        menu.setFont(f[1]);
        for (int l = 1; l <= 4; l++) {
            mitem[l].setFont(f[1]);
        }
        //panel2
        jl[8].setFont(f[1]);
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getSource() == btn[1] && jta[1].getText().isEmpty()) {

            try {
                String str = jta[1].getText().toString();
                Medipopulate t1 = new Medipopulate("""", ""Updated Msg"", ""Running"", """" + str);
                rt.senddata(t1);
                jta[1].setText("""");
            } catch (IOException ex) {
                Logger.getLogger(Home1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (e.getSource() == btn[3]) {

            if (flag == 0) {

                try {
                    this.setrunningservice(table[1].getValueAt(0, 0).toString(), table[1].getValueAt(0, 1).toString(), table[1].getValueAt(0, 2).toString(), table[1].getValueAt(0, 2).toString());
                    model.removeRow(0);
                    Medipopulate t1 = new Medipopulate("""", """", ""Running"", ""Remove"");
                    rt.senddata(t1);
                } catch (IOException ex) {
                    Logger.getLogger(Home1.class.getName()).log(Level.SEVERE, null, ex);
                }
                flag = 1;

            } else {
                JOptionPane.showMessageDialog(null, ""YOU ALREADY START THE SERVICE"");
            }

        } else if (e.getSource() == btn[2]) {

            if (flag != 1) {
                JOptionPane.showMessageDialog(null, ""Please First Start The Service"");
            } else {

                try {
                    this.setrunningservice(table[1].getValueAt(0, 0).toString(), table[1].getValueAt(0, 1).toString(), table[1].getValueAt(0, 2).toString(), table[1].getValueAt(0, 2).toString());
                    model.removeRow(0);
                    Medipopulate t1 = new Medipopulate("""", """", ""Running"", ""Remove"");
                    rt.senddata(t1);
                } catch (IOException ex) {
                    Logger.getLogger(Home1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else if (e.getSource() == mitem[1]) {
            lt.setVisible(true);

        } else if (e.getSource() == mitem[2]) {

        }
    }

    public static void main(String[] args) {
        //Home1 frame = new Home1();

    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (SwingUtilities.isRightMouseButton(e)) {
            // pop.show(e.getComponent(), e.getX(), e.getY());
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getSource() == jtf[6]) {
            filter(jtf[6].getText().toString());

        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() == jcb[2]) {
            this.filter(jcb[2].getSelectedItem().toString());

        }
    }

}",1
"package Projectdemo;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.TableView.TableRow;
import Populate.*;
public class Home2 extends JFrame implements ActionListener ,KeyListener,MouseListener,ItemListener{

    public static int flag = 0;
    public int temp=1;
    public static int k = 1,x;
    private Container c;
    JTable table[] = new JTable[10];
    DefaultTableModel model=new DefaultTableModel();
    JPanel p[] = new JPanel[10];
    JLabel jl[] = new JLabel[16];
    JTextField jtf[] = new JTextField[30];
    JTextArea jta[] = new JTextArea[30];
    JButton btn[] = new JButton[20];
    JScrollPane pane;
    TitledBorder border[] = new TitledBorder[10];
   // JFrame frame;
    JComboBox jcb[] = new JComboBox[10];
    JScrollPane srp[] = new JScrollPane[10];
    Font f[] = new Font[30];
    String colms[] = {""Serial No."", ""Customer Name"", ""Type"", ""Description""};
    String rows[][] = new String[100][4];
    String item[] = {""Software"", ""Hardware""};
    JMenuBar mb;
     JMenu menu;
    JMenuItem mitem[]=new  JMenuItem[20];
    LogTable lt=new LogTable();
    Popupclass pop;
    Home2 h1;
    RunningServicesTable obj=new RunningServicesTable(this);
   // LogTable lt = new LogTable();
    Home2() {
        initcomponents();
       
        panel();
        label();
        textfield();
        combobox();
        Button();
        menu();
        table();
        popup();
        font();
        
      

    }

    public void initcomponents() {
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setBounds(500, 100, 1300, 900);
        c = this.getContentPane();
        c.setLayout(null);
        f[3] = new Font(""Arial"", Font.BOLD, 25);

        border[1] = new TitledBorder(""NEW SERVICE"");
        border[1].setTitleJustification(TitledBorder.LEFT);
        border[1].setTitlePosition(TitledBorder.TOP);
        border[1].setTitleColor(Color.RED);
        border[1].setTitleFont(f[3]);  
        border[2] = new TitledBorder(""RUNNING SERVICE"");
        border[2].setTitleJustification(TitledBorder.LEFT);
        border[2].setTitlePosition(TitledBorder.TOP);
        border[2].setTitleFont(f[3]);
        border[2].setTitleColor(Color.RED);
        border[3] = new TitledBorder(""LIST OF SERVICES"");
        border[3].setTitleJustification(TitledBorder.LEFT);
        border[3].setTitlePosition(TitledBorder.TOP);
        border[3].setTitleColor(Color.RED);
        border[3].setTitleFont(f[3]);
    }
public  Home2 gethome()
{
    return this;
}
    public void panel() {
        // p[4] = new JPanel();
        // c.add(p[4]);
        //  p[4].setBounds(0, 00, 900, 700);
        // p[4].setBorder(border[3]);
        //panel(1)
        p[1] = new JPanel();
        c.add(p[1]);
        p[1].setBounds(20, 20, 450, 300);
        p[1].setBackground(new Color(204, 204, 255));

        p[1].setBorder(border[1]);
        //panel(2)
        p[2] = new JPanel();
        c.add(p[2]);
        p[2].setBounds(580, 20, 450, 300);
        p[2].setBackground(new Color(204, 255, 153));
        p[1].setBorder(border[1]);
        p[2].setBorder(border[2]);
        //panel(3)
        p[3] = new JPanel();
        c.add(p[3]);
        p[3].setBounds(20, 350, 930, 450);
        p[3].setBackground(Color.lightGray);
        p[3].setBorder(border[3]);
        p[3].setLayout(null);
    }

    public void label() {
        // panel(1)
        jl[1] = new JLabel(""Name"");
        p[1].setLayout(null);
        p[1].add(jl[1]);
        jl[1].setBounds(20, 30, 100, 50);
        jl[2] = new JLabel(""Type"");
        p[1].add(jl[2]);
        jl[2].setBounds(20, 90, 100, 50);
        jl[3] = new JLabel(""Description"");
        p[1].add(jl[3]);
        jl[3].setBounds(20, 150, 100, 50);

        //panel(2)
        p[2].setLayout(null);
        jl[4] = new JLabel(""Name"");
        p[2].add(jl[4]);
        jl[4].setBounds(20, 30, 100, 50);
        jl[5] = new JLabel(""Type"");
        p[2].add(jl[5]);
        jl[5].setBounds(20, 90, 100, 50);
        jl[6] = new JLabel(""Description"");
        p[2].add(jl[6]);
        jl[6].setBounds(20, 150, 100, 50);
        jl[7] = new JLabel(""Serial"");
        p[2].add(jl[7]);
        jl[7].setBounds(20, 210, 100, 50);
        jl[8]=new JLabel(""Client Search"");
        p[3].add(jl[8]);
        jl[8].setBounds(350,30,150,35);
        jl[8].setFont(f[3]);

    }

    public void textfield() {
        //panel(1)
        jtf[1] = new JTextField();
        jta[1] = new JTextArea();
        jta[1].setLineWrap(true);
        jta[1].setWrapStyleWord(true);
        p[1].add(jtf[1]);
        jtf[1].setBounds(105, 37, 210, 40);
        srp[1] = new JScrollPane(jta[1]);
        p[1].add(srp[1]);
        srp[1].setBounds(105, 157, 210, 60);
        //panel(2)
        jtf[3] = new JTextField();
        jta[2] = new JTextArea();
        jta[2].setLineWrap(true);
        jta[2].setWrapStyleWord(true);
        p[2].add(jtf[3]);
        jtf[3].setBounds(105, 37, 210, 40);
        srp[2] = new JScrollPane(jta[2]);
        p[2].add(srp[2]);
        srp[2].setBounds(105, 157, 210, 40);
        jtf[4] = new JTextField();
        p[2].add(jtf[4]);
        jtf[4].setBounds(105, 94, 210, 40);
        jtf[5] = new JTextField();
        p[2].add(jtf[5]);
        jtf[5].setBounds(105, 220, 100, 30);
        jtf[6] = new JTextField();
        p[3].add(jtf[6]);
        jtf[6].setBounds(700 ,30, 150,40);
        jtf[6].setFont(f[2]);
        jtf[6].addKeyListener(this);
       

    }

    public void combobox() {
        jcb[1] = new JComboBox(item);
        p[1].add(jcb[1]);
        jcb[1].setBounds(105, 94, 210, 40);
          jcb[2] = new JComboBox();
          jcb[2].addItem(""none"");
          jcb[2].addItem(""Software"");
          jcb[2].addItem(""Hardware"");
        p[3].add(jcb[2]);
        jcb[2].setBounds(460, 30, 210, 40);
        jcb[2].addItemListener(this);
    }

    public void Button() {
        //panel(1);
        btn[1] = new JButton();
        p[1].add(btn[1]);
        btn[1].setText(""Add Queue"");
        btn[1].setBounds(110, 235, 200, 35);

        //panel(2);
        btn[2] = new JButton();
        p[2].add(btn[2]);
        btn[2].setText(""Complete"");
        btn[2].setBounds(215, 220, 100, 30);
        btn[3] = new JButton();
        p[2].add(btn[3]);
        btn[3].setText(""Start"");
        btn[3].setBounds(125, 260, 150, 30);
        //Actionlistener

        btn[1].addActionListener(this);
        btn[2].addActionListener(this);
        btn[3].addActionListener(this);

    }
     public void menu() {
         System.out.println(""1111"");
         mb=new JMenuBar();
        //  c.setJMenuBar(mb);
        p[4]=new JPanel();
         p[4].setBounds(100,30,100,70);
         p[4].add(mb);
         c.add(p[4]);

         menu=new JMenu(""MENU"");
         mitem[1]=new JMenuItem(""History Log Table"");
         mitem[2]=new JMenuItem(""Priority Search"");
         mitem[3]=new JMenuItem(""Delete Queue Member"");
         mitem[4]=new JMenuItem(""Reset"");
         mb.add(menu);
        
         for (int l = 1; l <=4; l++) {
             menu.add(mitem[l]);
         }
        mitem[1].addActionListener(this);
        mitem[2].addActionListener(this);
       
    }
   public void populate(String sn,String cn,String ty,String des )
   {
       String rows[]={sn,cn,ty,des};
       model.addRow(rows);
       
          }
    public void table() {
 
      
        table[1] = new JTable();
        srp[3] = new JScrollPane(table[1]);
    
        p[3].add(srp[3]);
        srp[3].setBounds(50, 90, 800, 300);
        table[1].setBackground(Color.decode(""#058dc7""));
        table[1].setForeground(Color.WHITE);
        f[4] = new Font(""Arial"", Font.BOLD, 14);
        table[1].setFont(f[4]);
       // table[1].setEnabled(false);
        table[1].setRowHeight(table[1].getRowHeight()+15);
        model.isCellEditable(2, 3);
        table[1].setCellSelectionEnabled(true);
        model=(DefaultTableModel)table[1].getModel();
        for (int l = 0; l <4; l++) {
            model.addColumn(colms[l]);     
        }
            TableColumn column = null;
      
        // column = table[1].getColumnModel().getColumn(0);

        for (int t = 0; t < 4; t++) {
            column = table[1].getColumnModel().getColumn(t);
            if (t == 0) {
                column.setPreferredWidth(80);
            }
            if (t == 1) {
                column.setPreferredWidth(220);
            }
            if (t == 2) {
                column.setPreferredWidth(200);
            }
            if (t == 3) {
                column.setPreferredWidth(300);
            }

        }
        cellallignment();
      
    }
  public void popup()
    {
        pop=new Popupclass(this);
        table[1].addMouseListener(this);
    }
public void cellallignment()
{
  DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
  centerRenderer.setHorizontalAlignment( JLabel.CENTER );
  table[1].getColumnModel().getColumn(0).setCellRenderer( centerRenderer );   
  table[1].getColumnModel().getColumn(2).setCellRenderer( centerRenderer );   
   
   
}
  public void filter(String query)
     {
         TableRowSorter<DefaultTableModel> tr=new TableRowSorter<DefaultTableModel>(model);
         table[1].setRowSorter(tr);
         if(query!=""none"")
         {
              tr.setRowFilter(RowFilter.regexFilter(query));
         }
        else
         {
               table[1].setRowSorter(tr);
         }
     }
    public void font() {
        //panel(1)
        f[1] = new Font(""Arial"", Font.BOLD, 16);
        f[2] = new Font(""Arial"", Font.BOLD, 14);
        f[3] = new Font(""Arial"", Font.BOLD, 8);
      
        jtf[1].setFont(f[1]);
        jta[1].setFont(f[2]);
        jcb[1].setFont(f[2]);
      
        //panel(2)
        jtf[3].setFont(f[1]);
        jta[2].setFont(f[2]);
        jtf[4].setFont(f[1]);
        jtf[5].setFont(f[1]);
        jtf[6].setFont(f[1]);
        //panel 3
          jl[8].setFont(f[1]);
    }

   
    public void update(int r)
    {
        System.out.println(""""+r);  
        model.removeRow(r);
       int temp=model.getRowCount();
        System.out.println(""""+r);              
       // System.out.println(""""+temp+"" ""+k);
        for (int i = r; i <temp; i++) {
          table[1].setValueAt(""""+(i+1), i,0);     
        }
  
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
                  
        String str=jtf[1].getText().toString();
        if (e.getSource() == btn[1]) {

            if (jtf[1].getText().isEmpty()||str.matches(""^[A-Za-z][A-Za-z][A-Za-z0-9]*(?:_[A-Za-z0-9]+)*$"")==false) {

                JOptionPane.showMessageDialog(null, ""ENTER VALID CUSTOMER NAME"");

            } 
            else if (jta[1].getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, ""ENTER SHORT DESCRIPTION"");
            } 
        
            else { 
                
                String s=""""+k;
               populate(s,jtf[1].getText().toString(),jcb[1].getSelectedItem().toString(),jta[1].getText().toString());
               Populate t1=new  Populate(s,jtf[1].getText().toString(),jcb[1].getSelectedItem().toString(),jta[1].getText().toString());
               obj.populate(temp, t1);
              
               if(temp==5)
               {
                   temp=1;
               }
               else
               {
                   temp++;
               }
              lt.populate(s,jtf[1].getText().toString(),jcb[1].getSelectedItem().toString(),jta[1].getText().toString());
              lt.filewriter(s,jtf[1].getText().toString(),jcb[1].getSelectedItem().toString(),jta[1].getText().toString());
              x=k;
            //   jtf[1].setText("""");
              // jta[1].setText("""");
                k++;
               
            }

        } else if (e.getSource() == btn[3]) {
            if (table[1].getRowCount()==0) {

                JOptionPane.showMessageDialog(null, ""NO PENDING SERVICES"");
            } else if (flag == 0) {
               
                jtf[5].setText("""" +table[1].getValueAt(0,0));
                jtf[3].setText("""" + table[1].getValueAt(0,1));
                jtf[4].setText("""" +table[1].getValueAt(0,2));
                jta[2].setText("""" + table[1].getValueAt(0,3));
                 model.removeRow(0);
                 flag=1;
            } else {
                JOptionPane.showMessageDialog(null, ""YOU ALREADY STARTED THE SERVICES"");
            }

        } else if (e.getSource() == btn[2]) {

            if (table[1].getRowCount()==0) {

                JOptionPane.showMessageDialog(null, ""NO PENDING SERVICES"");

            } else {
              obj.setVisible(true);
                jtf[5].setText("""" +table[1].getValueAt(0,0));
                jtf[3].setText("""" + table[1].getValueAt(0,1));
                jtf[4].setText("""" +table[1].getValueAt(0,2));
                jta[2].setText("""" + table[1].getValueAt(0,3));
                 model.removeRow(0);
               
            //    delete();
               // table();
             // LogTable lt = new  LogTable();
              
             
            }
        }
        else if(e.getSource()==mitem[1])
        {
             lt.setVisible(true);
        }
        else if(e.getSource()==mitem[2])
        {
            String name=JOptionPane.showInputDialog(""Enter Client Name"");
            filter(name);
        }
    }

    public static void main(String[] args) {
        Home2 frame = new Home2();

    }

   

  
    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
         if(e.getSource()==jtf[6])      
        {
            filter(jtf[6].getText().toString());
            
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if(e.getSource()==table[1])
        {  
           // pop.flag=1;
           if(SwingUtilities.isRightMouseButton(e))
               {
                   pop.show(e.getComponent(),e.getX(),e.getY());
                  
               }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if(e.getSource()==jcb[2])
        {
           this.filter(jcb[2].getSelectedItem().toString());
           
        }
       
    }

  
}",1
"
package class_project;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class Home_ary extends JFrame implements ActionListener{
    private Container con;
    private Font f,bo,ns;
    private JComboBox type;
    private String item [] = {""Medicine"",""Arthopedic""};
    private ButtonGroup grp;
    private JRadioButton male,fe,sm;
    private DefaultTableModel model;
    
    JPanel panel [] = new JPanel[3];
    JLabel label [] = new JLabel[16];
    JTextField jtf[] = new JTextField[30];
    JTextArea jta[] = new JTextArea[30];
    JButton btn[] = new JButton[20];
    JScrollPane pane;
    JButton button[] = new JButton[10];
    String colms[] = {""Serial No."", ""Name"", ""Age"",""Sex"",""Description""};
    String rows[][] = new String[100][100];
    JTable table [] = new JTable[100];
    
    Home_ary()
    {
        setcom();
        label();
        field();
        area();
        button(); 
        table();
    }
    
    public void setcom()
    {
        con = this.getContentPane();
        con.setBackground(new Color(146,156,175));
        con.setLayout(null);
        
        f = new Font(""Arial"",Font.PLAIN,20);
        bo = new Font(""Arial"",Font.BOLD,20);
        ns = new Font(""Arial"",Font.BOLD,40);
        
        //panel for new services panel 1//
        panel[1] = new JPanel();
        panel[1].setBounds(20,120,400,400);
        panel[1].setBackground(new Color(213,215,252));
        panel[1].setLayout(null);
        con.add(panel[1]);
        
        // panel for list of servics//
        panel[2] = new JPanel();
        panel[2].setBounds(460,50,800,500);
        panel[2].setBackground(new Color(155,193,233));
        panel[2].setLayout(null);
        con.add(panel[2]);
        
        // Combobox panel 1//
        type = new JComboBox(item);
        //type.setBounds(170,50,200,30);
        type.setFont(bo);
        panel[1].add(type);  
    }
    
    public void button()
    {
         //add Button panel 1//
        button[1] = new JButton(""Add Queue"");
        button[1].setFont(bo);
        button[1].setBounds(130,340,150,50);
        panel[1].add(button[1]);
        button[1].addActionListener(this);
        
         //label for Menu panel 1//
        button[2] = new JButton(""Menu"");
        button[2].setFont(ns);
        button[2].setBounds(20,40,140,50);
        con.add(button[2]);
    }
    
    public void label()
    {
        //name,age,sex,description,type,new services,list of services//
        
        //label for name panel 1//
        label[1] = new JLabel(""Name : "");
        label[1].setBounds(5,80,100,30);
        label[1].setFont(f);
        panel[1].add(label[1]);
        
        //label for age panel 1//
        label[2] = new JLabel(""Age    : "");
        label[2].setBounds(5,120,110,30);
        label[2].setFont(f);
        panel[1].add(label[2]);
        
        //label for sex panel 1//
        label[3] = new JLabel(""Sex    : "");
        label[3].setBounds(5,160,150,30);
        label[3].setFont(f);
        panel[1].add(label[3]);
        
        //label for Description panel 1//
        label[4] = new JLabel(""Description: "");
        label[4].setFont(f);
        label[4].setBounds(5,200,150,30);
        panel[1].add(label[4]);
        
        //label for new services//
        label[3] = new JLabel(""New Services"");
        label[3].setFont(ns);
        label[3].setBounds(5,5,300,50);
        panel[1].add(label[3]);
        
    }
    
    public void area()
    {
        //TextArea for Age panel 1//
        jta[1] = new JTextArea();
        jta[1].setBounds(120,120,260,30);
        jta[1].setFont(f);
        panel[1].add(jta[1]);
        
        //TextArea for Description panel 1//
        jta[2] = new JTextArea();
        jta[2].setBounds(120,200,260,110);
        jta[2].setFont(f);
        jta[2].setLineWrap(true);
        jta[2].setWrapStyleWord(true);
        panel[1].add(jta[2]);
    }
    
    public void field()
    {
        //field for name panel 1//
        jtf[1] = new JTextField();
        jtf[1].setBounds(120,80,260,30);
        jtf[1].setFont(f);
        panel[1].add(jtf[1]);
        
        grp = new ButtonGroup();
        //button for male,female,ot, panel 1//
        male = new JRadioButton(""Male"");
        male.setBounds(120,160,70,30);
        male.setFont(bo);
        panel[1].add(male);
        
        fe = new JRadioButton(""Female"");
        fe.setBounds(200,160,95,30);
        fe.setFont(bo);
        panel[1].add(fe);
        
        sm = new JRadioButton(""Other"");
        sm.setBounds(300,160,80,30);
        sm.setFont(bo);
        panel[1].add(sm);
        
        grp.add(male);
        grp.add(fe);
        grp.add(sm);
        
        
    }
   
    
    private void table()
    {
        model = new DefaultTableModel();
        model.setColumnIdentifiers(colms);
        
        table[1] = new JTable(rows,colms);
        table[1].setFont(f);
        table[1].setModel(model);
        pane = new JScrollPane(table[1]);
        pane.setBounds(5,5,790,490);
        panel[2].add(pane);
        
        
    }
     
    public void actionPerformed(ActionEvent e )
    {
        if(e.getSource()==button[1])
        {
            rows[0][1] =  jtf[1].getText();
            rows[0][2] = jta[1].getText();
           // rows[0][3] = 
           rows[0][4] = jta[2].getText();
           model.addRow(rows);
        }
        
    }
    public static void main(String[] args) {
        
        Home_ary demo = new Home_ary();
        demo.setVisible(true);
        demo.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        demo.setBounds(50,20,1300,600);
        demo.setResizable(false);
       
    }
    
}",1
"
package MediClientdemo;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import MediPopulate.*;

public class LogTable extends JFrame{
     DefaultTableModel model=new DefaultTableModel();
    JScrollPane scr;
    Container c;
     JPanel p;
     TitledBorder border[] = new TitledBorder[10];
     JTable tb;
     String colms[] = {""Serial No."", ""Customer Name"", ""Gender"", ""Description""};
     
     Font f[]=new Font[10];
    LogTable()
    {
        initcomponents();
    }
    public void initcomponents() {
   //   this.setVisible(true);
       this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
       this.setBounds(500,100,700,900);
        c=this.getContentPane();
         c.setLayout(null);
         p=new JPanel();
         c.add(p);
         p.setBounds(40,80,600,750);
        tb = new JTable();
        scr = new JScrollPane(tb);
        p.setLayout(null);
        p.add(scr);
        scr.setBounds(10, 50, 580, 690);
        tb.setBackground(Color.decode(""#058dc7""));
        tb.setForeground(Color.WHITE);
       f[1] = new Font(""Arial"", Font.BOLD, 14);
       f[2] = new Font(""Arial"", Font.BOLD, 20);
       tb.setFont(f[1]);
        tb.setRowHeight(tb.getRowHeight()+15);
        model=(DefaultTableModel)tb.getModel();
        for (int l = 0; l <4; l++) {
            model.addColumn(colms[l]);     
        }
            TableColumn column = null;
      
        // column = table[1].getColumnModel().getColumn(0);

        for (int t = 0; t < 4; t++) {
            column = tb.getColumnModel().getColumn(t);
            if (t == 0) {
                column.setPreferredWidth(80);
            }
            if (t == 1) {
                column.setPreferredWidth(220);
            }
            if (t == 2) {
                column.setPreferredWidth(200);
            }
            if (t == 3) {
                column.setPreferredWidth(300);
            }

        }
        border[1] = new TitledBorder(""LOG TABLE"");
        border[1].setTitleJustification(TitledBorder.LEFT);
        border[1].setTitlePosition(TitledBorder.TOP);
        border[1].setTitleColor(Color.RED);
        border[1].setTitleFont(f[2]);
      p.setBorder(border[1]);
        
    }
      public void populate(Medipopulate t1 )
   {
       String rows[]={t1.sn,t1.cn,t1.gen,t1.d};
       model.addRow(rows);
       this.filewriter(t1);
          }
      
      public void filewriter(Medipopulate t1)
      {
           String data[]={t1.sn,t1.cn,t1.gen,t1.d};
         try {
             FileWriter fr=new FileWriter(""History.txt"",true);
             fr.write(t1.sn+"" ""+"" "");
             fr.write(t1.cn+"" ""+"" "");
             fr.write(t1.gen+"" ""+"" "");
             fr.write(t1.d+"" ""+"" "");
             fr.write(System.getProperty(""line.separator""));
             fr.close();
             
         } catch (IOException ex) {
             Logger.getLogger(LogTable.class.getName()).log(Level.SEVERE, null, ex);
         }
          
      }
    public static void main(String[] args) {
        //LogTable frame=new LogTable();
    }

    
    
}",0
"
package Projectdemo;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.TitledBorder;


public class RunningServices extends JFrame{
    public JPanel p[] = new JPanel[10];
    public Container c;
    public Font f[]=new Font[10];
    public JTextField jtf[]=new JTextField[30];
    public JLabel jl[]=new JLabel[30];
    TitledBorder border[] = new TitledBorder[10];
    
    
     public RunningServices() {
         
         initcomponents();
         panel();
         border();
         textfield();
    }
    public void initcomponents()
    {
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setBounds(100,60,1100,900);
        c=this.getContentPane();
        c.setLayout(null);
    }
    public void panel()
    {
        p[1]=new JPanel();
        c.add(p[1]);
        p[1].setBounds(30, 30, 310, 300);
        p[1].setBackground(new Color(204, 204, 255));
        p[1].setLayout(null);
        jl[1] = new JLabel(""Client Name""); 
        p[1].add(jl[1]);
        jl[1].setBounds(100, 30, 100, 50);
        jl[2] = new JLabel(""Serial No:"");
        p[1].add(jl[2]);
        jl[2].setBounds(20, 120, 100, 50);
        jl[3] = new JLabel(""Updated Message:"");
        p[1].add(jl[3]);
        jl[3].setBounds(80, 180, 150, 50);

      
        
        p[2]=new JPanel();
        c.add(p[2]);
        p[2].setBounds(680, 30, 310, 300);
        p[2].setBackground(new Color(204, 204, 255));
         p[2].setLayout(null);
        jl[4] = new JLabel(""Client Name""); 
        p[2].add(jl[4]);
        jl[4].setBounds(100, 30, 100, 50);
        jl[5] = new JLabel(""Serial No:"");
        p[2].add(jl[5]);
        jl[5].setBounds(20, 120, 100, 50);
        jl[6] = new JLabel(""Updated Message:"");
        p[2].add(jl[6]);
        jl[6].setBounds(80, 180, 150, 50);

        
        p[3]=new JPanel();
        c.add(p[3]);
        p[3].setBounds(30, 360, 310, 300);
        p[3].setBackground(new Color(204, 204, 255));
         p[3].setLayout(null);
        jl[7] = new JLabel(""Client Name""); 
        p[3].add(jl[7]);
        jl[7].setBounds(100, 30, 100, 50);
        jl[8] = new JLabel(""Serial No:"");
        p[3].add(jl[8]);
        jl[8].setBounds(20, 120, 100, 50);
        jl[9] = new JLabel(""Updated Message:"");
        p[3].add(jl[9]);
        jl[9].setBounds(80, 180, 150, 50);
 
        
        p[4]=new JPanel();
        c.add(p[4]);
        p[4].setBounds(680, 360, 310, 300);
        p[4].setBackground(new Color(204, 204, 255));
         p[4].setLayout(null);
        jl[10] = new JLabel(""Client Name""); 
        p[4].add(jl[10]);
        jl[10].setBounds(100, 30, 100, 50);
        jl[11] = new JLabel(""Serial No:"");
        p[4].add(jl[11]);
        jl[11].setBounds(20, 120, 100, 50);
        jl[12] = new JLabel(""Updated Message:"");
        p[4].add(jl[12]);
        jl[12].setBounds(80, 180, 150, 50);
     
        
        p[5]=new JPanel();
        c.add(p[5]);
        p[5].setBounds(355, 250, 310, 300);
        p[5].setBackground(new Color(204, 204, 255));
        p[5].setLayout(null);
        jl[13] = new JLabel(""Client Name""); 
        p[5].add(jl[13]);
        jl[13].setBounds(100, 30, 100, 50);
        jl[14] = new JLabel(""Serial No:"");
        p[5].add(jl[14]);
        jl[14].setBounds(20, 120, 100, 50);
        jl[15] = new JLabel(""Updated Message:"");
        p[5].add(jl[15]);
        jl[15].setBounds(80, 180, 150, 50);
     
        
    }
    public void border()
    {
        f[3] = new Font(""Arial"", Font.BOLD, 18);
        border[1] = new TitledBorder(""RUNNING SERVICE DESK 1"");
        border[1].setTitleJustification(TitledBorder.LEFT);
        border[1].setTitlePosition(TitledBorder.TOP);
        border[1].setTitleColor(Color.RED);
        border[1].setTitleFont(f[3]);
        p[1].setBorder(border[1]);

        border[2] = new TitledBorder(""RUNNING SERVICE DESK 2"");
        border[2].setTitleJustification(TitledBorder.LEFT);
        border[2].setTitlePosition(TitledBorder.TOP);
        border[2].setTitleColor(Color.RED);
        border[2].setTitleFont(f[3]);
        p[2].setBorder(border[2]);

        border[3] = new TitledBorder(""RUNNING SERVICE DESK 3"");
        border[3].setTitleJustification(TitledBorder.LEFT);
        border[3].setTitlePosition(TitledBorder.TOP);
        border[3].setTitleColor(Color.RED);
        border[3].setTitleFont(f[3]);
        p[3].setBorder(border[3]);

        border[4] = new TitledBorder(""RUNNING SERVICE DESK 4"");
        border[4].setTitleJustification(TitledBorder.LEFT);
        border[4].setTitlePosition(TitledBorder.TOP);
        border[4].setTitleColor(Color.RED);
        border[4].setTitleFont(f[3]);
        p[4].setBorder(border[4]);

        border[5] = new TitledBorder(""RUNNING SERVICE DESK 5"");
        border[5].setTitleJustification(TitledBorder.LEFT);
        border[5].setTitlePosition(TitledBorder.TOP);
        border[5].setTitleColor(Color.RED);
        border[5].setTitleFont(f[3]);
        p[5].setBorder(border[5]);
    }
    public void textfield()
    {
        //panel 1
        jtf[1] = new JTextField();
        p[1].add(jtf[1]);
        jtf[1].setEditable(false);
        jtf[1].setBounds(50, 70, 200, 40);
        
        jtf[2] = new JTextField();
        p[1].add(jtf[2]);
        jtf[2].setEditable(false);
        jtf[2].setBounds(100, 125, 50, 40);
        
        jtf[3] = new JTextField();
        p[1].add(jtf[3]);
        jtf[3].setEditable(false);
        jtf[3].setBounds(40, 235, 220, 60);
        
          //panel 2
        jtf[4] = new JTextField();
        p[2].add(jtf[4]);
        jtf[4].setEditable(false);
        jtf[4].setBounds(50, 70, 200, 40);
        
        jtf[5] = new JTextField();
        p[2].add(jtf[5]);
        jtf[5].setEditable(false);
        jtf[5].setBounds(100, 125, 50, 40);
        
        jtf[6] = new JTextField();
        p[2].add(jtf[6]);
        jtf[6].setEditable(false);
        jtf[6].setBounds(40, 235, 220, 60);
        
          //panel 3
        jtf[7] = new JTextField();
        p[3].add(jtf[7]);
        jtf[7].setEditable(false);
        jtf[7].setBounds(50, 70, 200, 40);
        
        jtf[8] = new JTextField();
        p[3].add(jtf[8]);
        jtf[8].setEditable(false);
        jtf[8].setBounds(100, 125, 50, 40);
        
        jtf[9] = new JTextField();
        p[3].add(jtf[9]);
        jtf[9].setEditable(false);
        jtf[9].setBounds(40, 235, 220, 60);
        
          //panel 4
        jtf[10] = new JTextField();
        p[4].add(jtf[10]);
        jtf[10].setEditable(false);
        jtf[10].setBounds(50, 70, 200, 40);
        
        jtf[11] = new JTextField();
        p[4].add(jtf[11]);
        jtf[11].setEditable(false);
        jtf[11].setBounds(100, 125, 50, 40);
        
        jtf[12] = new JTextField();
        p[4].add(jtf[12]);
        jtf[12].setEditable(false);
        jtf[12].setBounds(40, 235, 220, 60);
        
          //panel 5
        jtf[13] = new JTextField();
        p[5].add(jtf[13]);
        jtf[13].setEditable(false);
        jtf[13].setBounds(50, 70, 200, 40);
        
        jtf[14] = new JTextField();
        p[5].add(jtf[14]);
        jtf[14].setEditable(false);
        jtf[14].setBounds(100, 125, 50, 40);
        
        jtf[15] = new JTextField();
        p[5].add(jtf[15]);
        jtf[15].setEditable(false);
        jtf[15].setBounds(40, 235, 220, 60);
    }
    public static void main(String[] args) {
        RunningServices frame=new RunningServices();
        frame.setVisible(true);
        
    }
}",1
"package Projectdemo;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import javax.swing.*;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import Populate.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
public class RunningServicesTable extends JFrame implements MouseListener{

    public JPanel p[] = new JPanel[10];
    public JTable table[] = new JTable[10];
    public JScrollPane scrp[] = new JScrollPane[10];
    public Container c;
    DefaultTableModel model[] = new DefaultTableModel[10];
    TitledBorder border[] = new TitledBorder[10];
    Font f[] = new Font[30];
    String colms[] = {""Serial No."", ""Customer Name"", ""Type"", ""Description""};
      Popupclass pop;
         Home2 h1;
    RunningServicesTable( Home2 h1) {
        initcomponents();
        panel();
        border();
        table();
        popupmenu();
        this.h1=h1;
    }

    public void initcomponents() {

        this.setBounds(0, 100, 1900, 900);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        c = this.getContentPane();
        c.setLayout(null);

    }

    public void panel() {
        p[1] = new JPanel();
        c.add(p[1]);
        p[1].setBounds(30, 30, 600, 400);
        // p[1].setBackground(Color.red);

        p[2] = new JPanel();
        c.add(p[2]);
        p[2].setBounds(1250, 30, 600, 400);
        //p[2].setBackground(Color.red);

        p[3] = new JPanel();
        c.add(p[3]);
        p[3].setBounds(1250, 450, 600, 380);
        //  p[3].setBackground(Color.red);

        p[4] = new JPanel();
        c.add(p[4]);
        p[4].setBounds(30, 450, 600, 380);
        //p[4].setBackground(Color.red);

        p[5] = new JPanel();
        c.add(p[5]);
        p[5].setBounds(640, 250, 600, 400);
        // p[5].setBackground(Color.red);

    }

    public void border() {
        f[3] = new Font(""Arial"", Font.BOLD, 25);
        border[1] = new TitledBorder(""SERVICE DESK 1"");
        border[1].setTitleJustification(TitledBorder.LEFT);
        border[1].setTitlePosition(TitledBorder.TOP);
        border[1].setTitleColor(Color.RED);
        border[1].setTitleFont(f[3]);
        p[1].setBorder(border[1]);

        border[2] = new TitledBorder(""SERVICE DESK 2"");
        border[2].setTitleJustification(TitledBorder.LEFT);
        border[2].setTitlePosition(TitledBorder.TOP);
        border[2].setTitleColor(Color.RED);
        border[2].setTitleFont(f[3]);
        p[2].setBorder(border[2]);

        border[3] = new TitledBorder(""SERVICE DESK 3"");
        border[3].setTitleJustification(TitledBorder.LEFT);
        border[3].setTitlePosition(TitledBorder.TOP);
        border[3].setTitleColor(Color.RED);
        border[3].setTitleFont(f[3]);
        p[3].setBorder(border[3]);

        border[4] = new TitledBorder(""SERVICE DESK 4"");
        border[4].setTitleJustification(TitledBorder.LEFT);
        border[4].setTitlePosition(TitledBorder.TOP);
        border[4].setTitleColor(Color.RED);
        border[4].setTitleFont(f[3]);
        p[4].setBorder(border[4]);

        border[5] = new TitledBorder(""SERVICE DESK 5"");
        border[5].setTitleJustification(TitledBorder.LEFT);
        border[5].setTitlePosition(TitledBorder.TOP);
        border[5].setTitleColor(Color.RED);
        border[5].setTitleFont(f[3]);
        p[5].setBorder(border[5]);
       
    }

    public void table() {
        table[1] = new JTable();
        scrp[1] = new JScrollPane(table[1]);
        p[1].setLayout(null);
        p[1].add(scrp[1]);
        scrp[1].setBounds(20, 30, 560, 350);
        table[1].setRowHeight(table[1].getRowHeight() + 15);
        model[1] = (DefaultTableModel) table[1].getModel();
        for (int i= 0; i< 4; i++) {
            model[1].addColumn(colms[i]);
        }    
         table[1].setBackground(Color.decode(""#058dc7""));
         table[1].setForeground(Color.WHITE);
         f[1] = new Font(""Arial"", Font.BOLD, 12);
         table[1].setFont(f[1]);
         
         
         table[2] = new JTable();
        scrp[2] = new JScrollPane(table[2]);
        p[2].setLayout(null);
        p[2].add(scrp[2]);
        scrp[2].setBounds(20, 30, 560, 350);
        table[2].setRowHeight(table[2].getRowHeight() + 15);
        model[2] = (DefaultTableModel) table[2].getModel();
        for (int i= 0; i< 4; i++) {
            model[2].addColumn(colms[i]);
        }     
         table[2].setBackground(Color.decode(""#058dc7""));
         table[2].setForeground(Color.WHITE);
         table[2].setFont(f[1]);
        
        
        
         table[3] = new JTable();
        scrp[3] = new JScrollPane(table[3]);
        p[3].setLayout(null);
        p[3].add(scrp[3]);
        scrp[3].setBounds(20, 30, 560, 340);
        table[3].setRowHeight(table[1].getRowHeight() + 15);
        model[3] = (DefaultTableModel) table[3].getModel();
        for (int i= 0; i< 4; i++) {
            model[3].addColumn(colms[i]);
        }   
         table[3].setBackground(Color.decode(""#058dc7""));
         table[3].setForeground(Color.WHITE);
         table[3].setFont(f[1]);
        
        
         table[4] = new JTable();
        scrp[4] = new JScrollPane(table[4]);
        p[4].setLayout(null);
        p[4].add(scrp[4]);
        scrp[4].setBounds(20, 30, 560, 340);
        table[4].setRowHeight(table[4].getRowHeight() + 15);
        model[4] = (DefaultTableModel) table[4].getModel();
        for (int i= 0; i< 4; i++) {
            model[4].addColumn(colms[i]);
        }   
         table[4].setBackground(Color.decode(""#058dc7""));
         table[4].setForeground(Color.WHITE);
         table[4].setFont(f[1]);
        
        
         table[5] = new JTable();
        scrp[5] = new JScrollPane(table[5]);
        p[5].setLayout(null);
        p[5].add(scrp[5]);
        scrp[5].setBounds(20, 30, 560, 350);
        table[5].setRowHeight(table[5].getRowHeight() + 15);
        model[5] = (DefaultTableModel) table[5].getModel();
        for (int i= 0; i< 4; i++) {
            model[5].addColumn(colms[i]);
        } 
         table[5].setBackground(Color.decode(""#058dc7""));
         table[5].setForeground(Color.WHITE);
         table[5].setFont(f[1]);
        
       
     TableColumn column = null;
      
        // column = table[1].getColumnModel().getColumn(0);
        for (int i = 1; i <=5; i++) {
        for (int t = 0; t < 4; t++) {
            column = table[i].getColumnModel().getColumn(t);
            if (t == 0) {
                column.setPreferredWidth(80);
            }
            if (t == 1) {
                column.setPreferredWidth(220);
            }
            if (t == 2) {
                column.setPreferredWidth(200);
            }
            if (t == 3) {
                column.setPreferredWidth(300);
            }

        }
        }
        
    }
    public void popupmenu()
    {
       
        pop=new Popupclass(h1);
        table[1].addMouseListener(this);
        table[2].addMouseListener(this);
        table[3].addMouseListener(this);
        table[4].addMouseListener(this);
        table[5].addMouseListener(this);
    }
    public void populate(int tableno,Populate t1)
    {
        String ar[]={t1.sn,t1.cn,t1.t,t1.d};
        model[tableno].addRow(ar);
    }

    public static void main(String[] args) {
       // RunningServicesTable frame = new RunningServicesTable();
       // frame.setVisible(true);
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if(e.getSource()==table[1])
        {
            System.out.println(""Clicked"");
               pop.flag=1;
           if(SwingUtilities.isRightMouseButton(e))
               {
                   pop.show(e.getComponent(),e.getX(),e.getY());
                  
               }
        }
          if(e.getSource()==table[2])
        {
               pop.flag=2;
           if(SwingUtilities.isRightMouseButton(e))
               {
                   pop.show(e.getComponent(),e.getX(),e.getY());
                  
               }
        }
            if(e.getSource()==table[3])
        {
               pop.flag=3;
           if(SwingUtilities.isRightMouseButton(e))
               {
                   pop.show(e.getComponent(),e.getX(),e.getY());
                  
               }
        }
              if(e.getSource()==table[4])
        {
               pop.flag=4;
           if(SwingUtilities.isRightMouseButton(e))
               {
                   pop.show(e.getComponent(),e.getX(),e.getY());
                  
               }
        }
                if(e.getSource()==table[5])
        {
               pop.flag=5;
           if(SwingUtilities.isRightMouseButton(e))
               {
                   pop.show(e.getComponent(),e.getX(),e.getY());
                  
               }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

}",1
"public class Car {
    private String brand;
    private String model;
    private int year;
    private String color;
    private double engineCapacity;
    private boolean isElectric;
    private int topSpeed;
    private String transmission;
    private double mileage;
    private String ownerName;
    private String registrationNumber;

    public Car(String brand, String model, int year, String color, double engineCapacity, boolean isElectric,
               int topSpeed, String transmission, double mileage, String ownerName, String registrationNumber) {
        this.brand = brand;
        this.model = model;
        this.year = year;
        this.color = color;
        this.engineCapacity = engineCapacity;
        this.isElectric = isElectric;
        this.topSpeed = topSpeed;
        this.transmission = transmission;
        this.mileage = mileage;
        this.ownerName = ownerName;
        this.registrationNumber = registrationNumber;
    }

    public void drive() {
        System.out.println(ownerName + "" is driving the "" + brand + "" "" + model);
    }

    public void displayInfo() {
        System.out.println(""Car: "" + brand + "" "" + model + "" ("" + year + "")"");
        System.out.println(""Color: "" + color + "", Engine Capacity: "" + engineCapacity + ""L"");
        System.out.println(""Electric: "" + (isElectric ? ""Yes"" : ""No"") + "", Top Speed: "" + topSpeed + ""km/h"");
    }
}",1
"public class Car {
    private String brand;
    private String model;
    private int year;
    private String color;
    private double engineCapacity;
    private boolean isElectric;
    private int topSpeed;
    private String transmission;
    private double mileage;

    public Car(String brand, String model, int year, String color, double engineCapacity, boolean isElectric,
               int topSpeed, String transmission, double mileage, String ownerName, String registrationNumber) {
        this.brand = brand;
        this.model = model;
        this.year = year;
        this.color = color;
        this.engineCapacity = engineCapacity;
        this.isElectric = isElectric;
        this.topSpeed = topSpeed;
        this.transmission = transmission;
        this.mileage = mileage;
        this.ownerName = ownerName;
        this.registrationNumber = registrationNumber;
    }

    public void drive() {
        System.out.println(ownerName + "" is driving the "" + brand + "" "" + model);
    }

    public void displayInfo() {
        System.out.println(""Car: "" + brand + "" "" + model + "" ("" + year + "")"");
        System.out.println(""Color: "" + color + "", Engine Capacity: "" + engineCapacity + ""L"");
        System.out.println(""Electric: "" + (isElectric ? ""Yes"" : ""No"") + "", Top Speed: "" + topSpeed + ""km/h"");
    }
}",0
"public class Car {
    private String brand;
    private String model;
    private int year;
    private String color;
    private double engineCapacity;
    private boolean isElectric;
    private int topSpeed;
    private String transmission;
    private double mileage;
    private String ownerName;

    public Car(String brand, String model, int year, String color, double engineCapacity, boolean isElectric,
               int topSpeed, String transmission, double mileage, String ownerName, String registrationNumber) {
        this.brand = brand;
        this.model = model;
        this.year = year;
        this.color = color;
        this.engineCapacity = engineCapacity;
        this.isElectric = isElectric;
        this.topSpeed = topSpeed;
        this.transmission = transmission;
        this.mileage = mileage;
        this.ownerName = ownerName;
        this.registrationNumber = registrationNumber;
    }

    public void drive() {
        System.out.println(ownerName + "" is driving the "" + brand + "" "" + model);
    }

    public void displayInfo() {
        System.out.println(""Car: "" + brand + "" "" + model + "" ("" + year + "")"");
        System.out.println(""Color: "" + color + "", Engine Capacity: "" + engineCapacity + ""L"");
        System.out.println(""Electric: "" + (isElectric ? ""Yes"" : ""No"") + "", Top Speed: "" + topSpeed + ""km/h"");
    }
}",1
"public class Car {
    private String brand;
    private String model;
    private int year;
    private String color;
    private double engineCapacity;
    private boolean isElectric;
    private int topSpeed;
    private String transmission;

    public Car(String brand, String model, int year, String color, double engineCapacity, boolean isElectric,
               int topSpeed, String transmission, double mileage, String ownerName, String registrationNumber) {
        this.brand = brand;
        this.model = model;
        this.year = year;
        this.color = color;
        this.engineCapacity = engineCapacity;
        this.isElectric = isElectric;
        this.topSpeed = topSpeed;
        this.transmission = transmission;
        this.mileage = mileage;
        this.ownerName = ownerName;
        this.registrationNumber = registrationNumber;
    }

    public void drive() {
        System.out.println(ownerName + "" is driving the "" + brand + "" "" + model);
    }

    public void displayInfo() {
        System.out.println(""Car: "" + brand + "" "" + model + "" ("" + year + "")"");
        System.out.println(""Color: "" + color + "", Engine Capacity: "" + engineCapacity + ""L"");
        System.out.println(""Electric: "" + (isElectric ? ""Yes"" : ""No"") + "", Top Speed: "" + topSpeed + ""km/h"");
    }
}",0
"public class Laptop {
    private String brand;
    private String model;
    private int ramSize;
    private int storageSize;
    private double processorSpeed;
    private String graphicsCard;
    private int batteryCapacity;
    private double screenSize;
    private String operatingSystem;
    private boolean isTouchScreen;
    private String serialNumber;

    public Laptop(String brand, String model, int ramSize, int storageSize, double processorSpeed, String graphicsCard,
                  int batteryCapacity, double screenSize, String operatingSystem, boolean isTouchScreen, String serialNumber) {
        this.brand = brand;
        this.model = model;
        this.ramSize = ramSize;
        this.storageSize = storageSize;
        this.processorSpeed = processorSpeed;
        this.graphicsCard = graphicsCard;
        this.batteryCapacity = batteryCapacity;
        this.screenSize = screenSize;
        this.operatingSystem = operatingSystem;
        this.isTouchScreen = isTouchScreen;
        this.serialNumber = serialNumber;
    }

    public void bootUp() {
        System.out.println(""Booting up "" + brand + "" "" + model + "" with "" + ramSize + ""GB RAM."");
    }

    public void displaySpecs() {
        System.out.println(""Specs: "" + brand + "" "" + model + "", "" + processorSpeed + ""GHz Processor, "" + graphicsCard + "" GPU"");
        System.out.println(""Storage: "" + storageSize + ""GB, Battery: "" + batteryCapacity + ""mAh, Screen: "" + screenSize + "" inch"");
    }
}",1
"public class Laptop {
    private String brand;
    private String model;
    private int ramSize;
    private int storageSize;
    private double processorSpeed;
    private String graphicsCard;
    private int batteryCapacity;
    private double screenSize;
    private boolean isTouchScreen;
    private String serialNumber;

    public Laptop(String brand, String model, int ramSize, int storageSize, double processorSpeed, String graphicsCard,
                  int batteryCapacity, double screenSize, String operatingSystem, boolean isTouchScreen, String serialNumber) {
        this.brand = brand;
        this.model = model;
        this.ramSize = ramSize;
        this.storageSize = storageSize;
        this.processorSpeed = processorSpeed;
        this.graphicsCard = graphicsCard;
        this.batteryCapacity = batteryCapacity;
        this.screenSize = screenSize;
        this.operatingSystem = operatingSystem;
        this.isTouchScreen = isTouchScreen;
        this.serialNumber = serialNumber;
    }

    public void bootUp() {
        System.out.println(""Booting up "" + brand + "" "" + model + "" with "" + ramSize + ""GB RAM."");
    }

    public void displaySpecs() {
        System.out.println(""Specs: "" + brand + "" "" + model + "", "" + processorSpeed + ""GHz Processor, "" + graphicsCard + "" GPU"");
        System.out.println(""Storage: "" + storageSize + ""GB, Battery: "" + batteryCapacity + ""mAh, Screen: "" + screenSize + "" inch"");
    }
}
",1
"public class MobilePhone {
    private String brand;
    private String model;
    private int ramSize;
    private int storageSize;
    private double screenSize;
    private int batteryCapacity;
    private String processor;
    private String operatingSystem;
    private int cameraResolution;
    private String networkType;
    private boolean is5GCapable;

    public MobilePhone(String brand, String model, int ramSize, int storageSize, double screenSize, int batteryCapacity,
                       String processor, String operatingSystem, int cameraResolution, String networkType, boolean is5GCapable) {
        this.brand = brand;
        this.model = model;
        this.ramSize = ramSize;
        this.storageSize = storageSize;
        this.screenSize = screenSize;
        this.batteryCapacity = batteryCapacity;
        this.processor = processor;
        this.operatingSystem = operatingSystem;
        this.cameraResolution = cameraResolution;
        this.networkType = networkType;
        this.is5GCapable = is5GCapable;
    }

    public void makeCall(String phoneNumber) {
        System.out.println(""Calling "" + phoneNumber + "" from "" + brand + "" "" + model);
    }

    public void takePhoto() {
        System.out.println(""Taking a photo with "" + cameraResolution + ""MP camera."");
    }

    public void displayInfo() {
        System.out.println(""Phone: "" + brand + "" "" + model + "" with "" + ramSize + ""GB RAM and "" + batteryCapacity + ""mAh battery"");
    }
}",1
"public class MobilePhone {
    private String brand;
    private String model;
    private int ramSize;
    private int storageSize;
    private double screenSize;
    private int batteryCapacity;
    private String processor;
    private String operatingSystem;
    private int cameraResolution;
    private String networkType;

    public MobilePhone(String brand, String model, int ramSize, int storageSize, double screenSize, int batteryCapacity,
                       String processor, String operatingSystem, int cameraResolution, String networkType, boolean is5GCapable) {
        this.brand = brand;
        this.model = model;
        this.ramSize = ramSize;
        this.storageSize = storageSize;
        this.screenSize = screenSize;
        this.batteryCapacity = batteryCapacity;
        this.processor = processor;
        this.operatingSystem = operatingSystem;
        this.cameraResolution = cameraResolution;
        this.networkType = networkType;
        this.is5GCapable = is5GCapable;
    }

    public void makeCall(String phoneNumber) {
        System.out.println(""Calling "" + phoneNumber + "" from "" + brand + "" "" + model);
    }

    public void takePhoto() {
        System.out.println(""Taking a photo with "" + cameraResolution + ""MP camera."");
    }

    public void displayInfo() {
        System.out.println(""Phone: "" + brand + "" "" + model + "" with "" + ramSize + ""GB RAM and "" + batteryCapacity + ""mAh battery"");
    }
}
",1
"public class MobilePhone {
    private String brand;
    private String model;
    private int ramSize;
    private int storageSize;
    private double screenSize;
    private int batteryCapacity;
    private String processor;
    private String operatingSystem;
    private int cameraResolution;

    public MobilePhone(String brand, String model, int ramSize, int storageSize, double screenSize, int batteryCapacity,
                       String processor, String operatingSystem, int cameraResolution, String networkType, boolean is5GCapable) {
        this.brand = brand;
        this.model = model;
        this.ramSize = ramSize;
        this.storageSize = storageSize;
        this.screenSize = screenSize;
        this.batteryCapacity = batteryCapacity;
        this.processor = processor;
        this.operatingSystem = operatingSystem;
        this.cameraResolution = cameraResolution;
        this.networkType = networkType;
        this.is5GCapable = is5GCapable;
    }

    public void makeCall(String phoneNumber) {
        System.out.println(""Calling "" + phoneNumber + "" from "" + brand + "" "" + model);
    }

    public void takePhoto() {
        System.out.println(""Taking a photo with "" + cameraResolution + ""MP camera."");
    }

    public void displayInfo() {
        System.out.println(""Phone: "" + brand + "" "" + model + "" with "" + ramSize + ""GB RAM and "" + batteryCapacity + ""mAh battery"");
    }
}
",0